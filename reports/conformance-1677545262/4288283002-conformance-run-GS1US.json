{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "61891453-e08e-4162-9b6b-ed5f23091d47",
        "name": "Clear Cache",
        "item": [
          {
            "id": "32d717f2-ecc9-43d6-a0ae-b75c4b65a06b",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "436f4632-878a-45bd-b1d1-1afb37e607e3",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "cae96a76-1bae-4362-a3ae-7318d9b511ef"
                }
              }
            ]
          },
          {
            "id": "fadd8559-4e5e-452f-84e6-7dda135b5be8",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "253775bf-3471-4d21-bc92-c394becfdc7e",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "e9fd3539-2717-4919-a087-14ab7d62a690"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "73831715-7555-44e9-a655-5ccdcfd9dd38",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "de35863b-f2ad-4ed4-af2c-8f24e9278bb3",
            "name": "Positive Testing",
            "item": [
              {
                "id": "28c95273-682c-4898-8909-bb622c162792",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "585bfa2d-2adf-4cbc-9a82-b5b22c51702d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "722dc71f-dae5-450e-ac33-cd8b46230e87"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "33f6373a-326b-4fac-a908-f0545d7e7315",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ef602288-e848-4e8c-b5e0-1ba0b69b0efe"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f9eca95d-2809-4a26-96f2-7d8e4a30ad28",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3764b246-1ab8-48bc-bbd3-1b065d185c4a"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9c0d3b13-fc99-4d80-aba5-e746fbefda47",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "abf4a4e5-9c19-4b5a-99fc-54a1f130ac23"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9afa28a5-a385-4646-94ba-43dc5424d15a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "709802e5-f22b-4437-951a-7ac743476e56"
            }
          }
        ]
      },
      {
        "id": "e9556545-3e7b-4f9a-ba7c-73475f8d6b8e",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "ed019540-53fd-4799-9b29-6d4a3cc66454",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b3d0e729-f958-4b59-b6c4-bcd8e7b9f04a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "a3c42b62-857e-4ee9-bcfa-c188e17e6e59",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c1c8ca3-6eae-4d0e-ba47-d973df780c97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e45192fb-9034-4d12-87f3-a149ef9c41a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6133a56-1787-4c64-b8e6-1723bf875aaf",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64b42463-e1f3-4869-82bd-38af5e515cb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "775af565-75d5-4b40-9637-767e3f383fc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ed67710-df32-42eb-8bc9-6eddc1a69806",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e92cd9bd-485d-4192-9682-0e5141c4ed9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e3f9c079-4ee0-41aa-9f15-7bbec35f2b9a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f34316ac-6e4f-4674-9aec-cca5d9d157d4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7382641d-4722-4733-b920-fb9b9d8929f7",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54380aca-7ba0-4dea-ae76-ebdaba3933dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a93c34e1-01d8-4fef-b8e5-45a42643c975"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c23f8db-028a-4771-bcb3-77c68c82cd04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42133aa4-2059-4e28-b537-7ce94ecfae26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4ee6cec-8f51-4702-b527-3e1190a92e3b",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd62cb8b-0abd-4e61-adfa-1470b38725a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "abc70304-3744-4f59-b4e3-d3b80e52e8bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cf6dfbd-4cf3-499f-9e0c-c209fde7f58e",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "d9f74710-6a52-4617-a8e7-c8a12f25b056"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "ec05afbd-9c6e-4d42-b06a-a91e9d4c195b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "43488f1b-17a2-4a46-ae6b-a3e66203ffe2",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1374bd9b-f4b4-42dc-a653-772df9835b99",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "7721ba98-3ece-4efc-b6ae-f2452978fd55"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b4dfacc8-a13a-47e7-a78e-a22c34854f38",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "a2e41c5f-44d9-49ae-a5b1-03b6e0457682"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "903840cc-d149-4e9b-8460-1d11579798e6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7b5b9570-2b1f-4a68-8f08-2f8641123058"
            }
          }
        ]
      },
      {
        "id": "c0238d3a-d5c6-41ee-aa50-262e5b8e6dbb",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "1f49dcd7-4c06-4aef-a0bc-92a5341ce6f4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e5ea2085-d082-48b0-83c0-d089ac3bf2e4",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "da9cf736-fcfa-4ae2-955d-f9710b304f8d",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c55b08df-7588-4d88-9a92-2b859316ad3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ed0bcf8-0c25-4e49-9798-a20870e4ecdc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e068098-f6d2-4cd9-83f3-24f309d675bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e5283db2-bd53-400f-ac71-57ac44206e0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0f18da1-f890-4325-a658-b5b76e8f7ce4",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ddef1fd-257c-4390-b993-61087522f85f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b097b7db-07f5-4f8f-88a1-223df517582f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a48182fe-1bd2-4c13-ba6d-d062d6a22499",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "43398874-b005-4f5b-9a9e-a32be58efd53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7823b0b6-e1fc-4942-bc52-5d1c1287bde6",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28ef444c-a816-46c4-ad89-4388bb80d04b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aba53664-b90c-42df-8fd2-0f115383bb49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37129395-35c1-4b46-88cf-5a7af36ed341",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5f654f34-1227-4109-87c3-f980ea83da68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0024870-a369-4dc5-93d0-8c0eb27ca138",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2a12eaf-8048-45d8-bc30-ddd57c7a9a24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4d2cf73-d889-40db-98fb-b81595e70aca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9d1ba57-8ebe-4162-a994-151ed1f9d520",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3e7e5243-339a-4ad2-96cc-7213a6944a54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be675c68-01e5-4b58-8fbe-8e6f952c2093",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20f1b900-d38b-4f0c-9327-bc309ce047bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5343dd3-ed47-47c4-9ffc-0b7c045ee3c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64554db4-d628-4803-9f9a-e85e66e6c261",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6c692301-201d-4cd0-8e31-6bb7a46854e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "525ba036-1598-413b-8fa8-ea0fecaa1454",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8b1c678-3f1b-49ea-bc47-4ce4fcdb7c96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ff9ff5d-0266-4950-932e-fbab66345fb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2ca4640-6051-491e-a575-ce8ee5f5ed10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b1f87f1d-2bc7-4e94-abfd-1b4d3c295769"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17907463-0671-40a9-a80c-4f24bdaf7dcf",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2142da8-0e44-4923-abda-c780cce015b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3308859-3590-4c7d-8319-b903d8b6f29a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef1d7d88-0669-44b1-b55f-71334687ca1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ff5a56ba-e937-4b26-8a7e-3dcc0155555d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4930792e-2cb7-460a-a5d9-79b54e4f62af",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4139955c-a770-4eef-88e9-c3e7bd36e10e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55c97509-50f5-4494-b023-cd04565f54eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68b81e2e-67c8-46f2-81a0-df02cfea1647",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4d376cca-67b4-44b2-9e23-47db7b62ca84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d49518a4-7b54-47f4-ba51-888aa9706982",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52894fdb-914e-4b0d-9797-f473e40f523a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "252e712e-d462-4d52-b8fe-6e3ecfcf8c8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44b6a1c0-5d88-4ed5-a050-299eca1c5ea9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f902a9e2-8b62-4075-b9ac-772a5558b8e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f41b9c4-3afb-46ce-923a-ee1b9493bc91",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44532bb6-00a9-417f-ad64-3ae530212486",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7f92b9b-c794-432a-a0a8-3d0300505120"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf37cfe9-0108-4cd2-a0d9-712a0d23f3cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "054c89d2-cea8-4005-84b2-1bbac068ddf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a66a4996-e74d-493d-a4f7-926d352f6661",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2fad29c-c943-4c9c-bc14-dd33bd231c88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a188483-122f-408c-9a65-b7e5c1b4d851"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22ec1dc8-1838-4a25-bc00-a16dd0047be3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "22c3dd52-c136-4cdd-aa66-ac4cbae3ea41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c6fe7c5-0d8a-466a-b3e4-0e6d6fc48732",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af9fffa8-ab64-4c4d-9c4d-7f5bfd6a25f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3dceb3f1-06e2-42e5-a647-f74b07453d6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35ae491c-f89f-47de-859d-73de55f034d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d3461850-cd9a-4859-a2a1-d8bcd4a71fbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c954cd7-dda6-48ad-be7f-57b65f35d64d",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "702ea8f3-7051-4eca-87f8-0b26b9349d46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40fa98f1-68a6-45ad-85cf-e7b8bd250cfe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a42e1110-bc24-4fb0-96ce-d2331112e89e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "817b446b-5551-4d5b-81ed-b86b4be71884"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a743b133-a466-4578-bade-2c2cef5d04ed",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22a248b9-102f-41b8-870b-d4f2d2f6ca12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "755af9ef-012c-49ac-aa6e-46ad89bdfeb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c4fbb61-8326-4637-8ffa-aa5cacb17fad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "606f7165-a7f3-4e95-bcaf-4c4dc41d6244"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d0ca13e-4989-4ac8-814f-ea4d10f73231",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f2b50b5-b75d-4d88-a275-e457631eb09d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e90d8b7f-02fa-4b3d-99c6-de87869c9a90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c8ab4e4-ae1f-4cda-b139-218742beccd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "814e4e2b-100d-47c6-8aff-a11223ef8b9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f92703e9-3a9d-4421-aed3-c5983a48fcb6",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "377cd47d-a397-45aa-b7eb-2215026cd205",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3ee89cb-423b-4a72-bf32-7af21e6ddfd4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78881fac-0201-4701-ad8f-bf599cbc0f69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cdbac1bc-6634-4fa5-9951-7441742eceb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "178def39-bdce-4830-803d-c2ac33b68c97",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca10fa7d-8330-4d51-900f-c2803853a331",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf777644-ec2e-4ebd-8405-05375a33bcd0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2616c5cd-f108-448b-8df2-0d06f6138f02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "41ca8289-5ba2-4872-840d-e33ed0121d1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44652901-998c-4953-8794-37ab51992416",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fec332ee-505e-4f27-b049-ae3d4461a2fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "233fc940-e57f-4eae-88ee-bbef516d5928"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ec919b8-b099-446f-82e3-a3ecf435acff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "8de4b0fb-d5f6-409a-bb22-108827590b9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cac08b84-5a51-40a7-a386-30e166e9b1da",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "942c00f9-6173-4a18-b4bf-db6eddc12255",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bead5c0a-bb10-4f06-a9a0-fe2b97daa9a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04f29d6c-4772-4642-b910-9bb2cd7ea7a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b47a5eca-e361-47a8-9098-6afbd0385cb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66c8ebd2-a913-4e04-baeb-57e895c65702",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3e9ed78-608a-44e4-a969-ba8bdd73b893",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43713765-6d1e-4334-9640-7502435fc6c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b383ec50-5cb5-4862-87b4-60a0e914b22e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d05887b0-5913-4ea3-8ded-c7c361d9867b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03b71f1d-bd7e-47c9-97c9-3814f0207aa6",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa82b7b6-ca9d-4549-b130-93f780011a48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bd222ad-55fc-4907-ad6e-a2f02156fb41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b76561dc-bad2-4a05-83df-8127dd08a82f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7a67b6da-303e-4009-b181-3e8ca1f38890"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2246eb48-473b-4fea-831b-1f3f1124c2fc",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e19c9653-9b94-49ef-b7f9-3b9d03fe9e00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e81385c-f909-4b02-b27a-cb9e5f4dfc9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "241a9c05-1164-4d01-902f-e6f357d14d72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1d4b8bfe-0af7-4016-ba49-d8bc84fe4cc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a37236e8-2051-4b5e-940d-146527371f3d",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2f2f8a5-e77c-4065-97c9-5b95f8c8cfce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efe9ef71-c3d4-42ac-a839-b5c3712fa64c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64d8fdfe-7c17-4909-800a-9e6383a807c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a3baaa0d-2c3e-4786-afb3-7ea6c796ee7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff9fa58d-6301-45cf-b860-0b8e7b4f7f65",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1ec84ba-7342-4a72-a797-57f0fdeddbe6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2386533d-c7d8-45d5-920f-4ecf4566261d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62e2fce5-7bf3-41fe-b419-84c9d51dc2a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "6a08101c-65fb-416f-894e-aa17d3c2364f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c600794-6f9b-41eb-b46a-1c3f9d289e95",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c3ccafe-b67a-4f1b-a854-72d9c666bd57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b3ee0de-188f-48d0-a741-c5c5f40f83b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ea22440-34e2-4b26-a0db-7703e014d50e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6f7f6414-b926-445f-bf4f-23ee8d765e81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bf498b8-beb0-4ae0-8c02-ae26d3f870cd",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13937de0-2485-4299-9b37-2f41d77d53bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "325882b3-435b-4a47-82d4-ad550dd98fa5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c244d41b-f874-4dbc-9c41-de30f2ec75a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e72f78f7-678d-4f4c-ac5f-e77909cf724b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "605c6ac0-076e-47df-ac49-f82cb0bed296",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e3640d5-6da4-463c-8053-2d4d0d4c9d42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16fd22bf-2bb7-4e7d-aa4b-95e93dc69945"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba261b0a-4e16-4e15-acf6-fa0527da9420",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f0bd5e5e-ad04-471d-a361-677ec2b0f7a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8c7cb08-4dd5-4d1c-adc2-144f21139ac9",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cd82cf7-a2b0-403b-b1bd-08c6546a2ff8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9c3fcf4-8f66-493f-9916-89a8844c4ce9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fe0d0ed-e742-4eac-ad06-8e54e6aa6236",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0d9ab08b-a83d-462c-8e7c-ed9268ff2938"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec6f81e5-441d-473d-9357-b2f522ae6a30",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ba122f5-465b-4065-886d-e3126d40af78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0932652-763b-4fa9-bf9c-1b39b446c7c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e1eb9b9-17af-4ad7-b58a-33babe9d53a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3aba6ebc-7b82-4c0e-b5c6-fcbfabbf786d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "411f09e0-059d-4b13-a516-e0749c488173",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fa22a7e-341c-44b7-a112-33ca402ee854",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "350bb7e7-fe3a-4586-b506-ef7035b91508"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b522e377-ab5c-4faf-b523-68335db14e3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "3a70ab41-0748-44dd-bb89-36fd5c748d5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1371d6c-d782-40e0-98bf-f14337a67c3d",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78c3ae4f-3b7a-4957-91b4-b559a5a6da07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "831ee50a-0ba2-4e54-9ffd-e788225a6d89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e7d1cb7-ee12-484e-8ad7-6c5dcf58acf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "28b1c43e-bb39-4cab-8fa8-08fbf1248201"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60c90428-4cb1-4444-b483-59f5c4bd0bc0",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a91ede70-32a8-4872-ad44-96f45b21fb5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7767426-d5f4-4a2c-a86e-7ed9be1fc6af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77ec35f7-947b-4a8a-bce6-1e3f52ce5e0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a6c88f75-2d3e-4a3a-8467-5a47d155ad1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd06f493-d0d7-4b05-989f-38d87a4aae3d",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73a38aac-966e-4ce9-b7c1-4bf365abe7d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e754dbb6-3385-4081-9feb-925b9299fb4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "158014c8-0aa0-4e28-b5e5-b4435b526e7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2b9305da-cd9b-42f9-ad17-9e4cdf122a56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdc234c6-c232-4874-9fb7-5d115ffba385",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5147de7f-8282-4000-9660-d8f52615d3df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2053c22-0298-4213-8e52-f07e9a71cf54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e0983ac-7e61-493b-8af0-cb97f8620ad8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "31bb944e-d211-4234-8dd2-b336143cf1f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef1ec79a-96f1-45eb-b8b1-59ae0740ff6d",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36cb0155-14e2-4927-8f37-3708fcc15492",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0da08167-75c1-4ba2-893a-899561ecccb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b77f711-8a9a-46b5-bced-66a91939916a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "0fad6fd7-7cfa-45d0-b6d5-bab9d7589a00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f02bd3cc-b7fa-4705-b315-0e8b280c981e",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e8f8d87-dc59-479b-8e22-8040d65489da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b4a95ab2-7bb0-4044-8992-443e0f7ee138"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fb5a09c-4d49-4dcf-aef7-f8e6b4fb3f68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f363b54e-8253-4c9a-90ed-a90ba77b75bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce73d781-ebf7-4113-93a1-7d316c9eaac2",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc84630a-8c78-4496-bff8-3173ef72e7ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69a834c3-68e1-40d9-b5b4-94e6b9ce9183"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba348360-e5d8-45d6-ba7c-ee0a7f299659",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "08466452-bf8f-476e-bf77-0bd8f3cee9e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7df8c6c-f83b-4d10-a5ad-336a41a8f7df",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6be1da42-b990-4291-ac71-1c34de92de08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d7a4843-b788-4796-88d0-277bc48c23af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e5ea426-6e69-42fd-b042-8fb0c1f38724",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "4f61d4ea-4368-4f55-b56a-804add4d90dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edde9716-962a-4c50-830e-37289fdd1d34",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98eb09ca-6539-4531-a1e6-652840decda9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3e57453-7beb-4456-a192-8038a0db9d8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8162999-b86a-4c78-8dea-0d2cd1397936",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "8bcd0908-e9f1-45d8-8a6d-f418c550c5f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13e083cd-7cae-49d8-872a-5fb842fb28a2",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d32b9895-b375-49f8-8075-b3ed876d59c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee0862a9-19bb-45de-b918-ede428744f6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc9073e7-e6e3-45b0-abb1-eaaa19a95561",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "33942940-dfbf-4560-8fad-f00164f416e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2d2a233-2b63-49ad-9bc7-49847c926045",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0ab2c0d-af9e-42dc-a827-383db28bc715",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e277ed6-78b8-4ea8-a268-f14c696565ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e64b488b-9840-4ff2-b321-73e6ce533c08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "802803ba-86b4-4dba-aa70-6732f472b0e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb0aa8b4-c3ef-4aae-9877-9caebb84892f",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0acecd51-9ce6-4d58-a002-bca26ae4fc74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cf36787-a698-4dc8-adca-37c528e1f2f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d89de08-6ff7-4e6b-abb7-90a73aa99aea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "531efd26-1271-4518-b288-bc62d5301831"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00b9dda4-2879-4a03-916e-2024ed3acb4e",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "789fd81c-b370-4771-bcd0-2f73a1acf110",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "732e7797-d2ae-4293-b7c6-978c48ec609e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89d9fb5f-dd57-4592-921b-bcf09f05121a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "2d08994a-dbd1-46ff-a64b-f8bbf2c2cce3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "657fc7d2-3db8-4ff0-b369-4056a973d090",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f3ffc21-8a38-409e-8945-4d737196df71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c8db4c1-ac19-4b61-af00-64ab50bfe966"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a39d55e-2e6d-42a9-a08a-269d845ff0ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "b17e039a-398d-447e-acd0-11095e11baca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b98e3867-50d5-4f27-b0ef-8872722414d3",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dbfdcd9-2a12-4d33-8429-1f15f5a51c8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69ab7ca6-a306-4824-877c-37c56d4036f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c06e5baa-ec22-42c6-9f0b-3661c142e626",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ab0968cf-0167-4baf-86d5-3e77b5f75a49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd3bb0ed-80a4-4150-b3be-23f1269f97c3",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d340f090-aaf0-4998-8a4f-a927d67b9846",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aee4f2ad-3884-4418-8124-ec2832798bb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38702d0c-ae07-43ec-853c-8c8252605bf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "33766692-8e11-4e55-be8d-1a0b17872be6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ad72ae7-e0aa-4939-9b47-5e6359c82d94",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10bad443-4f7e-4ddb-8e2d-2c0adf5812b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d7bb131-acaa-4cac-aebe-2b1282db6bba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0998f3db-3f63-4469-9554-73d4cfc40d7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "54c078d8-781b-4b04-add2-64290c978e58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6219255-2cd5-496d-ae39-5c0fe8d79153",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8269a731-404b-4c00-8c31-fd6ef4c58890",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb396459-bbcb-49d7-94f7-b97f61a76060"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fbd1793-a684-4dcd-a459-f94c9f631336",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "24dab6af-b782-40c3-8aaf-0f8b4f5f7868"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2da7c82b-bf9d-4a94-a65b-f48f67e72f44",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d5152fd-b1d5-4856-9db7-ea46b1d85ea8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "489f6fb1-0f90-498f-b5cd-8f1f080977a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59020461-7102-49e1-8cb1-3a77aed897d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "42d28d73-ae04-4e7a-8f28-336e83ec8ff0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f31ed526-e799-4d08-b0a6-2d8d710b3817",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "659956c9-da34-4398-9760-9e3553506415",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4c65235-5e21-4e95-baa5-14b7536eff7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6584c455-deec-4d6a-820a-b490283dd5b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9edd8f32-2b03-44c1-be96-252286ed9bf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8184d93-ded5-4414-96e2-825feaa01bc1",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e35a78e0-e244-4983-a9c4-6d90529589a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f0188a6-1309-4bc7-b056-c3b16ceef566"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a77e0545-3b9f-4b8a-a1bf-dd77269ab0fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "0b9bc5da-ef9b-4a9c-bec3-a6ef4fbb535a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e48adf0-b4b6-4b6e-9d31-d4f1173165cb",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f054ad3-7d06-4b6f-8a64-bf4f2b32c4b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4607fda-a620-4d34-b404-2f2c10bfa880"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "346ba8ef-e9ec-43b0-9f0d-3aa1144c9a0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a060550f-fd0f-452f-b2ee-facb82d0d4f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a02f1cff-9f92-47ea-9e5e-7cddb9dad02f",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f0bda75-d439-4742-b18c-05b9a11c8c74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6f936e9-1f8d-4b26-a0ce-6c262cffed5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a75b6f10-1686-4332-bca4-c0c6b8f27a76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "233c733d-9313-4bf4-b093-9842f6bb2b1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6975fc01-34a6-40d2-8dc3-d09b50e90907",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9a71f80-712b-4814-aee7-c0ed6cbec9cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9118b7d5-d38f-47d7-a90e-74436c25fc0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "719b6479-feaa-4c04-a677-90608e687233",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "420a39e7-c0c0-46a2-bc21-aaf530c2d59f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15b7b5ea-9cb5-4670-9588-f7b26f222ee4",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "898f471e-252b-4e09-bd20-f4d4f9b3eebd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50f96956-1a65-4c8d-a7e3-1de61a0e5338"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "743a4e52-5180-4cf3-9cd7-02c89138323f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a4861961-58c3-453d-b05d-ce6e7aab6564"
                        }
                      }
                    ]
                  },
                  {
                    "id": "490479ed-20aa-4975-b427-32af8f58c93d",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0b6f42c-d088-4d5a-bc0e-afbd15851262",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d63f57a-be82-4476-9b02-5a65b84ee5d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e109986-4d48-492e-af65-5da7729a8987",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "00e63afd-6f1c-4f28-a733-42df0c946ab2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22b47da3-9063-4998-9547-e396f581c77a",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09a25648-9f38-4517-848c-d23c3ae4f57b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c94f763a-86b7-4059-9e95-ffa758a4e865"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a60d4290-239e-40ab-9c5e-f1799ef6c6f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "648a3301-bb82-402c-831b-7b78e57cd6a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d954d29-6b0c-41b5-a905-825e5b6a9b83",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0050e0d-e7cc-4697-9b9b-d5a56b7954e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b31261b-0a4f-4c59-9a62-549358485809"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b25e1a0-5d67-4802-9b82-0f5d289a1b9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "892acd5c-8ddc-447f-aa34-b4b729feab55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ce2693e-8418-441e-9bb4-95e42635c4d1",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e140b1a-6385-44fb-ae1a-431f5aad69c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b6650eb-1eb6-4f9e-8109-fc0db70deb30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b0fc8e5-6080-4319-ac52-77ff625f7882",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "5425dba9-3594-405f-ae9f-768919b3fdc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f47c9481-6c6a-4c81-a6bf-82933b516217",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64b5c0b6-0d41-4513-86ab-baa15e6b1d33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ff4c337-4029-4b71-b9b3-2f4a5077b3a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b14a5ed8-fcc1-4a29-8825-2487a319fe0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "7f4de294-a877-4b51-8d03-629dd69be0cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2045f9ca-7956-43b7-9d0b-a7e6870c1060",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bdeb8ce-d4aa-4000-b214-9ec330c883c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92083d44-6818-433a-b912-f0731a1140b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "573f9eab-633e-4dd4-80ef-8259012f309c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "3ca34760-8743-4343-8cf2-aacb4acd8f1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7091f193-12e7-4033-af7b-ad9fc56240c3",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a6d579c-d0a6-46f7-9ce2-2c3d0f78fd39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60713faf-a990-4ebd-950d-3a022b68db79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20a358aa-e05f-4c18-840b-28f4072489c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "5ad98005-ec4e-46a0-89c0-3efc9dd0ea24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "048fc96f-f43f-4bd9-bca7-0ab8a6b140e0",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c01cd7e-f7d5-49be-8ca0-16b2bfe0464d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2f413d0-f080-46a2-b91d-6bed365eb398"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f99ba192-24a6-4548-9f3a-1a0d8e93f19c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "2918dc29-6e05-4dd9-af53-b9f58f551743"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a68c24f-05ca-4be1-a583-2013fecc0d5c",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7febde55-2916-4f2f-957e-a44a377cb8c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ecfb125-eb6c-4e64-ae22-d429744905e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1924490-3b0b-4edb-b88f-dff944c08beb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2f8502e0-aeb8-4ce8-b9b8-6275ef31a3cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3e376c7-a05f-417c-bae8-4cbe017229be",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53951f3b-e15c-4cec-a7a1-2a5d184202d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f233223d-eec4-4f50-bf10-7bcd27c7bca6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4961991-d0bf-473b-a5a5-20aa78c339ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6a5fae81-8ba9-434d-bc4c-34e12186a771"
                        }
                      }
                    ]
                  },
                  {
                    "id": "316ad398-493c-43d4-a7ce-becd0857be68",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "febeade5-cee1-4bd7-aed0-9be4e00ab4c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "894c7f9c-f0df-40c6-ae00-88b047cbab34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3679db35-9f21-468a-bf52-b17ecd728a04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "58c3f72e-cbf6-4c65-b8db-7a44093b7879"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9e5cdac-500e-4b8e-8164-b4fc547fc058",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d07f3c86-5d5e-4f48-9068-9b56ed112658",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72dd5529-5a4d-461d-894c-413c49af59b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b4d6707-20ab-446a-bfbe-0e88e204f93a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "377a0f15-743b-45ac-975d-a8dd564b60a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bc31324-a3f5-4c08-8959-5786536ff26e",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3049842b-8bfd-4949-bcaf-3e09df6eaffb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85ebbc52-4079-4859-81d7-60e84e7033d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02e6c65b-f45e-48d6-b949-7c03774e6447",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "5bf190ed-ea53-4d9a-86c9-36ccd6ab2ba6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a01404d-c9c2-4f2e-a14e-a91d17532d0a",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ca41487-d2e0-4b7d-bee6-547065d4bd08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae912ac1-8d1b-4623-b7c1-a268911bd178"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "532abe06-7207-418e-a7c0-a08d3c50c94a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "ecf7d968-f194-4ccb-bd9d-723c3230abf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dd51778-004b-4d59-9e06-e630f6793896",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "804a7a37-45e4-43ac-a557-d67406072506",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14395b90-d424-45a0-a48d-95a3920fb714"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "506c9faa-801d-464b-bc57-3cc804d4206b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a3a8ca79-7551-4620-bfe4-edfa88ee68d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce2fe806-0e80-41c4-b521-19d0dd68d9be",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37e72860-44b5-4731-97bf-58dc0d5e21f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "193a9541-1408-4894-8fde-df7694c23d14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0e788a1-28bf-484e-8500-a82b182b80e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3db7788f-ef26-45d8-9015-0a99b7b1f6f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff91bfbf-237f-4dfb-9dfe-b1bb70ffa5b2",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56070706-892e-42c9-8348-7dcc20f4cda8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72d66271-a3d5-4fb3-8480-98094e9a381f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "120c8fd9-56c2-423d-8f82-2c8110e84fb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0d2e27a2-8f2b-46c1-b6f0-68f8cf250c50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4917f5a5-215b-4d4d-a6fd-89565b76d948",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bdfde5e-ed91-4229-ae72-23dcfbb39e81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5afdcab2-6777-4a26-8e0a-67122c2f186a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a30aae95-d89c-4359-9bef-4fb0ca079746",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "29a87b38-a0a1-49f1-818f-2623e3c8f1cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c15dd6f-7e58-402e-b7fc-dbbcc007f283",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bda39e7-9ce2-4702-b58c-def04d1cfa43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be578fb5-1106-4942-ad62-25969090dab1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8dae0e2-dcbc-4322-be24-d10075702f1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5c02669d-0cba-4444-86ea-1e1be736fb35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3576b4d0-f3d9-404f-b4ca-6a8c214e5e89",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23665189-f58a-48cc-b159-e5bcdf6d6d83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ad7dc8e-201f-4bb4-b0c0-82d6fcd4f16b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "464eb221-dfca-4fc9-b27b-9c50c6b6fffc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3c268984-fc23-4f4a-a279-7122bf0c3aef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a802800-f1b6-40f6-914e-e55eaaa2b525",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5e8c7ec-b2ba-4788-b244-1f789db271ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6a79d6b-aa63-4909-b34d-3116269945e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d51bde96-606c-41dc-bb94-5c0a77cb4a84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bbbdfd7e-6e1c-4e5a-808c-4a690abba2d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd7ad482-2581-46d4-b31d-c66f2890bbee",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c4a9bcf-96ba-4247-a327-140bdc9813a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0117a39f-be26-4b23-9c3f-7dc1c0c696ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2612d3a9-9b61-4352-aaa9-89a385f23651",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "da5dde2a-5602-4603-931b-93c63c503043"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c946973-c4c1-4543-bf74-832550b15e71",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29f03f8f-36ce-49e6-9cab-3d3069cd83f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "377b92a4-f8b0-48c3-aaff-53e761761c91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fa4766f-37a1-4f11-9130-b28fe13085c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c85fa172-03ca-4b12-9b24-91092ae70c40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1c989b8-54fc-4201-8fb7-033666ff3f44",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f287b7d-ce06-4bb9-889a-e700e489c809",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fee7a51f-00c0-4e9f-9460-a5def59eac5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18406a09-e6fe-4a98-a31e-8755e7b757ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c6cf2038-35fb-48a4-9834-1074d737e6d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91868a17-b15f-4801-ae23-c819c6da7624",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41917d4a-f932-4da6-9a5f-77d23f7c41ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58799d19-49e9-4fdc-9af6-8db240d05626"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bd74371-b62d-4106-8a28-d32716f48f6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e718431c-5473-45d4-8956-81bbf014ccbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76febc94-b138-45a4-a703-4c6c5e13fa94",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1878e85-f296-4ef3-958f-82f9adf7168a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc1c8ba9-293b-4b91-ae61-78e0760b3e7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4aef2760-2e86-41b7-9650-650d5b280958",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "2040ea3d-803d-4eed-9998-44444273a6d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c6a44ca-1224-415b-8b6a-46ea8ae754e7",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed4daa5b-23cf-456d-bf6d-58d239eea0a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8447fb0a-58e5-4c0c-88bf-edc9bd891ae6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "191955e8-b241-42b6-b259-875540491ae6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "02111941-3fef-4c7b-97b6-6636064acd92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc994b74-9fc6-4b45-a6ce-e03ce5615c0e",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97b8b49d-22db-47f0-a29c-0865e854276d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce742a81-65d5-4dfa-8296-0fba6ff60bb6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "447e7636-93bc-4e0a-acb0-2bb519d9a66c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b05dd7bb-5be5-47bb-9fb6-7db53d0fca34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "336f2202-80db-4cbc-8c50-06e7c7c70a47",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08c382a2-99ea-4b74-9903-83318ba8860a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fd8a1f8-7dba-446a-bc33-4cbe7a6e84bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6fab021-da29-4d11-9fe0-7a284120a506",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "00b35de5-f618-419a-aef9-f09cd6d3aa22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c82ec61-4711-4ae6-9f70-b4b59d556cea",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cc66ebd-a8db-4b5c-95ac-a832aa9d7005",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "981f3519-ab8c-4e82-bc5c-1f0f43b850f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f76a6306-667b-4bb0-9a9d-5e1601d37ed5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "df47b7ee-8f0c-4ed1-8d2b-a83765cb0725"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76bae5a2-f979-48fa-b0e9-b11b9bde4494",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "050e7a04-cb01-49d7-b141-af8f2db61968",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85374d3d-7388-4fd2-a34c-5c82e5e856c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43a19173-b308-463a-9bd3-e3919cf8f4a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fc292513-9d2f-484b-9278-220a9e8b87c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0980ef32-438e-4d64-8ea9-32dd5653bdfb",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8473561d-2c23-4f94-83fd-ebfbcdd3d8da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b589bb8e-30a7-46aa-9e04-f759634e5230"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de1d9a55-11a8-4370-8bb4-892a8fe55df2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "0f93345e-c5a1-491a-8be5-d8c1a835dead"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ee7fc7d-e6e8-435b-9ff4-a7b9117368cf",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f89fb646-2025-4481-aee5-9dead69ffc4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa032be7-6448-448a-83e5-e8b81348fef5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0da29063-7cd4-416f-8b7c-c9ca36118cbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "577dbde8-da3e-42e5-ba08-eb7e5c16a257"
                        }
                      }
                    ]
                  },
                  {
                    "id": "450f7a4c-0609-429b-b1e2-85bdc4dac86a",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6a8f42a-35c6-4bd4-b9ec-c3fb52debf4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a65f23f8-1bf1-44d7-8d8d-88164b634244"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "816c6a0d-7bf0-415e-8436-1842d2b25c7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "3d385a24-ff1c-472f-888e-cf8039b16361"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59b2c5ed-2c07-4fb6-929d-300dd65a9575",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7854d26-ffb7-44d3-a851-94430a27c649",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac730d86-55ac-444c-a809-5c72fd763190"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a01d98ab-6e11-46e1-abb3-2c38c811d1dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "9abe397f-126a-40e5-9cb1-a47c83eb61e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2dd4bdaf-9ca8-4e46-b091-110d894b0cdd",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "368b34e6-e27c-4a62-9e52-32f0bf6c9a61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0f27024-aa37-45a0-abaa-70a89676e7a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c39fce2-5f7f-4c9f-8262-8e08e980027a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "362b284a-09a4-4fef-b144-ece473c615e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5a5c454-c3e2-49d7-a50f-efdb427e6d09",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0d31426-439b-4240-8350-b1a1bd45ffbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "33be0116-9b38-4e54-b950-d0958e0977e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f369f754-2992-4caa-bee8-8f9928e8af9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "b37a25b9-70b5-4de1-a035-1e18cdc2eaf2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "9bae77c1-437e-4880-83c0-7287a88613d4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d71ce395-93ae-414b-861d-7a5857df88ea",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c3540e0-1409-43da-a8ca-ac60c7528fde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "38e5a2ea-3452-40b5-928e-6c55dc70a083"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69181764-7db8-49e9-8112-51ee22dcc35c",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "38971347-a4ba-48af-b091-3af79d7de2ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78e73f88-aaca-41f5-b1cd-b69166d40979",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c427c32a-5fc4-483e-b325-5c91bc0e9413",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c252b0c8-388d-42ee-8ab3-e3d3c0885f93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ed67400-1da6-4dbd-b687-0a61886d6779",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "6493dafb-ef18-4aca-99f7-4d67f06aad4f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0506a950-9db0-4ff7-b06e-4f8f380caa0f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8c1dc590-3d68-4752-88a0-c30ada2c4911"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "46927a03-6316-4bbb-8291-a5b20eb4e8be",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "436cc5de-fc35-4d52-ae5f-4b86ead55f39"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7b56fbe6-7011-4b6e-83a6-b1c398616d23",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3bae81e9-ad95-4549-953d-2c3a4861286c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "787e487b-9d2f-4cac-b083-6fa53ea01ece",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "cd7cf511-f856-4e37-aa99-618f72d3290e"
                }
              }
            ]
          },
          {
            "id": "f20ba3a9-3ae1-4570-86b5-35a34fde2f2d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "85a6cfcd-de9c-48a8-bcfe-c2a3d8077b8a",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2efdc603-fe3c-4e7e-9e43-7fa4031c20bd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f398e6b2-fec9-4ed2-98a4-4a39efd56659"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ab6a2b32-5332-4a6c-b398-a37a59284ee8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f0c2b387-acbe-4089-8c4e-a086a15dc067"
                    }
                  }
                ]
              },
              {
                "id": "c98824ad-6e63-4fc1-9293-4eb2cd8ade82",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9020b5ed-daa8-4ad0-8a9c-6ef26a8cac5d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3de52cab-34cf-4cd0-87f7-c57e4ba3709f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6e164fc2-ea65-48f3-90cd-d1a21d46a718",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "a727776e-a44d-4fb5-964a-86196f303b76"
                    }
                  }
                ]
              },
              {
                "id": "27a9c21b-61f8-4100-ae84-239b7516ad89",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1f9e0084-5f45-46e4-8394-5b25ea4f3448",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "68629aa6-09d4-445e-8777-6152ad633725"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2f7fe586-db2c-4f2e-a757-cf64113b9b01",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "7d5265dd-fab7-4a72-89ef-1206b8a6ba05"
                    }
                  }
                ]
              },
              {
                "id": "79dd85d2-620e-4f15-b4c5-a7fcfe2071fe",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "13318e66-183a-4842-9370-17af2b6f8c3d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ca8eaa69-0966-4766-8a51-c1504a1acfe0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7bba11d8-49d5-4983-a85d-3ae3fcad6ae7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "037167a9-4f5d-49b1-ac61-da13944a6ca8"
                    }
                  }
                ]
              },
              {
                "id": "9ebf572d-4608-4f35-b151-d299e4f5ce3d",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "78df9768-7555-419a-b043-5521c3765809",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4a0dca6c-c44b-4445-bcb4-f09d6c75ab28"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "47430cfb-15cc-47fa-be41-363ab1f84827",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b3d9a09c-b359-4b80-ae4c-8df5c8cab239"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b9e59ea4-bb9b-4ae8-b062-296cf05c781d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "97b10bd3-0bd9-478c-929a-11f1c9cc01e1"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "8e2c626e-8c0c-4f28-89aa-8d2caedd1e2a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6261cf20-b380-4c09-a3cc-859e54ad59de"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "05485e73-8c02-4403-8aaa-3dacf00b280f",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "a8f08d66-33c4-4b05-9a8c-801699292342"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "dc3bf025-1489-4d74-9d7f-ad145106d432",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1314c3a3-01e9-4a0c-a6be-2ac6a1eee1ce"
            }
          }
        ]
      },
      {
        "id": "4e0962ab-9e05-4c9f-8c9b-7c2e1a6a992a",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "b239c561-88ab-4381-a601-11e21aa09091",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3f524846-bb9a-4380-bb22-3a171d35ac75",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "fb2c8009-977d-4ea0-8e76-7f46986c5bd0",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41b4d6d3-963a-4906-8fff-79337f218d32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b84bb5d-878a-4555-a7e3-ed8a5681ff4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3a87946-c60e-4fb4-adbe-86258c902ae2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "6a560a22-b15d-4d3b-b273-d0e2391e3f22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60ba9e2e-62c0-4876-9cc8-20908ecd7c91",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59b28220-6172-4c18-9d66-5cc6749bd385",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3e47781-54b3-468b-8b09-bcbd45819c2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "762061a3-a33c-4d23-b433-c57f343c8ba3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8e66f7fe-77d3-4b1b-91d4-350906c0b06e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebfb1b7b-9438-4252-aa25-f73e05ac0651",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f7e4214-27f1-40ea-af96-d199748b1af5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "122c239d-3b4e-448b-a436-7336d292dfde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbb37b96-33ca-4ece-857c-8be62a8ab723",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0e89ffcb-0a15-4ec5-ab6b-2996013dc63b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd917991-c554-4342-bfbc-02da53ec0f8c",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01f4a906-d08d-4fbe-b464-d7e295ad6473",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e449709f-0539-4788-997a-4237c2266ff5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a6254cf-07ea-4268-96a5-1ebff4055959",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "71e20747-71ed-4543-9364-668065968848"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73f09514-dcdb-4676-a177-ac258d38d5de",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b42c1a9-db1b-4d9c-9bcd-c97bcbe970c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ee55614-dc5c-43eb-91f2-fb7bbb129416"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab5cfd6a-b431-47ab-bfd1-902bd01e1576",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f7200d5d-191a-43a4-99ce-2ad191bd3506"
                        }
                      }
                    ]
                  },
                  {
                    "id": "119f33b3-43f3-4850-8a0f-2e4b1164e9fc",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af5892fd-2ac1-4720-8edf-3d3c0d7415f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5dae95d7-d02d-4537-9047-d080c101e760"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2330f89-125f-481a-a0d1-8a9501109ed8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "04e90a68-3a20-4af4-96a6-c9b435f73407"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2decde8-ce8c-41aa-8ac3-6891145213fc",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d08f81b4-3a17-46de-b5e5-b77d09caf87d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7e4666b-46c9-47ec-ac55-222f1bd45831"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e515f030-2f05-40a0-a10f-013af71e5d2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "f8ed8a11-3677-49b5-9374-74516abdcfa1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bda0efaa-0d3d-4aa6-895c-23fab7513450",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54506563-996a-434e-a6dc-d0bd023670a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bf782aa-82f7-4a89-b64f-86941835b993"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e827656f-cfa4-48d7-8418-25de5bca9605",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "59d056c3-e25e-4b6e-a637-dc4b5c36b4d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6156265-320d-411b-82a5-e32aeb24e99b",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1700d24-8c34-43f1-b906-7715a02f8886",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f415a4c7-3709-478b-8433-f2d3e950a70e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61921e24-3d59-4196-921e-50b28ad73499",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2847f96e-8aa1-4ea5-a836-3dd12f34075e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28c3fc5f-16a1-4ad2-92d6-83e95148bb33",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3289d375-7361-4e1c-8a4f-f39adefbd2ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "284987d9-6ecd-4616-80d8-c3079807b3e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57261eb0-0617-4c22-9f02-85bf95d8761b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "92ccdec2-674c-46cd-b779-3f16454ceee4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3650a721-c38d-418b-b9f4-b602f6108a8f",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c0ec214-6278-4cf4-9930-dff85d9b9207",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4bc2692-20c0-48a8-99ba-5c0a7e955716"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32709970-b885-442a-8d2a-7b4ce668dd0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "f4cad3c7-e77f-4aeb-8781-bf124e0c555c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d697eec-83f1-47cc-9874-d76e56c7c186",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb347961-4dd3-4d93-9f73-dcfb4ffd1250",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41aedf9a-e121-4f06-8de3-08ed483dc76c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21a2f28a-37f9-489e-b15f-a96de08c530d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a477e8d0-b96d-4f0d-9104-b09261c6b271"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25ea0b37-8271-4d6a-9d9c-e93997a0986c",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fed8bd9-f1a1-4ce9-9fd7-8ae07c3fabe8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc6458c5-70de-4197-83a2-f5ac9c482149"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9d94670-3ea6-49d1-ab22-590701388525",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "501a6100-465d-480d-904b-b69f4bd6998f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c864b0e2-98a9-46a5-8d37-040eb4d468f8",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b77bc89c-3f2e-4772-a4b0-47790b766e4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc2c31d9-e57d-4985-b815-ac3b8a502e3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88d4ca59-9768-4c23-9ebe-30553f8cb1ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "e04b37e2-270e-42d2-9dbc-491b057b45c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ee79245-ae7c-433e-a6d6-645f88d17a9e",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee35ed81-4229-48ca-94b6-62b096598537",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "225b16f8-04df-4872-ab88-c247491fe9ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff8f596c-794f-43be-b77b-292856f9b8da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "e932928c-d635-4535-a254-21d6f08a1c1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f75d9d28-02f9-4716-b6b2-ad580f8e43fb",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c79ec2a1-238b-46d7-b7aa-de8094de5c6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f318497-a660-47d3-86ca-fb3f5792a318"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a102094d-0428-44b4-bed2-2918ac4ce1d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "b9d4b778-4559-4e8d-a1f3-7edb75dd63f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f426778e-ee98-4e73-b290-866c028ca615",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3f28b7b-6f1e-4e33-b9da-d495fa4f77b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "973627fd-43a4-4f7d-8b01-899d983405dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f298832-567d-46e7-a09f-7fe93444842a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "697d4c31-09ce-444e-a970-5e3228afe8e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01e4de56-ed5f-40ea-bb73-63fd6f9f4f03",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21673a85-d95a-4a2e-b08b-e319cce0fba6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e191b7f1-fae3-4747-ab6c-bd04e03c74b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c038185f-1dbf-4c5a-ac40-ab02cccc18a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "0d03bc82-6f10-41f2-8985-32a98ea65ac0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30de10e0-7f0d-4e6f-a4a6-bf98d49e7409",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5f4480b-6f6c-4046-b55a-68fb21fd7c97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7d2b306-fe3f-493c-bc26-0322f9720f74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a6e6ef3-8afa-43a6-8c13-dd0475219575",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "599e50e4-84b0-45b4-9637-0d0e90e666d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c6ed4a3-c868-45e7-bad3-83147186a255",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1002abba-9617-4d74-88a7-c36219132b2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6012695-ed06-44d4-a5d3-5e59b1b71035"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "256f412b-ab46-4be2-a254-ea7c47f7ffe9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7a4e244e-d698-4102-ac2f-97eb68acbfe0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fabcd4bc-cd45-4dc4-86ae-0f3999e09f7f",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b4ef72d-6d5b-43d5-9632-0ba86d2f8755",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a3bc638-09fe-4c4b-8797-8853e8f0a369"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45129bf8-0f5b-4298-b753-6d86079b8ae4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a861186e-daf0-4b32-9a10-a02e4bc36b3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb588fb4-e19b-493c-800f-bec3b8bbcd8a",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38c46d27-690d-45e9-bd88-75559f99f730",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "667f0cf2-eddb-47d9-b3f4-f7cd99f3324b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7065cccd-8a66-4e60-8d9e-9e4cb4097589",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4c0bc8b8-0f44-40a0-a6bb-ebbd9042bfe5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de1c610c-dc52-4b44-ad3b-50212da35eb2",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e789dbe-c88f-4f7a-8959-cb92f544f99d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "387a2dd8-26b7-4df4-a9ec-7667eb36b5f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bce544ad-034d-4428-8b5a-178d3a0e4cc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "561bd04f-2ac4-4077-97d6-2d40ec0bf1b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c2e9b62-dce0-45ca-a0da-fb9c151bf87d",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eac926be-7e40-4c87-8a80-2dc06d1dfe6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83ec3588-7377-4e27-8750-858714f3f706"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a6c5396-178a-4516-bf28-5cbd9105d207",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c62aea85-0c99-4867-87e2-59cd5c7b23a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54ccefee-195e-4c08-9c11-531f6b1c2095",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d60f783d-ebf5-49c2-be5e-c0c5400ad346",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c8ce48c-1fdc-4a32-8c5f-6d19f945ea95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee3ea7ba-46ae-4bde-8030-fecff8d4ce03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "53cfa23e-a6d5-404a-8fc1-ebc07debc40f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14697a0c-1e06-4972-8663-2b57947fab59",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7aefdd3-f44d-4f45-bdb3-6f0ef47c5549",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3cc1c36-6569-4685-9206-64f5fc603e6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "448b948a-857c-450f-91f2-bd3c77c081de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "434f1261-1413-42cf-8317-d61b1abdf1a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abb6c875-b517-419e-b6b7-72a9c2bc436b",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25039432-3952-47f7-9b14-c0b2a0b62abf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68174940-df36-4e74-9e0c-e0926301a3df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86031190-45b7-4998-ad32-cd6dec81919a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7f9802a7-483f-441e-b503-3b796d7f1f13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f633e041-c36d-456d-8536-96a6d7383072",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cabd6703-4918-4b37-a581-40ba7b0a825c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d563c025-e422-40e4-b910-da2a76e2335d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d74849e1-0887-4393-b78d-c79c8420e5ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "48e42f93-9032-4ace-a67c-43eae05fd948"
                        }
                      }
                    ]
                  },
                  {
                    "id": "356d0565-4804-4086-80b4-e54e6f53be9a",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1d6bf9e-0759-44ba-ba6c-14ab81ea1ce0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47c14dd7-759f-47bd-8d8a-11a7e444d989"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58d7e1ad-6beb-4452-8110-91bd5f2f3de1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7f3d50fc-a4e7-41ce-ac13-226373bc0c99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53cfc730-357b-4f0c-9d0b-bdf961cb3363",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6815b385-92f1-447c-83f0-0c70f058367c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32d884a9-ab84-4dfb-8bb4-83f8b46e4cd5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee016988-cfb3-47e3-a9b2-862ec9a1b7ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d7665d9b-f0cc-4912-9e0d-80a741153f18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d93831c6-4f85-4f5f-9e90-99d30e30eb0e",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53356e77-0b4a-40f4-994f-ba888862d193",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6231777e-1e74-47ad-930c-4265fb4b2f8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b1ea9d2-5582-48ba-81a7-81b3e1c25436",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4bc29ea9-e208-42a8-8659-0e09b2b2aba6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3029b5a5-97d1-4eec-80a4-74813a5c8d7d",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af38a8c9-04e5-4c46-b0ef-a8f24387e360",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fef50703-abde-4586-8198-c4783668cbe8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f79189f-e32d-4597-8ac6-7a68a3ede901",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cd1e37f5-3162-4bed-86fe-544658052b49"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "46ce4315-e8fa-461e-bc0d-7b2a60e1ff71",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ecedac6f-12a5-400b-bcca-14cb80e3b44a",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9abd624a-c2a4-40d7-9247-a6cd87f0a585",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4d05e34-3e0b-4658-b7cf-e3df172b2f1f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eae2e3f7-a1e3-44da-b7d6-8c5a4c2c261b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5d784cf1-c0b1-41b0-818f-4e041ecb46db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8fdc869-7080-433d-9207-e98803c0c7de",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c573391-f493-4259-a6d8-76a6b5b70d7d",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "7ab3e8ac-61dd-4bf6-aa15-7db583335ee1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ebb65c4-8347-4a60-b3e7-4e9700950114",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5ac9e0f5-c0ed-4c86-aa58-b26800c3bc47"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "352d8d5c-7b7f-445d-b783-c6d97bd35402",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d6680dc5-8fbb-4661-8185-39e6902ef82c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "38fc1253-7827-4024-ae0e-60aa35dfd974",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3183a670-7075-4819-a310-916249d4e59e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ebd6bde5-c226-4237-9a29-0040f5be41de",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "33f99841-91f8-48ad-bd0c-7a053133572c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7225032c-8147-4e1e-bdb1-34fa43cf6e05",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "063e943a-b69e-4c69-85b0-3c3a0a675825"
            }
          }
        ]
      },
      {
        "id": "5f1d5b0b-cef4-4e8f-a7e7-cb4b3accaa51",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "6b433820-e0b6-4d0d-a419-a4b7d7f08826",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e7eadd4b-72a5-4d46-9485-775a8cca9490",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "2a28dcce-3161-461e-80b1-8a92b14b043d",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d6cd501-767b-4c77-9950-e27eab6a2daf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e63aa094-47ea-4967-8cce-28c142e53aed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89f4115d-83f6-49d2-8ff6-7ad90e71288d",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "490faf5d-5b3c-4f04-902e-e4a551609e4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b51c6d6a-0fe1-483e-b3d3-2b91262987e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32a2eaa4-0a21-4259-bb24-674a3a9bd9d0",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cfacbb4-e4d8-4e6b-b9db-63ee8e23ab6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a39a0d0-16f4-4530-82e5-c9ce168686b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cbb93af-0246-4e53-858d-8b4403ec71dd",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9f0aad7-5a12-446f-bf04-2e97fd1069df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "415d755f-464f-47e9-a180-82ed14b59c92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91f1425a-da8f-4cf1-b385-51c5c5ad8bb3",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60b9329c-5e14-4176-b864-bc30241feef6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bda04fd8-442a-4b6c-9b6f-fef79e67ffef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e488cca-5792-4ce9-9611-8d74335c80b3",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcb8db29-bc75-47a2-817a-980f9e3df290",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0250fa3-09f5-4bd5-90b7-995c997901a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "092ba372-eaaf-4e74-b289-b7a56d46aac2",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efe2d53c-cc00-49df-ab26-59db273822da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "602caf85-2008-4c63-bc03-39aeaaf04d51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "faba2117-e6df-4fec-be8f-d8585bae0584",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01710e56-44c6-48e5-bbe8-e6487a4ec42d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f3bf8b0-78e8-42d6-8af6-e4c860d54398",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6fb7682-0607-49ad-ae38-736501bfa218",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a47d02b1-3386-41b2-a2f2-2fe2e92a1251"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "571b804b-6df9-4910-af43-9cded7a1a612",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "168909b4-0470-4356-9a91-51894112adf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5a1121d-6a31-4814-9c33-7dab8a75b3df",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "516aea9d-b8de-45ab-825a-e33378bb8b80",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5426288e-f60a-4fc5-9535-5f731c5b0b3c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5cf16db-3f9f-4819-817c-cbe6b2ac98a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f01421eb-fe85-4d8b-b780-0cac7f9f809e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87b8ecec-9cff-4016-857b-168749ae4d0b",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cad7725e-3476-4c4a-be4e-9a0e105a6ef5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e28134f1-9f46-4709-adc1-37851c616ea8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4c87524-c775-4f95-8745-54a96d32c48f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7adf451b-11e5-443f-ae27-d28ec2d5cc5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0308fcff-1976-411e-a92a-e9dc8c16299f",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78b63953-ed53-42fd-8fc1-65f32ad6b0de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e4a9af7-84dc-4ed7-b054-e5696ba4eb40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fd331ce-077d-4f7a-9380-e0c96589429c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3755c259-ad05-4be7-8b67-d0de3afae294"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9dedd81-0768-44e7-9c38-bd488a18adb6",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da88f161-03d0-4a1e-ad18-e1bc377a9061",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "261b4a14-4aac-4ad0-a51d-5317f5eda6a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb23f240-ce34-459f-8e48-d828bd2e14b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a42a824-5f89-41f6-b26f-c7061681fd78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad099644-34ad-4fa5-bebd-89cfe2b4d039",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d2c21ad-8130-4f79-9954-6c1fdcb72be6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "25ea877c-c622-48c8-8feb-1ed68140c8b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "957ac269-bc1e-4aa8-a71b-e79aed468363",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50fce8f9-a05f-4b9a-bddc-6367ad50fafb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9826609-71ed-4279-96ec-e8ab3c70a53c",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d31b932-ebc9-43ab-b0f9-840115613185",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "151f90c2-3cd4-4a01-a97b-27c904fa57e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74934065-1a59-4b00-beaf-c80e86c03730",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08260fc0-0566-4108-9bb1-527c14d2993f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d3b0583-d4a6-4506-9a58-18862b62dc57",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea5bf97a-d658-46c6-ae88-84b236a181df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "23d274e6-c5bd-41e9-8aa1-3321ff7de825"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "358e85b8-9b21-43b8-a050-dd4588668f0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb51009e-6c03-4b79-8afe-c07a1f1506e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc68af04-0e92-4a6b-9438-f1d543e39380",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6877a070-f39d-4159-9a2f-bae8cc643421",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4a46b67a-bb61-439a-ab61-c8ba1d2f3f0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "957848cb-83be-4459-b4c9-e5cabb450b9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acc64dca-0983-42d8-8581-4f5dfb6c6375"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22caf458-be38-422d-a2e8-e496f098a67b",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9780d981-e565-4287-b53d-66d1c7d25354",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b899c50f-8b73-43f6-b72a-b9d1c1e83a20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81834b3b-6933-4365-926d-7f383ec8f82f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e71a354d-40ef-40fb-9893-17377887c81e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "028b48a6-1eca-4d9b-99c1-17c80895bf74",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "834b4a73-6d81-48de-b213-94aec26a0e37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eba02470-3017-4b2c-9ba1-3b012d4121f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8e9d825-ce0d-47a8-a40f-2c9f9d179c93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46f038f7-c64e-4b8c-834a-a0a941b98e7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b06367ad-4228-4ad3-ae56-c50e42793dab",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf8df995-6878-4428-bae8-7aaf74eca11f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb68ec94-dea6-43be-8a5f-26054a45e8f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b475224e-10de-4615-b6fc-a1ac57af9c95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "947accde-2f8e-4120-b3fa-29fc3df609f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "999474b1-75a1-424f-96ae-d8d4a648e382",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db447743-8e83-40bc-91c4-8d9485b459b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75425d2a-3b4a-4f46-96c6-1e55d757032d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b3b61ba-61cf-46e4-aae9-2d73e13af26c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32933cb9-9bbc-4839-886b-1c751d3aa8bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53887511-2435-478c-9c7a-ce85347698fd",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a575f751-8b15-40c6-ab08-a06b5ce7469b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35fe44e6-ea54-4ce8-ae63-6a9e42afeef2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ec74946-88a3-4f5f-a1ac-456e2ed05c77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a32f80cc-a196-489b-9e12-07de4f2d41b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ee46e82-5127-4afe-9aef-d7507c12de44",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e051dd0b-5c0f-4044-95f0-83fefa28fbd9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c21ee50e-1a45-41a6-b0cc-873246524f52"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "184e0f01-1d87-49d9-b2f6-35089398b81e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45a3c985-4e80-4dde-8731-3362b1bc6f1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e17d6c35-4f61-4588-bae2-8623a2dd99c9",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e4f2683-fd79-4382-9e25-ce2b37dbbcdf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2c8438a-65c0-487c-8fce-59ce95d15345"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62086857-d20f-46c0-bbb9-20e2f687d055",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2afcc04-e54e-48fe-be66-261781ef9850"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78cb2b2b-5ee9-4f15-ba2f-aaf409286092",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2724cde5-ad78-4e61-8624-a5bdea467a16",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3875ca9b-e6b1-4750-be3e-17571a2c7f83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "161766d2-03e1-44df-bfb8-0a99bf32ec08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cba06e91-b836-402f-9538-73fed8953409"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bd5833c-e685-41e5-966c-c1d205ff2f9d",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "283c4796-04c5-4c99-8bbe-3bb8a57dc102",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "243a6630-ef6b-4227-a0d5-7f204d70b41f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c85797b9-69ef-4b40-bc9e-0d9ae1361d86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "640bf3b7-19da-4d57-8ae8-b374baf744bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ef03650-9c77-4d20-ac2a-9860a0a8a8f0",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a29bb52b-29c3-49f0-a754-744481ab3455",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "61535b83-1e1f-43ea-bc88-786e9717cc40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8822e66e-d057-49ab-8781-0e5af1f326f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fbad72e-4444-4c37-8d57-e8eba9581ebd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "337e5cbd-d172-422f-922d-9f70d0153e0a",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed8dda2e-ce68-419a-ae97-5b3664bc5c69",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "18f55ce3-0201-4c71-b6bc-25edafe0149d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bafc9885-79ee-4c2c-8735-250669b69cdc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b737b37-e76e-4d63-83c2-85aab2191bb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "525690c0-d03d-4101-8ffe-7663c4f13f88",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d1e4f1f-4cd5-4058-8f90-d2a6b187bfab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13e85c6e-5e80-44e0-8292-665241c7ac0a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f581f1a4-5715-4d08-90a5-dcc5126d52ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3bdcb2c-9151-401b-8b4a-2935ec8be7d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f991ad79-eda7-42ff-9857-92f0d52604c2",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9953d829-ba68-4a59-ad78-f4c38663beb5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fc760e34-a97a-4270-a795-0fa9afa98ba2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05f08b76-d267-48ee-b869-6a5084460fd5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "017dae1e-4f65-401c-8c18-6a82b9529f87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ba2661e-b345-4906-a453-d263d9a28356",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "493763d9-8017-4884-b56e-f28fbbe4855d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6c41fdd5-202b-40c8-a59c-ee3eb8f466cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6785bcbb-d860-47c6-bec0-1873fac0172e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7adc9409-1a7c-4099-acda-d79edba57df0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57572c3e-fcf0-4f5a-b06e-cd12d1122a7e",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42baac2c-e3e8-43cc-bda8-fa45089ff0ca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "028ff342-22c8-40fe-92de-6d5b3429cb8c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15ae6e32-b52c-4e69-b25c-f5e90b1d2253",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdcf4d0d-cfa1-4085-89db-9fe16e23ebac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69f58505-1231-48fc-9fe6-a75d8e0188fa",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc89efc4-6ecb-4042-a4b1-d0284e152a40",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c70adcc3-8aed-4427-abad-cce99a6a8621"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5edc9c9e-f5fc-450e-bc42-079117a2b518",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "517267a4-5756-41ef-a777-50d41f341024"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf95b583-9ee2-49d6-8b23-baa44fe1f250",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dea90ad7-a65b-4aba-917c-9f9bfa60c4af",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "395f9b56-1c50-42f9-bd67-088dd1adad8f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15a0b730-0de6-4c6d-be85-5fd1c94cb4c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "402605c2-b2db-4db5-8f6c-edbc47d0324c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2817033-ca23-4070-9537-986df9842636",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c39a605-c274-4060-b36b-a9c0ef437c83",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d3e9474b-a572-4ba6-a9eb-b15ef8f5d184"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da51e2ec-11ce-40a2-a549-720ac3e31d54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09b95c9a-5092-4bbe-ba43-5dbbb203e2c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1a6ec62-e65c-4754-9f5a-a410fe113010",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1c37426-f4e7-467c-86c0-202ad115aae4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3623b2e9-ad01-4e45-8099-d1fa63fee47c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53ee052c-1e30-487d-8398-15136cc6d8d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "684f98fe-c330-42a2-8dc9-5c57d01c3aa3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81874623-a475-4b90-a083-50bc13190428",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2dea69c-55b2-4713-ab43-f88300fe46f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3377557e-2f7d-4dab-b4e4-01eb7dc371cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54e253f2-13e3-4169-9950-bec3dff186fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e543e2e7-d7dc-4deb-8001-b28c729cde15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2853653-feca-4979-9fdd-460e9c8773a8",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4e63e68-59b2-497a-ad68-c48bdc80931d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c288b51f-c988-4e83-8afb-4799ccb91477"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c611b89f-a0f4-470f-9927-703cacbea667",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f694111-39d0-46f1-95a6-90e08597934d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b34add85-97eb-43c0-8707-26766aa2e380",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cefdfec0-1b5f-415b-9810-14edef88c95e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b59d997b-13d6-4bda-8510-6f96f68de7f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d33f16e-d79d-4051-900a-1a3e4f3560f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "505510a5-7c64-48c3-820e-c820322162f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a87e4de-d161-4996-9995-d8f97423cbcc",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d216e5c4-a5c2-42eb-a4e5-c0bf1369ce36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27e6bf6d-6864-45e4-9718-794e2db992e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23e01a3a-6fed-4ba0-abb0-bb888bd755d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28c2b032-d9c6-46f2-8c9f-37dbd3705bf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "910aecfc-a461-4c2d-819e-e680c2e5750f",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02f5df3a-d8d3-4a69-a6c8-b9e929230628",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38fbf391-852e-41d8-a5aa-ccae6964bb43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b23273f8-5103-401d-a69c-23ab1fc09c47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "297bedf5-e8d0-4a84-9950-7c5a599855bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80398e17-765c-4be9-8494-255a83f8d44d",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a983a508-9a0f-43f5-8151-8ef86d2e0349",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8b48a06-3258-4a96-bff9-4e29ae305618"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c9f9bac-8108-4e6e-9d1b-37ff553102d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95e46d56-5c8c-4f96-af98-1f61b2f7135b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0965f95-22e9-408c-9159-88f18c1748d6",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d035f047-6d39-4107-8499-e903aeeea9d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a5b16df-5673-4e3d-9eba-5082bbf67434"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4502b778-8882-4c0d-8166-8a9c6365a4e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca23dc57-eb7c-4843-b122-fea2eb51080d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0e461f8-3187-4fca-842e-789851a21f81",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7510ee41-7160-41d9-913d-2ba3df5953a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6bded65-95cb-4692-9ccb-e9383250e13a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2c88d4b-0248-4e26-ad94-4d2c105fef90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8b4cba7-6f0b-4d6b-bee7-b8ea14e5fd5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edc01de6-74ed-4fea-9709-b14e4594d051",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bf7deff-fabc-4907-8a71-a65570f19713",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a286406-0bec-45f6-817e-4c7abe922ae7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "256e597b-cee7-4f9d-ac72-0b60450c7b5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a14108f6-86ee-43cd-bb23-d5bff844684b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "907c8b10-5d34-4ef9-891f-fc681d6d9334",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90143a22-b297-4a24-8028-3c6111e798d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0372d42d-0a56-49d9-9770-bd5648a5ca6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12965de8-22e4-4451-ab99-e9bf9da536e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a6b5439-1401-4047-aaa2-0f6ad1d5767c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9af365b5-f816-42b5-89a0-f16a9df3e35c",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d52c1a4-527a-4f28-8f1b-326e8cf7f4c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48790502-b2b3-418d-b91b-cc9fbdbf71b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c9f401b-0951-47b5-ad7e-ef61ac73ef31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b4b9ed8-30af-469f-911e-a223a606c467"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3dbee42-8ddf-4ded-906a-2fc36c9e1beb",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "930f611d-568d-43b5-b747-b1f2ae3aac93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "209f913e-f755-4bcf-b161-94142aaa6592"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c9adf35-3407-476d-8b86-c82b5a8d453b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f610bc0-2a76-4bdf-9da8-9879bd184ba7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ab7fca9-18d5-4a01-8ea6-3bf4946b24a1",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09f67f90-14c7-49a8-a6d6-b2ede68c5ea0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc549a6c-2ccd-4ee9-ab61-993c1f9036ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d6055d6-56e2-437c-95a9-f1e86e221fb5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c2a92d3-5856-4c9e-bead-2ce8b0cecb81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7caa4434-cebf-4aa1-866a-8408e7ef01eb",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3aafc50-ba3a-42db-9ce7-bf4a4b70d030",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b7f4bbc-2474-4a03-8d2f-66d86f3052d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53d9a13a-ef61-47c2-9867-6f9db009456d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20602766-f507-4b84-a99e-6cb1ad6746ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "689761e2-6aeb-44a9-be8e-77b9f1a70a92",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "083f6285-9953-4187-9df7-845fb7644bae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "543981b2-801f-4d99-8499-0cbd0f92916e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8de40e2d-b243-4d84-bf78-b180889f301e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bf70c97-d2f6-41db-969f-ca2651368d3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d76b0a3e-d56b-4de2-a185-5e706e47c58a",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e37bb7a2-3a21-4be9-83f4-fd6ead211315",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7eadf617-9513-464d-a23f-fb5010a3d5cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f278d613-b58b-4127-93f9-9cdc7f62b04c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bed7d9ed-7cc9-4408-8af8-948d72968cfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8927bac-d5b9-4539-97a6-53237dd91146",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de739a2a-d230-40c5-ab35-fca0b672337b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe392177-7ea3-4ccf-a62a-37fa3e06dd9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ab194f2-9b94-4d11-80c3-8e3e58bb5d4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26928a1d-7e58-4ff2-a5a3-310aa66897c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd27cf04-3d0d-46d8-8dab-73a774c23f54",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1557474f-c69d-4b10-ab88-e54a6b6dcf9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "334e9aed-44eb-41e2-a3fd-ff13448b30c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5557156-81d7-47ce-b545-137746e8f3ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22e79d2b-58c2-4a6e-82ed-595aa2b8028d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f959551b-1485-4e03-829b-65518c7edb2d",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "645d2476-3b98-453b-a022-7f77e19f3d8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0af9e87b-5c99-4903-9345-52f41ed67338"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8a46df8-039f-4372-b5bb-85d1bceae60e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd133591-b4fe-40d6-b11f-fbf41cb0df58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b98d7ca1-e319-48f8-8166-edd5311e19b4",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf487b0f-b049-48dd-8f08-8c7bc8729b93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba50eb16-93b9-4d5c-89d0-e1d19d1b082a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3207b907-8f1b-4dc5-b158-22d3f4ef291d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4489870b-9333-4543-a2db-3f182634bced"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be3913e7-28bd-465d-a734-16639c0b593d",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "572380ba-be4b-4d6a-9868-c6d01c87342f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c2d7f88-2d1f-4d99-83c5-95b306ddc68e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c68539a-95d4-4b66-961a-dcc05e78a7a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "070e9333-14d5-476f-8b24-05b346c6ecbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9275463-75cc-4af5-aa02-1dc94264f779",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5aca667a-2531-4ced-a24b-f6621ec35dac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7739ad5-8ac0-42cc-99c9-4c2d99a01e5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be6b3fad-61a3-4a52-90ce-34c37551c12e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28ed5927-c732-466d-8519-b9d8c2cb2708"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a8466df-b61c-4641-b621-73056bc42b56",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a3d56d7-b114-4b8c-a04a-b0c22066b810",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46c01629-ed89-4e64-a266-ab1b8081e2a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c9fa755-86a9-410e-b986-848e88ea5ccb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5464260-e645-4a25-a3c8-4f9a0f0814fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "320a8e16-cd09-4a63-8582-7f425749db82",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f6fc8b0-2a46-41b2-92b3-697c199b1b5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa5e4833-8023-4091-a1cc-6a08c139c8fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63a1f461-ebac-40fd-a4c8-07db5d79d055",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f19ea6c3-b51b-46ee-968e-5f0feaa3b838"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24fde4e1-b6b5-4ee2-b8c8-6f04527f8277",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14a00c5c-836c-4c65-b100-c9759ef00080",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efed6c09-26d1-4b10-9559-204690b703d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52a372c2-19aa-4dfc-b0d5-8758007ef1dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9957aed8-e879-436f-bf86-b6932a9f0c54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7d523b6-81a2-43be-81bd-e2a79a1fd2ec",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa41e7d8-02ac-4fbc-8924-50e743d42cfb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa348687-dfe3-4915-a2ad-640a5e932c53"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34f0fe42-92ad-40f9-b47d-fe4d91494768",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04bf6a79-3c1c-4e06-8076-dec993e9d313"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d98a393a-8a0d-4749-9f2f-fc5e08ed025e",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c472fcd3-fff1-44ab-a364-ad477b2cff96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99068265-18c3-40c7-a109-57e077b91aa2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bbaf7af-ee7b-406f-b4ab-88cdf6fadd52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a43fc777-a672-45a4-b634-ef8bd5471d8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b815c3b-2b7b-4c18-bbf9-f906a3d4fb67",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a86e94a-97f5-4e13-9683-c95d5c606b6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f7321e6-f2a8-49e1-b43e-9a9cc4a78b9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a854770-4770-4ff4-a2ee-1a52669207fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a1b1305-b6c1-48e7-9d97-e689921b5550"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c5744c1-849c-4ce7-bf1c-caaac0f47557",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fc7f066-629b-4083-8503-570dfe893d6c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e5866c3c-9b6d-4819-9817-b3576b4bd6a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5a92562-43fc-4be4-9c78-607fa4703c17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08f3e087-1635-479b-8464-ef6bdc2b2d9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8d954ca-c51a-4df0-bbe7-8fb70ef96f34",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71a655ee-b0a8-4d08-8cbc-ba11dc75c8ce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eea6e3ac-fd7c-4c32-8550-2548cb37a4b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fec8918-3278-4220-87c0-8f5743d3b9e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "713a9d41-528a-4392-9e35-a27dc798cd2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a07038eb-9b34-4eb6-aec0-cc9eb190b619",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b70cd8b-eb47-4947-8788-f76a43e1268a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "64478972-150f-43d0-b1ec-57f87218166e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99522f91-b306-4dee-a7fe-64260ec232e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bcc5c28b-f2d0-4bf8-b6ef-76bf47fcb760"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44fad2aa-7c16-4118-9449-2fc7dee876ab",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c43bee6-55e5-424c-9ce5-339c69899ccd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "582caa7d-99cc-4507-902a-7d0269db92e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f77d048f-23cb-44f3-8884-5ba8c1f8e7dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b9004d7-6bbf-419a-944e-e095f56d35b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a88c4bd8-7f0c-4d8f-bffe-e521281cc90f",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ae362ba-da9b-4ddc-a218-bcbe18a8f6ea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5d547a60-3323-4102-9fc2-9525c278c532"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "546fd1b9-9bc3-4e52-bddd-8600da8b8971",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3c8611e-9891-4b91-bb21-4f1c8daa5980"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5002f8c9-3fd6-48a9-b95e-38bed5c4a93c",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ba02ab4-6275-4b25-9e24-31d8c0399a18",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2e42eb27-2ab1-41a7-b2f0-c31068d9f585"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "004c4c08-249d-44bf-b5aa-b9448d40ea7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "376b259a-26d9-49b0-b161-a7021f007186"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b5f4a2e-dee9-4f9e-a5b9-57b3ec4b0a29",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "617d4e38-652e-4f4e-8d83-1480bf0e1358",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "099ad342-c82d-4cc3-8214-da05e1351136"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e698dd4b-c8a1-4415-b4a9-efad66d98aae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bdbb583-5e23-4f67-84fb-c76ee24f3f81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5275687b-5470-409d-9efe-b418f634e579",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30457c8f-5532-430d-a336-459c5a29127a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a38cc936-f1e5-4f1d-988d-914aa15f6097"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5f80951-9b9c-46f3-9e68-3c4691e2f60a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e7521e3-1b52-44b1-a983-29480bd59469"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa123024-214c-40e3-b142-9e3eb55f8c01",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02bbb7a6-0c06-49ef-8ab3-c3c3809b0baf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2bc9e4bc-3cb1-4cda-8a3e-a663e483c183"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02ca9cef-84b9-4611-b5f1-22444499e8a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76b65557-9827-49da-9bd6-61045fb3a320"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d56a2d08-66f6-4187-9b38-043be7c2794b",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cfc1141-a552-407c-a637-4d0b94547353",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bdd1b197-bc6f-4065-90cb-f1575b2e6290"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "afa09895-956d-45e8-b4eb-236c25d6035f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9addd2d-aba3-4fed-a8e2-7ff5af6d2100"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c58e559b-a9be-4e10-8993-22275d585535",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8ffbdd3-34c9-43c7-ac8f-28c345f122a6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "96c7a08e-6295-400e-9a89-5342f014207c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d459c3d3-037a-4dbf-a29e-b3c73b5ff55b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02ed0a13-eba5-4f83-abde-78e2ca56234b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c07d21e-015f-46eb-a608-32aacd6ae873",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4eecda0-f360-4df8-b7b7-1a8fa3412190",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "38262e37-aedf-46b9-bc47-7a2a5476da9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "268eca41-483d-4e00-b550-addc696a5aa9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f41a538-5b2e-4a0b-98b3-3a3554d4a8e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d5cdce2-e132-42bb-9538-9dd07d308e3b",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9582d6f-dfa4-4aa8-86ba-38fd937d15ce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0e04c556-3e1c-42a4-b216-a7b94af41c26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "301c9058-6f26-43a6-b210-130b707422ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c763b10c-b260-4f23-aebf-20201b58808d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "307beb75-f0b1-41d8-8f75-96c7857d5e4b",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed446846-8a72-418e-882e-2684aec4af59",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "667206a8-7c00-4aec-8f24-5b5c75cc2554"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc90f03a-6b40-4b9d-84fc-f5bcd6108c93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f688fc15-88f4-4a3a-97f5-2063d25c2f86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e04bf1e1-b396-416f-b83e-175d30a2d691",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "678e8329-dd5d-48d6-8dba-26be99ca4b86",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2b602379-9e23-445a-a07c-0ea437368cdb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74635cdc-0a94-4576-ab64-49a17398b600",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79cd1df7-ff13-4779-ac53-e046547431a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a0271b9-0f9d-4919-9fd0-504d3dd35404",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "976aad5c-cb89-469f-946f-0255d26de982",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "792f1c44-f234-42c0-9e83-e57b58ab1dd9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "288ce79a-9154-4447-9100-eed558c8f853",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aed3d04e-9ee6-4273-b20e-216b11981966"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72bbd7d5-8ae0-4b67-a417-b2e71c4f3f92",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c6ec6a9-e40d-4365-b2f9-e4abadb57ac1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5d372c2c-7658-4861-b31c-b67a6a17cd31"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ac86a4d-27ec-4976-a610-046825df097e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c0d6911-66f6-441b-9b3d-cecb2301d2b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "870d8d4f-b99d-4686-a579-c914d8f96163",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b17aca22-c95e-4223-828a-ee47be76a6d6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cc49d6e3-681f-4e8e-bdef-61fb251e2913"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ddfef17-a180-4cdc-b711-1afcfd0444e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6a9209e-c790-43ff-9c71-71a532546c26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5f601c6-f604-4d90-808d-9140b004b096",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d950b244-abc3-492c-9833-a4c7c9c8d20d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba4ed5a7-d55b-4674-893d-f5199b19403d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25413401-2836-4bee-9ae5-ff8fad4eb6b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38372c48-87b0-4bc7-9d42-2857cbf399fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c93db01-7b67-44d2-9577-054faa4aa8e0",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c214a1a0-bacf-45d7-b556-d58da1fd8cd4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "78b54d4b-f8ca-4abe-848b-576f0b8ba83e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ec23a6f-a8a5-4d6f-98d1-0fcf16690ec2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23c0cd62-019d-457d-a83b-859473bb457b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19de9c5e-21af-4c30-978f-8eea07842461",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50836420-e9f9-4559-8ce0-a570ad0da2fd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a6572c64-66d4-4fbe-bbd1-09f29e2a52b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc01bb82-464f-465b-acfe-561f7286ac79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b575ae2-bbb5-4e61-b3ca-9b67b53efa2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34ed487e-33f7-4125-8d73-18b1ddd117e5",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9493cda-3e79-44e1-9534-c1499c2b5e18",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c9d065fd-b8e7-401a-ae4f-dae17767417b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ad4572b-d151-4e57-979d-e885fe7160df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d74b719-0c61-412e-9798-c847cf3ea69f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82b91d8e-a6b9-4fd3-ad8f-d66cca64865d",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18501aac-43d5-4b8f-89a3-409a6303f79b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1aad58e1-431c-4fcd-9452-0de9435e1def"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "936488ae-089f-4723-ab6e-0757a6d89409",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "192a506f-46c1-40f8-a443-91aaa52720ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "714703e6-aca3-42de-aab7-3d012f575163",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bee1f132-7ed7-49ee-b73a-f1e33e2571ca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e0508472-234a-40b7-9099-26f10599946e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab327306-0014-4a14-8ea3-2ca06312a6e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96f61d73-ddea-4923-8956-55123cc19c23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9130903a-7d87-435e-b8c2-0ab3d06ad213",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80d2dfd5-3a08-46b0-ad19-41c03924448f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ce7a5246-bf61-44d8-8e0c-12ff3b76d308"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c019c5c-9e0f-4b78-94c3-1674f8d32a1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f2d47a2-95ba-488a-90b9-c35e094b1df2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed9d0f73-d724-4479-b5e4-a03c1c95ecf7",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcf7d055-9012-4679-85a8-a449d81d0917",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a811cc3f-273d-4546-a659-0062627fde66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71ea11bd-d1d1-4e0f-aaa0-33670cf78734",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c516df52-587e-4dbf-a787-acbbbc2929a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a24d76f-a1ad-4f1c-9658-69f9756aba96",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfcb1eeb-a34f-45df-b0c7-f52162f036c5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "02187e17-beeb-4eb0-b779-dd7157f0aa57"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9774c973-566e-4866-afbd-6dfc67f40017",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d18704f9-855c-441e-bd12-80258b3c9183"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b662aaae-1128-49cd-ba0a-c569599211c6",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "654024a8-3d2b-4b93-aa2d-ff336951838c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b42fa729-de4a-476a-8d39-77fee07b2938"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "164626f7-ea91-4fde-a1e8-eac92cfdce27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8043486a-90e0-46c6-84a4-63e2d5dd3feb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c20368d5-f4ab-4760-a039-16f3c782e761",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f40646e4-e6af-4eed-8754-0f9d9fd56fe2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8d1895e2-3fbc-4542-8d59-c2acd51b2609"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d76281a-d939-477d-bf9a-e271ad9bf535",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "932f1954-4b84-4dd0-9ff2-8e66954818a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb04cbce-a670-402e-966b-dd2412c57c64",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be02891c-56c6-43c9-9b85-4546619e298b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aebb52e2-a13c-4ae8-891b-ca4d468b8f34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28c74bb9-6537-46e1-aea0-4a68bb06adba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94f71354-53fb-4655-a7d6-9b7b1ba2aaf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab1bb18f-2df3-4513-ac80-4864c1785216",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6046406d-5afd-4245-87d5-14ab296474d0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ed8d4e31-c611-48b6-be2d-44c11756011b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b05353ef-1dba-4b09-b508-640d8d14f2f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee8fca30-835b-4c65-8589-f1116bee505e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10299d8a-2eb7-4d0f-81d5-5f1e2fb2a9a1",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf288e66-b5cf-4d20-a45a-dbad757b7500",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "74d34119-76d0-4a3d-9fb6-a9032dc0b2eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb8c8a93-fb4c-4654-9f0a-93ef17983271",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff3c6edf-89cd-4857-bd72-2c82f7ae3c5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74f3b81b-b562-4e36-988d-7d8e1c693535",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9d03b45-1ea8-4f3d-85f0-73955ca113f3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ddfc6a79-be23-4a67-9a26-bbed1815f494"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fb66b41-5b1b-445f-92a3-6d8f216d9078",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd4f4257-42ca-4b62-a4eb-be2f34b27e89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdea5026-41ba-41e1-9db1-0633a7bed4ef",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51ef752d-d550-423c-b36a-753dcb81eec5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a539304c-c4a8-4712-a7de-13437cb40408"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2126671c-f5a8-42eb-83b8-723d43fccaf6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "befa6223-69dc-452c-92e8-3f7ff30e9626"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "69c9086a-c5eb-4b2a-81f2-08cad08d599a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "87e715b2-3991-4056-8ce2-2e613ce91083"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cd11cdf4-0200-49bb-a6a4-08be74ed4154",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cce68416-293e-4d29-8abe-19c860c1f9ff"
                    }
                  }
                ]
              },
              {
                "id": "820ec653-83f8-4767-a187-ec090c6e16aa",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b5d04c97-b886-4ea6-a94d-447d0a0a7e2d",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d648889-829d-4ed9-b1a8-73d334206a7a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "5afe44ec-dd55-4500-945b-acca18bbcb7d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe44cfdb-f54f-4f6e-a6d4-cd89c41dbae5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "32810046-35ce-4d95-a12f-67c105f02ff9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "229744e5-2c87-44fe-8eb8-f1157c8272ce",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0fcbe5a-63cd-45b6-b575-0052d42cadd5",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "8b039a5c-1bb4-436a-83c5-81f2ebd47197"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71452a89-502a-4941-a12d-d65ce507bdbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8dad16c5-d096-4cf9-8132-0300eb974964"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3a825e9e-74eb-4120-a218-2e6ac0cea868",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "607c8299-c3f0-4155-86e2-6cf2d002c32b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f6abd677-00eb-41b3-b327-21282a53879c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ed211b2b-425e-40ee-8032-ee3b99fad27a"
                    }
                  }
                ]
              },
              {
                "id": "9e6db0e8-a31c-40fe-85e5-e5b01998d35e",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "19fe8433-be00-47a1-8504-c8d45bf863fc",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3ed5b2e-d796-44f3-abf0-bd260cb9f414",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "4eb2a349-b81c-440c-8096-03f733cb271e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e2c4e29-ee20-4968-b661-f829cfc94fea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6656232d-454d-491b-bf3f-f92408bc0a53"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "6cc22098-c55a-4491-9d45-334c46e15708",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b1e767f0-e210-40df-9553-bd7b3c08c235",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e2bba16d-a0a1-4194-b0ef-0fc021756f38",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "888873c8-a03a-43e5-995d-5fa10224c310"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "095324d5-c720-4174-9e96-c0521aa50c04",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "674dd7fc-025c-43e6-a9fe-a55ec4690691"
                    }
                  }
                ]
              },
              {
                "id": "544f1df4-287d-46af-8ce2-eecae0706c48",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "94104480-0ced-45f8-8937-9fc254d54231",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "f07cf359-1984-404d-8a32-dc087bdb440e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0f4df55a-da19-464d-9012-bdc20bec55a8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "79237939-8093-47db-8758-6e6d54a84a44"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "08a1f18b-e154-4fda-9ded-6496c3acfd1e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "59118487-f26d-48fd-a7c2-22fbb9cef7ce"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ccdf05ab-cf73-47af-ba5d-3a7360b987f7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2d42f023-5086-49eb-8758-bf30fdc0e5ee"
            }
          }
        ]
      },
      {
        "id": "0b804ae8-ce32-495e-af8c-92e6d3b85474",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "c13e199a-f849-4de2-b063-dd22fb54e33d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f451f8ad-56dc-4d7c-b6c2-72d444d49c42",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a06edaeb-aa69-473f-b2df-ef1a6263aa30",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a58706c6-63bc-4d23-95ca-0f8562ee078b",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "73373650-ffc4-486e-91f8-9ac25b1b41e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a23755a-1daf-47e4-a28b-aff4e3b78b37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e418a17c-16a3-48d8-b1a4-32e9049bfa3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d6a7aeb-92ab-4d9d-8741-3d163eb74021",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "068d79a2-7718-4d6d-81de-a9e91e2459e8",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "bc1a77a4-bd75-45be-ba2a-412694a634f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "169215ad-5dac-4d5f-82a2-2f5cf731c9ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c382d96e-34f1-412a-b0dd-5c18f15aef93"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3b7a2777-1c48-40b5-ba05-b905e38f585b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "340fc07a-87e6-41a7-b180-337bf2425c50"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e487a437-70d5-4c08-be0f-9e367b5f3b1d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7f739532-efdc-449c-b0b1-ba71906dae02"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "096342e9-c321-47b9-a8e3-b9b5f4ca3dda",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "0d0c53d9-55f1-49d6-98e1-a2100bcd2144"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "55dedcda-12c9-4fd1-bf8d-d75977357321",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8a0be06c-2d65-4cf0-af71-2036a3b11f96"
            }
          }
        ]
      },
      {
        "id": "2f6be452-8a04-4319-b0f0-19c5c35cf464",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "27d97f72-97e5-42e3-abb5-c6eaa910b60f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a0bdc235-48c3-45a2-806e-919ca6716736",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2ca5d2b2-af90-40de-9717-8ded6fd4edad",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33fb2bd6-e8c3-4f80-95bc-8aab473bdf09",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "ee647c82-0200-4cf5-be74-2ffbf1664fe5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1164166b-b591-49a9-8e48-6bc586db20f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7e3a19da-bc17-417d-b45f-aa14a5b0fab3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a9c3fba-5b5e-4a34-bcca-c7dd53796022",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "faa2311f-d96d-4927-a53d-7df8b7363103",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "76a2a198-f2b9-458c-8ddb-8b81d507431f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d230861-d654-406e-8aa9-fae6542af630",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f490119f-812b-4ccd-ae55-140f0de4238e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c8769463-c6c1-433b-95b6-bcc4b6e551b3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "128b7067-29d1-4a38-99b3-aaaa8ae380e6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "005b5e02-9a3c-4904-b005-f2e951e2e77d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a8d42d35-0d96-4ee1-9900-f0a547f62e32"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a0d12ec8-66fd-4cbe-8897-495d06523387",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "94703ed4-9f24-4b5e-a3e3-b3133a464c35"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "09ea9b83-684b-4083-a919-da92d2de8753",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "316a24ef-b406-4ff9-bf7c-838c4254e11a"
            }
          }
        ]
      },
      {
        "id": "f9923f18-0645-4b07-b13f-7cbd3ccad332",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "36b4381a-c564-4083-9b28-7fb62047087d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5b18a126-f5c8-4a0b-a08c-06ff83c3d3d9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ac4cea3c-717e-406f-8e6d-bf1c03a94ae2",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a39f712-c58a-48fb-b877-83720a839a4b",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "2f0dcb30-e2b5-4b63-9eb1-fffd7062c79c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36bcac8f-2714-4876-9986-4323c25d0d67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a0f4b645-fc5b-4db8-8f02-c2003fa171f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2bc09f2-6728-4348-afc8-d7bc971f898a",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd6ff58d-2e82-4baf-ab5d-af107d6c99d2",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "9c8ec646-db6b-4868-bb22-6522e2ce6f8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41301bbc-bdcd-4ecd-af32-b0c4c51cc980",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b6a17456-d235-4bf8-b80e-c73ad10c5e2c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e0cd5b1b-3334-4cd4-b4cf-fd27f9a9d083",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "07879250-0588-4dbb-917f-636431b04482"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "68a585d1-0276-43ab-8d24-ec75e8998374",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9744349f-4d02-4bd6-ae1f-5ede45dfa100"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a396db97-d69a-4ef6-ae6f-0565804dc48c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "8da08e6f-f7d5-4d1f-b068-ff7a2e6a636b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "67c9dc02-8406-4936-af37-3badb08af81b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e1ef32d0-de48-4dd0-bf35-d73d8da88acf"
            }
          }
        ]
      },
      {
        "id": "da6cd431-8302-4c38-821b-d909a361153d",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b0b1bcb4-5787-437f-9a08-8f6af96073fa",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "34e2440c-7303-4405-bee4-be1dec788475",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "f2469687-8e83-464b-9f6b-5bc325649df4",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4ddf4f5a-eb01-426f-9e57-9b5e181b88f7",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5c58b21a-e656-45b7-a8bf-323dae01b211",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1901,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 259,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 511,
        "pending": 0,
        "failed": 44
      },
      "testScripts": {
        "total": 955,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 946,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 245.04633204633222,
      "responseMin": 26,
      "responseMax": 5403,
      "responseSd": 642.0428889197474,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1677544874275,
      "completed": 1677544948184
    },
    "executions": [
      {
        "id": "32d717f2-ecc9-43d6-a0ae-b75c4b65a06b",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "fb71eab5-6c25-4bc6-9bdf-d3121faa3349",
          "httpRequestId": "aaec8059-74a4-4dff-be92-7b3fceb46188"
        },
        "item": {
          "id": "32d717f2-ecc9-43d6-a0ae-b75c4b65a06b",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "621afe37-5e09-40a4-94c3-4f1e8979d59a",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 0
        }
      },
      {
        "id": "fadd8559-4e5e-452f-84e6-7dda135b5be8",
        "cursor": {
          "ref": "b8e4093b-085d-4c66-8572-d5d40be84662",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "b5bd4233-f66d-42ea-b32b-2d3963cc7616"
        },
        "item": {
          "id": "fadd8559-4e5e-452f-84e6-7dda135b5be8",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "b663b1a6-49c8-444c-8974-87ab0423ed75",
          "status": "OK",
          "code": 200,
          "responseTime": 26,
          "responseSize": 0
        }
      },
      {
        "id": "28c95273-682c-4898-8909-bb622c162792",
        "cursor": {
          "ref": "dbfd53e9-ec1c-40ff-a08e-5081fdf78da3",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "c44b06d2-4930-43e1-8ec2-7e694421c6ef"
        },
        "item": {
          "id": "28c95273-682c-4898-8909-bb622c162792",
          "name": "did_json"
        },
        "response": {
          "id": "33fa79cd-337f-47f2-912f-8f3dcea02e9c",
          "status": "OK",
          "code": 200,
          "responseTime": 452,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3c42b62-857e-4ee9-bcfa-c188e17e6e59",
        "cursor": {
          "ref": "c8d88ee2-62ea-4e19-a06f-a529bf955ee8",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "5c104420-cfae-4a0e-b5d2-619a7960ba48"
        },
        "item": {
          "id": "a3c42b62-857e-4ee9-bcfa-c188e17e6e59",
          "name": "did:invalid"
        },
        "response": {
          "id": "0974a023-f36c-4221-8e13-e5a44c0dfd51",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1211,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "a3c42b62-857e-4ee9-bcfa-c188e17e6e59",
        "cursor": {
          "ref": "c8d88ee2-62ea-4e19-a06f-a529bf955ee8",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "5c104420-cfae-4a0e-b5d2-619a7960ba48"
        },
        "item": {
          "id": "a3c42b62-857e-4ee9-bcfa-c188e17e6e59",
          "name": "did:invalid"
        },
        "response": {
          "id": "0974a023-f36c-4221-8e13-e5a44c0dfd51",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1211,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "b6133a56-1787-4c64-b8e6-1723bf875aaf",
        "cursor": {
          "ref": "60ed5160-3c90-46b3-9181-e25f871c1d91",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "e0870b17-4285-4fcd-bccd-f577719f6ab4"
        },
        "item": {
          "id": "b6133a56-1787-4c64-b8e6-1723bf875aaf",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "4fdf52b5-658b-42c7-96c9-747a7ca53d0b",
          "status": "Not Found",
          "code": 404,
          "responseTime": 60,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ed67710-df32-42eb-8bc9-6eddc1a69806",
        "cursor": {
          "ref": "77a1bc32-eb0c-4191-a1d7-21e0af82a637",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "deaf0d3a-400e-4203-a4a5-6998a6b80c1d"
        },
        "item": {
          "id": "3ed67710-df32-42eb-8bc9-6eddc1a69806",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "bc0e5ba5-f6f2-4f15-a1dc-475740475d4a",
          "status": "Not Found",
          "code": 404,
          "responseTime": 65,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7382641d-4722-4733-b920-fb9b9d8929f7",
        "cursor": {
          "ref": "dd722b64-2b6b-4a45-b184-6029293ed560",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "f3bb233c-f8c5-4683-90a3-ce753beae93c"
        },
        "item": {
          "id": "7382641d-4722-4733-b920-fb9b9d8929f7",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "aadb9429-ab60-4c26-b478-ba9831a34677",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 62,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "a4ee6cec-8f51-4702-b527-3e1190a92e3b",
        "cursor": {
          "ref": "6b7cd825-5431-4f44-890e-3f341e207d87",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "543fb834-8404-44fd-9259-83e45a4c60ab"
        },
        "item": {
          "id": "a4ee6cec-8f51-4702-b527-3e1190a92e3b",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "d5ef0e43-465d-4634-9ebd-04d79ea84c30",
          "status": "OK",
          "code": 200,
          "responseTime": 62,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "a4ee6cec-8f51-4702-b527-3e1190a92e3b",
        "cursor": {
          "ref": "6b7cd825-5431-4f44-890e-3f341e207d87",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "543fb834-8404-44fd-9259-83e45a4c60ab"
        },
        "item": {
          "id": "a4ee6cec-8f51-4702-b527-3e1190a92e3b",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "d5ef0e43-465d-4634-9ebd-04d79ea84c30",
          "status": "OK",
          "code": 200,
          "responseTime": 62,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "43488f1b-17a2-4a46-ae6b-a3e66203ffe2",
        "cursor": {
          "ref": "aa955e80-0eed-43cd-81fb-904382bb8a22",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "85f29822-8b7d-4797-b11d-94cd514b7279"
        },
        "item": {
          "id": "43488f1b-17a2-4a46-ae6b-a3e66203ffe2",
          "name": "identifiers"
        },
        "response": {
          "id": "d32764c1-8070-4c8b-b05d-08b6f1248882",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da9cf736-fcfa-4ae2-955d-f9710b304f8d",
        "cursor": {
          "ref": "006e5e94-29b1-4bc4-9e39-126883bf2c8d",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "28d67596-048a-4fc9-baff-a529ec1ce0e5"
        },
        "item": {
          "id": "da9cf736-fcfa-4ae2-955d-f9710b304f8d",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "2604815d-69f2-4f3e-bc97-04bd93b1a8f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da9cf736-fcfa-4ae2-955d-f9710b304f8d",
        "cursor": {
          "ref": "006e5e94-29b1-4bc4-9e39-126883bf2c8d",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "28d67596-048a-4fc9-baff-a529ec1ce0e5"
        },
        "item": {
          "id": "da9cf736-fcfa-4ae2-955d-f9710b304f8d",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "2604815d-69f2-4f3e-bc97-04bd93b1a8f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0f18da1-f890-4325-a658-b5b76e8f7ce4",
        "cursor": {
          "ref": "bf960a42-be1b-46d4-bb02-ae543435a965",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "2d16b881-318a-45b8-bf45-0fd4e3635a4f"
        },
        "item": {
          "id": "a0f18da1-f890-4325-a658-b5b76e8f7ce4",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "b567aac7-770a-41e7-8e09-247ed5840df9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7823b0b6-e1fc-4942-bc52-5d1c1287bde6",
        "cursor": {
          "ref": "777952d3-a9ae-49ce-99a0-15d74f0fa553",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "c03aaec2-fe37-43ef-9c2e-ec1c781c98df"
        },
        "item": {
          "id": "7823b0b6-e1fc-4942-bc52-5d1c1287bde6",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "319b4aef-3ed6-4463-867e-f4210c8785c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0024870-a369-4dc5-93d0-8c0eb27ca138",
        "cursor": {
          "ref": "f4d30b83-9ba4-47bc-924f-96afd63d5032",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "60c82488-5f7f-4ab8-a512-8b8e7f6f501b"
        },
        "item": {
          "id": "d0024870-a369-4dc5-93d0-8c0eb27ca138",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "0bf7a724-6d1c-49e8-909f-1559d2c22aff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be675c68-01e5-4b58-8fbe-8e6f952c2093",
        "cursor": {
          "ref": "6f87f39c-3faa-46be-a7fa-e3a9f2df68bb",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "e9ed5a1b-d4ef-4cf7-b635-24de92f291e9"
        },
        "item": {
          "id": "be675c68-01e5-4b58-8fbe-8e6f952c2093",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "9034089c-8c3d-421d-9565-ce7a4eb80793",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "525ba036-1598-413b-8fa8-ea0fecaa1454",
        "cursor": {
          "ref": "42ee002c-9dfa-41bf-b23d-1ac038701e4e",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "0714b7ec-ea97-4ed7-861a-e29d307c855c"
        },
        "item": {
          "id": "525ba036-1598-413b-8fa8-ea0fecaa1454",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "56f14b1b-2fb3-4e64-bee8-4ce92870bb77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17907463-0671-40a9-a80c-4f24bdaf7dcf",
        "cursor": {
          "ref": "acb81747-6530-4314-91ee-fa77f9147999",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "42cd5e7e-7aaf-401f-9f15-41da5cf2bc8f"
        },
        "item": {
          "id": "17907463-0671-40a9-a80c-4f24bdaf7dcf",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "169c7e0d-c707-4548-84e2-071f74e1cf2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4930792e-2cb7-460a-a5d9-79b54e4f62af",
        "cursor": {
          "ref": "a66c6845-478a-4bb6-b921-e3aa9930241e",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "021a5bb0-d44d-40d6-9239-e5d7e8e75606"
        },
        "item": {
          "id": "4930792e-2cb7-460a-a5d9-79b54e4f62af",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "1abe85f3-acc4-458b-8937-862449ed5867",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d49518a4-7b54-47f4-ba51-888aa9706982",
        "cursor": {
          "ref": "c4bd339d-9d72-4b87-9bc7-32fa0d0dd654",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "c2b4fd31-b471-4a7e-b235-e93dac3fdd74"
        },
        "item": {
          "id": "d49518a4-7b54-47f4-ba51-888aa9706982",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "4354fa43-3060-4608-9a9a-41fc052058d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f41b9c4-3afb-46ce-923a-ee1b9493bc91",
        "cursor": {
          "ref": "b705b165-12ee-44a6-9568-abebcd9a1421",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "44ea15c8-10df-4b29-a8c8-dccbdaaa15c2"
        },
        "item": {
          "id": "9f41b9c4-3afb-46ce-923a-ee1b9493bc91",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "d28994a1-09ac-45ef-959a-4ed25106c24d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a66a4996-e74d-493d-a4f7-926d352f6661",
        "cursor": {
          "ref": "073d8815-6d1e-4862-8f1b-98a95dc00965",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "9fc5ad03-86cd-4378-bff4-c33201881627"
        },
        "item": {
          "id": "a66a4996-e74d-493d-a4f7-926d352f6661",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "4a3f10d4-50ce-4989-a78f-6375a0801343",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c6fe7c5-0d8a-466a-b3e4-0e6d6fc48732",
        "cursor": {
          "ref": "07ec298e-9551-4783-97e9-8d73ac183672",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "6e189e90-824f-477b-ab2f-4c702cf73009"
        },
        "item": {
          "id": "1c6fe7c5-0d8a-466a-b3e4-0e6d6fc48732",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "e4738698-05d8-49bb-b02d-23c86a4d3864",
          "status": "Created",
          "code": 201,
          "responseTime": 1834,
          "responseSize": 996
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "0c954cd7-dda6-48ad-be7f-57b65f35d64d",
        "cursor": {
          "ref": "15d20dfd-18cf-4635-9ac2-3b7528c2d655",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "132dc8e5-680f-4e70-8ba5-93528b3fb220"
        },
        "item": {
          "id": "0c954cd7-dda6-48ad-be7f-57b65f35d64d",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "22166d7d-7a13-4e82-bf1a-68d436bd9081",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a743b133-a466-4578-bade-2c2cef5d04ed",
        "cursor": {
          "ref": "28e96962-0b8f-43d8-a72f-540b7434b954",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "aaf97746-41be-486c-bb87-a472fdec7c81"
        },
        "item": {
          "id": "a743b133-a466-4578-bade-2c2cef5d04ed",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "3c674067-3dca-4190-ac4e-62975562cb82",
          "status": "Created",
          "code": 201,
          "responseTime": 5403,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "2d0ca13e-4989-4ac8-814f-ea4d10f73231",
        "cursor": {
          "ref": "5ea7d487-e78b-4e0c-bd6d-40ef854dbfd2",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "40713796-33ff-447e-8e95-0f454990c648"
        },
        "item": {
          "id": "2d0ca13e-4989-4ac8-814f-ea4d10f73231",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "155ded4b-637e-40e3-bfbc-6f8eb1bc3b62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f92703e9-3a9d-4421-aed3-c5983a48fcb6",
        "cursor": {
          "ref": "e0d47d76-87ec-4dd4-8ff2-85e2a4e079da",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "a4ecda27-689c-4644-b89b-44019a0cb35f"
        },
        "item": {
          "id": "f92703e9-3a9d-4421-aed3-c5983a48fcb6",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "41e40e3b-3e9d-4ff0-bd46-df5a975adb8e",
          "status": "Created",
          "code": 201,
          "responseTime": 3369,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "178def39-bdce-4830-803d-c2ac33b68c97",
        "cursor": {
          "ref": "ec24b628-e465-473d-9c66-b6a0bef83386",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "ba8093c7-a0df-4d3b-beb7-2151fcb6aef3"
        },
        "item": {
          "id": "178def39-bdce-4830-803d-c2ac33b68c97",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "8f6ffc40-78a2-4ff1-9b15-f03e8692164b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 143,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44652901-998c-4953-8794-37ab51992416",
        "cursor": {
          "ref": "78845c16-1c11-4600-ac3c-05d86bf26c5f",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "9cd6b731-602f-4ce4-a481-7e7eee8e738e"
        },
        "item": {
          "id": "44652901-998c-4953-8794-37ab51992416",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "7fdf2ab1-9065-4193-bc50-83a9b5e8319e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 118,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cac08b84-5a51-40a7-a386-30e166e9b1da",
        "cursor": {
          "ref": "d1956d36-c3af-41b9-9403-46c03a9af11e",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "d9532f43-ab47-4db5-9877-0abff36e3746"
        },
        "item": {
          "id": "cac08b84-5a51-40a7-a386-30e166e9b1da",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "c6a1213b-ff39-4541-984f-9dd6f6f77bb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66c8ebd2-a913-4e04-baeb-57e895c65702",
        "cursor": {
          "ref": "6246bdb4-86b8-44f4-9009-3c0d56926fc9",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "e3db816e-97c6-47c6-ade8-ab4dc825ba34"
        },
        "item": {
          "id": "66c8ebd2-a913-4e04-baeb-57e895c65702",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "0ea2c7cc-3dad-4675-9484-e5f8b11b9204",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03b71f1d-bd7e-47c9-97c9-3814f0207aa6",
        "cursor": {
          "ref": "6eb2c7ff-51f0-4eab-83ae-bba2762befe4",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "5c22c01a-d571-4bf6-a236-2360f4c08ccb"
        },
        "item": {
          "id": "03b71f1d-bd7e-47c9-97c9-3814f0207aa6",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "dc57e348-4c53-471f-bbba-c1db8f29d66a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2246eb48-473b-4fea-831b-1f3f1124c2fc",
        "cursor": {
          "ref": "2a53073b-f5ec-4f0d-921a-aad43d214141",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "8b55c4b5-b85c-4a73-9d82-6f973d3666cc"
        },
        "item": {
          "id": "2246eb48-473b-4fea-831b-1f3f1124c2fc",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "e0ef2afd-da4a-4b6f-aaa9-84077d04ce39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 112,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a37236e8-2051-4b5e-940d-146527371f3d",
        "cursor": {
          "ref": "93652d56-dbd1-4321-94df-e94adf90fa65",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "077dae47-0436-48ab-8d39-86dc7bfbbf12"
        },
        "item": {
          "id": "a37236e8-2051-4b5e-940d-146527371f3d",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "1d6bac5a-2e2e-465a-a64b-40d00a417c4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 140,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff9fa58d-6301-45cf-b860-0b8e7b4f7f65",
        "cursor": {
          "ref": "d5c214eb-414b-417c-812f-1fa21d296271",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "8455aa6e-be9d-474e-b20c-9c0e9c2d6d99"
        },
        "item": {
          "id": "ff9fa58d-6301-45cf-b860-0b8e7b4f7f65",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "b75772cf-b9d5-41d5-818e-260af6338c37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c600794-6f9b-41eb-b46a-1c3f9d289e95",
        "cursor": {
          "ref": "ee23a6ec-c30a-433f-9772-238541a78a15",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "b713893e-dab2-42d4-b494-47baad4434bb"
        },
        "item": {
          "id": "6c600794-6f9b-41eb-b46a-1c3f9d289e95",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "75c6833f-cab6-4e97-bf34-c2bf15e313de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bf498b8-beb0-4ae0-8c02-ae26d3f870cd",
        "cursor": {
          "ref": "75fe70be-6adb-4012-991f-07aaf932f8d1",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "35f30b6a-09e9-4a7a-b081-7293ec8fa807"
        },
        "item": {
          "id": "2bf498b8-beb0-4ae0-8c02-ae26d3f870cd",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "4a3adffe-c288-42b7-8100-1fc3389439da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 979,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "605c6ac0-076e-47df-ac49-f82cb0bed296",
        "cursor": {
          "ref": "c60c0ca8-967f-475c-b011-80273e424196",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "081c7797-946b-4844-92da-15d087c42432"
        },
        "item": {
          "id": "605c6ac0-076e-47df-ac49-f82cb0bed296",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "f57f9d30-dbee-4c20-aa7a-3fe5d9837b89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8c7cb08-4dd5-4d1c-adc2-144f21139ac9",
        "cursor": {
          "ref": "6165e691-fc57-4656-8763-a0d3f353b8f7",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "db38d76f-cb7d-4df7-8223-3872f594e721"
        },
        "item": {
          "id": "a8c7cb08-4dd5-4d1c-adc2-144f21139ac9",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "3c7cd263-b96f-41f8-8ed5-031ce5ce5954",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec6f81e5-441d-473d-9357-b2f522ae6a30",
        "cursor": {
          "ref": "e1273685-9592-4147-b753-dfc6f416527d",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "e1570061-a159-4859-bfa3-017b2bc56d19"
        },
        "item": {
          "id": "ec6f81e5-441d-473d-9357-b2f522ae6a30",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "a2d11754-8cc6-4cc2-a9eb-bb310b1a32fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "411f09e0-059d-4b13-a516-e0749c488173",
        "cursor": {
          "ref": "384d0f28-30ff-4e21-8a73-69a07dd63655",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "c704fbd2-4ca5-485d-b60f-98cebac861de"
        },
        "item": {
          "id": "411f09e0-059d-4b13-a516-e0749c488173",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "1cb88bc5-ef4b-4b35-84ab-55e22c6fcff0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1371d6c-d782-40e0-98bf-f14337a67c3d",
        "cursor": {
          "ref": "b5ef22d9-068b-4d47-bc1b-54bd43ab3465",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "e13a68ee-6747-48e0-8f58-152c40e314dc"
        },
        "item": {
          "id": "c1371d6c-d782-40e0-98bf-f14337a67c3d",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "c04d1e71-2cc2-42f2-a43a-e9954436d087",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60c90428-4cb1-4444-b483-59f5c4bd0bc0",
        "cursor": {
          "ref": "df33971f-f61f-4886-a2e5-71d783c801eb",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "46d51e67-ceb4-42ef-a815-daf061826874"
        },
        "item": {
          "id": "60c90428-4cb1-4444-b483-59f5c4bd0bc0",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "644e451c-197e-4f26-abdf-9f71f5445f0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd06f493-d0d7-4b05-989f-38d87a4aae3d",
        "cursor": {
          "ref": "b1f9ae9e-3bbe-4a85-a08d-8c467bbcee4a",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "c074e738-2a80-4dfb-b360-f800f4f68770"
        },
        "item": {
          "id": "dd06f493-d0d7-4b05-989f-38d87a4aae3d",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "a54a1038-7785-4be7-a427-1ec81685572c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdc234c6-c232-4874-9fb7-5d115ffba385",
        "cursor": {
          "ref": "ac3dfaa9-0001-4aed-b9ab-938bc6544d93",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "8dd8d72e-75a6-4759-893a-f3df0dab2179"
        },
        "item": {
          "id": "cdc234c6-c232-4874-9fb7-5d115ffba385",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "33e17034-0faa-4e05-912a-bc67e5ddf867",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef1ec79a-96f1-45eb-b8b1-59ae0740ff6d",
        "cursor": {
          "ref": "e07de492-819e-444d-9792-2e2e52cc8e47",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "c5ed6ec3-c504-4aee-af10-0fa5f0a166d1"
        },
        "item": {
          "id": "ef1ec79a-96f1-45eb-b8b1-59ae0740ff6d",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "4a2c815e-2a26-4970-89f2-b2d11ec3575b",
          "status": "Created",
          "code": 201,
          "responseTime": 2374,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "f02bd3cc-b7fa-4705-b315-0e8b280c981e",
        "cursor": {
          "ref": "90e7de89-566c-418b-a447-be2cec41d699",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "5d51e50d-9191-45a9-9e01-1c6a5ed1fe15"
        },
        "item": {
          "id": "f02bd3cc-b7fa-4705-b315-0e8b280c981e",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "177760fb-a394-4806-af07-da4e573e7de7",
          "status": "Created",
          "code": 201,
          "responseTime": 2318,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "ce73d781-ebf7-4113-93a1-7d316c9eaac2",
        "cursor": {
          "ref": "6e083c73-5503-400a-bfb8-67a838bb4c68",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "a1561ea0-dad6-4108-9e51-f17811da55a4"
        },
        "item": {
          "id": "ce73d781-ebf7-4113-93a1-7d316c9eaac2",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "7d9316aa-4ef0-4cf9-9529-91e81c0bd507",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7df8c6c-f83b-4d10-a5ad-336a41a8f7df",
        "cursor": {
          "ref": "5072978a-f9fb-491f-ac5a-a795636bb575",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "8a99c6f4-f2f7-489d-8f01-a1600591583b"
        },
        "item": {
          "id": "a7df8c6c-f83b-4d10-a5ad-336a41a8f7df",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "43a25fc4-cabb-41b7-bcc7-35c1b76c81ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edde9716-962a-4c50-830e-37289fdd1d34",
        "cursor": {
          "ref": "74c77c18-a8c6-4b7e-aab4-dde68236cbce",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "72301322-405c-4d9e-bb11-93cc22280f3f"
        },
        "item": {
          "id": "edde9716-962a-4c50-830e-37289fdd1d34",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "9001ddbc-2509-44e4-aa9c-3296affd5c84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13e083cd-7cae-49d8-872a-5fb842fb28a2",
        "cursor": {
          "ref": "b16f2a31-fa81-4c45-8b91-dd7f1d4335a8",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "4640b90d-830e-42a4-bc4b-913d0df0d330"
        },
        "item": {
          "id": "13e083cd-7cae-49d8-872a-5fb842fb28a2",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "74be32b3-57f2-4d7d-9792-a174967458fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2d2a233-2b63-49ad-9bc7-49847c926045",
        "cursor": {
          "ref": "337b4ca7-ade9-4d41-b5e7-ff5a9e454d44",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "16266785-729a-4199-82f0-deecfdb85718"
        },
        "item": {
          "id": "d2d2a233-2b63-49ad-9bc7-49847c926045",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "bdf22022-8d76-418c-af78-ab6f31c22c1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb0aa8b4-c3ef-4aae-9877-9caebb84892f",
        "cursor": {
          "ref": "f8d3ff6c-93d8-4a5d-ba7a-82e0062e3683",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "28290360-d94f-4254-8f0f-6f496cc5e048"
        },
        "item": {
          "id": "bb0aa8b4-c3ef-4aae-9877-9caebb84892f",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "ef496c3c-74e4-4499-867f-24c365061c93",
          "status": "Created",
          "code": 201,
          "responseTime": 1836,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "00b9dda4-2879-4a03-916e-2024ed3acb4e",
        "cursor": {
          "ref": "330e01a0-1750-4800-a594-7aaf9916d7de",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "3c1babf8-ff4e-4ab5-9504-5c240aba2507"
        },
        "item": {
          "id": "00b9dda4-2879-4a03-916e-2024ed3acb4e",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "47c97d71-0df6-4032-acbf-a1467db667f8",
          "status": "Created",
          "code": 201,
          "responseTime": 2296,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "657fc7d2-3db8-4ff0-b369-4056a973d090",
        "cursor": {
          "ref": "28b8ec3f-7bed-47bf-b788-534f994aaf47",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "fae78f49-3943-42b9-9a33-cb5f78f7ce25"
        },
        "item": {
          "id": "657fc7d2-3db8-4ff0-b369-4056a973d090",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "79d68cdd-d4e7-499d-8e54-511d2ac9e88b",
          "status": "Created",
          "code": 201,
          "responseTime": 2284,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "b98e3867-50d5-4f27-b0ef-8872722414d3",
        "cursor": {
          "ref": "9c2dd06f-a14c-42b6-b4b6-0b47b2d8d6f2",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "b0235ef7-24f5-46b8-8a65-f0d52f3e8cd0"
        },
        "item": {
          "id": "b98e3867-50d5-4f27-b0ef-8872722414d3",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "7366d491-da71-497e-b9df-3d8fe19dcbd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd3bb0ed-80a4-4150-b3be-23f1269f97c3",
        "cursor": {
          "ref": "1e60c69c-e7d1-49dd-a405-a49af067b867",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "7a206466-0097-4745-b2b5-6952c82ae8e4"
        },
        "item": {
          "id": "dd3bb0ed-80a4-4150-b3be-23f1269f97c3",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "1931a6b5-ca53-47da-ba88-46b44c7ccb7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 112,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ad72ae7-e0aa-4939-9b47-5e6359c82d94",
        "cursor": {
          "ref": "f424103c-3170-4df5-89de-ea52a7e95ad0",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "95b51d15-790a-4b01-afb3-316b3b37cd41"
        },
        "item": {
          "id": "4ad72ae7-e0aa-4939-9b47-5e6359c82d94",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "bb743560-e6aa-413b-9603-29aeba57a635",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 156,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6219255-2cd5-496d-ae39-5c0fe8d79153",
        "cursor": {
          "ref": "fc8e8820-9fbe-410b-af75-bef941fb9428",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "0147e241-172e-4506-b920-c4fd8ff3ea87"
        },
        "item": {
          "id": "b6219255-2cd5-496d-ae39-5c0fe8d79153",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "d6bf48f5-6ca7-462f-8b5c-49e37acd4161",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 122,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2da7c82b-bf9d-4a94-a65b-f48f67e72f44",
        "cursor": {
          "ref": "b954d57a-ae28-4e63-8c0b-57f8056449f7",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "730f6d1d-3ba5-49ea-b691-56f32a2cf927"
        },
        "item": {
          "id": "2da7c82b-bf9d-4a94-a65b-f48f67e72f44",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "f430cc13-97b4-4459-a35e-b349e8c25179",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f31ed526-e799-4d08-b0a6-2d8d710b3817",
        "cursor": {
          "ref": "d16e5c9b-0e03-460d-a9e4-91e812df8f8c",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "87ae135e-a222-4791-bdac-3ecad5a2e138"
        },
        "item": {
          "id": "f31ed526-e799-4d08-b0a6-2d8d710b3817",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "8c8aa5c5-2fe0-491b-815b-1e927e8533eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8184d93-ded5-4414-96e2-825feaa01bc1",
        "cursor": {
          "ref": "8f853830-1747-4515-a1ed-2976f26db965",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "d3d61921-1113-4626-b7d5-3b07f279aa2b"
        },
        "item": {
          "id": "b8184d93-ded5-4414-96e2-825feaa01bc1",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "5bd65c4d-91c4-43f6-b12b-1570a550ac97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e48adf0-b4b6-4b6e-9d31-d4f1173165cb",
        "cursor": {
          "ref": "5be8a4a1-3c48-45a1-b05e-a997728aac1c",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "9c5714a1-aba3-4e56-b11b-770abdd5fb8d"
        },
        "item": {
          "id": "3e48adf0-b4b6-4b6e-9d31-d4f1173165cb",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "3182a284-bc9e-4e24-ae7f-687636b3b7cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a02f1cff-9f92-47ea-9e5e-7cddb9dad02f",
        "cursor": {
          "ref": "b6de55fd-a9ba-429c-9180-edded645b6ad",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "c3a07f10-56ba-4efd-96fa-298668449b69"
        },
        "item": {
          "id": "a02f1cff-9f92-47ea-9e5e-7cddb9dad02f",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "8ec8af71-8995-49f8-9622-e0d80f389822",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6975fc01-34a6-40d2-8dc3-d09b50e90907",
        "cursor": {
          "ref": "7db35567-fbb4-4614-999a-acfd80f1f9ac",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "7a7bb249-61ef-4fff-97b8-b19426a332dd"
        },
        "item": {
          "id": "6975fc01-34a6-40d2-8dc3-d09b50e90907",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "252d6ffc-a9a2-4de2-92b9-a6eac4c055e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15b7b5ea-9cb5-4670-9588-f7b26f222ee4",
        "cursor": {
          "ref": "929d33e6-c61c-4465-9a13-d7f48b587410",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "d1bfb2a6-8b44-47dd-b085-18434093cc13"
        },
        "item": {
          "id": "15b7b5ea-9cb5-4670-9588-f7b26f222ee4",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "bdb0dd04-f50c-4268-b6b4-ad22b52c4952",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "490479ed-20aa-4975-b427-32af8f58c93d",
        "cursor": {
          "ref": "dff5fd4a-94eb-4389-8ea3-3f5db0e138a0",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "3d81278a-5dc9-44b2-8668-1586929e2cb7"
        },
        "item": {
          "id": "490479ed-20aa-4975-b427-32af8f58c93d",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "7f096b99-d98e-404a-943b-d7bcac8cff59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22b47da3-9063-4998-9547-e396f581c77a",
        "cursor": {
          "ref": "91a62e68-871e-44be-8973-ab41652afb8a",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "44b25de2-83e3-4fe1-871b-901918fb0044"
        },
        "item": {
          "id": "22b47da3-9063-4998-9547-e396f581c77a",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "4d262cc4-9234-4947-a632-e5b8bfc91912",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d954d29-6b0c-41b5-a905-825e5b6a9b83",
        "cursor": {
          "ref": "5ee8463c-2fd0-435c-a5a6-73af848ed79e",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "9e9bc1ab-3c41-4394-838e-cdfdebb94792"
        },
        "item": {
          "id": "3d954d29-6b0c-41b5-a905-825e5b6a9b83",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "fd77b767-f5f5-49a2-be2a-b12397b5a23d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ce2693e-8418-441e-9bb4-95e42635c4d1",
        "cursor": {
          "ref": "b35dca9f-5f62-4a0a-88ad-333329a6beef",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "c1a91479-2876-4d27-81cf-7dd764fa8e88"
        },
        "item": {
          "id": "3ce2693e-8418-441e-9bb4-95e42635c4d1",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "0c5043e8-f7cb-452e-919b-9777a7d3428b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f47c9481-6c6a-4c81-a6bf-82933b516217",
        "cursor": {
          "ref": "cbf97919-329e-44f3-8d91-5d21ca8989cf",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "179c00c5-d98e-48da-b366-c55f618f7f5d"
        },
        "item": {
          "id": "f47c9481-6c6a-4c81-a6bf-82933b516217",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "908b272f-c88d-4081-94f7-339279c7198d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2045f9ca-7956-43b7-9d0b-a7e6870c1060",
        "cursor": {
          "ref": "aee3df1b-ca22-4a2f-9141-4c57da52d598",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "7dc0aa82-7d62-462a-a537-7fb3f13f4f9e"
        },
        "item": {
          "id": "2045f9ca-7956-43b7-9d0b-a7e6870c1060",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "3cd96a9f-547f-4371-96dd-2007130edfc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7091f193-12e7-4033-af7b-ad9fc56240c3",
        "cursor": {
          "ref": "ce8a1150-5e15-4076-8be3-9cc6631c26ee",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "e6461ba4-37d1-41ed-8ef8-728983929724"
        },
        "item": {
          "id": "7091f193-12e7-4033-af7b-ad9fc56240c3",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "6e406157-c349-4275-9877-0db64228b643",
          "status": "Created",
          "code": 201,
          "responseTime": 2064,
          "responseSize": 992
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "048fc96f-f43f-4bd9-bca7-0ab8a6b140e0",
        "cursor": {
          "ref": "494b00aa-854e-4247-a00f-57a7268a4754",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "0f8465d3-ccd1-4c32-ad96-0ec6fb2f4dbd"
        },
        "item": {
          "id": "048fc96f-f43f-4bd9-bca7-0ab8a6b140e0",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "1d8709a5-606f-4036-8d04-14c7785a5615",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a68c24f-05ca-4be1-a583-2013fecc0d5c",
        "cursor": {
          "ref": "89c7feca-d45a-45c0-9735-3ce981cc4469",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "796dbbdc-1ca3-4042-ab88-c8e43276e4d6"
        },
        "item": {
          "id": "7a68c24f-05ca-4be1-a583-2013fecc0d5c",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "bbe00ab1-ae2b-4e3b-85e5-46b7d2e883a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3e376c7-a05f-417c-bae8-4cbe017229be",
        "cursor": {
          "ref": "fbddb184-925d-48d5-9e58-be91564ae04a",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "93120aaa-2692-422f-b57d-c4d676e97b7d"
        },
        "item": {
          "id": "a3e376c7-a05f-417c-bae8-4cbe017229be",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "92c18e26-b24e-4bf3-ac07-c6b57528dccc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 145,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "316ad398-493c-43d4-a7ce-becd0857be68",
        "cursor": {
          "ref": "17b663d7-acd6-4980-9235-4d1a01eba43c",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "78ad1555-23e7-48bd-975d-228652d0e1a7"
        },
        "item": {
          "id": "316ad398-493c-43d4-a7ce-becd0857be68",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "46b87f84-fe2e-4332-b638-8dc461f43138",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9e5cdac-500e-4b8e-8164-b4fc547fc058",
        "cursor": {
          "ref": "7daf9f59-2c10-4efb-ab28-b5dfe2698a00",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "0017bd99-8fa4-4a48-9fd6-cec086e6e979"
        },
        "item": {
          "id": "a9e5cdac-500e-4b8e-8164-b4fc547fc058",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "0a96dff7-f4f2-4264-b09e-142eaeb8b38a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bc31324-a3f5-4c08-8959-5786536ff26e",
        "cursor": {
          "ref": "6848a561-9347-48cc-816f-2004492cc505",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "46b911d9-52c1-4181-8e49-fb5b90a377e7"
        },
        "item": {
          "id": "0bc31324-a3f5-4c08-8959-5786536ff26e",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "6d4a274d-df72-4006-a30d-f964db7cc26a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a01404d-c9c2-4f2e-a14e-a91d17532d0a",
        "cursor": {
          "ref": "bec41ae7-b620-49f4-9d65-2ec6ef045c43",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "f6693277-206d-4a30-b39b-511fd071e6a1"
        },
        "item": {
          "id": "4a01404d-c9c2-4f2e-a14e-a91d17532d0a",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "79f3d3ee-a357-4c8f-8083-ea46f0127fea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dd51778-004b-4d59-9e06-e630f6793896",
        "cursor": {
          "ref": "b327bdbb-fd44-4f4e-b86d-937097473837",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "9ec577a1-e349-4ecf-9379-528d07591a8e"
        },
        "item": {
          "id": "6dd51778-004b-4d59-9e06-e630f6793896",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "244d3d90-8901-4a2c-9fa8-7f511f3e5d88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce2fe806-0e80-41c4-b521-19d0dd68d9be",
        "cursor": {
          "ref": "cc8780ef-97ce-43df-8447-e15fd463848e",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "37ffa7e9-e47a-45de-8727-0ca1fffaef0f"
        },
        "item": {
          "id": "ce2fe806-0e80-41c4-b521-19d0dd68d9be",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "5f1f1dff-16e1-47d6-b3a3-ed74b8f9cd1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff91bfbf-237f-4dfb-9dfe-b1bb70ffa5b2",
        "cursor": {
          "ref": "2a3e74d8-2cfc-4989-8ae5-2c9873eea381",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "79d951c9-361a-46ec-8072-c0a8624f507d"
        },
        "item": {
          "id": "ff91bfbf-237f-4dfb-9dfe-b1bb70ffa5b2",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "b9da11aa-f3d0-4a20-9e7a-78b18f5da8f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4917f5a5-215b-4d4d-a6fd-89565b76d948",
        "cursor": {
          "ref": "a91ef8d1-25a5-40e5-b39b-e8bcfdda9929",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "a27fc60d-cc33-4517-b06b-5f6e9712f081"
        },
        "item": {
          "id": "4917f5a5-215b-4d4d-a6fd-89565b76d948",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "e693f99b-bf6b-4e05-8d57-953dcd95c433",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c15dd6f-7e58-402e-b7fc-dbbcc007f283",
        "cursor": {
          "ref": "e7ba4da3-dd60-4027-931e-6b49f0df9c60",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "c1d94969-93de-48d8-af6e-92f749610000"
        },
        "item": {
          "id": "0c15dd6f-7e58-402e-b7fc-dbbcc007f283",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "cb4e821d-c369-46bc-95a6-89a7841a20bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3576b4d0-f3d9-404f-b4ca-6a8c214e5e89",
        "cursor": {
          "ref": "5699ec24-e581-42d0-add3-1d1a85362bc0",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "2c3c86ff-da2d-4f3c-8bf2-34af77f34da5"
        },
        "item": {
          "id": "3576b4d0-f3d9-404f-b4ca-6a8c214e5e89",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "122db148-550e-44c3-934b-f9f251e65ace",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a802800-f1b6-40f6-914e-e55eaaa2b525",
        "cursor": {
          "ref": "7d8634bf-6904-4eae-9c32-63274256d423",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "68c4e03d-c56b-4dd0-abe1-3f4f03413cf2"
        },
        "item": {
          "id": "9a802800-f1b6-40f6-914e-e55eaaa2b525",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "11aff49d-2415-4b46-8d5a-38e1aded12a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd7ad482-2581-46d4-b31d-c66f2890bbee",
        "cursor": {
          "ref": "d5adeeed-60ae-4642-a1cb-5a0b8e0b4bde",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "a62506cf-7f8f-4955-a943-48f6047dd316"
        },
        "item": {
          "id": "fd7ad482-2581-46d4-b31d-c66f2890bbee",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "4a6be128-46ae-4edf-bb3f-dc41920277a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c946973-c4c1-4543-bf74-832550b15e71",
        "cursor": {
          "ref": "2ec7aa96-f4fb-498e-9f56-e177ce0af331",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "9ca1fac5-c13f-4695-bee8-e0b5d636555c"
        },
        "item": {
          "id": "8c946973-c4c1-4543-bf74-832550b15e71",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "ee78afdc-c623-4b75-8245-edf71c723565",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1c989b8-54fc-4201-8fb7-033666ff3f44",
        "cursor": {
          "ref": "55c3b4d9-e373-4e83-987a-f6a56fe93224",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "7c192f62-f71c-452b-a58b-b90361b2f6c9"
        },
        "item": {
          "id": "a1c989b8-54fc-4201-8fb7-033666ff3f44",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "4eadf7d2-79d8-4e6e-a396-b8357f51fa50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91868a17-b15f-4801-ae23-c819c6da7624",
        "cursor": {
          "ref": "c04f10f1-d7da-4cb1-9cea-8faeedc40d95",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "12513fe4-d233-439c-bdf4-a13a775e52fd"
        },
        "item": {
          "id": "91868a17-b15f-4801-ae23-c819c6da7624",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "bfddbc7e-79fd-4a88-8b04-971dd84db239",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76febc94-b138-45a4-a703-4c6c5e13fa94",
        "cursor": {
          "ref": "617f53bf-10f8-40ba-bd2d-31fe51086ef5",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "beb73288-196c-4e96-b807-fc4c2d93d319"
        },
        "item": {
          "id": "76febc94-b138-45a4-a703-4c6c5e13fa94",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "85b3a3e4-6c30-40da-a0a4-841132595c99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c6a44ca-1224-415b-8b6a-46ea8ae754e7",
        "cursor": {
          "ref": "c1103e44-53f5-45ce-9a18-28e9a72bc74c",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "b8d0ab03-bf43-49ec-8bf8-8c51357cfb63"
        },
        "item": {
          "id": "8c6a44ca-1224-415b-8b6a-46ea8ae754e7",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "b0ce0cca-bdd8-4276-94f4-ea8ea4c6b081",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc994b74-9fc6-4b45-a6ce-e03ce5615c0e",
        "cursor": {
          "ref": "1b0bf143-de18-460e-88b2-93a8c187c146",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "8baea041-9b9c-4cef-a5a9-787868b15d95"
        },
        "item": {
          "id": "bc994b74-9fc6-4b45-a6ce-e03ce5615c0e",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "58e7286a-eadd-44cb-915e-27681be3e456",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "336f2202-80db-4cbc-8c50-06e7c7c70a47",
        "cursor": {
          "ref": "6c60f913-d7f1-45cb-92cf-b585da286050",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "6fe98fa1-a084-4ee8-9b38-306d554c7c36"
        },
        "item": {
          "id": "336f2202-80db-4cbc-8c50-06e7c7c70a47",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "c6c29e96-077a-4645-9520-d7c2c7ad69b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c82ec61-4711-4ae6-9f70-b4b59d556cea",
        "cursor": {
          "ref": "1355e163-f588-4dff-9f35-5fe2b03dd772",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "526c81fb-c02f-4749-ba27-4e3b1f727318"
        },
        "item": {
          "id": "1c82ec61-4711-4ae6-9f70-b4b59d556cea",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "d1c19459-4203-4023-8193-5d2118f01c1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76bae5a2-f979-48fa-b0e9-b11b9bde4494",
        "cursor": {
          "ref": "f5a47bce-7fe9-4c7e-9fd9-79549db2310c",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "2fc12899-2757-4d1c-9a73-f9a23edf8690"
        },
        "item": {
          "id": "76bae5a2-f979-48fa-b0e9-b11b9bde4494",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "dd39f00f-1071-436e-aa0d-264e02d43792",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0980ef32-438e-4d64-8ea9-32dd5653bdfb",
        "cursor": {
          "ref": "06f382f0-eb72-4830-95b0-d619d2ec4c19",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "06ea7542-4c7b-4945-97a7-f23c07f19615"
        },
        "item": {
          "id": "0980ef32-438e-4d64-8ea9-32dd5653bdfb",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "9f767ec1-368e-4532-a559-62108f7d9963",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ee7fc7d-e6e8-435b-9ff4-a7b9117368cf",
        "cursor": {
          "ref": "a9c42497-3b29-4972-b5f9-7d584e910120",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "3973543d-1832-4c24-99c0-70764bc16ee1"
        },
        "item": {
          "id": "8ee7fc7d-e6e8-435b-9ff4-a7b9117368cf",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "830d8f68-2b61-4c62-9012-5fabf69039ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "450f7a4c-0609-429b-b1e2-85bdc4dac86a",
        "cursor": {
          "ref": "dfe19c85-2fa9-4c5a-a4fc-62aea0e7ab90",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "f7b4f4a6-0ff4-4de8-a5f6-1e1d918726f6"
        },
        "item": {
          "id": "450f7a4c-0609-429b-b1e2-85bdc4dac86a",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "5c8e6377-3182-458e-940e-33357e08823b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59b2c5ed-2c07-4fb6-929d-300dd65a9575",
        "cursor": {
          "ref": "c17a3cb4-9ba1-4633-8c2e-90ad7f36cd15",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "13534309-673e-40f6-9a93-d78ab7871163"
        },
        "item": {
          "id": "59b2c5ed-2c07-4fb6-929d-300dd65a9575",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "5416e517-ab0b-4d1d-aaa8-d71f011e6360",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2dd4bdaf-9ca8-4e46-b091-110d894b0cdd",
        "cursor": {
          "ref": "ad97a45b-2193-4cbe-a77d-a3eb5d58abc7",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "effccbd8-d19d-4071-9d19-41406a28bc4a"
        },
        "item": {
          "id": "2dd4bdaf-9ca8-4e46-b091-110d894b0cdd",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "40537c06-6a4e-43f4-b0ca-2a64b3f88646",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5a5c454-c3e2-49d7-a50f-efdb427e6d09",
        "cursor": {
          "ref": "6beaa9bd-6b5a-4204-8c96-0e6e76f519aa",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "4744b7cb-5dd6-4b61-bdd3-2a8eebb7960c"
        },
        "item": {
          "id": "a5a5c454-c3e2-49d7-a50f-efdb427e6d09",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "2054cc28-6c69-468f-86d7-a12df9233163",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d71ce395-93ae-414b-861d-7a5857df88ea",
        "cursor": {
          "ref": "bdf216cb-d5ba-4a5b-b9c9-52b8fa1daad9",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "37a4893b-bb2b-4fb6-ad00-c3c2c7ce5402"
        },
        "item": {
          "id": "d71ce395-93ae-414b-861d-7a5857df88ea",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "c22acd0e-3ec6-48e6-be64-ab550afd9fbc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "78e73f88-aaca-41f5-b1cd-b69166d40979",
        "cursor": {
          "ref": "1f7beb5d-6ca0-4d8a-86ff-7e00e3f36092",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "ba58bfe5-128a-4716-ab5f-6602af729a11"
        },
        "item": {
          "id": "78e73f88-aaca-41f5-b1cd-b69166d40979",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "6f8af746-6776-42d5-bf44-5183a97725bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "85a6cfcd-de9c-48a8-bcfe-c2a3d8077b8a",
        "cursor": {
          "ref": "a0f20f6b-7f7d-42e7-beb1-b329d22e611d",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "d63d2975-9166-42cc-af34-af0478d9f929"
        },
        "item": {
          "id": "85a6cfcd-de9c-48a8-bcfe-c2a3d8077b8a",
          "name": "credentials_issue"
        },
        "response": {
          "id": "f0c33122-c81e-4971-90f2-23e05e3da6da",
          "status": "Created",
          "code": 201,
          "responseTime": 2562,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "c98824ad-6e63-4fc1-9293-4eb2cd8ade82",
        "cursor": {
          "ref": "9d421def-3305-4ec4-90d1-d9cd121ba613",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "fb2fcf32-1b5e-43dd-910c-dcdb8936ec02"
        },
        "item": {
          "id": "c98824ad-6e63-4fc1-9293-4eb2cd8ade82",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "9fd85a72-3f38-4bbb-96f1-06c2fa8180c4",
          "status": "Created",
          "code": 201,
          "responseTime": 1847,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "27a9c21b-61f8-4100-ae84-239b7516ad89",
        "cursor": {
          "ref": "2c08146f-42db-45a0-a3ce-69232c498f2c",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "9c49a887-d984-47c0-bfdc-6d95a9ee3598"
        },
        "item": {
          "id": "27a9c21b-61f8-4100-ae84-239b7516ad89",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "74f807a2-54a3-4972-a077-fea49a394032",
          "status": "Created",
          "code": 201,
          "responseTime": 2289,
          "responseSize": 1007
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "79dd85d2-620e-4f15-b4c5-a7fcfe2071fe",
        "cursor": {
          "ref": "13064600-888d-4928-8bf3-61a3b07b3088",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "36373253-9698-4a8d-be99-39f2e8f659ae"
        },
        "item": {
          "id": "79dd85d2-620e-4f15-b4c5-a7fcfe2071fe",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "0cee9a08-fc31-45f9-938f-3d4cd3c558be",
          "status": "Created",
          "code": 201,
          "responseTime": 2212,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-02-28T00:42:01Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-02-28T00:42:01Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:4:107)"
            }
          }
        ]
      },
      {
        "id": "9ebf572d-4608-4f35-b151-d299e4f5ce3d",
        "cursor": {
          "ref": "0efdc947-842e-46df-971a-401f49421e38",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "6b7301eb-0074-4928-9dc5-81b8a3aba530"
        },
        "item": {
          "id": "9ebf572d-4608-4f35-b151-d299e4f5ce3d",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "8bca626b-21d5-4001-a449-a2f69041e375",
          "status": "Created",
          "code": 201,
          "responseTime": 3255,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb2c8009-977d-4ea0-8e76-7f46986c5bd0",
        "cursor": {
          "ref": "abf39c8c-4dd7-425c-a8b5-65f2b16fa12e",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "39ae8b9e-3e70-4510-ab2e-62d90a349c4b"
        },
        "item": {
          "id": "fb2c8009-977d-4ea0-8e76-7f46986c5bd0",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "67dde7a3-1aca-4d85-81d3-c61a771941ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb2c8009-977d-4ea0-8e76-7f46986c5bd0",
        "cursor": {
          "ref": "abf39c8c-4dd7-425c-a8b5-65f2b16fa12e",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "39ae8b9e-3e70-4510-ab2e-62d90a349c4b"
        },
        "item": {
          "id": "fb2c8009-977d-4ea0-8e76-7f46986c5bd0",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "67dde7a3-1aca-4d85-81d3-c61a771941ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60ba9e2e-62c0-4876-9cc8-20908ecd7c91",
        "cursor": {
          "ref": "3241f4de-ef6a-458e-a279-c2670520f197",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "a0dc9a40-7cd5-4bb0-a479-65c382f2a3f7"
        },
        "item": {
          "id": "60ba9e2e-62c0-4876-9cc8-20908ecd7c91",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "33cfaa5e-a9e7-4096-b0ee-960cbe2b9208",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebfb1b7b-9438-4252-aa25-f73e05ac0651",
        "cursor": {
          "ref": "c1c9f2e4-178b-4bd4-ab24-150680184a1e",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "2543a74e-ec30-4a86-968b-1f66e37edca2"
        },
        "item": {
          "id": "ebfb1b7b-9438-4252-aa25-f73e05ac0651",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "60b14f4c-6724-49a6-aa73-f12621a2fb28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd917991-c554-4342-bfbc-02da53ec0f8c",
        "cursor": {
          "ref": "74efaa5c-c7dc-454f-999b-a273e15aa192",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "d2b7596a-eb71-47d0-a720-d1010aab2f5a"
        },
        "item": {
          "id": "cd917991-c554-4342-bfbc-02da53ec0f8c",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "76583413-e755-4d6f-8ad5-9ee75069f02a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73f09514-dcdb-4676-a177-ac258d38d5de",
        "cursor": {
          "ref": "23e12ef7-5ad1-4db4-9eca-7150f66c7962",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "517ffcc2-aa1e-4f14-85c4-ec0cbe4f8148"
        },
        "item": {
          "id": "73f09514-dcdb-4676-a177-ac258d38d5de",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "91947459-53e3-4466-9e23-68279b5d3836",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "119f33b3-43f3-4850-8a0f-2e4b1164e9fc",
        "cursor": {
          "ref": "6c40ce5d-83c0-43d0-ac28-a681c869aa4b",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "3aae301f-62e6-4974-ac0e-146f6ce11c85"
        },
        "item": {
          "id": "119f33b3-43f3-4850-8a0f-2e4b1164e9fc",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "ecfd4dcb-bc72-42d8-9fa6-1d3a79fa23fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2decde8-ce8c-41aa-8ac3-6891145213fc",
        "cursor": {
          "ref": "ba302d2c-786d-4a6f-9c2d-5d7e0287c376",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "72c50e0f-1bd5-4d30-939e-bcf78d0d1f83"
        },
        "item": {
          "id": "e2decde8-ce8c-41aa-8ac3-6891145213fc",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "20196289-525f-4945-82cd-3d52c2374849",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bda0efaa-0d3d-4aa6-895c-23fab7513450",
        "cursor": {
          "ref": "74da08b5-0121-44af-8ef3-6390058d18d6",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "8970dabb-e868-4f61-9671-6ac5b5ff9e0f"
        },
        "item": {
          "id": "bda0efaa-0d3d-4aa6-895c-23fab7513450",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "dce90c8a-97fa-41b6-89c7-4aa92e4f1924",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6156265-320d-411b-82a5-e32aeb24e99b",
        "cursor": {
          "ref": "01a03546-3ea9-477e-befa-6d5e8c30a534",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "7db938ce-9d40-4c29-9465-82e4b2a379e6"
        },
        "item": {
          "id": "c6156265-320d-411b-82a5-e32aeb24e99b",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "69fc97f3-7146-4691-8c63-669f0e942440",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28c3fc5f-16a1-4ad2-92d6-83e95148bb33",
        "cursor": {
          "ref": "5e626ef0-d3d1-4c66-b4bf-3033385cb741",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "7222fb67-70ae-416a-9785-81f95ffca2dc"
        },
        "item": {
          "id": "28c3fc5f-16a1-4ad2-92d6-83e95148bb33",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "0f54fa30-5821-4612-ad2e-2462db2f6558",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3650a721-c38d-418b-b9f4-b602f6108a8f",
        "cursor": {
          "ref": "1762a9a4-f907-4306-a9fe-72e500c735e1",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "fdfe3cec-e1ef-438b-9a16-070868b4a7f4"
        },
        "item": {
          "id": "3650a721-c38d-418b-b9f4-b602f6108a8f",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "e402ef9f-2082-477c-a61b-650f63f4692a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d697eec-83f1-47cc-9874-d76e56c7c186",
        "cursor": {
          "ref": "361b31cc-9c2d-4c7d-9061-b0dd620a8f19",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "0f71f1b3-9950-4bc5-a44a-38930064e6f6"
        },
        "item": {
          "id": "3d697eec-83f1-47cc-9874-d76e56c7c186",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "e8edf5d6-7cf3-4e9d-b4c5-84165337cc8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25ea0b37-8271-4d6a-9d9c-e93997a0986c",
        "cursor": {
          "ref": "afadc11a-c8ae-49de-99f7-b99dcf9cb439",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "57d278c3-de2d-410d-934f-8136ffbe058b"
        },
        "item": {
          "id": "25ea0b37-8271-4d6a-9d9c-e93997a0986c",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "9233905b-13a8-4eb2-874b-b8c27fcf122e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c864b0e2-98a9-46a5-8d37-040eb4d468f8",
        "cursor": {
          "ref": "b3d1a34c-80b6-4f5f-9da7-4f2778da00e8",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "7e636b49-8958-49ef-8eb3-6ca5e076b05b"
        },
        "item": {
          "id": "c864b0e2-98a9-46a5-8d37-040eb4d468f8",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "b27453a8-c162-40b4-84cf-d96764308a49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ee79245-ae7c-433e-a6d6-645f88d17a9e",
        "cursor": {
          "ref": "17be021d-e677-41c3-9d6c-5c7b74da0656",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "d36f6ff1-8d0b-4ef3-9a23-cd27ac43467b"
        },
        "item": {
          "id": "6ee79245-ae7c-433e-a6d6-645f88d17a9e",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "93b700d6-be3a-428f-bfd2-c358510cdc33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f75d9d28-02f9-4716-b6b2-ad580f8e43fb",
        "cursor": {
          "ref": "390f49f0-2ee7-432b-bd5c-6548c3e4423a",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "c1a34978-1a65-407e-8944-ae7841907a85"
        },
        "item": {
          "id": "f75d9d28-02f9-4716-b6b2-ad580f8e43fb",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "ad7c30fa-fadc-4b95-a265-15caa84dbb16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f426778e-ee98-4e73-b290-866c028ca615",
        "cursor": {
          "ref": "ea921346-ea27-4350-ab6d-1c59abbef28a",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "f38ef0f6-4a51-4d5e-a444-9397bdb9ba2a"
        },
        "item": {
          "id": "f426778e-ee98-4e73-b290-866c028ca615",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "265cf1de-800c-45c0-94ff-f9bac5329503",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01e4de56-ed5f-40ea-bb73-63fd6f9f4f03",
        "cursor": {
          "ref": "1c27d64e-ec92-42ad-9632-ff44277683c4",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "9ef7f038-3724-404c-87b4-0df418d3f60f"
        },
        "item": {
          "id": "01e4de56-ed5f-40ea-bb73-63fd6f9f4f03",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "d7dc4b23-39cb-468e-bf51-5ef3053bebe1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30de10e0-7f0d-4e6f-a4a6-bf98d49e7409",
        "cursor": {
          "ref": "8bee2382-b3a5-4729-a099-10c10ea11f7d",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "a4406abd-6581-4448-9907-05bd00fe2b9d"
        },
        "item": {
          "id": "30de10e0-7f0d-4e6f-a4a6-bf98d49e7409",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "743c338c-0ab0-46ae-ae3b-f5f7ccced6de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c6ed4a3-c868-45e7-bad3-83147186a255",
        "cursor": {
          "ref": "9394bdd7-3115-4b54-ab7d-9a42269e583d",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "f9b67de1-5759-4303-ba6e-c063af5e800f"
        },
        "item": {
          "id": "3c6ed4a3-c868-45e7-bad3-83147186a255",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "e16bbce1-e7ad-4b60-9f0f-914d6dbaca69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fabcd4bc-cd45-4dc4-86ae-0f3999e09f7f",
        "cursor": {
          "ref": "6dc8a9bc-430f-4a93-b5eb-0033da088165",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "1f6e7f89-dbc7-453c-a6a5-f07230c944bb"
        },
        "item": {
          "id": "fabcd4bc-cd45-4dc4-86ae-0f3999e09f7f",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "1e682de4-53ad-45be-a125-2c7ddfc2cd37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb588fb4-e19b-493c-800f-bec3b8bbcd8a",
        "cursor": {
          "ref": "ca0c03f1-0386-450f-bac0-edafb1894214",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "ccb3c1a9-6daa-4177-9376-506c1280c416"
        },
        "item": {
          "id": "cb588fb4-e19b-493c-800f-bec3b8bbcd8a",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "f793bc07-7ba1-4ba9-80ea-98241bd494ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de1c610c-dc52-4b44-ad3b-50212da35eb2",
        "cursor": {
          "ref": "d8a7724d-f3e8-4088-9157-924f78a6d31d",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "1bb36dbb-ebc6-4bf1-be23-0ecdeac6e01f"
        },
        "item": {
          "id": "de1c610c-dc52-4b44-ad3b-50212da35eb2",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "b8912669-fd22-45e0-9dd5-c5a9966e9ffc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c2e9b62-dce0-45ca-a0da-fb9c151bf87d",
        "cursor": {
          "ref": "bd323b02-7dbf-4bc2-9b2e-be89e900881b",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "f900db57-cc49-4894-9f42-e0ae048315cb"
        },
        "item": {
          "id": "1c2e9b62-dce0-45ca-a0da-fb9c151bf87d",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "34da1a3d-9ed3-4ff1-b490-44f0c2416d9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54ccefee-195e-4c08-9c11-531f6b1c2095",
        "cursor": {
          "ref": "ba836a82-9592-4bdc-986a-e3fb0fda2cc5",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "72cfa989-9198-4029-a18f-0fb50e40dad1"
        },
        "item": {
          "id": "54ccefee-195e-4c08-9c11-531f6b1c2095",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "a24f97d2-0853-4d68-8eb2-ed095167d077",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14697a0c-1e06-4972-8663-2b57947fab59",
        "cursor": {
          "ref": "716fb6fe-8eef-4700-b5c4-9c4edb0c85bf",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "52607aba-d792-46b6-9819-899f6647858d"
        },
        "item": {
          "id": "14697a0c-1e06-4972-8663-2b57947fab59",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "2fd5d4f3-2a80-41e4-8657-81fc080eba1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abb6c875-b517-419e-b6b7-72a9c2bc436b",
        "cursor": {
          "ref": "0099eba9-b86d-49fb-a6a0-580a57c4bff3",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "e1626269-3a87-499a-b281-d69aa86a002e"
        },
        "item": {
          "id": "abb6c875-b517-419e-b6b7-72a9c2bc436b",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "ed6a7056-8adb-4087-9cef-b755b477053e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f633e041-c36d-456d-8536-96a6d7383072",
        "cursor": {
          "ref": "a52360ae-8068-4fb7-a1f6-7eb9b6aa4469",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "a6e27b63-eaa7-422d-a16e-c6737736e93b"
        },
        "item": {
          "id": "f633e041-c36d-456d-8536-96a6d7383072",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "47bb4be9-6d02-468d-89f0-95fd6e993ccc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "356d0565-4804-4086-80b4-e54e6f53be9a",
        "cursor": {
          "ref": "8a6985c3-ea70-4bf3-a0e9-2657c0a00b79",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "4cdc43c6-4f22-4054-8279-80b108415d1d"
        },
        "item": {
          "id": "356d0565-4804-4086-80b4-e54e6f53be9a",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "9170a0d2-e595-4ce8-bea9-234907790eda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53cfc730-357b-4f0c-9d0b-bdf961cb3363",
        "cursor": {
          "ref": "96e37c8e-2e02-4edc-a599-3246b8590c8f",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "8c4ea8f7-dca9-492e-babd-4ea83005bd1f"
        },
        "item": {
          "id": "53cfc730-357b-4f0c-9d0b-bdf961cb3363",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "18d75309-9903-472c-b5f6-a8d73d32f14c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d93831c6-4f85-4f5f-9e90-99d30e30eb0e",
        "cursor": {
          "ref": "ad64729a-e4ca-44f3-841c-b6a8cc240384",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "7652d850-7887-43f1-b057-f45602293c04"
        },
        "item": {
          "id": "d93831c6-4f85-4f5f-9e90-99d30e30eb0e",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "aaecd34d-b449-4d8a-8e65-3a70474dcf61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3029b5a5-97d1-4eec-80a4-74813a5c8d7d",
        "cursor": {
          "ref": "44ecd97b-2dab-4345-b4d1-609fd2e94215",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "56d10261-53d9-4cef-b0c4-9287bbe3ef31"
        },
        "item": {
          "id": "3029b5a5-97d1-4eec-80a4-74813a5c8d7d",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "033127f3-df0d-49ed-8f7a-138aa53669fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecedac6f-12a5-400b-bcca-14cb80e3b44a",
        "cursor": {
          "ref": "924177ad-75ef-4abe-8a9d-321179701f36",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "74b4facf-f056-46d5-ba6f-fec5e78a7305"
        },
        "item": {
          "id": "ecedac6f-12a5-400b-bcca-14cb80e3b44a",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "3344d872-1ace-47fe-a752-8b44d2fc7bc2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "d8fdc869-7080-433d-9207-e98803c0c7de",
        "cursor": {
          "ref": "ff62b4a6-6d35-48c3-897f-400b78bfb8fb",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "0f8763c0-8328-49b5-9ce7-043601490de1"
        },
        "item": {
          "id": "d8fdc869-7080-433d-9207-e98803c0c7de",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "7eae5f44-ccb3-43f2-a363-6101ad965740",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "2a28dcce-3161-461e-80b1-8a92b14b043d",
        "cursor": {
          "ref": "ff573a0d-d43b-4f40-bebf-3fa1784d14a2",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "f95ac056-c600-453a-a936-6a6f862626a9"
        },
        "item": {
          "id": "2a28dcce-3161-461e-80b1-8a92b14b043d",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "950155aa-ab31-454d-91e2-fadabbb37ad7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a28dcce-3161-461e-80b1-8a92b14b043d",
        "cursor": {
          "ref": "ff573a0d-d43b-4f40-bebf-3fa1784d14a2",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "f95ac056-c600-453a-a936-6a6f862626a9"
        },
        "item": {
          "id": "2a28dcce-3161-461e-80b1-8a92b14b043d",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "950155aa-ab31-454d-91e2-fadabbb37ad7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89f4115d-83f6-49d2-8ff6-7ad90e71288d",
        "cursor": {
          "ref": "53547c7a-e99c-42a8-81b6-037435365b1b",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "15b31547-8a2a-428e-a758-09882facc717"
        },
        "item": {
          "id": "89f4115d-83f6-49d2-8ff6-7ad90e71288d",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "edd5547a-bcc4-49ac-b12f-6de864734faa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32a2eaa4-0a21-4259-bb24-674a3a9bd9d0",
        "cursor": {
          "ref": "bcdfb9da-b76e-4720-aa9d-82973f434c01",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "b7ed96f1-265e-4d60-9f3b-7351deb5ac24"
        },
        "item": {
          "id": "32a2eaa4-0a21-4259-bb24-674a3a9bd9d0",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "dd5bcee6-cdb9-48d2-b36b-acb156a0eab4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cbb93af-0246-4e53-858d-8b4403ec71dd",
        "cursor": {
          "ref": "395e6415-1d60-461d-8653-904c9cba2896",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "4cd5cdba-f931-465b-a672-218f4d76d19e"
        },
        "item": {
          "id": "3cbb93af-0246-4e53-858d-8b4403ec71dd",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "cfea68c6-c817-4ce6-be49-6ba4ce35abb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91f1425a-da8f-4cf1-b385-51c5c5ad8bb3",
        "cursor": {
          "ref": "4ba9d81b-38db-4dfc-8b0e-e9493e4571f2",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "fe56426f-07e8-4654-bcaf-1c8359d8d6ad"
        },
        "item": {
          "id": "91f1425a-da8f-4cf1-b385-51c5c5ad8bb3",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "bf955f7b-9814-45e9-a347-76ed70b97cbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e488cca-5792-4ce9-9611-8d74335c80b3",
        "cursor": {
          "ref": "93a226ae-36e6-4293-8692-b2d7216cbdca",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "1d303ad5-7a9c-432e-b93b-9c1eb844114f"
        },
        "item": {
          "id": "9e488cca-5792-4ce9-9611-8d74335c80b3",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "bbbb35b3-0189-4791-92ce-adf9eb949c3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "092ba372-eaaf-4e74-b289-b7a56d46aac2",
        "cursor": {
          "ref": "d55fad3f-2da4-4f65-905b-71c2bc75a089",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "1907c95c-d87f-47fa-98af-dbca92e3343f"
        },
        "item": {
          "id": "092ba372-eaaf-4e74-b289-b7a56d46aac2",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "7547823d-7e56-40f3-8cbb-866d6e09ec58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f3bf8b0-78e8-42d6-8af6-e4c860d54398",
        "cursor": {
          "ref": "22b1c89f-3039-4305-92ae-f3c6fa0c26f8",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "14acba65-2771-4d98-b1d0-df24752a27be"
        },
        "item": {
          "id": "0f3bf8b0-78e8-42d6-8af6-e4c860d54398",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "72777d55-b92e-4e5e-97df-7b157ebc94a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5a1121d-6a31-4814-9c33-7dab8a75b3df",
        "cursor": {
          "ref": "9701c0cf-508a-4e05-9cf7-a92e885d4ce1",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "f5c2cff3-1d0a-495f-8f6c-62e64b711b4c"
        },
        "item": {
          "id": "d5a1121d-6a31-4814-9c33-7dab8a75b3df",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "7abfa9bf-1866-479f-a190-1e508104e3a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87b8ecec-9cff-4016-857b-168749ae4d0b",
        "cursor": {
          "ref": "614489b1-1719-4312-b82e-d2acfb8170e8",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "a0259d4a-f4b1-42f9-afb5-8db21b5874ce"
        },
        "item": {
          "id": "87b8ecec-9cff-4016-857b-168749ae4d0b",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "cc89242a-b0c8-4048-9559-3b4037697560",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0308fcff-1976-411e-a92a-e9dc8c16299f",
        "cursor": {
          "ref": "644bc99a-1871-411a-9f68-f9b837ab81cc",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "81ce538a-796e-4a0b-a612-7988d36bb94e"
        },
        "item": {
          "id": "0308fcff-1976-411e-a92a-e9dc8c16299f",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "8a7fd0a5-528b-4695-964c-5075669edf77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9dedd81-0768-44e7-9c38-bd488a18adb6",
        "cursor": {
          "ref": "e1053546-a2f8-40b9-a6f2-bef3543586f6",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "fdd3800f-ec45-4755-bf80-5bdc96747e85"
        },
        "item": {
          "id": "e9dedd81-0768-44e7-9c38-bd488a18adb6",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "ce045b98-a65f-461e-8b85-a8a4949ecc40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad099644-34ad-4fa5-bebd-89cfe2b4d039",
        "cursor": {
          "ref": "4ebe858d-7891-41b7-98a5-3eb9521a1851",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "01f74caa-eb76-4d90-9368-f954e81cd74f"
        },
        "item": {
          "id": "ad099644-34ad-4fa5-bebd-89cfe2b4d039",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "cead21bc-f6f0-475e-a669-2f4a1096a8f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9826609-71ed-4279-96ec-e8ab3c70a53c",
        "cursor": {
          "ref": "34932893-929d-4637-9f75-2d599ce834e7",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "e8d8fd9d-19f7-4630-ad18-d3350c74e60b"
        },
        "item": {
          "id": "e9826609-71ed-4279-96ec-e8ab3c70a53c",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "7604402c-96be-4a76-8791-f14f92059e76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d3b0583-d4a6-4506-9a58-18862b62dc57",
        "cursor": {
          "ref": "2bf83da4-c810-4e6b-97f8-678117ab4aac",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "316de2d5-7bdd-4c76-a6e8-0b36ce9d0b25"
        },
        "item": {
          "id": "1d3b0583-d4a6-4506-9a58-18862b62dc57",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "63cb8606-a1f5-4f47-ab9d-a61910feb2a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc68af04-0e92-4a6b-9438-f1d543e39380",
        "cursor": {
          "ref": "1a093951-26fd-4fed-ad02-dbcaf017647f",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "52fc90c4-7752-40a3-8910-10f126db4f6b"
        },
        "item": {
          "id": "bc68af04-0e92-4a6b-9438-f1d543e39380",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "b2650266-c729-4563-8177-101e3b48031a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22caf458-be38-422d-a2e8-e496f098a67b",
        "cursor": {
          "ref": "df300264-2073-4dc9-aba6-2cfe9ae8c4e3",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "dbf496b1-9890-4812-a777-0c4149b0617c"
        },
        "item": {
          "id": "22caf458-be38-422d-a2e8-e496f098a67b",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "60772d88-cae1-45a8-a924-86dba4661f78",
          "status": "OK",
          "code": 200,
          "responseTime": 186,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "028b48a6-1eca-4d9b-99c1-17c80895bf74",
        "cursor": {
          "ref": "c4cb8edc-dd35-496d-9ddb-1c09899829e6",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "124466b7-5a5d-4a89-8cdd-94a6ccd8b851"
        },
        "item": {
          "id": "028b48a6-1eca-4d9b-99c1-17c80895bf74",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "435ad9eb-d8dc-40b8-b08c-587b53f8d5a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b06367ad-4228-4ad3-ae56-c50e42793dab",
        "cursor": {
          "ref": "fb363d65-5268-4647-b624-e39616030db1",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "9c180836-1e56-4e82-bc2b-59e8e96dc632"
        },
        "item": {
          "id": "b06367ad-4228-4ad3-ae56-c50e42793dab",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "82025b47-fa3c-43b0-9647-a3e5f46957c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "999474b1-75a1-424f-96ae-d8d4a648e382",
        "cursor": {
          "ref": "5f439565-0e38-4415-a05b-a5fba8df2d69",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "cb7dbeee-f055-40d2-a393-2e9ae03227e6"
        },
        "item": {
          "id": "999474b1-75a1-424f-96ae-d8d4a648e382",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "b419d746-4d1c-4dde-9440-a45f8950e904",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53887511-2435-478c-9c7a-ce85347698fd",
        "cursor": {
          "ref": "55d91529-8850-45a1-8501-88e48dac27bb",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "16fd763a-d22c-424b-8600-cf4a5e4abb08"
        },
        "item": {
          "id": "53887511-2435-478c-9c7a-ce85347698fd",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "a6cf151e-232a-48b2-8573-f2cf3397ae4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ee46e82-5127-4afe-9aef-d7507c12de44",
        "cursor": {
          "ref": "dc78dd90-ca40-4999-800e-983fa7a7b951",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "64403542-0e4d-42e1-b9d1-51e0d5056bc8"
        },
        "item": {
          "id": "1ee46e82-5127-4afe-9aef-d7507c12de44",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "24aa244a-0fe7-4c98-a17b-d877abc9a89d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e17d6c35-4f61-4588-bae2-8623a2dd99c9",
        "cursor": {
          "ref": "40c5d23f-011e-4c96-b00c-fff4fb5df4af",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "9bd89f8d-9665-4844-8604-0d67b41266ca"
        },
        "item": {
          "id": "e17d6c35-4f61-4588-bae2-8623a2dd99c9",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "89440b0c-44f9-417b-8838-1007244b7ac7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78cb2b2b-5ee9-4f15-ba2f-aaf409286092",
        "cursor": {
          "ref": "b600a163-b274-44e5-873b-a9482642466a",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "112cb784-c3f7-40b0-9afe-3cc2613ff390"
        },
        "item": {
          "id": "78cb2b2b-5ee9-4f15-ba2f-aaf409286092",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "5f7897b5-5824-4d6d-929e-7a39214f96e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bd5833c-e685-41e5-966c-c1d205ff2f9d",
        "cursor": {
          "ref": "051c4936-efd8-4b2e-b039-3bb8ec17bc62",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "d02ced20-643c-46cf-bd94-543c9c9210cf"
        },
        "item": {
          "id": "6bd5833c-e685-41e5-966c-c1d205ff2f9d",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "999cd3b3-4b3e-4cea-aa8f-bcd73d368b60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ef03650-9c77-4d20-ac2a-9860a0a8a8f0",
        "cursor": {
          "ref": "98d51a42-81a5-42a6-bb9e-8b9e08cc706e",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "2fe89485-8725-4e6b-b28b-6be4a37eed03"
        },
        "item": {
          "id": "3ef03650-9c77-4d20-ac2a-9860a0a8a8f0",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "f2698a03-6529-40e0-b121-65038b3feec5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "337e5cbd-d172-422f-922d-9f70d0153e0a",
        "cursor": {
          "ref": "e4a7d78b-805f-47d6-9dc6-f483e60d840c",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "4b3ccd96-f7aa-4412-b59d-ef1450069558"
        },
        "item": {
          "id": "337e5cbd-d172-422f-922d-9f70d0153e0a",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "251f18b9-bcc4-428b-b1c2-e3efcc755116",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "525690c0-d03d-4101-8ffe-7663c4f13f88",
        "cursor": {
          "ref": "3be62e4a-18a7-4a59-9e67-deaa553d1e48",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "34452f32-21be-446b-b0fc-872f1522433f"
        },
        "item": {
          "id": "525690c0-d03d-4101-8ffe-7663c4f13f88",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "8db804d5-58f3-47e7-bd7c-d9cf01629cf9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f991ad79-eda7-42ff-9857-92f0d52604c2",
        "cursor": {
          "ref": "c7cb607d-44af-4023-b805-300afc158906",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "c1fb0e9c-25fa-4d13-b012-c5575b713485"
        },
        "item": {
          "id": "f991ad79-eda7-42ff-9857-92f0d52604c2",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "d681c201-a2fc-4d30-995a-6987cc9f08e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ba2661e-b345-4906-a453-d263d9a28356",
        "cursor": {
          "ref": "8dcd1366-35fd-4fd8-8739-6151ca8e55d9",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "d5aac024-8ecb-4f9f-a7b8-8a22ab815ae0"
        },
        "item": {
          "id": "6ba2661e-b345-4906-a453-d263d9a28356",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "47761474-e999-4863-b177-663c86b3e1d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57572c3e-fcf0-4f5a-b06e-cd12d1122a7e",
        "cursor": {
          "ref": "5fc354c9-3ff3-4710-b65b-b48c9cce7b70",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "c275da9f-5004-417c-abfb-e31a46cd1c26"
        },
        "item": {
          "id": "57572c3e-fcf0-4f5a-b06e-cd12d1122a7e",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "25b8f387-e9ee-41f9-96ce-0b3e4d1029a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69f58505-1231-48fc-9fe6-a75d8e0188fa",
        "cursor": {
          "ref": "012df0c9-3525-4ca7-bd5f-a7841fcdd425",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "9781e754-5e48-4bf1-bfa1-d4deb2996542"
        },
        "item": {
          "id": "69f58505-1231-48fc-9fe6-a75d8e0188fa",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "ade7d673-5d1c-48d0-93f0-a497a79b04b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf95b583-9ee2-49d6-8b23-baa44fe1f250",
        "cursor": {
          "ref": "e9b51384-107f-485f-94d9-b8a5c7c07014",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "ba9d1414-ce74-4145-a143-8905bae9d395"
        },
        "item": {
          "id": "bf95b583-9ee2-49d6-8b23-baa44fe1f250",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "a52f82d7-71e1-4436-ae19-47d1dddb226c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2817033-ca23-4070-9537-986df9842636",
        "cursor": {
          "ref": "108741d3-8227-497a-a842-e8dfb7faad5a",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "6eae2fa7-8956-4988-b765-fb220361c4eb"
        },
        "item": {
          "id": "b2817033-ca23-4070-9537-986df9842636",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "8bb57df9-cea5-40a2-a9a0-b21f35e8d46a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1a6ec62-e65c-4754-9f5a-a410fe113010",
        "cursor": {
          "ref": "8c476606-a207-4115-9230-7e006d02118a",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "bf3e77a0-8296-4531-aba6-56914cda3c43"
        },
        "item": {
          "id": "d1a6ec62-e65c-4754-9f5a-a410fe113010",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "45d443a1-f8b9-4500-b16e-29af0d92cc44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 112,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81874623-a475-4b90-a083-50bc13190428",
        "cursor": {
          "ref": "455c9217-ec87-4c71-82c4-aad1e2f6eab3",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "cc827864-89ea-4b79-8463-5f57b7f966d6"
        },
        "item": {
          "id": "81874623-a475-4b90-a083-50bc13190428",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "5a224e1e-f579-441b-9684-5f51d8f1e300",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2853653-feca-4979-9fdd-460e9c8773a8",
        "cursor": {
          "ref": "3d5527e6-b823-4cbe-b0d9-3a20dd138471",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "4624a782-1ec7-4865-82ce-64cb2caebafe"
        },
        "item": {
          "id": "e2853653-feca-4979-9fdd-460e9c8773a8",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "c2bfea56-15f0-4f11-8bb8-2ae34ffb0cdb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b34add85-97eb-43c0-8707-26766aa2e380",
        "cursor": {
          "ref": "c24318aa-9bbe-4099-94a0-e8695e8ccf86",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "ee90feae-fc13-4a47-916f-4fce8385aec1"
        },
        "item": {
          "id": "b34add85-97eb-43c0-8707-26766aa2e380",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "ac44d855-0919-4031-95de-91249faabecb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a87e4de-d161-4996-9995-d8f97423cbcc",
        "cursor": {
          "ref": "ebe15b9a-0861-4c80-be64-aa366574508d",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "3e503a18-7bee-49f4-b182-37ca390caf97"
        },
        "item": {
          "id": "0a87e4de-d161-4996-9995-d8f97423cbcc",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "87b0d0f7-4418-497a-9076-726457d1b4a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "910aecfc-a461-4c2d-819e-e680c2e5750f",
        "cursor": {
          "ref": "4e75c155-6b19-47d1-a4e9-ba4850951d8b",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "efac4e0c-a147-414c-81b5-83074e85bce6"
        },
        "item": {
          "id": "910aecfc-a461-4c2d-819e-e680c2e5750f",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "1136667a-c91b-46f8-bdcd-c295a429b247",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80398e17-765c-4be9-8494-255a83f8d44d",
        "cursor": {
          "ref": "444f3807-28ac-4790-8034-ef6ffc061e21",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "0d561678-28e1-47f5-951c-804d4d3079f5"
        },
        "item": {
          "id": "80398e17-765c-4be9-8494-255a83f8d44d",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "f07a8e4b-f3b5-40bd-8e38-14ca1a04ee35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0965f95-22e9-408c-9159-88f18c1748d6",
        "cursor": {
          "ref": "ddc768fd-c763-4a75-a3c6-f20b075be2ab",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "cc7ab6e0-6edf-4f86-8a39-3298301c0517"
        },
        "item": {
          "id": "b0965f95-22e9-408c-9159-88f18c1748d6",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "8decf970-038c-416d-a1e3-63ed35f3a4e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0e461f8-3187-4fca-842e-789851a21f81",
        "cursor": {
          "ref": "080a2f0d-d750-413f-844a-9eded55e6c0d",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "0ee8a7ff-2eb9-4078-85c2-f81d3e0be241"
        },
        "item": {
          "id": "c0e461f8-3187-4fca-842e-789851a21f81",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "ed078efb-e2f9-45a6-af7b-22c773e4cb3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edc01de6-74ed-4fea-9709-b14e4594d051",
        "cursor": {
          "ref": "4c0904bb-e363-4894-b03b-576eab9a2e9e",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "c4717248-eb72-4f7d-a171-9ed54d46a411"
        },
        "item": {
          "id": "edc01de6-74ed-4fea-9709-b14e4594d051",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "66df2f66-d8a2-43fc-89d0-4d164aa386f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "907c8b10-5d34-4ef9-891f-fc681d6d9334",
        "cursor": {
          "ref": "be9c2476-6234-49cd-976d-3e8641addf4e",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "39cf1afe-536d-43c4-95eb-3791ad3a798a"
        },
        "item": {
          "id": "907c8b10-5d34-4ef9-891f-fc681d6d9334",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "26e26540-b159-4e42-b6ab-c6c2f6a58b96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9af365b5-f816-42b5-89a0-f16a9df3e35c",
        "cursor": {
          "ref": "583436fc-497a-48ce-8f2f-06611e03809a",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "e00dda85-6d64-470f-9aa4-fa2a9d180e7a"
        },
        "item": {
          "id": "9af365b5-f816-42b5-89a0-f16a9df3e35c",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "fc8d3e9d-b37c-4b78-8425-7519e47541b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3dbee42-8ddf-4ded-906a-2fc36c9e1beb",
        "cursor": {
          "ref": "e1dc0237-678c-4b50-8242-14af14caef43",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "becf03a5-f9fb-4b2b-add2-ce2fbaed457e"
        },
        "item": {
          "id": "e3dbee42-8ddf-4ded-906a-2fc36c9e1beb",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "85c6684f-3959-4a7e-9956-9ea5e73bb06b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ab7fca9-18d5-4a01-8ea6-3bf4946b24a1",
        "cursor": {
          "ref": "619588a5-0300-40d2-994d-b3cd46ddb93a",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "dd841db8-e56c-4473-86af-fdf4406d46f5"
        },
        "item": {
          "id": "9ab7fca9-18d5-4a01-8ea6-3bf4946b24a1",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "bd3e9118-1700-4a91-8b81-4d191f210604",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7caa4434-cebf-4aa1-866a-8408e7ef01eb",
        "cursor": {
          "ref": "be78648b-e4ef-4372-b47b-36862fc8c535",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "cb9b1908-139b-4f79-b86a-f296ad0c8812"
        },
        "item": {
          "id": "7caa4434-cebf-4aa1-866a-8408e7ef01eb",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "abb99f7c-1002-487f-95a2-eaa0bf091899",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "689761e2-6aeb-44a9-be8e-77b9f1a70a92",
        "cursor": {
          "ref": "fa80b47e-1c17-4434-9402-6f30c705db05",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "e8358ea7-f491-4a2e-a3f8-ddb60ff22a65"
        },
        "item": {
          "id": "689761e2-6aeb-44a9-be8e-77b9f1a70a92",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "f785aae4-3fea-49d2-9b55-8f389ef4cbcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d76b0a3e-d56b-4de2-a185-5e706e47c58a",
        "cursor": {
          "ref": "d10f38aa-fe1d-4e88-88a6-0bb25302ae5a",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "d73475c8-4180-403a-a4a4-a57422214ba3"
        },
        "item": {
          "id": "d76b0a3e-d56b-4de2-a185-5e706e47c58a",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "f53135e1-98ef-4a7a-bf2a-40e1a45da447",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8927bac-d5b9-4539-97a6-53237dd91146",
        "cursor": {
          "ref": "b831990c-a192-474d-b5bd-74949513cb2d",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "eb3c9ceb-f063-4a7e-b82e-48b1f194d89b"
        },
        "item": {
          "id": "e8927bac-d5b9-4539-97a6-53237dd91146",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "92125c21-7e1d-47a8-ac5b-0d2591bb4fb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd27cf04-3d0d-46d8-8dab-73a774c23f54",
        "cursor": {
          "ref": "d1a66016-9ff8-46c6-b61a-7f12e78a84c5",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "5301d8d4-d8da-4f6b-abf5-aa00040a86a2"
        },
        "item": {
          "id": "fd27cf04-3d0d-46d8-8dab-73a774c23f54",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "a6783e3e-c067-4db6-8ff1-630905d1c48e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 125,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f959551b-1485-4e03-829b-65518c7edb2d",
        "cursor": {
          "ref": "2a00f698-ae3e-42d0-94fa-7160b19868d3",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "6b234d29-5310-4b7f-9666-fa2bc527db6f"
        },
        "item": {
          "id": "f959551b-1485-4e03-829b-65518c7edb2d",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "bf74f650-f129-45cf-b319-ceaf87a08952",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b98d7ca1-e319-48f8-8166-edd5311e19b4",
        "cursor": {
          "ref": "b7424f4e-dcd1-4ad0-90bd-ae7c378bc000",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "a1716b6a-e25d-4201-afdb-df14d26c7b3e"
        },
        "item": {
          "id": "b98d7ca1-e319-48f8-8166-edd5311e19b4",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "2bde992b-dd65-48fe-8029-4a860ee81088",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be3913e7-28bd-465d-a734-16639c0b593d",
        "cursor": {
          "ref": "e3de999c-41f7-4261-b0ca-fd56a41c3b0c",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "f8c1d31d-5c45-460c-a8d3-38073e34a9a4"
        },
        "item": {
          "id": "be3913e7-28bd-465d-a734-16639c0b593d",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "38e586a8-0496-4858-8872-f8d4be447c4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9275463-75cc-4af5-aa02-1dc94264f779",
        "cursor": {
          "ref": "c464cab6-5efa-47c7-a499-b814994aa2de",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "00244f39-a25a-4ef2-9475-798c020aed8a"
        },
        "item": {
          "id": "f9275463-75cc-4af5-aa02-1dc94264f779",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "af4074f5-5f63-42f5-9502-fb1ce754a22e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a8466df-b61c-4641-b621-73056bc42b56",
        "cursor": {
          "ref": "61361996-2440-44b6-b3af-8867ba35a353",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "5757bce6-bdd3-4ab4-9e58-ec8b77a28dc4"
        },
        "item": {
          "id": "9a8466df-b61c-4641-b621-73056bc42b56",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "fbf329f1-b76e-4146-97b7-907951bc8fef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 120,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "320a8e16-cd09-4a63-8582-7f425749db82",
        "cursor": {
          "ref": "59056b46-38f1-4eef-8f2b-414f3ed7420b",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "f33384c1-4f92-48dd-928b-5d932eea12b1"
        },
        "item": {
          "id": "320a8e16-cd09-4a63-8582-7f425749db82",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "cc9dbc5b-8399-47a7-9987-13bc3da33506",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24fde4e1-b6b5-4ee2-b8c8-6f04527f8277",
        "cursor": {
          "ref": "46c86a4d-cb25-4a6d-9a6b-e2e27a066e63",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "f8d065c5-7754-4c14-8dc5-85f96baa7db8"
        },
        "item": {
          "id": "24fde4e1-b6b5-4ee2-b8c8-6f04527f8277",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "33bca56d-4feb-4745-a2e1-002fbdd2834c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7d523b6-81a2-43be-81bd-e2a79a1fd2ec",
        "cursor": {
          "ref": "79baf485-5402-48f4-8448-fc54ffc6a3b2",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "356de7de-5671-4bce-9066-e2f1a5064b80"
        },
        "item": {
          "id": "c7d523b6-81a2-43be-81bd-e2a79a1fd2ec",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "a1f199f7-9568-4d4a-9127-12ff8ffedfd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d98a393a-8a0d-4749-9f2f-fc5e08ed025e",
        "cursor": {
          "ref": "0676631c-3eb2-43f3-a593-96734fb700fb",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "3589ca88-27b5-46eb-9e14-0556a0905cbd"
        },
        "item": {
          "id": "d98a393a-8a0d-4749-9f2f-fc5e08ed025e",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "1df59f79-23ee-469d-af52-c2d5bf1e5aa8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b815c3b-2b7b-4c18-bbf9-f906a3d4fb67",
        "cursor": {
          "ref": "ee8bbcfe-ec48-4070-b361-e7edbf256022",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "c257c442-4527-4b8d-9f2c-0016e44909b5"
        },
        "item": {
          "id": "7b815c3b-2b7b-4c18-bbf9-f906a3d4fb67",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "00a65535-00c9-4185-94c9-7418e9f2a484",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c5744c1-849c-4ce7-bf1c-caaac0f47557",
        "cursor": {
          "ref": "9638c03b-237f-4f66-95ab-6cf7d637a1f1",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "8b15d1f0-e181-4316-8191-df33b1f5ebe3"
        },
        "item": {
          "id": "1c5744c1-849c-4ce7-bf1c-caaac0f47557",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "3eaa1645-5d5e-4606-987e-bf11b102ab70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8d954ca-c51a-4df0-bbe7-8fb70ef96f34",
        "cursor": {
          "ref": "c852178b-f8cd-4c93-935b-4bc9194cbb40",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "3228ff09-45e9-4dfc-ab82-d9af68e8f218"
        },
        "item": {
          "id": "f8d954ca-c51a-4df0-bbe7-8fb70ef96f34",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "032e8453-f980-47b6-895b-e96b04df6f0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a07038eb-9b34-4eb6-aec0-cc9eb190b619",
        "cursor": {
          "ref": "ea2f5488-f6e0-4278-9378-9cae44de80c3",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "f5a2b8f2-ca92-401f-a734-dad3b6392bc2"
        },
        "item": {
          "id": "a07038eb-9b34-4eb6-aec0-cc9eb190b619",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "12e5e1f4-3b55-47a9-899f-56f477940d1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44fad2aa-7c16-4118-9449-2fc7dee876ab",
        "cursor": {
          "ref": "74374bac-57d8-48b8-9048-4aafa6e8f532",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "e27a2ae0-8f6d-446d-a6ea-00c94d0a2dea"
        },
        "item": {
          "id": "44fad2aa-7c16-4118-9449-2fc7dee876ab",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "a9a46b6b-469b-47fa-a575-228aec9c79a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a88c4bd8-7f0c-4d8f-bffe-e521281cc90f",
        "cursor": {
          "ref": "0106b51c-7606-43f2-99e6-4ce48529a548",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "b9d59ec2-16b2-4186-9fa6-64dd999911fd"
        },
        "item": {
          "id": "a88c4bd8-7f0c-4d8f-bffe-e521281cc90f",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "a77299f2-2564-4f6b-a5ba-050b654c4184",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5002f8c9-3fd6-48a9-b95e-38bed5c4a93c",
        "cursor": {
          "ref": "47936ab1-7b25-41fe-a1df-24dcdf928a67",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "da8fde55-4781-4b82-94bb-9a69f7b83605"
        },
        "item": {
          "id": "5002f8c9-3fd6-48a9-b95e-38bed5c4a93c",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "c30a5f59-7ad1-4752-a6b9-183cd3dd3473",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b5f4a2e-dee9-4f9e-a5b9-57b3ec4b0a29",
        "cursor": {
          "ref": "f7a2ac87-f275-48cf-80e2-7186b31d7133",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "ca855f37-9bc4-42ce-83ed-6ddf9c06e52c"
        },
        "item": {
          "id": "7b5f4a2e-dee9-4f9e-a5b9-57b3ec4b0a29",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "2ef5bfd0-bb4a-4827-bbaf-8a7974ba38b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5275687b-5470-409d-9efe-b418f634e579",
        "cursor": {
          "ref": "01f73bbf-582a-441b-831c-2240cb71d9ca",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "ed79a9f8-c0c3-4518-94a2-ed092e10af3c"
        },
        "item": {
          "id": "5275687b-5470-409d-9efe-b418f634e579",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "6cfa2eca-e94a-4047-a6f3-6cacb933408c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa123024-214c-40e3-b142-9e3eb55f8c01",
        "cursor": {
          "ref": "b332993e-695e-4c4a-b4a4-ccdad0f89f8f",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "10b590b8-a401-4db2-ba9e-1100f0e36e1d"
        },
        "item": {
          "id": "aa123024-214c-40e3-b142-9e3eb55f8c01",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "9724ba64-11e2-42ff-9c87-6a9d79456d13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d56a2d08-66f6-4187-9b38-043be7c2794b",
        "cursor": {
          "ref": "a0b6a0de-6820-4e41-b6c2-80fe56dec7db",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "1c5fb701-e386-420f-990f-3a22b0b5d9e7"
        },
        "item": {
          "id": "d56a2d08-66f6-4187-9b38-043be7c2794b",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "f4e2c088-1fc5-44ca-bf9e-d8ef40d81016",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c58e559b-a9be-4e10-8993-22275d585535",
        "cursor": {
          "ref": "aab1e56a-2453-403f-bce0-b9ea1731cd5b",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "a1267317-3c60-4ddd-85b1-64be291a195b"
        },
        "item": {
          "id": "c58e559b-a9be-4e10-8993-22275d585535",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "1d3b5728-3d65-405e-99bf-c72e0abb75db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c07d21e-015f-46eb-a608-32aacd6ae873",
        "cursor": {
          "ref": "1376ea1c-2409-4c8e-93a2-3c319a0db714",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "d514251c-4368-4f09-9a07-f6b40f7006a4"
        },
        "item": {
          "id": "6c07d21e-015f-46eb-a608-32aacd6ae873",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "5d001664-2e4a-4bff-936e-98a3a506e706",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d5cdce2-e132-42bb-9538-9dd07d308e3b",
        "cursor": {
          "ref": "dd430d4e-d18e-4b6b-ac1b-890a6158fefe",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "208c075b-9b77-4be7-b438-9727d1188faa"
        },
        "item": {
          "id": "8d5cdce2-e132-42bb-9538-9dd07d308e3b",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "f7348e78-d54b-49b1-b94a-7c61a29843e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "307beb75-f0b1-41d8-8f75-96c7857d5e4b",
        "cursor": {
          "ref": "09152d79-7485-45ca-820c-9c395f2b6039",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "a52af5f5-d65c-433a-a3e0-701e8bc1bb09"
        },
        "item": {
          "id": "307beb75-f0b1-41d8-8f75-96c7857d5e4b",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "92389aa9-6f34-4e66-ac63-ebfe55d1d33e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e04bf1e1-b396-416f-b83e-175d30a2d691",
        "cursor": {
          "ref": "1cc8c6db-6727-4217-8c6a-e7f8995fd687",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "01543d97-8c51-4001-aa8c-d220c685bbb2"
        },
        "item": {
          "id": "e04bf1e1-b396-416f-b83e-175d30a2d691",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "a015452c-757f-4f55-9a0f-406de92165c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a0271b9-0f9d-4919-9fd0-504d3dd35404",
        "cursor": {
          "ref": "f1c6d15a-7f0c-45ac-adc0-6e256fe11840",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "7b7d0b1d-0807-40fa-bc9e-b3cade182325"
        },
        "item": {
          "id": "2a0271b9-0f9d-4919-9fd0-504d3dd35404",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "871065ab-de2c-436b-bed5-c258992eb9b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72bbd7d5-8ae0-4b67-a417-b2e71c4f3f92",
        "cursor": {
          "ref": "c17c3d57-327f-4b07-ab61-f42542041915",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "3a72e3ac-eba2-4912-8d01-92ccb723381c"
        },
        "item": {
          "id": "72bbd7d5-8ae0-4b67-a417-b2e71c4f3f92",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "dcb17bf0-a8c1-4cc6-953c-131bbcfc6915",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "870d8d4f-b99d-4686-a579-c914d8f96163",
        "cursor": {
          "ref": "533bc04e-5a21-4bf9-baae-83140046dcb3",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "f3b28767-5852-4b2f-9b30-39f01b474f37"
        },
        "item": {
          "id": "870d8d4f-b99d-4686-a579-c914d8f96163",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "f3ae9c27-589e-4e75-8e3e-c8b68d07ffb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5f601c6-f604-4d90-808d-9140b004b096",
        "cursor": {
          "ref": "ba391a2e-bb0c-4ce3-a727-4511c31d8b73",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "932c6b93-0fda-41c3-a840-3c13e9c7dd9d"
        },
        "item": {
          "id": "b5f601c6-f604-4d90-808d-9140b004b096",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "6411635b-f680-4a59-94e1-5234a0d9cc10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c93db01-7b67-44d2-9577-054faa4aa8e0",
        "cursor": {
          "ref": "a099f1fd-fa82-46a4-99d2-7424b2f3ad11",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "b1f09c75-d8a7-4b6e-a891-d8c4af1f8636"
        },
        "item": {
          "id": "8c93db01-7b67-44d2-9577-054faa4aa8e0",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "f4ee581c-e9bf-48c5-b443-c08da4b30cb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19de9c5e-21af-4c30-978f-8eea07842461",
        "cursor": {
          "ref": "35f85a11-b404-4e4f-8685-25d8de9f1da9",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "d9d54b0c-86c2-4a57-8906-1e37caae284a"
        },
        "item": {
          "id": "19de9c5e-21af-4c30-978f-8eea07842461",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "bf18a569-0d74-42e4-915c-f8e287cc1c85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34ed487e-33f7-4125-8d73-18b1ddd117e5",
        "cursor": {
          "ref": "6c4bc616-1aa2-4604-856d-1872ff4c5432",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "c0341c15-e6b0-42a5-b559-92ab5db466fa"
        },
        "item": {
          "id": "34ed487e-33f7-4125-8d73-18b1ddd117e5",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "0db25f8d-08b3-4f14-8f44-e3a07ed1929e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82b91d8e-a6b9-4fd3-ad8f-d66cca64865d",
        "cursor": {
          "ref": "934ab91a-e78c-4e66-9dd9-c3ec54d21c0c",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "052438f8-2d67-4916-9675-2c64ebd08d77"
        },
        "item": {
          "id": "82b91d8e-a6b9-4fd3-ad8f-d66cca64865d",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "dad45da6-971d-4e18-bea9-d81187b1ca34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "714703e6-aca3-42de-aab7-3d012f575163",
        "cursor": {
          "ref": "87c36a10-6301-44c0-a136-1239c3f5e00b",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "cf0d0710-8091-4b3b-9ca9-454bb4a5674c"
        },
        "item": {
          "id": "714703e6-aca3-42de-aab7-3d012f575163",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "2b7ef081-558f-45eb-9920-fd2aece026e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9130903a-7d87-435e-b8c2-0ab3d06ad213",
        "cursor": {
          "ref": "557ac55e-7e17-4999-9f06-ab27081eb482",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "f1e4472a-e75a-4799-8ad6-c322608c39f1"
        },
        "item": {
          "id": "9130903a-7d87-435e-b8c2-0ab3d06ad213",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "9e244fa1-cfc2-4e15-964c-ea014d651d7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed9d0f73-d724-4479-b5e4-a03c1c95ecf7",
        "cursor": {
          "ref": "303ed999-3d15-4f3b-91e5-f57be851ed91",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "13055342-ba6b-40b8-bab0-e9727cb90723"
        },
        "item": {
          "id": "ed9d0f73-d724-4479-b5e4-a03c1c95ecf7",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "f33c480a-1d5b-4ac6-88be-e35053c80a49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a24d76f-a1ad-4f1c-9658-69f9756aba96",
        "cursor": {
          "ref": "86138437-75c7-488b-a55a-0a96660c70d9",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "ea90e439-55f1-4a6e-9360-1c4568eb36e3"
        },
        "item": {
          "id": "4a24d76f-a1ad-4f1c-9658-69f9756aba96",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "08246ee7-3492-47a5-954e-1eedf1e1776a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b662aaae-1128-49cd-ba0a-c569599211c6",
        "cursor": {
          "ref": "28ddf281-63e9-447c-bc5e-985731af0b1c",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "d69708e8-9dbc-4d6e-b268-2efaa4b1f9e6"
        },
        "item": {
          "id": "b662aaae-1128-49cd-ba0a-c569599211c6",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "d1ba26a4-ab27-459a-bb14-0671fc0b9cb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c20368d5-f4ab-4760-a039-16f3c782e761",
        "cursor": {
          "ref": "e99465b4-6014-469c-a6c0-129fd56af52f",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "d415289c-d11e-4b02-89b3-b250fc7ff05d"
        },
        "item": {
          "id": "c20368d5-f4ab-4760-a039-16f3c782e761",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "cac67446-1469-4734-9121-256136f66540",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb04cbce-a670-402e-966b-dd2412c57c64",
        "cursor": {
          "ref": "0d1b2b23-f92b-4c93-9d47-1c841cfbc114",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "00299222-09f6-4853-a035-e23201581577"
        },
        "item": {
          "id": "cb04cbce-a670-402e-966b-dd2412c57c64",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "00e6f806-b0c2-4e5e-9390-30c72a8ddbb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab1bb18f-2df3-4513-ac80-4864c1785216",
        "cursor": {
          "ref": "4f03a359-245d-489c-b666-4e9ec5590ad9",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "0eca58ab-1a55-46f1-b7dc-13eb2de435e3"
        },
        "item": {
          "id": "ab1bb18f-2df3-4513-ac80-4864c1785216",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "c8ce21d2-797f-49b3-aac1-67a502775738",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10299d8a-2eb7-4d0f-81d5-5f1e2fb2a9a1",
        "cursor": {
          "ref": "102fcb7d-fb94-419d-9d9f-075d180b576e",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "69c35197-5d63-4f72-8d7e-16f57ba92f2b"
        },
        "item": {
          "id": "10299d8a-2eb7-4d0f-81d5-5f1e2fb2a9a1",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "b230eb32-ba4e-4a65-ac76-41e1e4c97d05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74f3b81b-b562-4e36-988d-7d8e1c693535",
        "cursor": {
          "ref": "342312e2-602e-4e2a-971b-a60cd335ef42",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "bce54886-edda-4474-929c-190bb86e807e"
        },
        "item": {
          "id": "74f3b81b-b562-4e36-988d-7d8e1c693535",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "c8cf3cf8-36f6-4bec-b1c0-0e8e4c51139c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdea5026-41ba-41e1-9db1-0633a7bed4ef",
        "cursor": {
          "ref": "bb055348-8b18-44fe-9100-49bb97bf6db9",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "e9c89401-3e78-4199-8f12-79805ad7def2"
        },
        "item": {
          "id": "bdea5026-41ba-41e1-9db1-0633a7bed4ef",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "0bfcab94-e13b-43b8-b99a-d38b76a2c80f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5d04c97-b886-4ea6-a94d-447d0a0a7e2d",
        "cursor": {
          "ref": "169d3a3d-ab0d-4b30-b197-a68558ca9b8b",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "d654ad05-6ab1-40d9-a3af-8c7f4383ab0c"
        },
        "item": {
          "id": "b5d04c97-b886-4ea6-a94d-447d0a0a7e2d",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "f2d761ca-f207-4760-ab3c-248e94149e78",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "229744e5-2c87-44fe-8eb8-f1157c8272ce",
        "cursor": {
          "ref": "8957df16-2db5-4874-9ae5-11588f2bffe1",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "b6cb5798-b3e9-46d9-8088-05658f401285"
        },
        "item": {
          "id": "229744e5-2c87-44fe-8eb8-f1157c8272ce",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "9a7a90e3-7d77-4552-92db-f41591c2004e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "19fe8433-be00-47a1-8504-c8d45bf863fc",
        "cursor": {
          "ref": "2efcb4e5-79ef-4b51-b7b0-8e054b61684b",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "0fd778e2-bcb1-4b17-922e-167ff8fc4196"
        },
        "item": {
          "id": "19fe8433-be00-47a1-8504-c8d45bf863fc",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "82bf10d1-28fc-4205-acff-53e062c4eb28",
          "status": "OK",
          "code": 200,
          "responseTime": 92,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1e767f0-e210-40df-9553-bd7b3c08c235",
        "cursor": {
          "ref": "b0c5b886-1a75-467f-bb64-6c0e8e49fe37",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "844b92e4-73fa-4c7a-a86a-511a635fe65a"
        },
        "item": {
          "id": "b1e767f0-e210-40df-9553-bd7b3c08c235",
          "name": "credentials_verify"
        },
        "response": {
          "id": "40337636-dca8-48da-8a20-25b24ed94147",
          "status": "OK",
          "code": 200,
          "responseTime": 2308,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "544f1df4-287d-46af-8ce2-eecae0706c48",
        "cursor": {
          "ref": "4ad0f601-9bb4-4a3a-a9e6-09d2dfce9407",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "f8ef1a45-80f3-44e8-ba80-29c590a776eb"
        },
        "item": {
          "id": "544f1df4-287d-46af-8ce2-eecae0706c48",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "4844b7ff-f952-4fe4-bf40-327d0f2f4785",
          "status": "OK",
          "code": 200,
          "responseTime": 2242,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "a06edaeb-aa69-473f-b2df-ef1a6263aa30",
        "cursor": {
          "ref": "ca9ba31c-abd8-4cce-b692-17b12505324a",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "3a8d6bc7-dd22-4b54-8f75-f00fe3462c91"
        },
        "item": {
          "id": "a06edaeb-aa69-473f-b2df-ef1a6263aa30",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "2802c4d0-ca4f-4e86-83c6-0586be23f0b4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "a06edaeb-aa69-473f-b2df-ef1a6263aa30",
        "cursor": {
          "ref": "ca9ba31c-abd8-4cce-b692-17b12505324a",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "3a8d6bc7-dd22-4b54-8f75-f00fe3462c91"
        },
        "item": {
          "id": "a06edaeb-aa69-473f-b2df-ef1a6263aa30",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "2802c4d0-ca4f-4e86-83c6-0586be23f0b4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "a06edaeb-aa69-473f-b2df-ef1a6263aa30",
        "cursor": {
          "ref": "ca9ba31c-abd8-4cce-b692-17b12505324a",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "3a8d6bc7-dd22-4b54-8f75-f00fe3462c91"
        },
        "item": {
          "id": "a06edaeb-aa69-473f-b2df-ef1a6263aa30",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "2802c4d0-ca4f-4e86-83c6-0586be23f0b4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "3d6a7aeb-92ab-4d9d-8741-3d163eb74021",
        "cursor": {
          "ref": "7f9ec182-1563-4175-aa32-0121bb7ee4d6",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "38e9ef06-9e18-430a-9c1a-649c623bcde7"
        },
        "item": {
          "id": "3d6a7aeb-92ab-4d9d-8741-3d163eb74021",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "fae4fe6d-d1c9-41e8-871a-ac966039d934",
          "status": "OK",
          "code": 200,
          "responseTime": 110,
          "responseSize": 201
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "2ca5d2b2-af90-40de-9717-8ded6fd4edad",
        "cursor": {
          "ref": "9d0175e5-2037-48e7-b5f4-5a15ab7e6271",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "d08a9381-6566-455a-b183-631a29b8ec01"
        },
        "item": {
          "id": "2ca5d2b2-af90-40de-9717-8ded6fd4edad",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "56f3eba5-33be-430f-aca1-7ad82d976cbc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "2ca5d2b2-af90-40de-9717-8ded6fd4edad",
        "cursor": {
          "ref": "9d0175e5-2037-48e7-b5f4-5a15ab7e6271",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "d08a9381-6566-455a-b183-631a29b8ec01"
        },
        "item": {
          "id": "2ca5d2b2-af90-40de-9717-8ded6fd4edad",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "56f3eba5-33be-430f-aca1-7ad82d976cbc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "8a9c3fba-5b5e-4a34-bcca-c7dd53796022",
        "cursor": {
          "ref": "629794ba-0d8b-4dfe-9fe3-d4d43de1e4c1",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "41c9aa7a-a0ed-4009-aaed-7bac63be730b"
        },
        "item": {
          "id": "8a9c3fba-5b5e-4a34-bcca-c7dd53796022",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "ecc90555-73b4-4935-a720-16070f150f97",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 169,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "ac4cea3c-717e-406f-8e6d-bf1c03a94ae2",
        "cursor": {
          "ref": "a7c10468-0ea2-42ed-9de1-cbfd72e4e98d",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "2cf39e5a-def4-400f-85ab-786f347a3d0b"
        },
        "item": {
          "id": "ac4cea3c-717e-406f-8e6d-bf1c03a94ae2",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "67cb8ab3-83ec-4b42-8bd6-40963b3990f4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "ac4cea3c-717e-406f-8e6d-bf1c03a94ae2",
        "cursor": {
          "ref": "a7c10468-0ea2-42ed-9de1-cbfd72e4e98d",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "2cf39e5a-def4-400f-85ab-786f347a3d0b"
        },
        "item": {
          "id": "ac4cea3c-717e-406f-8e6d-bf1c03a94ae2",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "67cb8ab3-83ec-4b42-8bd6-40963b3990f4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "a2bc09f2-6728-4348-afc8-d7bc971f898a",
        "cursor": {
          "ref": "1c8b9e73-69ae-4932-97a5-fff5c4b903a6",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "9e80c22d-a8a1-46ad-9ff2-3c90e7aeb18d"
        },
        "item": {
          "id": "a2bc09f2-6728-4348-afc8-d7bc971f898a",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "a755e664-9716-474c-9db2-353fc0cb5fbc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 109,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      }
    ]
  }
}