{
  "collection": {
    "info": {
      "_postman_id": "e9c7f21a-ef69-4217-8f40-0424834c0fdc",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "0cd77ac5-8144-48c8-b13c-ffebebe862a8",
        "name": "Clear Cache",
        "item": [
          {
            "id": "8318a92e-8818-4163-b070-35d8ee7a0d59",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c99e87de-3317-465a-83a7-6f711c86cbda",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "55c4af6e-90ca-4977-9571-cdb7f5828b17"
                }
              }
            ]
          },
          {
            "id": "dab4be0c-196f-4ad9-b508-d416ff20378d",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d6477751-5fd6-4e0d-80b1-400b93400297",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "b6e878ee-e510-4791-bfe7-bb72ef78ecb7"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "0613a361-c3e8-4f65-b030-147c9b42672b",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "7a56aac6-91ea-4d0b-b2e8-47cc182874ea",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e3edf339-078a-452b-93d5-40b7fb460400",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9e8c2454-ef86-450b-8bb1-8632d24c6de9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b348a222-d1ae-443e-a3ef-fc441e58b26d"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "39b0f31d-b8bf-4f0c-9cd4-5e974a3afca9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b8a00027-1f94-4684-9f35-48feacf4737a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "5a364886-1b43-4f57-bc04-a7c1aefa9d17",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "dbff9ab1-4f3f-4cb9-baf6-507f0f4ddd00"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a8d40bca-9ca1-496a-bd0b-9fdf2f36108e",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "95d46e47-1024-4b04-acf9-8108fb153c92"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b01066a9-1b2b-401b-b734-785d4cf7f46f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "075a0cab-a19a-41c8-abd8-ed1e2a02cc32"
            }
          }
        ]
      },
      {
        "id": "4cd01526-78a0-4530-91c5-6ef419a3fa4a",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "e0265ce3-5717-48cf-885f-56451f97775a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d53b3502-ca2a-42ed-b2ed-86fe48ba8d22",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "af9fd205-3e95-4a09-933e-703a23467c9d",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c79fe450-66bc-437d-bd74-f4bd804a9394",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cb981c64-4158-4595-90a4-a51650c6cb80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b2c2755-d1db-4410-a854-38eee2786e21",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "743d65ee-baa2-4e78-9ec1-5f1c3af7f74e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "93a0eb53-c8d1-4fd9-a823-299635a4bd9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ed6cc17-8d4a-438b-90d5-b01c9b56a08e",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f047b28-1ff8-42c4-9744-7d43c5bcc877",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "db21dbdb-409d-42b7-8177-f9281f019e42"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "80774c02-a0f6-4238-86da-a9041082b492",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b33fc906-9b99-4b8c-b57d-0d79214bfcb0",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9a4b6df-5ac5-41ee-9330-3b42838895f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5263ef67-a410-476d-a4ec-4ac441badca1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29f77e0b-aa66-4985-aadc-20422bdb3e68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37049da5-3f75-4e3b-9a20-7edbda800b83"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "68c6532d-6d89-4371-82a7-08089e60766b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "978bdf4e-590f-4b12-9a82-c514280fbe20",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8c82c878-42e8-4aa8-9146-511feaa47757",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "81b634b9-2e61-4beb-9c94-6876665edd93"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "36bae981-3b87-4670-8866-7176a7f40160",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "e2b19c37-76be-41d6-84d4-bd15c21df3f0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8bcf417e-2b1f-428a-9e43-398f7fd305c0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d6ac9540-4caf-4981-aa0d-67f7a1a3c5f1"
            }
          }
        ]
      },
      {
        "id": "42c707c2-e5a2-4d2b-ba1c-66bb6eabb477",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "3fbd29b0-4ba2-4d5b-b69b-0735e62c64b4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "897530e3-2729-451d-83e6-4db40aef9ea9",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "9d4d252e-b446-4303-a6f4-619253181db1",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d358a90-cef1-4329-b025-1337dcd19626",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6903297-455c-4eb9-9ec6-f21feeec988c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f9a05a4-2776-43eb-b710-f620ee6e203d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "996c8eaf-223a-47e1-a87c-b8a4da1e1202"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e621aae3-4087-408c-875f-b0b5027427e0",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cdc5f36-0f58-45e8-a463-9b7727649ef0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fab86606-bff9-4938-b70e-28f65b536c09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "489ef4f5-ef14-4595-a6b3-3a4e429e5817",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "85060d7c-c181-4f3f-91cf-7cf5fcdf3e63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "709a9003-b72c-4851-9144-98758b456dfc",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9a1b04a-5863-4ffd-b191-31cb7860590d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2e04ba2-225e-4e28-9fa1-4d9ac33e85c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a00909e-776d-435c-90ac-246a2bba1a7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c412d6b6-4716-4bc5-8578-ad0483dea69a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f42029f-0d4c-4da0-be81-a233d2f63e9d",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "632aa27b-e1c6-496b-a4d6-e9a2467799df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3638b4aa-f13f-4516-ba6a-03c50d1b4fbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd76e348-94de-4d85-bc29-e9601171bf42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c0faed99-f361-409f-90bd-928607cd7f7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c383bf6c-116c-495d-bf8d-1730a65bc2f1",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72a038e1-a346-4f95-9122-446b13848c4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "383bba4e-2a2c-4cd5-a550-998f1d6ece0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b10978e4-2b1f-4dd8-b0dd-70d734186123",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "efe85a91-9fbb-474b-8a7f-e01d1683888c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a0c1a47-b972-4240-b518-c00a894e58ca",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "430076a9-5c3a-41fb-b9ef-5d10587e90b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f297abef-e441-4632-a55e-c5101cd6e1de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3319249a-432e-4380-90c3-37a3477e9ddc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ee558087-dc85-4432-9fae-0c9e09e87a0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43622e11-146d-42f5-a00c-0921ef5254b0",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fe7d3e6-b426-4664-a751-a1a2952fb41f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ef2a750-94e8-442e-a5f2-9687b5371cc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc1cdc2b-f3e7-45b0-9a65-99fa075f9564",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d1950e6a-7dac-4473-aea0-4e1a7f9c7f0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9101b70f-0dc6-428a-9b60-797a8dc289ff",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "acc4c4ea-7fae-4f26-bd5a-276df4c70dbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91a7b2fa-9306-4342-ac01-53ebbfa3546a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a57fa0bb-5ee1-414b-9117-d6d738c489fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6d8d3ef5-70dd-4f0b-8525-d1c6bad45463"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46b6204e-6a35-4d69-ac86-c688e7c89051",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45fa0f0c-6ca4-4007-a0b6-28e1463c0b6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29996ed6-b75f-4d63-bd6d-742f4de35c87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6aa0aca-955e-446d-8df7-3e3569ed53a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1ac5e142-0c4d-4c87-91a1-231d0a13dc1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ccc0ed8-69cb-468c-a4bb-9dcc63b8c4fb",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9261000-dbd9-4c62-b93f-75d0506c6463",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98ac70d7-beaa-404c-ae11-3fbe9868797d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8fdbe89-3e49-4a0d-8e66-ad500a121cd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ba453b03-f727-4416-834a-de83142f4e37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f45d2b31-5eb9-4e11-90ad-0fd05a42841f",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77ce501f-9957-4957-b589-9ae5657e3b28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca503fe2-7bc6-4ca2-b242-2fe3de05cf5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52686f74-d88d-48fa-b5a8-637b55beb5be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6adf7729-94e9-4210-a2a9-a9a17e9db38e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99f158b8-849b-4bc5-a245-b4ecd893bc22",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ff52c46-4ca3-4846-a737-a8632b6b3225",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d6501b1-5305-4424-9fd0-757d0b9c563f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03cd4ee2-ef4e-4a98-b7d8-18e838969251",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f21f4a46-f21f-4b97-80b9-b2400b4c4929"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9df3139b-6b4b-4169-8505-567b9cd06e1f",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffdb20b9-2dc8-425a-b7af-aac5cb1f2e84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8eb679ba-dfcc-4bdc-a55d-d4ffc00f3b9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12531af7-4f74-4580-a4c0-e0ab7aa14f44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8d7fed9f-946d-48fb-bc92-ba0b1256a461"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01e3f6ac-53df-47b4-a540-3df47b386157",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a71ca035-7fea-4712-b0de-a6ffc997dc76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "195dfb4f-80cb-4a13-9aa4-be7907bafe8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a9f266d-acdf-4e02-8c00-390a6e4f0ee0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "95194d80-56d4-4734-bf3d-4629d29c6c22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "120f0240-5ca7-4fc4-9550-c3545392920d",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dd8f1fe-0da1-493d-9c8a-c6d3a1b41ffb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04d23b8a-d176-4a80-8423-9553eaaaae16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddc08369-c9ae-44dd-94d9-ca2d5b6c3335",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3519d078-20a1-4722-965f-dcc956266156"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9aa6fb0-b4bd-4d24-85c9-5c6d84eb840e",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed6ca3f6-ee3e-4989-af2e-c881573486f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbcbffdb-1c2c-40a3-ba4a-2e5ed1f3414a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4922cf60-8362-4dc9-9482-c34ccb0e6133",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d035de3f-7cbf-421a-923e-c350a6417cde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e21f74e-708d-401b-90ed-6ec8b86b7c20",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46ddb5a8-8a94-4c7b-9c0a-85a15fa4bf56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50314e55-2334-4271-aa32-5ee902b76829"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "deb853df-2284-4f63-a974-3c0d7aa6eb32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b10abcb3-282f-48ea-8bd4-434c9b8f39d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8f03118-59a6-43ff-a0eb-62ae4c4a4a0e",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c56053b9-a507-440b-873a-dc65cd61b6c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c119bcab-ee87-48f1-9392-337ffe34653b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c3239fa-3c93-4d5b-b5f8-ed44965ac8b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "fade1c4f-71f0-4be6-897e-78fcae1d1646"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00390672-2720-404a-b819-9ab199f4c2ae",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c55d218a-cace-45b2-9a8b-2b4fb84f817c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc1bd7c4-1408-4b3f-b129-5ad96112e850"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67009d54-1ae5-4ad3-9a7f-140f8a97d082",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1476ddc2-5852-4e55-91a9-aac46eb4a6b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1b6aa3d-2ed9-40d3-9807-59b3a517cba6",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c105de16-e97f-497d-b09e-90ec1533ffb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "adac752f-7b8f-4cd2-865b-7d81e439be35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54fab99d-ca41-41b0-baf3-956f2f191690",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "942dbed9-0b38-45b9-9777-c59b34e1397f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e151193-42cf-49a8-b0cc-b3ad51fbbf0f",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "835bb3eb-0e3a-4a83-a1c4-d7f979ceca15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bf4f106-5581-441c-8ed3-a5956219b3d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ae8162b-8dee-4f28-adf2-f2d69a166bc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "234fd752-9880-46b5-8d43-f7cefbb52141"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37ce5427-a0b1-4158-a55a-e0eddf51df73",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d24d7f29-8d22-49a8-ad5f-a5ade71e46b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b993b781-390c-4372-8cac-d45b1402d552"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ba328ce-c269-492c-8454-5a5e264822f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e57bd133-cf26-4fd3-9785-8577c0dfa034"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df3dc72e-6f63-4db6-bb34-7d633ffdf58c",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02793384-4fd1-465b-9594-678e8fe0df89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65b3d461-fb87-41ac-8203-c1b45feee030"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd32d2dc-2862-4a77-b57b-7ec2fd7089b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5531503e-6209-4c9b-8496-c960e5df001e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bda61982-d821-486a-abd7-65894d2525a0",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee6670e8-7dbc-47d0-960d-32d8ff24ab61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8840b8c-5780-400e-b295-f55a485744d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84c152bb-9a87-4d8d-a2cd-48079202662b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "7705491d-b2ec-4818-8551-a1ef7b600bfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "263f7f54-a209-4268-ab30-371c76d00f07",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd2364b0-b68b-4419-b6ee-e9f8ad8d952d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efa2e4bf-fc4f-42f6-821f-dd73663f482c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a5447e5-8d09-4c4d-880e-360bb85cf572",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a9ed6cce-1a28-4bb7-ac27-5a82aeb19378"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea759953-e5d4-47fc-bc41-5f8eb1d72103",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7bb4c0d-2e54-438b-896e-8039aff596b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f4719e6-7f96-41b6-9230-de957fe0efa7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a02ec24-c3af-4f1e-a235-197a3050bb28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9f3c35c8-56c8-4f31-837b-a347b7048eca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51646b96-aa22-437a-87f5-3478001dbda0",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4a54425-7cec-45d3-8c3a-6953251fd521",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7789b16c-de76-4c57-8973-7876275e1362"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1ec8c8f-9c34-4e3e-872c-50e2b5ccbed9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "57a3e4a5-9d68-487e-87b9-1ef16737239d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c66fd6e-6561-493b-a454-db7f50f9b8df",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9978038-bb2a-4062-b9dd-fa5f3f2db0fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9a14040-29f9-4bf1-a79a-cf6bb175a1c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ed3b8dd-f721-47b4-83a9-57a908386513",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2048622e-c3df-4523-b504-14c4eec97b1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c308717f-dd95-4074-8c40-7fa29ead9aab",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "156d0c20-8dad-4828-ab1a-7d9827de429a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b7140b8-521a-4716-b8ed-657a88291635"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff6d8114-8bf1-4e03-86b3-178af4a7afea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ea87d7e0-13f4-4b9d-86e5-a9f853be0262"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50908c3a-0c01-42e0-9691-5e3453c712ff",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c836ac22-db88-4fec-9ee2-f41f35b2fe90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b6ac431-b0f3-40e2-b32b-1bcce659fcc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b50b6c2-bafc-4e30-8009-edb40cfca8d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "34858370-87ff-41e1-a5b3-eb3b0c8ec2a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97fac888-3110-49b2-947a-b62d875855ed",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6abc0ba-1b04-4e05-baf4-d6b5398b7f61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6c03cc3-252f-47ca-8e9f-01dfdf4ef98e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9f2ca6c-f62e-4a30-aa6c-c1877f41af1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8e7bbbba-a21c-439e-84e0-63ea265f5ed3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67d1d145-96d6-4a90-8866-60f2a469be6a",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88616333-a2f9-47ed-b6de-55da3b4117a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c57e6945-6789-4eb1-8f0d-2e7d82f3a32c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86af670f-a501-4619-88f5-1190802f702b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2167c643-f9d9-4137-89c4-7b8c4b0903e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40e7db9e-ec95-4c37-838f-e42f1ffca196",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "292baeef-e08a-433e-b10f-efbabe8a71ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16d44fcf-bc77-421c-afdd-66af9d16b0ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34e9ed6b-abb6-44c1-8ae0-e9a3f586e070",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a25cdf76-8e19-4e59-a4f6-180fca92974a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08c29946-b3eb-4702-962f-03580036cd7d",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51d56d3b-1f62-42ac-b89a-e60900a45226",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "281753a4-8fe7-493c-a58e-e1c04e7b1fde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6eb449e-cd97-4d69-a9e7-86168421f1e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "47ecd9fa-5a05-4e78-9673-db5752bc0dfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13905340-6b58-4c5d-a16e-6826b29e2d56",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94e3e8c8-5de0-495a-9f25-a01442284961",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c105ecb4-b733-4bd8-a54b-5a62263c0332"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1df1ca2f-91c7-4e30-8581-b981fefb1d14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "49bd328e-062c-447e-a10f-d8c27fd4351b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc0ed8cc-341d-44c4-8b23-f6b8ed9330d6",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e10c6aaa-5efa-44c5-8772-b02775bf8022",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c30924d2-cc12-47d8-a487-2f42c7b515df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f28f0b83-b815-4a9d-aee1-b9158b469f1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3b8a7d5a-4991-49b5-b5cd-502e8c4f3c4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "431f93c7-2ab9-42dd-9ae8-ae175c5e4487",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4149653-15da-40ec-9348-e2f35b7b6e31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b44ad697-bde3-4dad-98c6-1cd43e809887"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c41750be-b12e-44a1-b4bb-3e118434bc7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fd5a15a3-efd0-4a5b-afd4-a41496f400d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57494aa4-fbc1-4960-ab95-3ccb8db87b3b",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fa92f5b-6308-4cda-b7fa-9c6b4e1bcdb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a28259e5-46bf-4d01-b5b6-81c37ce6cc81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d96bac76-2a76-4e2c-9f08-43df4d628f2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "81b9cbf4-c685-416b-956f-aa0b2d925218"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a6ac733-f2de-49af-acb5-c0b2e2aef1d2",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe169ff3-1fee-43ca-8279-85191efe0df6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6ef86d0-7f85-40be-b021-c063b40e48e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1533912d-2f5b-4e9c-ae45-d94307bf2832",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "6e3d0271-c5da-4af5-8561-0d5b84f82b81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c0db0d4-b624-4ce6-b70a-15be4dda44fe",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58918b31-7b50-4878-b098-0117a3229e73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac244e74-77c2-4a97-b983-74bf33ab7ac7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15efff91-f061-426b-b1b3-77d3db908c38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "c1214cc2-dcba-4664-ae98-b6624622c819"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e71ced1b-ef8b-4ee6-a931-7f28f6f0e21d",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a86dc594-0e78-4f85-8ab4-5c3ba5fb2878",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efe2d127-c03c-4409-9e89-be4f8e430a34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2a4e95c-1bcc-48f7-a545-98b4123cc9da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "4defbb24-87f0-4f81-8ee6-1bb35abc4a43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6b8438f-ea7e-44d7-898d-f02606bdd1c2",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c70af6f-9336-49eb-a03b-524805834a64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1bfdcd9-6c52-4c77-add5-848c4243bdd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cf88ce2-2466-49d8-9aa1-6077af2cf1bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "e9148c3b-c06f-4946-88f5-d79bb37ec79a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f70c0ec-5dde-4a91-a365-073c9104fe59",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50c8b792-22a4-4ef5-995a-2b7a3eecc759",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf2e496d-6ca9-407b-b196-9ab5b8c9bb45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29aa8df9-97e5-451a-8a09-9afe883e3a74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "85b0a308-c8fd-420c-a14e-f5d8d09bc711"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10991933-b45e-43a0-8623-7364a6c1eac1",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae7155b1-dadd-4799-9ade-78f0752bb817",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b94507d5-04fe-48c4-8a7c-924e94ddafce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "191d1927-2fa8-433f-be04-237fe7c5210a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "0b077cb1-e614-473b-95f7-8621f9638b6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a725e4fd-7efe-4a83-9243-b1f7c24acd88",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15eda16e-de46-4d99-90ba-28b31476c7a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09eaa2ea-13a9-4ec8-8f1c-19385b8c89fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20f4c466-cb7f-4db5-99e4-0349472dc5cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1b4aa706-eee6-4003-be39-afd72feafd4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7acd3267-0036-4270-a767-4b7fef3b475d",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "512ab4b5-b131-492b-a3e1-e6b431a92d79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a772578-833b-40a8-8047-50a376eeb4ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c482a7a0-8638-4268-a64e-8d8a30b7eb5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d450dfa6-5a81-4c82-8b8c-7c259bc5323b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27feefb0-3369-4757-a6a2-5268c6cc9269",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e0184ee-b5f0-4c68-b65a-4991b37f1577",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6324e24a-b52c-473f-a964-3f5bff528c61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21f673cb-14d4-43bd-b6a1-073c2035728f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ff9d72a9-9a9c-4e7b-ab69-8ce3c41bc494"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77f1e85d-bdd4-431e-8239-d7829bbebd9a",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5d5efd3-42f8-454d-842f-cf8471bf146b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ad30497-ca79-446f-88e3-3635cec4c09b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "373c1a62-77f4-4915-a82e-cc54927782eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "050d740c-7751-4f7e-a7c6-29734a3b181d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8383266e-8c0b-4c99-9bfa-fdaf7536fb94",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "238bb5f3-deef-4d9e-9d8b-5fdf53d2fc84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48020cfb-2e9a-4335-8c96-4c879530e9b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9651026d-b2b8-4602-ad88-d13aa45ed416",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "31e39cb5-a189-4346-b73f-eb9013513f32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9974d97d-8c04-47df-91ee-4775fa3490a2",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b8aa37c-8a37-4e63-b444-a4e609bee8cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d994bc29-0cad-40f6-afd9-209cef3d3921"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "107daf92-95e0-448f-be80-8e3b457d19ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8fa59a38-151c-4027-90f6-8bfdfe03ddba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ac22446-4ece-4903-86ff-325ae0992179",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d62b9dc-3cd1-4c96-85cf-93928ae65450",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "322246da-221d-4f02-9a1a-5579e2c7d43b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bebdfc5-cb3b-4a26-a6ed-07274c78c6f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "d084218d-158a-4699-b53c-23204659042d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b109814b-b739-4f31-ac8d-417f3c8613eb",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca6d4d0f-f222-47cf-9c07-1e95842d814e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "911b7115-ca28-4954-b991-0564a9d52ee6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36f06931-eaf8-4505-a5e0-6b1539558a87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5112330d-edae-4452-9251-49e146b61c01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be0b6cb9-edac-4300-870b-182a164ab097",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0cd25ec-abd2-413c-ad0e-c5e627c2a580",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8a063f6-d6af-4d7a-b062-96725b28fe55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22d675e1-9d0c-46b6-aaa2-0d46b8705b0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8791dce9-db8a-49ea-ac5e-ee080750cfb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1bb20fc-b6e5-4ede-982b-10b68df6c963",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e544c92f-900d-4c5d-bc2f-42b99d3a23ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61c115f3-617c-4715-9cd1-5c077cbde86e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be149b8c-c734-4c07-9b0a-2e054c236f45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "82572819-01aa-4fc0-9633-a6c7c529e380"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f2e13a2-4b28-4d48-a23e-770339d6dbd0",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e152c81-b297-49a6-982c-9eec79aeb3de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25d89704-b8d9-4ee1-9e2b-0cf4991bff15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09087103-8284-4f1d-9d8c-b1261c3d3e0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "488f1caa-81ee-4825-96ac-53228fa5a188"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b56e5f3c-63d0-4630-a43f-fc70642ec1f4",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "518f7aed-167a-48f1-b59d-876f1c3c5ed8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e6d478a-3b45-4299-858b-36ebeb3e99e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5acd91fa-0995-4066-bd88-aa66cdf5e9a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "2cbde793-922d-428e-83ff-76d90827d342"
                        }
                      }
                    ]
                  },
                  {
                    "id": "319934b8-3064-4a8a-a72f-23cd73be3966",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0177cb61-c807-4a97-8435-2c82f4ae7056",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "205e2921-0c92-4cc0-9a69-fc822aad3bb4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "349b2909-9ba5-40b8-a9ee-992d79a5b89f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "77088caa-46d1-40e2-b30c-ef476d96f5cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e22d5202-2af6-42ea-9f87-ee1e23a84c14",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c35209df-ead8-48ea-9bf0-af3ee3119c7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e4bd85d-cd90-47b2-9537-11a091b7217c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27018d4f-3ddb-441b-93c5-9e9084892ec9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "a745b13d-2641-4efc-b599-f553a42f2bd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "640d2942-e6eb-42c6-bbf5-73424eeb02a6",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e062117a-a359-4c22-a105-acdb093c37f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc656149-085d-400f-aaf2-3c85f90d4024"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d8750be-f38f-420e-aafa-bed24ad1bb2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "2152b181-312b-4893-8cd5-1af559f35b59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "401eb9e7-56dc-4cf1-a686-4e2f633fe05e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "666dcc7e-490a-4e53-8130-879679f4bdd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32aa1669-fe3e-4381-921c-f8464fbd0129"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "771bb1a7-0c05-48b3-bfa8-041d8669aeaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "49fff54c-69d5-4b14-8706-44534bea75e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14fb63e5-5dd0-4b14-9d65-c817de6af6d7",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "699736cd-7672-4070-9c29-31e2753e8d4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5415c3e1-3baa-4565-a741-56536c4702e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bdb069c-d713-4271-81fd-0cfef5e3d6ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "190f6d26-3ac8-46f9-b376-7a207528c32a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1700f2c8-ca9b-4c4f-9730-60886fc35a63",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d34cbc5-318e-4f28-a4de-94ea17298a70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7021d1e-5287-4a02-8075-ed28e22d764e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c40e5096-5f74-4b3b-bbf3-0ff28b78d604",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "3318a508-7806-4fc6-9b03-1f0296864207"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9532b580-8448-4370-9d2f-34f74ed116f4",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21f02cb0-d1a4-4bb3-bbf6-9f40ea080427",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56585432-4f7d-46de-ba8b-2019f5914c88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84ae5828-1684-4665-b606-650d943f9970",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "3153b09f-7460-444a-b83b-e3a71e97b038"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4f7374f-b632-4a4b-9c81-225d7c592019",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7679ebfd-7659-43ff-8302-e87f7cb31320",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e1e7b8e-6af5-4a09-a87f-73617305108b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc5515a3-c196-43d0-ac36-a4d0559ab194",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "66682e35-e06c-4d6c-a7bc-5132819ebcf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42dc0a28-cf7c-4eee-aee6-d4f8f359e0ca",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f0b7451-8d37-41e3-b6e0-153727b335de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "159c1256-018d-48b8-9cc1-d5b6b000ff91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac92d603-1569-4575-930d-8a99d95bfefb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5586d4d8-e9d7-4dce-996f-abf9fa972c9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80dc3d61-9484-459a-bc2d-ea67ddf25af9",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5cb6f6c-69c0-4a74-a52c-001b0d4a4064",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3895698-8c26-4bda-98ab-0ba74ef90e3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51ae4765-fe0a-4bae-8ee9-a93b096412be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "61a1dff7-efb7-4efc-b49d-97a4ad062d7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "316aa585-919d-41fe-9c49-ebece044a1e5",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7555de2f-d601-4370-a49b-0e208f1201e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49808dac-04cf-4ec4-a83a-cdbaf68787df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa25f627-479d-4b43-b684-ab16b1625400",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f4921f2c-6937-4b4e-8e1d-77227b14563e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1287d055-9da6-4644-a0bc-204dbb301941",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d425b6b-f51f-4941-9249-6edd2d5b741d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04760bff-2be0-4173-97c8-bdd2509e2424"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5362cb9a-0cf7-4254-8bb7-272f5aa9955a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "7af64d1d-ae72-4db6-b0e1-f716d483c061"
                        }
                      }
                    ]
                  },
                  {
                    "id": "718b8fe7-4278-48d1-b193-0f7690f9a9e4",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "644ce741-399b-4f20-ac44-367c7ab55d14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "357acfd0-a6c8-4c3e-98d4-5df6a2dff61b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8174fa51-4106-48d2-b409-8098c9f6d37c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "6eca65b6-9104-4b7e-b9b4-fc5c096efbff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81692182-dbd5-408c-994a-7fc59fa827d3",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca8bc72b-046e-446a-afe6-cd4777d794b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4515bf56-d6b9-4492-a183-a0fd9a04135d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbe2504b-88cf-4d72-a4b6-f362bd0ab02e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6b4606eb-69e8-4cc8-89e8-3f56d10f81f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d10fd40-fd1b-4697-91e5-1a975d8b9ced",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f08107d-9802-4744-a794-c2ce0dfe8b52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90d28a2d-754c-476a-b1cb-9637632be77e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e85ac2f-cc39-4f35-ba58-ba3d3e071db4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9436e89d-66a5-442f-bea6-e28d2fc666cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "698e2fdf-731b-4af2-a410-9716127c67c4",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04b914fe-77b5-456f-991f-186f811a29d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39a20b0f-8145-45d9-ab2f-627e1934c0ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "414f9527-f711-41d2-bb3a-783b5db1e056",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "02fe5cd9-2dc9-4b6c-9ffb-5f2dac1809c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "501b5aa3-e461-484a-a04f-d343d3f5033f",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5edf9abf-85f8-48f3-8cac-eb4fc5ea2e5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6cd4550d-f9be-403c-92d7-652cee49d0a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0be7af42-172f-4084-a625-ae68e2ecf8cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "69b0ff97-865b-417a-b3ea-e268ee0fb8f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "565cc534-0cf3-42d9-b909-678948d1c078",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca002c2d-2239-464a-b4cc-176112d15b0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0beb73d9-21e6-427e-8e09-38d293df6f56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ec56351-dc9f-455a-bebb-3bd7b90476b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d3346b50-21e6-43a4-9f39-0ee1cfc30461"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca365318-8306-4f4c-9f9d-1251a28442f7",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc32917d-67f5-4a92-b24c-46d023a62cfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "865f8f46-a371-49a8-ab49-6419d060d4b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbe053cb-490d-4607-9250-af99f1925551",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "886a68ff-8754-4aa1-8b6b-7b01fe524263"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a073e162-2937-453b-a9ba-ec11ec0be9fb",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd3bbfc3-eea2-41e4-ac4b-3dd169458e1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d62b1d1a-aef2-402f-b64f-6c4b7452a988"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ce1da49-0469-4618-bd0f-33d350903560",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3192da46-5781-44ef-b64f-fe35ae30d2db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d746cb70-122c-416a-8f70-a94d245cb9e8",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab82df6d-20c0-4482-938d-d26b018c3554",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "037560ab-7dc3-4ff6-ad20-0df3f3b0521c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31d6ab8f-3a7d-46b3-ae11-41863d8bba16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4326aeb9-b2ac-42e0-a17c-59531299b025"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80128fd4-60c0-4ac9-a740-9266cbd151ed",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee6d35ba-bfd2-4ca3-99ba-6134892d2968",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e427750-ea2b-436f-b265-fa4c11780d7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5d4ab4e-c7aa-4806-bf36-88d792928c8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7a6ae63d-7839-4940-9d47-98195b95cc0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "580b160f-9d76-4ea0-bd67-9e54a6ec7b13",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6270579-92c3-47e7-bc9d-76cf8a8fc584",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9d30718-d862-411a-a08b-0890c62c707f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "faf642f5-50cd-40d1-89bf-1e37c0afb40e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "65763fc5-977d-4f9a-bc5f-078aff1890e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc3e4272-db0c-4040-9d60-50f24ced2cff",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f49fa4d4-19d4-45e0-90f2-1f0fa51fc892",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40b70e0b-da92-4c05-9dbe-8328a58d53ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e96fb26d-4819-4cd1-ba00-683fcfc7ae88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c2966a00-6d70-4d2d-92e4-8ff80e9cec8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5056109-8c3c-4e45-aa23-274b7b0192a5",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0235850-bb90-4ae2-9d9a-ae9bb1fb0cac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f731bcd-0414-49cf-91d8-12ed24a0c652"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4bc8b95-a819-4ed8-b05a-34b315d6ea32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "9d0f4775-a1f5-4cef-b237-5bca377a4cc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b509a07-99fa-4aaf-b248-92509b20883f",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e35dff74-b28b-40ed-8ada-3cc4a5b361bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f1f14a1-e46d-4d85-896f-ee1f2172cd18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "171c02cb-2de2-4808-829e-06a1627eef9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "690dd669-e79d-4f7f-8bbd-56be5af1e491"
                        }
                      }
                    ]
                  },
                  {
                    "id": "704255a4-67e4-49e7-b197-0ae404d69e98",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "214a2cb1-f852-4c01-bd58-05d48d141ac3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40cbdb86-9337-4c75-8645-427b8ec70fc1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6126ac88-64b9-4981-b30f-9001ae54b1f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "89f90f08-b902-44a7-adef-a01c43218cbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d059dd9a-7c8e-40cf-8db5-ce3b7052d837",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eed4f134-3077-435a-8b19-bd467a10ecc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cd86554-1ca9-4521-a4e3-11985b5c9337"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d10438e8-d958-4939-8333-5ffb32e266ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5d3bf792-8c17-4c1f-9292-522730c38e36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f893edb-05d8-4d78-88e9-58df9a906124",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9526ca4-3d86-4ac3-a29f-c722eefdb80a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7e039df-db93-4859-86fe-8176f96ef870"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2435d4ee-93ec-41f7-ad1c-5508af5e5b48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2c415204-b5aa-4176-bd70-6e6d13dc9357"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df55a727-7a54-467c-ab8b-8f1730d039a6",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ad91f75-c8e4-4172-927b-46aff32581b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d01fb026-aa82-4ce6-8a7a-2ee5e4176885"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ae3ae48-8ae5-451e-8eb5-cc83119c8895",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b85375f1-a703-46c4-8a11-da294228602e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1175df8-f8b5-42cd-bcf4-4d26d586a101",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bfcbc76-4528-4005-bdb5-836454666f78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32961670-accf-4f80-8372-cefcf7146b93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf60d07f-2b01-45d3-9faa-30b7a77911b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "f49cda54-424e-4ebc-96c5-572fa746ec58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "256e0517-fe9a-41bf-82a0-f2d9724ffb5d",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "906be7e2-5ccf-4bdd-ade0-2e0c451c6c4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb5693a1-9883-4ea8-bc59-b5a111e61cc8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce1d6b8e-e343-4089-acf4-5218d3b60b1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "bbb578fd-874f-4027-99f0-0b2fd0c4e5b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "187de07a-3ca2-4e71-a496-bb21d323cef7",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2dc8740-6717-474d-a100-9727827c28f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ef46de5-3a62-4aac-934c-90e0fabba825"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d18cb97a-698b-4988-89e9-bca189c1ca4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "c3ede465-5571-4d38-bec7-70340be8667a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62915a22-87cd-4b6b-9225-3e9c3081027a",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a814ba0c-b608-46b7-b976-6c6ca66bba78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee21f08d-085d-428b-a8ea-ed40fb6cb91c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f28feae-1ca3-4a9a-864b-ee2fa0ff3fd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "9644b145-c83a-42b1-973f-bd8c9fe283e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59d144e2-38b5-4061-9fed-53ff15adc880",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4767ed64-8923-4ab3-80ec-568b2eb17df9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9638da02-b898-4c00-beba-c78265d15425"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94d2ea34-35fd-4f7d-bcd2-218b055a491a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "bec3024a-5fd1-4d03-9306-6759ce56a483"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a1d788d-abab-448f-b7e6-747bb217523f",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ad3f4dc-1f42-47b4-8d17-87367868eb83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "57edaa5c-399c-4dae-8625-e234081d536b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a56d5f5e-066e-48f1-b1ef-b5f448d1d93d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "57ce17e0-54f6-4236-91eb-8f773ae2b43e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "090ee6b9-19ab-4f5f-bc94-2241bd87ff90",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "bf600176-1fb8-4fbe-9d07-e3fbfed2151b",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aadced68-b5b0-4740-9cee-84de8d697b3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "370d4599-2db0-409f-b465-4ceebdef6727"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10f4592c-9e30-4aee-8651-263358788c08",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c354b304-8db8-4137-9bcd-501fdfa6e11a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bc62ed29-52f9-4526-ab0e-f4201c893719",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "de98ef7b-0f37-4ec1-ab4d-90e00a1365ee"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5d96f092-4cc9-4ade-9a45-aecfb5952888",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6a83df27-db57-4dce-b0b8-8ca29cb8693f"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2af2976d-dfbd-4990-a491-9bf062523334",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "66faf306-9a60-4cd7-9c1c-dd7692cb4d2a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "3660c796-35aa-46dd-bbb0-67cd5662283a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e9258ce0-fc53-41a8-87f2-00497e3a1e3c"
                }
              }
            ]
          },
          {
            "id": "94c7e791-4105-4a45-aa62-1a123ea941e7",
            "name": "Positive Testing",
            "item": [
              {
                "id": "5b8aba68-3f8a-4bd5-9756-c71e97c381f0",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "eb57fa63-204a-4121-8417-34149e18c18d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d704a634-3907-4c36-8b49-4a486b05359a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3d3795d1-662e-404b-aff8-55b29da970c0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "be453c5d-ae33-4f43-b00d-7d85da225ad8"
                    }
                  }
                ]
              },
              {
                "id": "d9d49b51-74c5-4aa7-b20a-c3bc69c743ea",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "44d54029-69a1-4e76-9fc9-263c5e6f8b84",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "58005bdb-733b-4d1d-add8-b62402fb1406"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a8b86b1f-42d2-401f-a5e4-45ad02485f91",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "a14368dd-18e2-4750-9d58-fa0be3e0e762"
                    }
                  }
                ]
              },
              {
                "id": "a9e0609a-cf43-41d4-9133-1e577473b6f4",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bcc6ba0d-9833-4b48-b381-c88799f56e13",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "04eae9bf-24cf-458f-ae8c-53d1ffed76c0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7c40b3f2-d6bf-4053-aea4-1aa96c950cdf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e427f06f-460a-49eb-9a9b-7cdccef7db19"
                    }
                  }
                ]
              },
              {
                "id": "e8cc7dee-93cd-4636-8372-c08f52ecbee3",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "14a2b015-6a5a-4c94-84b1-8d1cf84cc780",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d75e8ced-ef83-4e6a-adba-a874984597c2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a98f9d4d-e3b7-4f8c-a51d-58b40ce67eb8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "452ff2ef-2628-4a1a-a5c4-67bb1a695596"
                    }
                  }
                ]
              },
              {
                "id": "01d6868d-ceb3-47bd-a518-17977dd4154e",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "630507d6-9a60-46fe-9a46-cf00c56239a6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3774865c-a712-4dd9-9068-1703e78dc2ad"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4cf8b840-bb25-4e45-b9a0-4913be16cbe2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "6bbedea2-6a40-4e25-86cf-c7f99802c38c"
                    }
                  }
                ]
              },
              {
                "id": "881fafec-2bb4-4450-9bd6-5e78b2dd5c38",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d6dc087b-8cc3-4c91-b497-0cdb1e364f4d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8a085110-39b5-4db4-bbf2-da557894797a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1ac193e6-304e-4c17-bcec-99fa51438203",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "86e08f3d-ccd8-4f16-bc1f-3fb4097c64dd"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "49114a69-b6a5-4b60-867b-11074821e833",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "bcf1dc9d-0e5c-404a-81f9-b8d81af7c66e"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c043f813-fe55-433e-a0e0-8c671accfd2b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c085609c-acfc-4535-af13-41440ccb7a84"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c2eebbcb-6cef-4038-b166-4069321628e1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "83f9f808-66a9-4d30-8d2a-ac41219e7364"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4d12f178-b816-4f1d-a872-58b6a8d46318",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "02b679f7-c0b8-492e-8f85-3aa11cba9ee4"
            }
          }
        ]
      },
      {
        "id": "55df2957-1167-452c-8b11-d9e931636ca1",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "56b23f1d-6af8-4461-9d17-b3b173631633",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e15aa965-7ff0-4acc-b3c8-680b6b8e2bee",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "b762fd53-6a9f-423f-bd3a-c01f60b55f1e",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87a4c717-ff64-40e5-91a5-8209d33748e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84ca5a77-cbb8-49bd-a200-a95e28099139"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "307b6989-07f3-483f-8c8b-eb4b645eb0ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "3ecbadf3-edb0-44b8-9aff-5914de220dd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dcb962c-b73b-4097-8c14-e9d491b7e2e1",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81a358e3-366e-4032-887f-8b9db982098d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "424e8da2-ce48-4241-87ab-fdfd6974c43b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0d88be0-e7b3-46d9-a16c-407ff2a9cf5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "33b94d0b-3070-464b-9812-a6f1274ff9a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9899c6c0-3ee8-4178-867f-5faef91c2c77",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f247063-719d-4d71-9d16-d06f77406ae6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "341955e3-c588-464b-b4eb-c19dc8b39cb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcf94c0d-0ba3-4d61-a78a-753a0e68dd6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5ceb1e21-4181-4bc4-8d17-d06da36f7450"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6aff5a66-0783-4003-a389-2ddadb30741f",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e702ce1-5139-405c-84f0-0a308d022336",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6e2ba5f-865a-4c6a-b45a-33d5e00e90c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "436e50a9-0d8f-4ead-b239-355cdb25f66c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6a4a82f4-13fc-4481-867e-9bab607f0855"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80b04fc1-1fee-4835-83ef-c305efea1176",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0215a397-401b-43a3-bbbe-9ecac09c0402",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19209542-aa5d-43b7-91f8-2fcf58ace843"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2645f540-253b-4589-af8b-8e96fafcfd9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0c65f490-6d84-49c4-a448-637e5530d08e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac59f0aa-e4ca-45f9-bf15-9e6e92bb9cba",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cba2ebb-8eb7-4f53-8fe5-821afda39b0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3332ccd2-63c0-43af-99d3-5a3956c4133d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "989956c1-b199-4573-b66c-4872044d99ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4fbe13a9-38e2-4ecf-8fc8-7b0875668396"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4dd5b89-330a-4835-964c-af48010c44df",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1660139c-b4fe-44c3-8a41-57da6a777ea4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "176df1c8-ad20-4600-a5e3-7c6ee6281b85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d523dd97-eb2c-46a2-931e-5d5785df8c82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "90bff8fe-d804-4b3e-a7c9-719b24fe2fe9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f19ebc1c-9d61-42d8-897f-260e4a78887b",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6caddca6-1226-49bd-aaa8-729dc13fa9be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a87ab914-e300-4651-8fa1-d800aa334762"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "046187ff-c002-45a4-a824-6415bea67da6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fd429d04-5b96-4238-82c8-e96b8ec8c3aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79101c39-060b-46e2-8a3d-ee46318da368",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ee389b4-6a58-4497-b8e8-50ef8dcd13ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fce9748-f73d-43d2-ac52-ea7377f843d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d56c07a-7975-4b55-afc1-200cae840c8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f17b7563-7cdc-4942-85ad-a5dbefa6c03c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70d600c1-78b2-4d25-b034-af4477f6d300",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6376c617-bb46-473b-ad3a-dbd6b074cdd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7162068-ff53-4026-8872-34e797391cce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f521400c-c4eb-4ae6-8dc7-f45383eb9dcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "34d7a789-232f-4724-81b1-5d36dd96e370"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72c6541d-af04-44a5-8297-094b50c35286",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25808877-76d6-4ce3-b529-06bcfe57a910",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53a02aa4-3e6b-4c4e-8acf-644ad383ed1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a18b0a41-172a-4cf8-85d8-2ed602acb221",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "e52750a9-c8ba-4d8a-af24-8bdeb973bb28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03d5da6c-6adf-4736-89be-c83ef5eead85",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5e294d4-5419-49da-9660-77faebecc13e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3cfcab14-3e79-4ae2-a884-d0b93f2ff259"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "070e8c1e-6848-4053-859b-b33d83a8af88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "06df7fdb-a58a-4ac2-9e3b-f27a504f8a2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4686fb9f-9af5-495b-8385-de5ab70f06d3",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6073ace5-0cb0-4752-859f-3d1534a4419b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cddfa68-17ec-45d8-9985-cf00da271200"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fa53da3-936a-44df-98d4-f0105e50dbbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b5ae3aea-e780-4708-9900-9cf8f80d90de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bdb9092-28c9-40cd-942c-e8ff82bf5751",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec0bdbab-723c-4e50-97f2-21dc7540a431",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d69854a-675e-4884-b596-5f54f74bca78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cd95af8-16b6-4190-9b27-cf125aad8db5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "29148ccf-71c3-4efa-b1de-c44af871b2f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea696c38-74c1-4b36-943a-fb92d1767c52",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4215fa7-d206-4ea4-aedb-9e38098382ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e024041-0225-4d41-9e3c-3eee73cf4553"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6bc79dd-da55-442c-a74a-c60e0be64ca4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "b8f3f744-5e0b-44c8-87ff-11eb39afda8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71b00474-56fc-4ff7-8f96-2e4b274fcb70",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7565d77f-02e5-4e63-a897-94bc3ee56f94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "695ae74e-b355-4190-92be-73ee6cba6bf0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8477b62c-d87c-41e4-a434-ded158e253ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "12c02dd8-32fc-486f-a880-310be05d662d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7b4dd92-6815-4eb8-847b-0dd35f045912",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce187ad0-3c43-4b68-8a39-9af434b1644c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b55e2486-595c-4994-8455-c5bb949d5b12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0df39629-4fa5-466d-b25c-5351125e949e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "39843a20-e734-41e0-9830-36ce56e1c452"
                        }
                      }
                    ]
                  },
                  {
                    "id": "858a5ae8-d9bb-4cc5-ac93-de9c840d2231",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "acad1641-c016-429d-9e83-724cea2765ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fa68dd3-03d9-4878-8df8-8e3385fc43d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bed3622f-13e6-4cc6-978b-f93edcf96035",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "ac4f290c-052e-4783-b251-28ac5507348a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bceb5d2d-1a6a-4ad2-895c-4a1d02545469",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "110b41c5-0415-4de5-952b-d9dddf459b09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c4f9e1f-f430-457c-97c9-43d5c9cc211d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17e1fb24-1dfd-4f2c-93b3-3792996791f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c46426f5-fbf9-4f88-bd43-5656ab369f56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bab87bee-f2f3-4652-871d-712f09b4b354",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb54d006-635f-467e-81b8-0144412b26a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f5d5e7b-01be-4066-b6ff-983566713282"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fba4187d-fc2f-4db7-a402-b415b54d7ff3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a2a9cc80-aa06-470f-b623-20d5fd77cc90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b37fbfa-da97-44e8-98f9-e7b147d63856",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86c8c2b5-e553-4745-bcca-865c49075a8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68fdc781-73e3-4ad0-a93d-331e2653f70d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d53d5f54-2679-42d8-b5aa-a1266d67f167",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "32df5297-3d10-4645-8f6c-e9973fc41745"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb239c14-5441-4b78-bbec-2d0efb12b7bc",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab79686a-cfd1-44a1-8842-de11d58830ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a428859-cbb4-478a-a976-5e98da91fa33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33b89565-e4b4-4f42-84ab-b2fb5cd97241",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "368b3f5a-b5b3-432a-96ef-54aa48abba0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be0fb569-9596-4a4a-a8f6-f7c3dd14a825",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ecb62c3-cea2-4aec-90cf-1b40f87fc776",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc29fdd1-5b3f-4aaa-9c01-c1e35455f0bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19dfe451-8ea8-43be-86f5-3cd5b523ff3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "385d298f-5907-4249-95d9-46286435f7f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ffb898a-7bbc-4099-99a2-6fa660750107",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dea2228-9811-4ef9-9928-ac2465ddd578",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58407803-3ffa-4cc7-b0f4-3ae95bfa201d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83103ccb-9774-44c7-8786-958f3c799c83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d35b04d2-18b4-41b9-828b-7e056836bfd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5004f449-ad2c-476a-83e3-82c6654ee384",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28a6707b-2cbe-40ca-99ab-d4b20fa1e1e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11dc45a8-5811-49ee-8545-13baadd1a2d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da80e001-174e-4113-9607-c37f9a653dbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "69e61828-a158-4527-a838-8b284b10de35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4eb790c-0b5f-48bc-900e-a0b0ff7e15c1",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56758a15-c9ec-4524-bbe6-f41d498d02fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06517f78-44f8-447b-8a28-9b57baa88289"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5409b063-d8cf-4d0f-a612-4433ea8e5e37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a56661e5-f6b5-402d-928f-5db0a1b8bc1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acd46064-ced2-4f5e-a434-3d1977ef063e",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4af4a84a-3988-405e-b727-e6df9b050b80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0146cf09-fc55-4fe7-a622-570b7fda3126"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa48e06c-2d80-405a-9fa8-b0c4e7e54035",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "40a488b3-8570-4991-862a-8977832e4906"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89c31dc3-f042-4fc4-803d-49fb80c2053c",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90787725-a365-4ca2-a8b0-fb8efa983aa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cea88945-86ff-4dbe-884a-b9c45500c8c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82dbe2ac-92ea-4448-9fd2-9657705ecc76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8168ecce-e0dc-41c4-9732-08d179ca08f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a458842-69b3-4bf5-9b7c-d7133fef3524",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6dd7cab-fff8-4b60-9028-8319eed4b732",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "506c989e-bc84-44a8-8099-2602c96bb63e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb531eaf-41ca-425e-81f8-df5f6c22ee23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "008345f7-268b-4e89-b37e-796417862685"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68433c3a-e1fd-457b-9d2f-c7a352807ed1",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "950407dd-d896-4905-98ac-580c97960214",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9973c331-04b5-4a49-928f-c4c1c3f1de6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1aeeaf84-a9ea-4d5c-b8df-78de872e7765",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d7290c20-6609-4fca-bf82-c45ec816abc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19f943ad-e012-4143-b283-f4935f86723d",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47beedc2-46b7-4a6b-95ee-39d4803d2782",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a1ba703-c126-4e65-9bca-e013d0a76aea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd93ec4f-c96c-45bd-a833-d1ca57b347c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0cdee01a-7648-4ef1-b6e5-cdc4843ef88c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c23cf43d-5681-4a46-bf35-8753d6b80c7c",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0782a158-9021-4e59-8f7c-115f31b6ce70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aaabb14d-c8e6-462f-a20b-810b5a2ed779"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "090f0084-0720-4fcf-8c0d-14f7e8f6fb75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b801c765-ca32-4113-a8ef-298800637dbb"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c1e14515-de8a-4ebe-ba77-05bd3b25ad47",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7019e7e8-1d0f-4910-93df-cfac4011adeb",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "662aa708-5341-4ad7-96e8-c3729f00a279",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "f5d11298-c749-47b2-97a4-5437ad5417c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9791dfa8-e737-441d-9013-42fe0d018c5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8532761f-ea3b-4d16-a29d-0250e854b3d7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b10cad3b-8d8b-4640-bba2-12e4bd933bd5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5d6d1ded-4ea6-4241-9360-9d085433cfc2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b5ed7085-9fbb-436c-9aa1-5781f1ed6b63",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7b817e6a-f41e-4c34-9d63-e754d2b003ad"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f32c89aa-dc29-4d32-aa7f-f3569dd2b330",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "7a956fba-304a-4450-b18c-858d274c28ce"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "385be6d4-e35d-466f-8b60-ed3ebc0722f7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "87fbadca-1252-4ede-9b79-dd41d9239614"
            }
          }
        ]
      },
      {
        "id": "2f9fda93-59e5-4e6d-bfa3-e933f21526d5",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "f781cae5-a52f-4938-9419-ea8f96b2be71",
            "name": "Negative Testing",
            "item": [
              {
                "id": "103787ed-6311-4f81-81f4-3a07f608278b",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "c3492b6f-cee2-40a7-b68d-31b32a8a433a",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0b2dc28-5046-451a-86a8-c3c2ffe0b881",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53b8e7ba-1a74-4cda-89a3-0db152a613be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ceb691f1-1462-4251-8f9c-44dbb05e5952",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3050429f-3b5a-4920-9144-17b2ff4afb80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc960a46-9f6b-4bdc-bf53-1c2ec9a912cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d649a93-ec28-4fa9-9198-6d90bd0a9b3c",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0d35242-f7b0-4f9a-9e88-858e8249550a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43dafb0b-5e68-430b-b297-5bac8a9d8331"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0da8b5a2-c0c2-429c-b611-d4dd2aabea4b",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4aceaf83-52c2-428d-b631-663855f50806",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c08ea85e-0800-4a70-b4c6-b4b66e303141"
                        }
                      }
                    ]
                  },
                  {
                    "id": "879ee41f-ebea-4c5f-b649-cabcd2b4b4c0",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce87b2b7-d26d-4f77-bbd7-fb602be5b111",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83911add-23ac-4c39-92b7-52fc10b995c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fb652b4-84c3-43c2-bb90-4532d391a4f7",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e20b9802-506a-4608-b447-4abc0dfd52da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0338be3-f273-4a17-a4b0-957a6cf88f77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f89f2bb4-fe72-4c79-b29a-9d024862e9a5",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90f8bc60-8c07-4255-8f11-a740339fb2ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16b9d612-d851-404b-8527-f420eeb249f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff078ce6-4c0d-4145-bcfc-efb1ed3768ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ebfc4eb-8980-4c05-9c41-c433708ea7eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee1c2aa9-f75b-4846-811c-d9ccddd156dc",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be2ddd92-1609-4ed7-9119-441d2e847950",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "31df5644-18ed-4923-974f-97c21ea46da9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62ab2ef6-00e5-47a5-9b99-7150f893112f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b83702c-0fbf-4aac-859a-02e107349996"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f127f75-8f77-42c6-92cf-5a784397afd2",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "117cfe23-eb5d-40c0-b6d2-1fe3826fc3b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "92542116-87fe-48a8-bf6b-7f0c3520eb87"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e07f3f72-5d13-4bd3-94d2-8792ad4aa767",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5ff7fd2-8a77-4f86-bb86-69cb87f55e61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4352cfc6-fe82-44ef-ba47-ea9185859a8c",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eae091eb-a922-451e-8a1f-87f0dc4ae8de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0e130204-6a48-4852-8451-a80369f8d9ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd7897e7-eff9-475c-afca-914748f3c588",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be8905a6-69e7-42cd-b2ad-23875036e34d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2ff8e62-3e18-40a2-9be7-b0b4f7d70273",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e77b908-9138-496a-8407-b006eb1eba54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3561ecb-0d19-4fe4-b32b-cc46c5bf94f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b400157-4d97-4ecb-b098-ddbbcd28c84f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a4a1848-6670-406c-9fdd-b60b36a5e781"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd55c41d-4f01-4342-8c9a-48b7d8f4a7c2",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57be897c-a8d4-45a2-834a-5fb965d706aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a69ed121-a212-441a-b9af-5624cc958e59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ace5db11-8d3b-46b9-ae1f-74a6bad7b7f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d915a5db-5fcc-426d-bcba-799946d95b4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5da67132-05bb-4345-8fb4-95aa158af6ee",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fe193d7-8935-43c7-810b-6691db74eae3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a415246b-7dfc-4a86-ae77-65d8d439f2de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fc471d7-9acb-4e33-b239-567a4c93590e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2a45b8b-2168-47c4-823a-a9f30c7b484c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d10aef20-90aa-40d1-bf42-5616731d690b",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdaaeba0-3eba-4c02-9f65-c06d19e44237",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a77fc5c2-1e54-489c-b39e-501f6f178f7d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c97c42f-3abb-4e41-bdeb-21e1e3109a60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b23ecd9-9830-46b2-b152-a6d9c51413e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e8aa3be-2e81-43ed-bb01-91873694bb7c",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c81a31c5-b4b6-4d5f-baef-dcdaf80144f9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "69077e01-a0cf-46bf-b1a7-e73b47ad3053"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ef2014b-ae94-458e-bfbb-de88ed9f284c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee2a72e2-16b6-4fec-ac71-fa906a82e381"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4295216-ae1a-4573-b626-92133a6d1273",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b9a2bdb-5678-4f5a-a6b6-5b8d5c33c4ff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4a6c286d-8a95-4c1f-8230-816f19e2ce43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37595fe7-04ad-4d2d-b03d-9f2313b8a62d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75fa53ac-ad4c-4ae1-bc56-3d288ecac8b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76002ef5-3304-4209-bb7c-dc602e2490a1",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1991d40-5dfa-4fc7-ad06-da33cd3a904c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "293fa9fa-f1ba-422d-bb5d-00ca49fe4afe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a66b5910-2ebc-4e5b-9232-6173e6414595",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d44d9cc-f3d8-43e6-8a6e-9f19995d060d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0122e026-8533-4c78-aa2e-daee0377c2a9",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8ac8b67-f397-4549-98f1-2513e50e9b6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e3ef20f-3dbc-4147-9952-ad847c797e3f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55a159ce-2560-4434-9917-3c760c72192a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6502c46d-13f8-4a99-8760-79f3dd7ce586"
                        }
                      }
                    ]
                  },
                  {
                    "id": "807abeb0-6ee4-41dc-b776-2d17513a3a3a",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "304cfa98-4817-4d54-8493-f2d5f922c74c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d7e54f9-6e3e-48e8-8a97-6700c161f93c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61dc8bb0-b922-4888-b9ee-45c0a10d2fb4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f2f4ea0-fbfa-4d9f-86b8-84a56adf3314"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52b010cd-6bcf-4f75-89bf-c195662fff97",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "561f2608-5af1-4dd0-8f97-7ded41f5b6f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "771fa9f1-a75c-4677-92f7-2ffbc71d1909"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ae40d91-635a-4ef2-9b11-c2152fff3a06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3af4d17e-3047-437f-83ea-ca76ce838390"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5073f34-ec9b-4d09-926e-eb27ce47079f",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1328271-ce6c-4713-af10-5033f624b8a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f156e499-3a5a-4de9-aefb-611c31d19c38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df3309fd-5832-4f07-b86f-01bf584b170f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a36dfca-fd4d-41b4-a4cc-0d70e00c101c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "112856a5-d3bb-4e7c-a025-c94a52072d9c",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0de97e4a-c72f-4538-88b1-b1b83d1b66ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27fe12ff-b755-49b8-9a78-64376dc63496"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52f03872-7067-4cb2-872f-0bdabb75451d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e75986a5-57ba-4abd-bacf-1a4f05ef035d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6017f913-3e84-49ba-9680-f814f397bcb8",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b339200-9cbb-4ba2-9211-a8551200db40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f2c4ba3-1c6f-45f3-8013-174dd7b25fb7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3b89068-4ef7-447f-994d-8b4697cf5c94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07709316-bce8-47d2-b13f-351e7d8ee270"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0789dc35-47cc-44c4-b86e-63e276e99161",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c9c4dc8-75ba-47e7-8a29-1a7404873751",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c2b573e5-a694-4122-b60a-aae594df8f3d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bc2d705-2e20-46df-9f2b-7a0a154fd034",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "653dc09f-2320-4528-82b0-ab376f42ffe9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abaf4d3f-b0c9-4918-a7f0-249cedbf2a8b",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cb68507-b133-4847-af7e-050d6eff1aa8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "93ba2a89-08c2-462e-90af-08ef698e7056"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d4c643f-0004-4e17-bd8b-c95ab7e1a6bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23e0efc6-69e5-402a-a8a9-3cbc0dd035c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4fa286c-ee72-4212-8fe6-0acdb2339186",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd91084b-1a9f-4c1f-aaee-e82bf1e8e413",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ceacf00c-8441-49b6-a9f0-59e60c93ac66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f9a8902-e55d-4373-b194-a0d9ea53383c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6bfb8b2-c5cb-447f-bad0-588327491280"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31691666-10dd-4cc2-be4c-866def29bc23",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba90b090-6d4f-4352-af2a-104aa29460ee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9c097ff-16db-479d-8c6c-c8594f33ee18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "346bcbec-96a7-4d7b-9992-c4caf96151e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5adf5117-983c-4967-a8b1-db7aef046723"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb6cff4b-0592-438d-be19-8f98884259be",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27e54c4d-1559-4ed7-99c6-52e123cbf898",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6135337-dbbb-4711-a0da-dfd26193eb63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a76e997c-7847-4bce-b5d8-8b22b7ac29e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6df6a99-ee7e-4b16-b086-d49cced609f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a27f1a8d-3102-4c3c-a541-c137fb3a6f95",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd312d0a-792e-4b96-ba75-25bcc8e04f05",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9d6fc23b-3827-4715-9d2b-a09bddd6952a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85522af0-0966-477b-ab52-87b447f95da4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f826a33-53fe-4caa-820c-be8466f738c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dcd6069-1e42-4ef8-bdf9-eb579002de36",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9589263-9776-4096-8b07-e0bf0f0a1700",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c755def-b8e6-40dc-a633-d93dc4f67111"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25237311-4918-4096-a6c8-863785ca627f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61cff8df-c635-440b-9244-d185a07a9c13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f588ab41-ec65-441a-9409-5d5e5d642328",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b469017-6a01-490c-8ea4-6088265d0088",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "48fa148f-cc8a-4532-9e63-6f59154657d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "283c46f8-1fba-427c-83be-12e5ec249a40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1442be9-9e33-4e27-a2ca-760d0c3311e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ad8c9d3-9659-42b1-9a37-92c8887448ff",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ad0f24d-df29-442f-ba1d-87b3d71bb06a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "03e1c057-1876-4933-9a2b-392da19aba91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc2dfcc2-c5a7-4e81-8876-c189f27f4d3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3256cf1-719c-4c59-8103-d76539ebaa57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2340e6c-41c7-4d51-b437-5fbd86bee5f5",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9cd7961-3f86-43a5-a787-b385bb51267c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ae1f0e9b-8b8a-4887-9e92-4e117e8aa3ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ffcad7a-d925-4cc7-9e77-88c5223fd982",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48b9a4e3-0e7b-47ca-95fa-e220cf070073"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93e1da0c-a611-4d63-afba-6534d6f38b06",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16cf516e-5c7e-4ae1-b908-e0c06f7048b9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "667bd7d8-8b94-4d53-8912-8e85111f4fb7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f15d888-be0c-4c08-ba1c-3b63165b3a7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad2ac5a5-b74f-4a44-ae63-adcdcb64eea4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23c98120-8a83-4ed2-adcc-4ff21f61a34d",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a16be369-5713-4437-806b-005c44edcfa3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0dc1d0c0-a476-41b6-a1b9-e837efc4e66c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd89c009-fc10-4db7-b8f2-b709badb1403",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd03573e-6d69-4a68-a66e-1de46704d2f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f66ceeab-323c-4b8d-9760-a8a3c8d832a5",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c5a02ec-175c-44f9-81ea-6c4062e2bee4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09694f9e-4896-42e9-a45e-546463708940"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1320333a-545d-4f80-b17e-43d69e17ceaf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb46d2c6-814b-4a19-bde8-2e6d2ca6da49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54fe6c0e-80c0-42d4-b1d1-cc6013d432fe",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fbd0a28-685c-47da-be28-0055c6e99284",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98081d35-f833-40ae-8cff-710f9a65889c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ac468c9-ff5b-4b11-99cf-5e3a636376ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b04adf0d-8128-4970-a4bb-b658dd17c9e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "225e3e9a-7429-4ff0-b0ee-401a81b4ccb8",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd2e123a-0eca-4de8-a73d-957767095920",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8787fd8f-b692-4fba-8d2d-012de7d10107"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "814a1cd2-7ec7-4301-99f4-f5607767150c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46b07bad-65cc-4499-996f-d08cdf51ddf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e822fc4-25d2-4e2b-a677-93e8ded0c6ae",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0c0ca2c-f4de-4e6c-aef5-f108bfb62fe1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ad37b2d-5b33-46aa-b089-6244f524ceaa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "074ffd78-6be0-425d-80d0-d9e66687f54a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d7f6250-50e5-4f8f-b48c-c817dc9b43c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da4fef8a-09b8-4452-babb-996f8d654d9b",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baa2fb83-5565-4285-a1d0-16f3d27b5df4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acadfd61-0395-4f14-b944-376b5dea3c07"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "733e3ea0-8167-4e96-87dd-0ba3fc743168",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cdbcbdfa-f210-4692-a64f-acca3b7dae90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae555879-22dd-4892-b710-9fd646241fc9",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7f6b8fe-d3b9-4692-ad8d-f374c2562aab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50ef02f0-466f-4a0e-a84b-e41c8a89d956"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "919e8656-4ea2-496a-b661-539c94f9fe41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef5cad04-892a-41df-85b2-7ba0b9459f2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d932c8b-9096-4e64-9fec-46d8b35befe7",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42801a6a-d96a-4f3d-8241-481398ae6860",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "608518ce-35c1-4a53-afff-157730a944ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2291d7e-126b-4ee7-a521-c50e25cce8f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e6a2ab8-efc5-4a7a-a2d5-ea499a6b73cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c42343c4-25c5-48cb-a9c0-10f4a80d2501",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7dc4ff0-1d43-4de0-a688-5fc51e354992",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "114e085b-c023-4b6b-be21-621cc9ad0e10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10d1a2ad-3e63-4d78-a289-8e28bdbde0bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44072c4e-29c0-4310-b68b-51b0c20fbcef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0aa00d0b-5feb-450f-bc3d-70f2bf6c463e",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12be2215-d6ce-46f9-bd6e-cb720f53874c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86fe50f8-ae06-42c4-b2b0-fe2f5e027d42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d351570-b6ff-4cf3-94fc-f15c3556fddd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "449bbdc1-05fd-4b53-8d3f-7fd1c5370519"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3558abe-6a7b-4927-90bf-abad486c47e2",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "798647de-75b5-4859-82a7-9b380852e9bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "744ca7b5-a1fa-4d24-a88e-b8b2873056a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bebfbf7a-644a-44e6-a768-0852a38ebe6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2ef5834-2e77-4f69-898b-b00e5bbe6fb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e6f6271-f648-4c43-8a50-4a40f86ac375",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dd5d48a-5661-4884-a112-8c1c79967c1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88347487-fd29-490c-9b19-e91b980ef7f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9721f968-a843-456c-83c8-68e99ae2fba4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e016a262-e1e8-43cb-aa05-6e35f5845622"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90b62caf-c1b6-43df-951c-be2a1038bf37",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4b9730c-be24-4fc5-9fb9-771bebbabff7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e35a992-5165-45e3-aa42-a6712aa3e815"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23b9a065-0dcf-4ab7-8e0c-6b0b9e408f76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57a5c319-6ca1-4ec9-a755-81f43a926d53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccb8a7dd-ccfe-42e7-a2a3-6375ecd592aa",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab8061bd-746a-4458-aac3-e1edf2234112",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e9f8897-a2da-46fd-8da5-438d887f4a35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c87c06a-8fdc-4f5b-80ff-e11fb8607df7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "939bb85a-c855-41a4-b193-81e6b0d23558"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92ad56c9-9144-4e16-a695-79da9905fffe",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52729098-a05c-432a-9163-408c3fe163fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e7f8350-f3f6-498e-8959-47dab7f29648"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "efdafe99-883f-47d8-b34c-278152688658",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67ef1f7e-73af-4ae4-9a64-c881dd5a6d69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35073f50-788c-42e3-a9a0-a1032a5e5cf8",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f771f1b-bcf5-4cb3-8a18-40592148c572",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "935701bd-56c8-476a-8499-a64ea9a08114"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84a31c11-ab1e-4de2-946a-45eaaa0426d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "378f1182-24d9-4d4f-9c11-f982e187481c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d0b4044-bfe7-476c-813d-514f30c5943a",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "227b9b05-f238-40bc-98ea-d3a2b91e9a63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44487aac-e81b-400a-b5eb-41816b4a0f4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b763f95b-8989-44c3-8067-10977588ad47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7db9332d-ecce-43a9-916f-b0a0507d41e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0998368-84c9-4fa2-b9dd-bca0a987ed1e",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97b34943-00fb-416b-b7c9-c88f03dd5e52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f211f85-e190-4f20-9f79-57cd945a8d78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24156b7c-606b-4d12-93ec-126d67f19b4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fdb73987-920a-4bdf-a392-9c5137cc4453"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c7fa039-982c-41d4-8af4-86703edd4126",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61bf6b8d-4c95-4ac1-a44e-647eb26d5be5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a440a3f-2c90-4af9-914a-c1641acf4bcf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3d3690b-3628-4b02-9248-f0267329f2df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f4387a3-d058-4f72-8a22-494cb09396f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "746ec00d-b4bd-40bd-b9ce-c8d877536603",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5cbca61-ea36-4cf8-a7ce-8e53deeb5d6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "811e99a6-b21a-44bd-9d17-ae5511c2355a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34b4e7c1-6a62-4057-a7bf-689e87409b06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d27b1363-1591-4d29-af8e-118fb79fdade"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc61a92f-8600-40c4-b3c3-03ba85e4eb2a",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e000f64c-ddb9-496c-85fb-7197c22fd8a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f58bb871-cf04-49e4-ad35-39e6bf8f6b81"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30dacf54-c7ed-4dad-8c08-c81e11ebe20b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2d25a5a-0fcf-494a-b10f-d341cbaeaa58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "770e5fcf-e9c3-46e3-be9c-d9e18eedfcd0",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b101b24-4dd6-4718-b682-54bc7f85ff7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4725cbc3-e197-4b9f-a1e1-75198f2c9bbb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "659cbd19-e4a2-486f-ab48-9dd53e7aea0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e77155cf-f6a8-45c6-b3dc-ed62c2e0958c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3e3840e-61ab-4e86-9cc9-efe28f34e960",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e072619-6f75-4d57-a7ad-728e7d708384",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa77ba05-d91f-4dfc-a772-42e56b318668"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d30e65c2-34e1-4912-b0ae-fa34ccc2b5ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02a2f7a5-29c9-46e0-a297-fe5b23c53742"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a65d3c0-8cc6-4d1e-b276-34d3ede75f0b",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b933979b-7060-47b3-adc8-8c517edeb4cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "571678d2-cbb9-4956-8a36-b730bad5b148"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9570981d-50cf-4777-8372-73224ea1fc2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04c66573-62a9-4de9-9653-6afc7f5d34a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75a1ea59-6859-408e-91f2-30ca1ca4aab2",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df5acb4c-f567-4c56-849d-6aa5c94cb5e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eddc25ac-e8de-4eb5-a6b9-7f2c1136b3cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59abbbb0-5ad9-4b78-8bd8-485ed88b4cc0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fe73fed-df23-48b2-8135-702bb4b21bb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b88d2879-bd48-4067-a1af-a493247d3f05",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8e03a6a-0a2d-4e93-b8c9-31508770481c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a0a3b8d-1073-4a0d-8221-63df6828ae96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dde309a0-fd69-4f5e-bb58-895ad2a15227",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c74dd6f-544b-42e6-90b2-f19519b9c841"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e67aad87-6f84-466e-88e1-056bf1549877",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2c1b513-fe7a-4179-915f-aedba8b0a9f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3edcb9aa-78b6-4b73-ac8c-7d716022d1aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1be9f042-6b9b-4b52-8e16-61336472ceff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91833414-5e72-4149-b3cc-7478a44663e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df74efe1-2611-4126-9632-ba8b17417010",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0750cf40-8bbc-4a89-9886-94c8c169537c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a311b7ec-635e-466e-a3e4-0f6088532ea5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "741a73cd-e039-4afa-97dd-f97f084e0fcb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1bd78d5-5ea3-4e4a-8c94-fae233dc40ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6df056d8-7d7d-40c3-b4ef-ed7ec84bab42",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4beceac4-da8d-40c4-b94f-c1284f96d2f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "227c759c-0325-42d8-ae75-9c47dcbcf039"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af10106c-f693-4fe2-a261-d94fb68921fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37056430-de7c-45f9-91c7-123ac34b8c3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7099cd59-97e8-4056-adf7-7462a0b5c45d",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7f8c2fc-ce78-4a88-9bfa-15308a4fab90",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9033f100-c2cf-4dcc-b4d2-1305d63f05e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dde96cb-a8b3-4f6b-bde7-e652dbb1d44a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c9b99f8-ec58-4e04-b565-828a5e58f8ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "589cda8e-71eb-45c8-9233-556f967a9e0d",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c68dae0-9d8f-475a-9494-14e60b2cec5a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4fc97671-9904-4981-ab23-0d775f58258f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "420147bf-97cc-4fdd-8df9-28abef043e1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67acd324-aec1-43d6-b940-69407a59931b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25a18d3c-7795-47d2-a330-5688ecb341ff",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daf05ea4-d557-47c9-a4bf-6636fc5ac606",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b4d867a2-c0a8-41a4-af51-27a166b3ff6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d81469a-b5ce-4211-8e42-48785e60e676",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d55d0b4a-7fb3-415d-a325-a6be0ac8ae2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "186d8f12-63bd-4ff1-bc65-ba103adbb578",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efce595b-f1bf-43f0-8820-b2f9d4a3e73c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2a4dcf97-83d4-491a-b975-af54e30aeb67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91df14a4-7578-43a7-8767-e15ff84c5904",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6dd89fcf-1ff9-449e-bf81-fbff8f77ce69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf689efe-326f-4cca-8574-6f932448a0df",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47ddded3-ca91-450e-ae02-21fcb37d99c1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af74ae42-c872-4517-84fa-7f1b6d42e2b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1aaaf51d-4827-4444-b6ae-51d29fff4d4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ffcafd6-90f4-40c6-b31c-c22f85c438b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3177ea6f-5422-4119-a659-715e48d1e053",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "400b71f0-2244-4c5b-9aef-8f3154847244",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e5d16c9c-28bf-4b22-b230-8232b9cd2f1d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "778628a6-b15f-46a0-a0b3-c2bbe6f1048e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af47e011-4474-4b06-90b9-f6f05f1460d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "706f5d0e-252c-441b-8de9-9e1fb39680ef",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dfaf48a-669e-4f2e-bef2-a68918114264",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "27d109ef-92a6-455c-a4c3-18fb44684cad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1d9d24d-0bbb-47e7-a349-e1e4ac56b9af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f0c0b4f-1901-491f-b13b-31f7503b24b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d22c44ea-9253-4dda-8615-fb30e17d3c21",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02c85190-86ae-477f-b02b-2d6edfd42e30",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "744efe79-32d9-4d9b-80ef-8dcce029635d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56bbee6e-5838-47c6-8702-a698f21b9a3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fea6ff3f-1c83-448c-87bb-e5cd8b7f61f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "896f0493-ea27-4bd9-804c-9ddf1e23b17b",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e40409a5-ed89-4615-ba25-74a20c43e4a4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4524c1cf-53d3-442e-a8ea-5f2b999930bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "351a2b82-90a0-4b40-ad00-d3e6d9c4012c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4be1fd7b-3e2d-49ab-bb1c-443a11193bb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0be514a4-845e-4934-b365-9aed4f34c6b8",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7807f77b-a5da-4dab-8a07-8ca6b8801628",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0834b3c7-55a0-4c6f-b549-78cf2ef52a47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bc48f07-6353-4320-bf22-4038a7d523d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c98a569-8152-44e5-820e-08325959a4f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf4fde99-5c80-4ca2-87fc-fc5b58eacd15",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a20a1f91-f30f-408d-b9fc-498056f449ae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6284141d-7e30-4b3d-9d4e-df51002bec7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1810c314-1668-4b71-ad77-a06da7b24341",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0ecc587-e915-4aa4-aada-b1662d38f7a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9acf672-e4a5-4e01-a482-f467512bd24a",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8318333b-5a99-4e24-9b18-315909a2c860",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f6146edb-ec24-4dab-b92c-94017de8b3ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7a257ee-7875-4a3b-9161-26b68675aa5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae3e2c69-7ada-4f25-bc08-358609022279"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22f1404a-46a6-43a5-8068-bc6870476dbd",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5171a5d4-4433-4179-b851-c8c39ebed620",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "79ffec78-e68b-4807-9d0d-6a0be6560210"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a5d1733-7a52-4d01-ba10-5ca53554a0da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8390f0c7-8373-41cd-8631-bdf6bb7e742e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf7ab6bf-e6e3-458c-849c-b297e4916253",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d60def89-5187-44c4-9941-91ab092f3c5c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "905e97f8-a691-4aa9-8abb-a715748eeead"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1d1fe0e-6053-4d1a-948d-060dd163132b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11471ef7-1759-486a-a5c7-7096a76d4aa4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "781304b8-62e4-41ef-bb41-5a04edfbf5ca",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08339ebd-dc74-4468-a82a-7d51ff8d3cde",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8f5fd61e-5cf0-4f31-ba2a-4fae74d9aae7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50437310-1d4e-4ba1-8855-98985e10376b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf1cbca9-b7ab-4f38-983c-cca4c5469bc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9230c5ee-3aec-4d9d-8abd-2d51813a000a",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4144af37-cce7-440e-88b5-846de99d6169",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "db217df1-77ea-4f7e-854b-51d6a1e365bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "861aec1d-9a80-4b72-b9a5-11fce4bd69ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7745735a-f8b3-4b64-8607-423feb5189af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8338613-85bd-474c-930c-411dcc73c4e4",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c97a51d0-8407-48e5-9471-c9dabb61c5a5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b53d75fc-e31f-4f19-a47b-b81ec33a4eff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "626174cd-4a96-4475-9883-3fef771a7661",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e88dd22d-a46a-462b-b12e-23b4a1b6961a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c71a7f30-f20d-4ac2-8bd1-ebbb66293104",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "206e5c1d-93c7-4cb5-9dbd-73a039826244",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "79653c21-258a-45eb-ab17-1588d50b0f69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bb99f42-6a6f-4fc9-98b2-462c639da6c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a58425ad-1e53-4226-af33-27a51cd3f6c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49207262-6e7c-4118-9e40-00615490f656",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef3e2faa-2163-48a7-92fe-5081c9257cd0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c3fccea5-9444-4614-a5a9-7927bb4c649f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "561b551b-e6d7-434b-9845-4c5dc07e2189",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68ef0b31-cb3f-4383-a13d-6a6e4aa7f934"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64cb540f-006c-4f95-875f-0f0f3c9b2c27",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8831f82b-95d1-4432-a351-795bf2e68b95",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "02075cae-8fbb-48eb-b65c-1e609be67509"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cec1fa3-1a2a-4efd-b193-6d36857df1fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab1884cc-171e-4c84-9e66-1ea523e2ce78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a051b8d-6cbe-401b-9de5-4d46b86b0ddf",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fea6beef-cef2-4643-9a98-4598ac591aa5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7c56cf1b-9aed-4267-89b8-2ee019a05f77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1d00d6c-c60f-4293-bf9b-8ba73053b2a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e5a9a3d-ad04-4e76-90ad-af2f22b0fa52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99e9a455-0e7d-4922-a2e1-cb10cb7fe7e1",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c87f10fd-7eb4-418e-b195-5e64b05bb3c5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0376bfe1-b310-478b-b1f1-ac7ef69b8a88"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99e42de0-2b7d-4bb0-9e65-28ec686e52a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "081b6aec-954c-44cf-8f14-6cfffc93184e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "080d5850-f607-42f0-8bd4-f62b3945ecbc",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "240072fa-7ee3-4174-ad43-1e177f7af965",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "42cead74-8d51-4646-bc74-b9e28a07a104"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65f43fe2-2faf-4678-81f3-b5856a2cac5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a58fba8-b30c-4702-bea3-906a8f632deb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b8eff84-6c1f-4c30-9942-fd60cd397067",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46da0342-a96f-41d5-b36e-0235fd085827",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d90a6f7a-8488-4e68-8ab0-6fb7aa698ea6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17b70909-6252-4b32-bcb0-4e0fc460c63e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "adda5b00-6d19-49c6-a557-95b7e10892aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0754472-d83b-4494-a223-f5188f4093e8",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9c60d3e-2c14-4c95-bc39-bd2b6feeef96",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c3aeae17-8fa1-41aa-8797-aff012a04fa3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81797954-8ba8-4e63-b844-a5a8ad987173",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7883b5a3-5da3-4cf7-ac9f-1c9db9971fa8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e577628f-1670-47d2-ba59-191d4abe50c2",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9affa1cf-dd05-42d3-9f3f-6ff1b2ba36ed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dba34081-8eb8-4d2b-ac4e-1415d191338e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f221c91-9b27-45e0-9543-d327746f30d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05114405-8a77-4ea4-825b-480b812d22f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5876ed4e-9f4b-4280-8844-6078488f9c5c",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "050b318b-1d1d-4073-a582-21a47ea89154",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c0cd8794-dc4e-405a-b527-14c072ee15b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce699acd-d93f-47b9-ab62-7c194b7c5008",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f631e2eb-e2f6-46e9-80c7-b1cc55527edf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c54f6c45-ed66-4c21-80a7-289629bb46dd",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a78f838-a24d-4b6d-aa41-a388961649ca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "942bfc7f-ccf9-4d09-b78e-805f2f70a79f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e9809a4-10b0-4df2-b1e4-d32c705f33b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "682cf1f1-ebfa-4636-83a9-050d32074f86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "391854d0-8979-4206-ad04-1e17c0239496",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2e6d281-ac87-4f76-8adc-9542c1c19faa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f3b19b50-281e-4d77-bca7-ce92ec365ced"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "286e5192-ede0-4177-8d30-960221fff865",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80fa05ff-4545-4831-b36c-99b55ec8822c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36f71656-3bb2-4028-982b-88955435a949",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8bee688-0d9c-4895-9e0e-c2ae8ce114d2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c281873f-a833-4b84-8998-0e0ec288590e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc32e588-6d5b-4bee-ae61-9ce3e663cefc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0174475c-d107-466b-a26e-238096690b9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a90b2ff0-32d1-4fb3-8c59-676eda3e7951",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d924887-bfaa-4692-8d61-e28e59ec3899",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c27ea454-a5bf-499f-9f65-055a014cea34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b81f29ba-feac-41f0-bcd6-5da02a45e188",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06a745ef-897b-43ac-a256-b4f1d3faa81c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d053b25-40f1-4bef-8265-b43ef6ee3f5b",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "beeaa10b-ad32-414e-98f9-ad9aba1eaea0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "caa4d28c-e25e-42f5-851a-ffb8d3d84dc0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "edcda250-e43c-4bac-b549-7ed5dba02dba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbfa71bc-a2d1-417b-a812-19bdc61d8fc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b98132e-3b00-42f8-b340-ca2284f37327",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca73c99b-dac9-43cf-aea7-8f809d5d73e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "540ed38b-8f20-4b94-9b71-fd4b2b09dcb3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77a029cc-0a14-42c5-8371-b35d1e8c8c75",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "802a09bf-186f-4d96-bb5b-b5fade3c7811"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4b9801f-490f-411e-b550-d0ea1e301df9",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3cfe02d-22a6-43d9-a6ca-021e14cd7bcd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "adbe3dc2-89cc-460d-b2ed-31a72b20d8bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3efc9c90-715d-4e2e-8078-2c12f95f43fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06195fa6-b090-4631-a946-17f2d970e45a"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bc2695d8-728c-4e4f-b012-df94e37fa51e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bdfb5509-693f-4231-9cad-37ecdac2538f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d5f1b6b2-4211-4cda-bfe8-26dafbe3d1a6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "001b8047-8ae4-4484-8612-42fcf5f16510"
                    }
                  }
                ]
              },
              {
                "id": "b26f939e-581c-4547-9720-3aaa78a21397",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "398641ff-e378-48d7-847a-62c147070752",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e19cd86c-fff8-4ba3-9b6d-2aaaff053056",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "8e535a45-5991-493a-a58a-8f7e5b7ca277"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8407262c-823b-45b5-bb4a-17abbb0418c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3a5e8d15-a9b4-4172-b187-277ed9343e98"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "977f913c-d39c-491a-9b5c-be0378980e11",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a6394a17-a430-4949-8e17-118899381167"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e6955365-1df1-4a7c-85bf-39ffa4110550",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "026844c7-e2d9-42f0-927a-011d40998b67"
                    }
                  }
                ]
              },
              {
                "id": "ddc83e75-2c1b-4570-ad45-94085eccda13",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "683e6dc8-5c91-4b0e-ae6a-7fe38d5d474d",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c71e718-66bb-46d7-8d3b-474975c22203",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "a4452a7a-7a6f-4647-8c3e-9f27c7c543d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df3e6940-2a95-4616-96bf-f7241831ea7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6de57600-40b4-4680-bf70-f19ee5e1838a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "5b6ed1ee-e1eb-4000-985c-7de990aedc7b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "9aa3083b-1da4-4bef-a5d5-610f15e398a7",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3d967ff1-6057-40a1-bbe9-4820e5313d10",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "d049e3e5-0653-469e-a1f3-4ae2d8c47054"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0cd677c6-8159-4f32-b2d8-86935e697922",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f4c594bb-d3e3-4234-bc79-1e565c8d60dc"
                    }
                  }
                ]
              },
              {
                "id": "3e39f305-cbe4-4fd4-9e0f-98360c86aa61",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2a28439d-8232-44ae-bbd4-e8b31a6dd46f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "cedfc50d-16a0-4275-a2e9-9c041757e475"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d9f0bd8a-4a6f-4cbe-85ae-563df7838499",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e450f7f7-679e-4f5f-8122-fb24474bd88d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "687df310-0019-4f79-a606-00be4fda1508",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "fc939ec9-2d5d-4567-96c7-1254f951e861"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ef7651f9-d2e6-4a62-91ad-b210f2daf1a5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e940d821-bfd5-413c-8bb7-c4507d39c74a"
            }
          }
        ]
      },
      {
        "id": "d0abc8ac-6901-49c4-94f5-88466cb6cf7b",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "ca7f6022-9a03-46fb-99e3-9e877334b726",
            "name": "Negative Testing",
            "item": [
              {
                "id": "65873e34-08fc-4976-9e20-3cb3194f7ca1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "38b61b57-bf69-40c5-aafd-d4516d49e323",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13664f82-dbac-4cdd-b431-6be2130fb0c3",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "5ac1507d-5423-43fe-abb1-88cfcc6d36e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49b1bf4b-decb-400a-b0ff-dede4360f71b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "911c8754-b836-46e1-ab3c-6d511d16a7dd"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ae3c02f5-52d5-4e64-b6f1-71cd1565786a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "52175281-10e1-40b4-8667-a7a60005c5af"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c7414340-d663-47b4-b2d7-737a2c0f22d6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fd5490f0-f9f3-4f47-a692-df7d97fe4307"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f4356d84-6ba1-476c-84f3-3cf49002845f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "fb1073c5-e918-401a-9e30-dd737603ea0e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f571e952-0381-4a98-94a9-3d36a90ba54c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4502cfcd-b5d0-418f-af34-f85bba95f9e9"
            }
          }
        ]
      },
      {
        "id": "af6a03ea-4395-4a51-afb5-e42c63167584",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "43229d03-3826-4100-9632-b5a838731295",
            "name": "Negative Testing",
            "item": [
              {
                "id": "52b38e92-a3e3-4004-be2f-71e018ea20e5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f99eb19e-4eac-49b6-95e4-38400ee92108",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70967f59-30e6-4506-be56-71cec05d6fa7",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "556cf0f2-ced1-4ef1-8697-42d7a0ef9bfe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9e5afb9-c477-4c46-baa8-1b1f0c7fcdc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a84e8b76-028a-42c6-ba00-db9e8da8f4f1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "732c5240-6621-4211-a9c5-a9cd8f0ca026",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "eb63b620-e6d7-457e-8472-b6760f48ae48"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "aa50628c-16cc-4ff4-b077-76cb30c04aa2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "46ab55ff-8651-460f-96d3-645643cb57cd"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cd4c2481-7540-438a-9a63-ac7fc405c000",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "e0c68734-0b2b-4d6a-9123-12d34b282446"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1efa66e5-3a92-415a-8e5b-a25e70f40086",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a1914a1e-25ea-48ac-8a07-aa23f61cfb2e"
            }
          }
        ]
      },
      {
        "id": "e08960d7-8435-4012-9f0f-d95e672e10b9",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "d1a21773-23c5-4157-ae4f-b4818552dd5c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "80681a16-ab0f-42ff-81c3-40d189615640",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "bcb6e0d9-fefb-4d86-bfd5-6abce646f04d",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "038e355b-8a4f-4f32-bfe7-0696e36b10fd",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6e787fb4-0e6d-4b89-a620-1b4ee638a48c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90b537d3-5362-4952-bc1f-233dfbc5d849",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d36a48f1-faf3-4138-a1a4-1a8d70a01368"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bcc68abb-3414-43a2-be2e-4c10570f9558",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ee2323a6-6c8d-4372-acbd-545ce276467b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "55147c00-929f-4a0d-b498-931391755c60",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2d6241c7-4a95-4a78-bb63-92597e2c6c36"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "20433cb7-f71f-4f81-bf47-414ee3e4e94f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "894f5e03-f068-42d4-9174-65459ca9b361"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "72a22b04-97c7-49ff-8c95-39dc934b584f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "89269e43-4333-4722-92d0-5ac54283a3ad"
            }
          }
        ]
      },
      {
        "id": "70f9a17a-b492-45cd-ae87-eb54b62c886e",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3b9b51f8-9465-4fed-9e88-18f4e03b0d19",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "20933337-e3aa-4be9-80bf-3aab79d7a7bb",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "e66643e0-a2c0-4051-88b5-72ceffa2929a",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cb1c5a35-84d0-4536-ada5-ad182f98c478",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "dab4a99e-8487-4fd9-9ece-e736dd91300e",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 244,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1853,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 244,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 246,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 244,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 495,
        "pending": 0,
        "failed": 30
      },
      "testScripts": {
        "total": 931,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 922,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 276.8617886178864,
      "responseMin": 6,
      "responseMax": 5160,
      "responseSd": 804.4872105599458,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1686530679081,
      "completed": 1686530757816
    },
    "executions": [
      {
        "id": "8318a92e-8818-4163-b070-35d8ee7a0d59",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 244,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "00edb34a-d34b-4b2c-ac9f-9bf2b6d8c858",
          "httpRequestId": "301c1224-622d-4b20-a273-0b186d598d67"
        },
        "item": {
          "id": "8318a92e-8818-4163-b070-35d8ee7a0d59",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "a264d959-7d03-4a80-b69c-222b49c1ac4d",
          "status": "OK",
          "code": 200,
          "responseTime": 51,
          "responseSize": 0
        }
      },
      {
        "id": "dab4be0c-196f-4ad9-b508-d416ff20378d",
        "cursor": {
          "ref": "76a64096-2e93-4f8b-84bc-ebb532b009e8",
          "length": 244,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "0b2a171c-71f9-4217-ba51-01674bca3588"
        },
        "item": {
          "id": "dab4be0c-196f-4ad9-b508-d416ff20378d",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "1fa8e1b2-3484-4581-8362-ee3e081a94f8",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "e3edf339-078a-452b-93d5-40b7fb460400",
        "cursor": {
          "ref": "d01b7dcb-cd0a-47b1-b5d6-dff9003b9041",
          "length": 244,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "30efdb0b-74fd-4b4e-b9c0-adc4abeda9bf"
        },
        "item": {
          "id": "e3edf339-078a-452b-93d5-40b7fb460400",
          "name": "did_json"
        },
        "response": {
          "id": "69471cde-b787-4227-9d25-66d282d69842",
          "status": "OK",
          "code": 200,
          "responseTime": 416,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af9fd205-3e95-4a09-933e-703a23467c9d",
        "cursor": {
          "ref": "422897cc-9864-4db1-84be-35ff45af0a28",
          "length": 244,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "341c4f81-55ab-4d34-b757-59b94e0a335c"
        },
        "item": {
          "id": "af9fd205-3e95-4a09-933e-703a23467c9d",
          "name": "did:invalid"
        },
        "response": {
          "id": "9f4b04c1-31e4-403b-808a-4493892f968c",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1193,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "af9fd205-3e95-4a09-933e-703a23467c9d",
        "cursor": {
          "ref": "422897cc-9864-4db1-84be-35ff45af0a28",
          "length": 244,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "341c4f81-55ab-4d34-b757-59b94e0a335c"
        },
        "item": {
          "id": "af9fd205-3e95-4a09-933e-703a23467c9d",
          "name": "did:invalid"
        },
        "response": {
          "id": "9f4b04c1-31e4-403b-808a-4493892f968c",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1193,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "0b2c2755-d1db-4410-a854-38eee2786e21",
        "cursor": {
          "ref": "4960b150-d1d9-460d-a876-a05d46d1b497",
          "length": 244,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "a936d6b1-9e39-44fd-b90d-565c865668a6"
        },
        "item": {
          "id": "0b2c2755-d1db-4410-a854-38eee2786e21",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "1ced2535-6fe0-43b5-a2ca-3dc7f61684ff",
          "status": "Not Found",
          "code": 404,
          "responseTime": 37,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ed6cc17-8d4a-438b-90d5-b01c9b56a08e",
        "cursor": {
          "ref": "b07cf116-b520-458b-b9b0-d11c8292a185",
          "length": 244,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "97719825-7e01-4658-ba1a-172f2af7a72a"
        },
        "item": {
          "id": "4ed6cc17-8d4a-438b-90d5-b01c9b56a08e",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "6124129c-5a7e-4e64-9938-2c92396d8f0a",
          "status": "Not Found",
          "code": 404,
          "responseTime": 42,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b33fc906-9b99-4b8c-b57d-0d79214bfcb0",
        "cursor": {
          "ref": "88a8e12e-6d35-47da-8137-78dc6a2715b9",
          "length": 244,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "10f46ec5-0554-4e52-97bc-a3343844d4bb"
        },
        "item": {
          "id": "b33fc906-9b99-4b8c-b57d-0d79214bfcb0",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "8175d57a-2cd0-4698-a226-bf4db418bb86",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 163,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "978bdf4e-590f-4b12-9a82-c514280fbe20",
        "cursor": {
          "ref": "12a95ab3-c15b-4d52-a1e7-25b9f3648d43",
          "length": 244,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "399e4de7-dcf7-4f8a-b531-377ff447231f"
        },
        "item": {
          "id": "978bdf4e-590f-4b12-9a82-c514280fbe20",
          "name": "identifiers"
        },
        "response": {
          "id": "ad3d0e5f-6e63-4c42-96fe-b7048dab19b0",
          "status": "OK",
          "code": 200,
          "responseTime": 42,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d4d252e-b446-4303-a6f4-619253181db1",
        "cursor": {
          "ref": "8b839e3c-f31a-4675-b8ed-16e614e90367",
          "length": 244,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "e7eb8c95-48e9-47ac-9319-275e7798aefb"
        },
        "item": {
          "id": "9d4d252e-b446-4303-a6f4-619253181db1",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "de0e2512-37e0-4c1b-bfd0-caadb14706a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 361,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e621aae3-4087-408c-875f-b0b5027427e0",
        "cursor": {
          "ref": "d21b5ee6-b5c1-4049-bb33-4c6e20275035",
          "length": 244,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "e063dc9c-492c-40f7-bdfc-a840ff0acfdd"
        },
        "item": {
          "id": "e621aae3-4087-408c-875f-b0b5027427e0",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "9406794b-c53d-4203-a4c6-540417c37a44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "709a9003-b72c-4851-9144-98758b456dfc",
        "cursor": {
          "ref": "10f892fc-c89e-41fe-8974-64ee9ea9e5f6",
          "length": 244,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "d5c94612-4407-409e-a759-ac18f322eda7"
        },
        "item": {
          "id": "709a9003-b72c-4851-9144-98758b456dfc",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "e6afd04b-c484-4f60-9032-4c6fb8e499bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f42029f-0d4c-4da0-be81-a233d2f63e9d",
        "cursor": {
          "ref": "38830c55-341a-410f-8689-c5486b7fbab8",
          "length": 244,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "df7e450f-b274-402f-8a8e-f08457843fff"
        },
        "item": {
          "id": "3f42029f-0d4c-4da0-be81-a233d2f63e9d",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "ed81da05-5b63-4bdb-8bc6-c3119f06d09d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c383bf6c-116c-495d-bf8d-1730a65bc2f1",
        "cursor": {
          "ref": "ffb0c6cf-3122-4adb-956f-d46660edac75",
          "length": 244,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "360a1ab2-d5a6-44d6-b5b9-4bac6316f100"
        },
        "item": {
          "id": "c383bf6c-116c-495d-bf8d-1730a65bc2f1",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "1d5da2d8-62a3-46dd-826e-797ccd0ccf91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a0c1a47-b972-4240-b518-c00a894e58ca",
        "cursor": {
          "ref": "5a6cf5dd-1f31-403b-947c-0072b73395e1",
          "length": 244,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "2665fb44-6394-4080-8b27-59bb1d8d72fc"
        },
        "item": {
          "id": "5a0c1a47-b972-4240-b518-c00a894e58ca",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "ddcafda8-323a-41d2-8255-e058e029513a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43622e11-146d-42f5-a00c-0921ef5254b0",
        "cursor": {
          "ref": "d883147a-1add-41bf-8d6c-b82d3fbf67d8",
          "length": 244,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "9cc6bb91-2408-4535-b2ba-719a3639fee2"
        },
        "item": {
          "id": "43622e11-146d-42f5-a00c-0921ef5254b0",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "f5416927-4187-4aee-80bd-714de5d95fcb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9101b70f-0dc6-428a-9b60-797a8dc289ff",
        "cursor": {
          "ref": "ea2b4184-29ee-41f3-b31f-dd32c3d02a86",
          "length": 244,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "aba89f5a-a4bf-4485-9e71-86daf530cb38"
        },
        "item": {
          "id": "9101b70f-0dc6-428a-9b60-797a8dc289ff",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "15e97e74-5799-4c04-a73f-4202c27a67b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46b6204e-6a35-4d69-ac86-c688e7c89051",
        "cursor": {
          "ref": "005e719a-84dd-4b73-be19-931d4bbd2334",
          "length": 244,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "87acdf85-3e96-4d65-90f4-c11db7b7433f"
        },
        "item": {
          "id": "46b6204e-6a35-4d69-ac86-c688e7c89051",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "14d9f1c2-2ef9-4760-8c40-29f93b89304b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ccc0ed8-69cb-468c-a4bb-9dcc63b8c4fb",
        "cursor": {
          "ref": "8f409cb8-5867-4a32-873f-32d260d7868a",
          "length": 244,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "40db8a06-d912-442c-9947-4f577c6b2e1c"
        },
        "item": {
          "id": "4ccc0ed8-69cb-468c-a4bb-9dcc63b8c4fb",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "a74655a0-e8b2-45b7-8e51-fe39958fa0e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f45d2b31-5eb9-4e11-90ad-0fd05a42841f",
        "cursor": {
          "ref": "9fc26c48-1dc3-4181-9af5-c3e132c0bd99",
          "length": 244,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "38443ce7-f448-4f3e-adef-e8b218f6dabf"
        },
        "item": {
          "id": "f45d2b31-5eb9-4e11-90ad-0fd05a42841f",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "092e6d89-40e3-4cdb-b5a4-60b56bbb48de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99f158b8-849b-4bc5-a245-b4ecd893bc22",
        "cursor": {
          "ref": "df6ef016-863b-479f-945c-75f38aacb351",
          "length": 244,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "a38215a2-d7f5-474b-ad9c-6ac7aa281a80"
        },
        "item": {
          "id": "99f158b8-849b-4bc5-a245-b4ecd893bc22",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "07a1d772-160d-4524-b2e6-bc608290f18c",
          "status": "Created",
          "code": 201,
          "responseTime": 1486,
          "responseSize": 982
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "9df3139b-6b4b-4169-8505-567b9cd06e1f",
        "cursor": {
          "ref": "db26e4f4-974d-4fcf-9750-ae186767c155",
          "length": 244,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "cd89f93c-f6d0-4067-8b55-77df7fff936a"
        },
        "item": {
          "id": "9df3139b-6b4b-4169-8505-567b9cd06e1f",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "dc7b0da1-c017-45a1-b945-08747e2521f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01e3f6ac-53df-47b4-a540-3df47b386157",
        "cursor": {
          "ref": "cdf3849c-8204-4409-b6b2-e983aefc7b7c",
          "length": 244,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "9b6b93f4-a5ca-4df3-a4af-c75cf6ab45ce"
        },
        "item": {
          "id": "01e3f6ac-53df-47b4-a540-3df47b386157",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "93e512fe-795f-4779-94e4-cdc1f5557b28",
          "status": "Created",
          "code": 201,
          "responseTime": 5160,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "120f0240-5ca7-4fc4-9550-c3545392920d",
        "cursor": {
          "ref": "002aa714-fb9d-4a9d-8a93-8b2264cb04e2",
          "length": 244,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "682c5890-9d51-438d-990e-6a440a2e0861"
        },
        "item": {
          "id": "120f0240-5ca7-4fc4-9550-c3545392920d",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "de40e123-31cf-4838-b07e-4098a9ef335c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9aa6fb0-b4bd-4d24-85c9-5c6d84eb840e",
        "cursor": {
          "ref": "4a009cf6-f948-4c2d-9b29-476417943e53",
          "length": 244,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "cd14f694-8fe5-4a06-b7c5-653e92ad17e7"
        },
        "item": {
          "id": "f9aa6fb0-b4bd-4d24-85c9-5c6d84eb840e",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "3ec45825-9623-49e7-a43d-02b171b79af9",
          "status": "Created",
          "code": 201,
          "responseTime": 4072,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "8e21f74e-708d-401b-90ed-6ec8b86b7c20",
        "cursor": {
          "ref": "356047e8-5879-45e0-aeae-e036eac423d6",
          "length": 244,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "79a25a4c-59f0-4a93-9ad4-a8c2fab4a9da"
        },
        "item": {
          "id": "8e21f74e-708d-401b-90ed-6ec8b86b7c20",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "4c541f82-4418-4af0-a767-1a4d96757385",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8f03118-59a6-43ff-a0eb-62ae4c4a4a0e",
        "cursor": {
          "ref": "4e6947e4-b788-4b08-bde6-50a03040b49d",
          "length": 244,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "9179b8ed-4df7-40c2-902c-28cd9c296495"
        },
        "item": {
          "id": "b8f03118-59a6-43ff-a0eb-62ae4c4a4a0e",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "cd42b9a8-77eb-423a-a9b0-e6ba951efeb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00390672-2720-404a-b819-9ab199f4c2ae",
        "cursor": {
          "ref": "34eae7d4-896b-4a85-a4bc-4f5b56d766b9",
          "length": 244,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "6bfb713b-797c-4dd5-b722-d7293016f676"
        },
        "item": {
          "id": "00390672-2720-404a-b819-9ab199f4c2ae",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "e0af47f7-c6bc-4937-b0ab-3cd2eefb40b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1b6aa3d-2ed9-40d3-9807-59b3a517cba6",
        "cursor": {
          "ref": "ff00f6a6-6059-413c-9ec2-ee4ce5d50850",
          "length": 244,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "4aa4ab15-50f6-46b3-af1d-9965f2ead5ee"
        },
        "item": {
          "id": "a1b6aa3d-2ed9-40d3-9807-59b3a517cba6",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "90983aac-8980-437e-9be3-cd47f4eac2dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e151193-42cf-49a8-b0cc-b3ad51fbbf0f",
        "cursor": {
          "ref": "9086889c-d891-49df-94ed-a3dd2dbdaf1b",
          "length": 244,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "d1e70d37-db50-4ce0-8632-93d1101a10f3"
        },
        "item": {
          "id": "5e151193-42cf-49a8-b0cc-b3ad51fbbf0f",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "22026aa1-b8d0-4e4f-8480-1dd4cac69e6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37ce5427-a0b1-4158-a55a-e0eddf51df73",
        "cursor": {
          "ref": "b32b34d6-4c57-41c0-b967-fda25e0ed5e6",
          "length": 244,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "4b12201b-2164-4f0e-83a8-681ed1ae82ee"
        },
        "item": {
          "id": "37ce5427-a0b1-4158-a55a-e0eddf51df73",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "496b3983-c2d0-455f-b9b3-6bb727bb3a55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df3dc72e-6f63-4db6-bb34-7d633ffdf58c",
        "cursor": {
          "ref": "ac499d5e-f8de-4dd9-8285-2449608aff87",
          "length": 244,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "06624860-2893-48ba-96ac-794f4227c6d1"
        },
        "item": {
          "id": "df3dc72e-6f63-4db6-bb34-7d633ffdf58c",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "aaa735de-07ad-4f9f-951d-63062b89cb50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bda61982-d821-486a-abd7-65894d2525a0",
        "cursor": {
          "ref": "1b502c82-3d3b-4a3b-88f1-58a070e21806",
          "length": 244,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "78063b74-2b20-4a8d-97d6-cd94fa8fe912"
        },
        "item": {
          "id": "bda61982-d821-486a-abd7-65894d2525a0",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "c9ac7657-111c-4566-b282-7aa6871b3831",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "263f7f54-a209-4268-ab30-371c76d00f07",
        "cursor": {
          "ref": "70f76a69-e66a-4dd5-9ea5-e9d9f0f68f92",
          "length": 244,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "d6deba0e-85a2-4d29-bafd-3670bae042a0"
        },
        "item": {
          "id": "263f7f54-a209-4268-ab30-371c76d00f07",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "1a7b597c-871c-4de4-8b8e-51b1ac3df137",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea759953-e5d4-47fc-bc41-5f8eb1d72103",
        "cursor": {
          "ref": "4d9b3b55-a500-4def-9867-c916819a7e13",
          "length": 244,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "64ec4e95-e043-40e9-adc7-1b0fdcccd7b5"
        },
        "item": {
          "id": "ea759953-e5d4-47fc-bc41-5f8eb1d72103",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "0aacec74-3ea8-41a4-b543-4527e6fb261d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51646b96-aa22-437a-87f5-3478001dbda0",
        "cursor": {
          "ref": "418c54c0-53c4-443e-94ef-5667815f952f",
          "length": 244,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "f9973014-d133-44d3-864d-cc8013336043"
        },
        "item": {
          "id": "51646b96-aa22-437a-87f5-3478001dbda0",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "0ba3a8ab-7be4-4f9d-8b3d-3cab64cef61e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c66fd6e-6561-493b-a454-db7f50f9b8df",
        "cursor": {
          "ref": "cfbd81f4-ba4b-4ff8-bf6f-3fae80b5fbf2",
          "length": 244,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "8b494d4e-7fc5-49ef-91dd-f5115b1dc1d4"
        },
        "item": {
          "id": "5c66fd6e-6561-493b-a454-db7f50f9b8df",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "7685fc51-c19a-4a85-adc8-aa6e6d2e3ebf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c308717f-dd95-4074-8c40-7fa29ead9aab",
        "cursor": {
          "ref": "94c3edf8-81cb-452b-a349-7fb40af9a49f",
          "length": 244,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "d75ca322-72e5-4a93-add0-ef0cb46f2b7b"
        },
        "item": {
          "id": "c308717f-dd95-4074-8c40-7fa29ead9aab",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "e1a59fc9-2431-4e52-b798-329a0bb90f9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50908c3a-0c01-42e0-9691-5e3453c712ff",
        "cursor": {
          "ref": "a031931b-ede6-4cb8-941d-1bbdebed4fd6",
          "length": 244,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "98c2e8f3-87e0-4299-b1d2-e9f91121aa5e"
        },
        "item": {
          "id": "50908c3a-0c01-42e0-9691-5e3453c712ff",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "0796eca0-e55b-466e-ae5c-d840de462196",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97fac888-3110-49b2-947a-b62d875855ed",
        "cursor": {
          "ref": "3469d3d0-9faa-4ddb-af3a-feb738dbddb9",
          "length": 244,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "135411f0-c68e-4092-8227-b3cc31ac0183"
        },
        "item": {
          "id": "97fac888-3110-49b2-947a-b62d875855ed",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "2fdc5ccd-eb92-4de1-af97-e629a34bab15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67d1d145-96d6-4a90-8866-60f2a469be6a",
        "cursor": {
          "ref": "006bd591-ad35-4583-954d-c56c888b8a54",
          "length": 244,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "66679e23-5f8d-4e76-b446-800b18a32eef"
        },
        "item": {
          "id": "67d1d145-96d6-4a90-8866-60f2a469be6a",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "cf29004c-c399-4cba-94d3-e055f27a9953",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40e7db9e-ec95-4c37-838f-e42f1ffca196",
        "cursor": {
          "ref": "7218057f-babf-4933-80bf-35cdd83b845a",
          "length": 244,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "312eeb27-6df3-4296-b73a-1641fbdc987a"
        },
        "item": {
          "id": "40e7db9e-ec95-4c37-838f-e42f1ffca196",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "b67a240c-89b8-457f-8f68-38ac1b11ea8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08c29946-b3eb-4702-962f-03580036cd7d",
        "cursor": {
          "ref": "b181efc3-3558-4608-8fdc-857f8aafeff2",
          "length": 244,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "39913e32-a8b1-4a8d-abe0-0ca906402565"
        },
        "item": {
          "id": "08c29946-b3eb-4702-962f-03580036cd7d",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "c9bb9e2c-5c9d-4375-9f24-203783c31cb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13905340-6b58-4c5d-a16e-6826b29e2d56",
        "cursor": {
          "ref": "19f009a1-87f1-4636-8185-80220a2122a6",
          "length": 244,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "28b105cb-44ed-4ae2-9588-29d2dcb06857"
        },
        "item": {
          "id": "13905340-6b58-4c5d-a16e-6826b29e2d56",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "726c9d89-4c56-4514-a619-7aea2faab78f",
          "status": "Created",
          "code": 201,
          "responseTime": 2720,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "dc0ed8cc-341d-44c4-8b23-f6b8ed9330d6",
        "cursor": {
          "ref": "3a6a5c8e-94f6-4679-ada3-c810e8d4ce5f",
          "length": 244,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "f0a69b8c-7b58-414b-bf68-b78ebd558d4c"
        },
        "item": {
          "id": "dc0ed8cc-341d-44c4-8b23-f6b8ed9330d6",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "b8fdce27-d09c-4f94-bc64-3f8bf3b51cde",
          "status": "Created",
          "code": 201,
          "responseTime": 3754,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "431f93c7-2ab9-42dd-9ae8-ae175c5e4487",
        "cursor": {
          "ref": "7d629dde-40be-44ca-afeb-63d445d5e6c4",
          "length": 244,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "fc523193-4387-4291-8203-aeb272787317"
        },
        "item": {
          "id": "431f93c7-2ab9-42dd-9ae8-ae175c5e4487",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "96805a71-6be8-45fb-8436-428a069dc942",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 118,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57494aa4-fbc1-4960-ab95-3ccb8db87b3b",
        "cursor": {
          "ref": "06fc85c6-7e8d-42c4-9558-9a744fc7ab36",
          "length": 244,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "03428416-b782-4f70-b221-7f01d13a5066"
        },
        "item": {
          "id": "57494aa4-fbc1-4960-ab95-3ccb8db87b3b",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "163ab432-180f-4279-9379-5842eeb917cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a6ac733-f2de-49af-acb5-c0b2e2aef1d2",
        "cursor": {
          "ref": "9a5bba63-9e62-456f-9fd0-44d9891d6b1d",
          "length": 244,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "97141564-00d0-4554-98c3-da2a4c751c3d"
        },
        "item": {
          "id": "9a6ac733-f2de-49af-acb5-c0b2e2aef1d2",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "399a6a9b-3e08-4a6b-a3bc-eb1e6ded470d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c0db0d4-b624-4ce6-b70a-15be4dda44fe",
        "cursor": {
          "ref": "415772ec-d883-40a9-ad3d-0792fbc37d13",
          "length": 244,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "e59e5885-55d2-4144-901d-6fb8a3334a83"
        },
        "item": {
          "id": "1c0db0d4-b624-4ce6-b70a-15be4dda44fe",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "7aa6d487-0e8a-409e-98d1-0f2367f1b3c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e71ced1b-ef8b-4ee6-a931-7f28f6f0e21d",
        "cursor": {
          "ref": "42315876-6fcd-4816-acc6-6823a9b3dc3a",
          "length": 244,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "e61a1010-eae0-45e2-8176-6f60df5b7aa5"
        },
        "item": {
          "id": "e71ced1b-ef8b-4ee6-a931-7f28f6f0e21d",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "1799743f-4b83-44b1-83c6-7774f2646d5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6b8438f-ea7e-44d7-898d-f02606bdd1c2",
        "cursor": {
          "ref": "44c84519-f852-4e70-80b1-6c7bef58af50",
          "length": 244,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "9f105bd0-921f-435e-8d8b-8eb581b2c102"
        },
        "item": {
          "id": "f6b8438f-ea7e-44d7-898d-f02606bdd1c2",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "954b394d-69cc-4c1c-a5eb-f7fa273543b4",
          "status": "Created",
          "code": 201,
          "responseTime": 2537,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "9f70c0ec-5dde-4a91-a365-073c9104fe59",
        "cursor": {
          "ref": "d7231926-0391-4af1-8d12-97c7d85f8800",
          "length": 244,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "75953807-b9d8-4f8c-b2d6-139fc36ccfea"
        },
        "item": {
          "id": "9f70c0ec-5dde-4a91-a365-073c9104fe59",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "ae790e86-caac-4fbb-8ef2-a593c4a36059",
          "status": "Created",
          "code": 201,
          "responseTime": 2891,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "10991933-b45e-43a0-8623-7364a6c1eac1",
        "cursor": {
          "ref": "e93e8290-9f38-4168-b8c2-158b27d850ee",
          "length": 244,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "fe1ee393-8587-4783-a157-64854b413c5b"
        },
        "item": {
          "id": "10991933-b45e-43a0-8623-7364a6c1eac1",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "70442be1-155e-43cc-8fb5-537f211b10d8",
          "status": "Created",
          "code": 201,
          "responseTime": 2654,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "a725e4fd-7efe-4a83-9243-b1f7c24acd88",
        "cursor": {
          "ref": "6fedffe3-a620-4dc9-b0d5-3720ca90bdf0",
          "length": 244,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "41d5461d-c52c-4672-9d43-0d8b5078661c"
        },
        "item": {
          "id": "a725e4fd-7efe-4a83-9243-b1f7c24acd88",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "2fcc11ec-b267-4bcb-a9c9-4e388649197e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7acd3267-0036-4270-a767-4b7fef3b475d",
        "cursor": {
          "ref": "71557081-74fd-442b-a32e-9359c07b3b59",
          "length": 244,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "ec564e31-e93d-4b67-a9e5-c03c4bd4e70a"
        },
        "item": {
          "id": "7acd3267-0036-4270-a767-4b7fef3b475d",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "6490ecea-27e1-4ec8-907d-c3cd8275d521",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27feefb0-3369-4757-a6a2-5268c6cc9269",
        "cursor": {
          "ref": "2e2504dc-ea07-4be5-bc6c-5d4af48951b1",
          "length": 244,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "910734a9-af36-4f91-a279-0427b160527e"
        },
        "item": {
          "id": "27feefb0-3369-4757-a6a2-5268c6cc9269",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "8e7830ad-bcfc-42bd-b388-7b8e78187b6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77f1e85d-bdd4-431e-8239-d7829bbebd9a",
        "cursor": {
          "ref": "9f1f5316-36e5-4de3-b5cf-d90a018f0f74",
          "length": 244,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "23dfcb43-247a-44d3-bbc5-1d897cc30eb7"
        },
        "item": {
          "id": "77f1e85d-bdd4-431e-8239-d7829bbebd9a",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "ffe4e8ae-1f13-4aef-8b4e-1663629b5d78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8383266e-8c0b-4c99-9bfa-fdaf7536fb94",
        "cursor": {
          "ref": "7498eb66-f1a5-4f8d-93dc-89ae82f78b80",
          "length": 244,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "97d86f9e-55e9-43e6-95c5-2c78772351aa"
        },
        "item": {
          "id": "8383266e-8c0b-4c99-9bfa-fdaf7536fb94",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "afbc9d0a-b938-4fcd-be37-263a02ce0f58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9974d97d-8c04-47df-91ee-4775fa3490a2",
        "cursor": {
          "ref": "c987e3cb-b76f-41c6-ba9a-a0137b6b6418",
          "length": 244,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "e5fdaaf4-3930-46e2-b874-45f81807b571"
        },
        "item": {
          "id": "9974d97d-8c04-47df-91ee-4775fa3490a2",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "daf5e3a0-dff5-48ef-8358-6688c383fdd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ac22446-4ece-4903-86ff-325ae0992179",
        "cursor": {
          "ref": "9e0d93b4-2f58-4107-aa2b-a1418ced209c",
          "length": 244,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "07c850e6-7a6b-4638-86e8-65c367ad37a9"
        },
        "item": {
          "id": "2ac22446-4ece-4903-86ff-325ae0992179",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "ee865b97-7c73-473c-b6c0-d09be98caf1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b109814b-b739-4f31-ac8d-417f3c8613eb",
        "cursor": {
          "ref": "9b1f7dd3-e83b-4c8d-8fb9-dcae0e664c82",
          "length": 244,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "fe232585-3fd8-4abb-bdce-3afe82ec2322"
        },
        "item": {
          "id": "b109814b-b739-4f31-ac8d-417f3c8613eb",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "bc47a7b0-7255-4b15-ac41-6073a40e1ddb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be0b6cb9-edac-4300-870b-182a164ab097",
        "cursor": {
          "ref": "5401252c-52db-445a-86c3-a1d38e6d2af2",
          "length": 244,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "cec3f47a-4b1c-4c36-9bfd-49d107c66f2e"
        },
        "item": {
          "id": "be0b6cb9-edac-4300-870b-182a164ab097",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "1a70c07f-68c4-4296-9603-052cc3bb1ee0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1bb20fc-b6e5-4ede-982b-10b68df6c963",
        "cursor": {
          "ref": "f8507bb0-a6a7-427b-8bac-ea4c1ed21243",
          "length": 244,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "879852e1-394d-4919-b4eb-658887fe6285"
        },
        "item": {
          "id": "f1bb20fc-b6e5-4ede-982b-10b68df6c963",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "953ae6ba-221f-4310-b425-7e566d73a6a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f2e13a2-4b28-4d48-a23e-770339d6dbd0",
        "cursor": {
          "ref": "a1616c84-24ed-422f-927c-885ca192b9ee",
          "length": 244,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "7030527e-be6f-4c5a-82db-b3c63f647bef"
        },
        "item": {
          "id": "3f2e13a2-4b28-4d48-a23e-770339d6dbd0",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "11334dd1-0a3e-4bb8-a05f-fcfb4f87a2ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b56e5f3c-63d0-4630-a43f-fc70642ec1f4",
        "cursor": {
          "ref": "5dd2405b-f9d4-4bb1-a12c-800a5e5bdaf6",
          "length": 244,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "03149878-6263-4ab4-a13b-a0234817fba4"
        },
        "item": {
          "id": "b56e5f3c-63d0-4630-a43f-fc70642ec1f4",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "aa312c4d-6d6b-431c-958a-e2e96bdb4cda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "319934b8-3064-4a8a-a72f-23cd73be3966",
        "cursor": {
          "ref": "a6e7c66d-48d1-4afd-a59a-bd1a4bbbc1e2",
          "length": 244,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "bd7d1a37-bbfe-4e2b-a449-efb6c3ff74a6"
        },
        "item": {
          "id": "319934b8-3064-4a8a-a72f-23cd73be3966",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "df98baf6-be46-4cff-a969-996a5622c852",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e22d5202-2af6-42ea-9f87-ee1e23a84c14",
        "cursor": {
          "ref": "890b74cc-c449-4519-b18a-fbb37ca8aae4",
          "length": 244,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "d9e40721-5d86-4bba-b1a3-213301556147"
        },
        "item": {
          "id": "e22d5202-2af6-42ea-9f87-ee1e23a84c14",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "37908917-2e3c-4e21-8240-8f638bed0dcb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "640d2942-e6eb-42c6-bbf5-73424eeb02a6",
        "cursor": {
          "ref": "512f9d5f-1ca8-4193-8190-eba0b2d0df8b",
          "length": 244,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "acef1a7d-464a-461e-b413-686eb3592480"
        },
        "item": {
          "id": "640d2942-e6eb-42c6-bbf5-73424eeb02a6",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "453e535a-a266-4fad-8d5e-acdf41fa35d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "401eb9e7-56dc-4cf1-a686-4e2f633fe05e",
        "cursor": {
          "ref": "4330a530-639b-4ef7-a419-75322e890f28",
          "length": 244,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "bb5fa9d2-1e40-4113-b204-9dad979dd759"
        },
        "item": {
          "id": "401eb9e7-56dc-4cf1-a686-4e2f633fe05e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "5313e8d6-1c28-4e7e-b2ba-5309f82eeffb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14fb63e5-5dd0-4b14-9d65-c817de6af6d7",
        "cursor": {
          "ref": "fb4cb4f2-fbcb-4e82-8724-e3e03e3d3cc9",
          "length": 244,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "d473f81d-34d9-41bc-a042-92a691c3a067"
        },
        "item": {
          "id": "14fb63e5-5dd0-4b14-9d65-c817de6af6d7",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "95fba424-14c3-4932-97fd-930db40be9c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1700f2c8-ca9b-4c4f-9730-60886fc35a63",
        "cursor": {
          "ref": "8640c13d-d414-4656-a1f4-c151933d9966",
          "length": 244,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "fadd3315-4e1e-43fc-807c-1f8bdcbe9ab3"
        },
        "item": {
          "id": "1700f2c8-ca9b-4c4f-9730-60886fc35a63",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "d837d8b0-a85b-45c1-8f33-7e863efd66b7",
          "status": "Created",
          "code": 201,
          "responseTime": 4428,
          "responseSize": 977
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "9532b580-8448-4370-9d2f-34f74ed116f4",
        "cursor": {
          "ref": "f3df1f56-270b-4e32-805a-f23881b15e23",
          "length": 244,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "56dc36a6-586c-44f3-b547-749e3317e153"
        },
        "item": {
          "id": "9532b580-8448-4370-9d2f-34f74ed116f4",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "4e6e2bd8-876b-4a7f-b32e-4887e1218cda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4f7374f-b632-4a4b-9c81-225d7c592019",
        "cursor": {
          "ref": "a6f9c4bd-61d9-421d-af9b-8bb08b4e3cad",
          "length": 244,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "ccc849d0-e800-4244-8357-73706c10777f"
        },
        "item": {
          "id": "e4f7374f-b632-4a4b-9c81-225d7c592019",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "11fa4d40-5dc1-4685-93ea-e9c226a0a8c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42dc0a28-cf7c-4eee-aee6-d4f8f359e0ca",
        "cursor": {
          "ref": "e8d62dce-86f2-4b42-b865-7e124bf36c0a",
          "length": 244,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "ea8d5ea9-9648-49e1-976a-9a0c5461921c"
        },
        "item": {
          "id": "42dc0a28-cf7c-4eee-aee6-d4f8f359e0ca",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "48aca93d-dffc-43ce-9ade-dc51701fbc8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80dc3d61-9484-459a-bc2d-ea67ddf25af9",
        "cursor": {
          "ref": "5f63e6dc-c2fc-4b43-b704-fc1b8b19e1bd",
          "length": 244,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "d151a0e2-3404-4395-8041-564b784147af"
        },
        "item": {
          "id": "80dc3d61-9484-459a-bc2d-ea67ddf25af9",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "67a7edc0-4ec1-4ca0-b06b-5c622f2cac1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "316aa585-919d-41fe-9c49-ebece044a1e5",
        "cursor": {
          "ref": "64000c85-d6f6-4e0b-aea8-6ebda4540e1f",
          "length": 244,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "cc8ad3ab-cb4e-472b-8803-5ffd14338dde"
        },
        "item": {
          "id": "316aa585-919d-41fe-9c49-ebece044a1e5",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "61aaf8c8-3ee2-4332-b699-7644c4327e1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1287d055-9da6-4644-a0bc-204dbb301941",
        "cursor": {
          "ref": "e3654062-3310-49ef-afec-0e99bb5372e6",
          "length": 244,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "8b900c10-5ebd-46fa-b96f-25136006c908"
        },
        "item": {
          "id": "1287d055-9da6-4644-a0bc-204dbb301941",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "5854b417-adfb-4864-b87d-bda3d98df0ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "718b8fe7-4278-48d1-b193-0f7690f9a9e4",
        "cursor": {
          "ref": "f934970e-e72b-40af-a39f-6cbae64a381e",
          "length": 244,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "f262436b-8f57-4af5-82f1-9941f9951c31"
        },
        "item": {
          "id": "718b8fe7-4278-48d1-b193-0f7690f9a9e4",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "ba89802c-0fd9-4682-9c85-c5e9b0ba9dd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81692182-dbd5-408c-994a-7fc59fa827d3",
        "cursor": {
          "ref": "c3f1a77a-2daa-48d3-a03e-39001301045e",
          "length": 244,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "28a90d8b-7b93-4954-b003-f710a90e7072"
        },
        "item": {
          "id": "81692182-dbd5-408c-994a-7fc59fa827d3",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "474959cf-c8b4-4275-b0d0-83ce52915355",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d10fd40-fd1b-4697-91e5-1a975d8b9ced",
        "cursor": {
          "ref": "3d7e0540-32b8-4e2e-8c50-e77697f5fc8c",
          "length": 244,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "514bc97e-a6b3-47f0-80f7-4f1a0c838c02"
        },
        "item": {
          "id": "4d10fd40-fd1b-4697-91e5-1a975d8b9ced",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "9f9fc1fe-5b81-48da-9d3f-05322b114c24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 150,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "698e2fdf-731b-4af2-a410-9716127c67c4",
        "cursor": {
          "ref": "5e73ba7c-2c1c-450a-91a0-0be016d0153a",
          "length": 244,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "55bb1bc9-890f-460a-b174-8597ff673fa9"
        },
        "item": {
          "id": "698e2fdf-731b-4af2-a410-9716127c67c4",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "b4faf835-9a5f-4704-b745-318da07da3d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "501b5aa3-e461-484a-a04f-d343d3f5033f",
        "cursor": {
          "ref": "b45973c8-f87e-4f2c-a9c9-e7305e62a6c3",
          "length": 244,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "fe69239c-a56e-41d5-9308-c8be0f2b48e6"
        },
        "item": {
          "id": "501b5aa3-e461-484a-a04f-d343d3f5033f",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "7bab3868-4580-482c-a134-a688023e1e3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "565cc534-0cf3-42d9-b909-678948d1c078",
        "cursor": {
          "ref": "8fe7fb53-efc9-4e56-89bf-2d4d02260f11",
          "length": 244,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "e8b3c041-05eb-49a9-ac9a-c73858b61d4f"
        },
        "item": {
          "id": "565cc534-0cf3-42d9-b909-678948d1c078",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "f4312a09-df48-4835-a761-4990a2d04aa0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca365318-8306-4f4c-9f9d-1251a28442f7",
        "cursor": {
          "ref": "af097fd2-ef47-4b53-ae50-6b7b637806e8",
          "length": 244,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "8fb0d310-ce1d-45cb-89c7-321f278a300f"
        },
        "item": {
          "id": "ca365318-8306-4f4c-9f9d-1251a28442f7",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "c3975d26-6ab1-467f-a3f5-1b126639ea3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a073e162-2937-453b-a9ba-ec11ec0be9fb",
        "cursor": {
          "ref": "e5d4ae9d-ea41-4034-9992-9fac61ae0875",
          "length": 244,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "5faab60e-3f69-488b-8339-78d8b05ef1b8"
        },
        "item": {
          "id": "a073e162-2937-453b-a9ba-ec11ec0be9fb",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "d2264575-1b53-4b5c-a478-5cadc60eb27b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 469,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d746cb70-122c-416a-8f70-a94d245cb9e8",
        "cursor": {
          "ref": "e5188708-7190-42f8-b213-1a8094c1f6e6",
          "length": 244,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "5267abaa-a68b-483d-9093-d3bafab047e7"
        },
        "item": {
          "id": "d746cb70-122c-416a-8f70-a94d245cb9e8",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "756daec1-a9fa-4ff1-be8a-c5ebd54c447a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80128fd4-60c0-4ac9-a740-9266cbd151ed",
        "cursor": {
          "ref": "fb0890af-ddbc-4f30-b766-b871e198e507",
          "length": 244,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "fbbb980e-5358-4966-9737-a2b958cf7232"
        },
        "item": {
          "id": "80128fd4-60c0-4ac9-a740-9266cbd151ed",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "d7f66db4-d8ee-4fcc-837f-7d7ea21645ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 881,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "580b160f-9d76-4ea0-bd67-9e54a6ec7b13",
        "cursor": {
          "ref": "78d1fcba-f05e-4897-9c57-647be701c53c",
          "length": 244,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "05f26e3a-3638-44a7-9520-afd042bd852e"
        },
        "item": {
          "id": "580b160f-9d76-4ea0-bd67-9e54a6ec7b13",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "0a4684e6-a29a-4f82-9e05-9f749345a0ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc3e4272-db0c-4040-9d60-50f24ced2cff",
        "cursor": {
          "ref": "18e60ec7-1c52-4ede-afc9-cef95f947638",
          "length": 244,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "87c03ab2-1d2c-4a8a-82a4-b0fad09e49d9"
        },
        "item": {
          "id": "bc3e4272-db0c-4040-9d60-50f24ced2cff",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "a2b42d24-4379-4229-bfc7-955e39d1bffc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5056109-8c3c-4e45-aa23-274b7b0192a5",
        "cursor": {
          "ref": "57cba8f7-6c34-4807-85f3-a886d493de29",
          "length": 244,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "14c8a5e2-3018-4a50-b021-894d76c938fe"
        },
        "item": {
          "id": "d5056109-8c3c-4e45-aa23-274b7b0192a5",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "4e0f0714-0cc5-436e-8c5c-77a9bf9dea00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b509a07-99fa-4aaf-b248-92509b20883f",
        "cursor": {
          "ref": "c04e9229-5cd8-40eb-9ce0-464c2b125582",
          "length": 244,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "a7328a0b-5f80-42af-92c1-f5cd6705b5ec"
        },
        "item": {
          "id": "1b509a07-99fa-4aaf-b248-92509b20883f",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "861322e6-217e-4dd0-b697-36f569551570",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "704255a4-67e4-49e7-b197-0ae404d69e98",
        "cursor": {
          "ref": "006a92c2-c2c0-4ac5-8d28-80a4f58d07fc",
          "length": 244,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "1defe33c-9d05-4617-8013-00ff0f390333"
        },
        "item": {
          "id": "704255a4-67e4-49e7-b197-0ae404d69e98",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "4c4b6779-75cf-40e3-8f47-21921243a844",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d059dd9a-7c8e-40cf-8db5-ce3b7052d837",
        "cursor": {
          "ref": "1621637d-a38a-4e4b-99df-fed24136ac07",
          "length": 244,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "d4ad1744-8015-43cc-a561-94c867b26a44"
        },
        "item": {
          "id": "d059dd9a-7c8e-40cf-8db5-ce3b7052d837",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "4255d087-18a0-4735-8071-ff79ba101e1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f893edb-05d8-4d78-88e9-58df9a906124",
        "cursor": {
          "ref": "b29bd1b8-c9d0-4510-b0ca-1a9db83d0679",
          "length": 244,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "e02ab117-2061-4b60-b80b-6e765c5297ed"
        },
        "item": {
          "id": "7f893edb-05d8-4d78-88e9-58df9a906124",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "21edc042-072f-4224-9a06-057e3f207a67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df55a727-7a54-467c-ab8b-8f1730d039a6",
        "cursor": {
          "ref": "0814e043-c208-4749-ae30-ee765df6a99d",
          "length": 244,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "c6f04642-32b5-4a2d-9a38-1029eb018977"
        },
        "item": {
          "id": "df55a727-7a54-467c-ab8b-8f1730d039a6",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "5cb63b89-fd68-4d60-aac0-5f5241d188f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1175df8-f8b5-42cd-bcf4-4d26d586a101",
        "cursor": {
          "ref": "184de07a-06a3-45c1-b768-b8860394d978",
          "length": 244,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "3bab3d73-5033-405e-bbcb-28b61a3557c0"
        },
        "item": {
          "id": "c1175df8-f8b5-42cd-bcf4-4d26d586a101",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "e55d7f54-098c-4313-be43-8540d1173dfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "256e0517-fe9a-41bf-82a0-f2d9724ffb5d",
        "cursor": {
          "ref": "1d2d7d3e-ea6e-4fd8-af7f-a4c6939af93a",
          "length": 244,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "0f0b168d-d09f-4904-81ef-477562e570f0"
        },
        "item": {
          "id": "256e0517-fe9a-41bf-82a0-f2d9724ffb5d",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "e9fadc2f-2d71-42ee-b72e-c945f282026a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "187de07a-3ca2-4e71-a496-bb21d323cef7",
        "cursor": {
          "ref": "34d3e7c1-cd72-4c03-b5f9-8b4b73d89c04",
          "length": 244,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "2ecc8b92-6522-474b-81dd-d1e4a7c95715"
        },
        "item": {
          "id": "187de07a-3ca2-4e71-a496-bb21d323cef7",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "993bfe3b-acd8-48fd-8f83-7006cca9b1fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62915a22-87cd-4b6b-9225-3e9c3081027a",
        "cursor": {
          "ref": "92d49fe6-3bc5-4d8c-ba97-364e65dc5f37",
          "length": 244,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "40f17a1c-f470-4b4f-b98d-a4d0e3b1500d"
        },
        "item": {
          "id": "62915a22-87cd-4b6b-9225-3e9c3081027a",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "ef4d7a2f-4679-49e1-b422-493393c47e1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59d144e2-38b5-4061-9fed-53ff15adc880",
        "cursor": {
          "ref": "313134f2-59b1-496b-95c8-ee25196afefe",
          "length": 244,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "977e4e30-45ef-414d-910b-17222e91a6db"
        },
        "item": {
          "id": "59d144e2-38b5-4061-9fed-53ff15adc880",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "aad2c10b-02be-493d-886a-de6e478541e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a1d788d-abab-448f-b7e6-747bb217523f",
        "cursor": {
          "ref": "814a8e3d-937c-4ff7-a074-5d057acacab1",
          "length": 244,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "f4689a8e-3798-4018-8add-3bccd14a5175"
        },
        "item": {
          "id": "8a1d788d-abab-448f-b7e6-747bb217523f",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "92a152a4-a5c2-4cdd-9148-8963a71f5ef8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf600176-1fb8-4fbe-9d07-e3fbfed2151b",
        "cursor": {
          "ref": "d0b4e799-9bee-4a72-89f4-fffe190f5367",
          "length": 244,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "40d766fd-47ff-4262-886d-6ff03a770996"
        },
        "item": {
          "id": "bf600176-1fb8-4fbe-9d07-e3fbfed2151b",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "f3b63053-f806-458d-9527-0124275ba9a5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "5b8aba68-3f8a-4bd5-9756-c71e97c381f0",
        "cursor": {
          "ref": "62a4c48b-2730-45a0-a998-ab1d758ee0c4",
          "length": 244,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "8e8f3070-2efb-4257-b86f-c2060957a605"
        },
        "item": {
          "id": "5b8aba68-3f8a-4bd5-9756-c71e97c381f0",
          "name": "credentials_issue"
        },
        "response": {
          "id": "ea2ddeb0-27fc-4b82-9b61-522904a9136d",
          "status": "Created",
          "code": 201,
          "responseTime": 2945,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9d49b51-74c5-4aa7-b20a-c3bc69c743ea",
        "cursor": {
          "ref": "a06ea686-0278-48ac-9bd7-3bb104bd7549",
          "length": 244,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "4fa3e168-121b-4573-a878-9213c232cc99"
        },
        "item": {
          "id": "d9d49b51-74c5-4aa7-b20a-c3bc69c743ea",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "46dae6aa-905b-49b0-8b58-6440d984b8ad",
          "status": "Created",
          "code": 201,
          "responseTime": 2140,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9e0609a-cf43-41d4-9133-1e577473b6f4",
        "cursor": {
          "ref": "aa700cb0-857f-49e4-a7e9-1c6976406db2",
          "length": 244,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "64895763-2389-4f6f-af43-841332ba75b9"
        },
        "item": {
          "id": "a9e0609a-cf43-41d4-9133-1e577473b6f4",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "ab479f33-91b3-4a7f-83e6-0bc5f41a0072",
          "status": "Created",
          "code": 201,
          "responseTime": 3025,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8cc7dee-93cd-4636-8372-c08f52ecbee3",
        "cursor": {
          "ref": "4a13688b-02bb-4b9d-a001-474a60c49997",
          "length": 244,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "164501e2-42d3-43a2-a11e-6cd03e96bd76"
        },
        "item": {
          "id": "e8cc7dee-93cd-4636-8372-c08f52ecbee3",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "5eda23f6-7a1e-426d-a934-d29f46dbbb1a",
          "status": "Created",
          "code": 201,
          "responseTime": 3113,
          "responseSize": 992
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "01d6868d-ceb3-47bd-a518-17977dd4154e",
        "cursor": {
          "ref": "f9226fd4-51ff-4d96-b4a4-d5ee0fad3c49",
          "length": 244,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "89f80ace-186e-47d4-9f67-ac865da924f0"
        },
        "item": {
          "id": "01d6868d-ceb3-47bd-a518-17977dd4154e",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "7015710e-beb2-4479-885b-a9da19274d6b",
          "status": "Created",
          "code": 201,
          "responseTime": 2561,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-06-12T00:45:34Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-06-12T00:45:34Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "881fafec-2bb4-4450-9bd6-5e78b2dd5c38",
        "cursor": {
          "ref": "201c55ac-44c7-49fe-b400-63e798acff5e",
          "length": 244,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "90da2239-b3cd-4e55-8413-c67977fbd0b6"
        },
        "item": {
          "id": "881fafec-2bb4-4450-9bd6-5e78b2dd5c38",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "f7082cfe-575d-403a-8935-76fb5eed7cd1",
          "status": "Created",
          "code": 201,
          "responseTime": 2790,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b762fd53-6a9f-423f-bd3a-c01f60b55f1e",
        "cursor": {
          "ref": "35083cb4-eb0d-46a0-a78c-21bfce2e361b",
          "length": 244,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "3f6015ea-216f-4276-b00b-b850d9a4ea86"
        },
        "item": {
          "id": "b762fd53-6a9f-423f-bd3a-c01f60b55f1e",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "3a58dfe2-9e30-49c4-9c05-2e218069610a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 129,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dcb962c-b73b-4097-8c14-e9d491b7e2e1",
        "cursor": {
          "ref": "3ca19706-1720-4d95-9353-3cd2f92295c3",
          "length": 244,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "61c2c980-ba8f-4f88-9428-6aed422c73f7"
        },
        "item": {
          "id": "4dcb962c-b73b-4097-8c14-e9d491b7e2e1",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "16d6aa15-ef6a-4024-9e2a-b4990c356300",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9899c6c0-3ee8-4178-867f-5faef91c2c77",
        "cursor": {
          "ref": "6cdeba2d-3726-4577-924a-cb89b55f9f44",
          "length": 244,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "e25d375c-f188-4cb9-a95c-3adc4030f6c5"
        },
        "item": {
          "id": "9899c6c0-3ee8-4178-867f-5faef91c2c77",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "2afc7bc1-7828-46c3-a748-0fb19bc6e67a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6aff5a66-0783-4003-a389-2ddadb30741f",
        "cursor": {
          "ref": "73844e5c-1be8-4717-b4e8-859c5eaebcb2",
          "length": 244,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "385629f8-961e-4a7d-bdd7-fb29424e0b70"
        },
        "item": {
          "id": "6aff5a66-0783-4003-a389-2ddadb30741f",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "6a74eefa-0d01-407d-9cb8-842a18057ab7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 120,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80b04fc1-1fee-4835-83ef-c305efea1176",
        "cursor": {
          "ref": "ea5e7a81-27cf-4f83-a3e4-b83126f8e2fc",
          "length": 244,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "e5955699-71b4-4312-b4e2-e2c93864f96e"
        },
        "item": {
          "id": "80b04fc1-1fee-4835-83ef-c305efea1176",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "dafe3f8d-6147-455b-a00e-87075eecfdac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac59f0aa-e4ca-45f9-bf15-9e6e92bb9cba",
        "cursor": {
          "ref": "746afffe-1e2e-4330-a9ca-26f2ba28afc2",
          "length": 244,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "66ef5a50-b7f3-454a-9f49-f074f026c59a"
        },
        "item": {
          "id": "ac59f0aa-e4ca-45f9-bf15-9e6e92bb9cba",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "3551f7df-0864-406d-9949-aaa1a6acc6fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4dd5b89-330a-4835-964c-af48010c44df",
        "cursor": {
          "ref": "8000bdab-b6d3-4e85-aece-ee044a58f86e",
          "length": 244,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "382c3eb5-a1a2-436b-a03d-fada42f0059f"
        },
        "item": {
          "id": "a4dd5b89-330a-4835-964c-af48010c44df",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "921c94aa-519b-46de-b85f-e017f3e67950",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f19ebc1c-9d61-42d8-897f-260e4a78887b",
        "cursor": {
          "ref": "7905b779-2506-4cea-978e-d99b48be5135",
          "length": 244,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "0b38cc92-f7d9-4526-b4c7-ccd8de9e1b67"
        },
        "item": {
          "id": "f19ebc1c-9d61-42d8-897f-260e4a78887b",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "77d0ae39-613b-4f04-9740-26924b1a0436",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79101c39-060b-46e2-8a3d-ee46318da368",
        "cursor": {
          "ref": "e65e02ec-f74f-4fa7-9f93-ab2b340e3773",
          "length": 244,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "b41d6c4b-363a-4036-8bd3-611262491758"
        },
        "item": {
          "id": "79101c39-060b-46e2-8a3d-ee46318da368",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "e2ceccd6-a040-46ce-89a9-5f662f9aa950",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70d600c1-78b2-4d25-b034-af4477f6d300",
        "cursor": {
          "ref": "e93e2e35-d1f7-4d2a-9052-d05e58a3d249",
          "length": 244,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "1b77ec0e-dcfb-4463-a261-e1a004dbe37a"
        },
        "item": {
          "id": "70d600c1-78b2-4d25-b034-af4477f6d300",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "0d8edd5e-87bb-4600-8729-ea67665a18e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72c6541d-af04-44a5-8297-094b50c35286",
        "cursor": {
          "ref": "9230d3fa-0814-45ae-bc6b-f3b2c945bbf5",
          "length": 244,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "59e30fe7-d87a-4b81-8f31-cf8bb4c5d8b2"
        },
        "item": {
          "id": "72c6541d-af04-44a5-8297-094b50c35286",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "764948d7-acee-462b-9899-30b4a40327fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03d5da6c-6adf-4736-89be-c83ef5eead85",
        "cursor": {
          "ref": "522e690b-6937-43f5-b6ae-dc9e400214b9",
          "length": 244,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "b84a15eb-e0d8-4134-9302-150314d2d996"
        },
        "item": {
          "id": "03d5da6c-6adf-4736-89be-c83ef5eead85",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "31d1b24e-c5b3-4be3-a25d-301c584ab09f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4686fb9f-9af5-495b-8385-de5ab70f06d3",
        "cursor": {
          "ref": "29cb046b-89fd-4bd9-9077-e3f11688f9cc",
          "length": 244,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "d48fe8a2-928c-426f-b039-a088d7dd229a"
        },
        "item": {
          "id": "4686fb9f-9af5-495b-8385-de5ab70f06d3",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "ca89918b-b748-4c5b-884e-4930e63b9e84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bdb9092-28c9-40cd-942c-e8ff82bf5751",
        "cursor": {
          "ref": "9e84a38f-a066-4766-8ebc-e5b5c711e319",
          "length": 244,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "00f2e8dd-ca42-4459-a356-aae0cbb6c0c1"
        },
        "item": {
          "id": "0bdb9092-28c9-40cd-942c-e8ff82bf5751",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "9b085b91-566f-4bcc-91b3-30fa184c5321",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea696c38-74c1-4b36-943a-fb92d1767c52",
        "cursor": {
          "ref": "179db505-da1d-4227-b5a3-2e044865791c",
          "length": 244,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "b6fddc76-58e5-425a-abea-29ba5a44a22c"
        },
        "item": {
          "id": "ea696c38-74c1-4b36-943a-fb92d1767c52",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "c153eced-1e82-4b00-949b-1057258c4696",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71b00474-56fc-4ff7-8f96-2e4b274fcb70",
        "cursor": {
          "ref": "9a185421-2b5c-4fba-994f-3df8436f1863",
          "length": 244,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "978ea18c-8e76-4362-8076-14190eb27f46"
        },
        "item": {
          "id": "71b00474-56fc-4ff7-8f96-2e4b274fcb70",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "29e2d7fc-92cf-4808-a337-3c6c361971b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7b4dd92-6815-4eb8-847b-0dd35f045912",
        "cursor": {
          "ref": "03ef0476-92d6-4100-83b0-0ff508ca59cc",
          "length": 244,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "3da7a267-85f1-42a5-9adf-d602ffe17608"
        },
        "item": {
          "id": "d7b4dd92-6815-4eb8-847b-0dd35f045912",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "e46b6d5b-15f7-4a31-8956-45fd865cedfb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "858a5ae8-d9bb-4cc5-ac93-de9c840d2231",
        "cursor": {
          "ref": "29ef75ff-ac76-4120-96ab-16c5cf434854",
          "length": 244,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "2a75b156-f0bf-4c98-bf78-0564fc91e5fa"
        },
        "item": {
          "id": "858a5ae8-d9bb-4cc5-ac93-de9c840d2231",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "c089e424-3824-4566-84c0-4814484a43ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bceb5d2d-1a6a-4ad2-895c-4a1d02545469",
        "cursor": {
          "ref": "6db7ea80-3084-46d1-8db5-1b3065052be6",
          "length": 244,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "3fa25ce5-8cbf-48bc-b313-073ae816aae0"
        },
        "item": {
          "id": "bceb5d2d-1a6a-4ad2-895c-4a1d02545469",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "acd40e1c-e7e9-4a05-bd61-38a04043844c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bab87bee-f2f3-4652-871d-712f09b4b354",
        "cursor": {
          "ref": "8e3a5245-7f6c-4756-b546-d859ade98b92",
          "length": 244,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "bbc74616-a2b3-4e2c-aeb7-30e088721942"
        },
        "item": {
          "id": "bab87bee-f2f3-4652-871d-712f09b4b354",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "768ef086-3984-4e2d-830a-d28417e344a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b37fbfa-da97-44e8-98f9-e7b147d63856",
        "cursor": {
          "ref": "5e5c03fb-a69f-4a5d-93f6-d057b35a2ad9",
          "length": 244,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "831132db-62dc-4392-9875-d19e5084d632"
        },
        "item": {
          "id": "0b37fbfa-da97-44e8-98f9-e7b147d63856",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "7ee10482-602e-4733-bb42-dd2378ada5ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb239c14-5441-4b78-bbec-2d0efb12b7bc",
        "cursor": {
          "ref": "fefea3ed-5a6b-4eaf-847a-d960bb05ae8c",
          "length": 244,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "566a9351-15c0-4656-8f1d-b3cbf13ac7d8"
        },
        "item": {
          "id": "cb239c14-5441-4b78-bbec-2d0efb12b7bc",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "bb32e93f-8dcf-4c03-815c-582c042f916a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be0fb569-9596-4a4a-a8f6-f7c3dd14a825",
        "cursor": {
          "ref": "a9e18848-e31e-49ae-b3a4-720862575e53",
          "length": 244,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "117d57a7-2a3a-4734-9b99-fb1dbeed1977"
        },
        "item": {
          "id": "be0fb569-9596-4a4a-a8f6-f7c3dd14a825",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "89b52956-011a-42e3-9e7d-83f8040f7006",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ffb898a-7bbc-4099-99a2-6fa660750107",
        "cursor": {
          "ref": "53c960b7-9880-4cb1-beb4-e85d239bab6d",
          "length": 244,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "8f83b806-77ae-4322-aada-f77dd6e80cb1"
        },
        "item": {
          "id": "9ffb898a-7bbc-4099-99a2-6fa660750107",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "8e8cb8a9-794c-4aeb-8afe-a95a4dd029b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5004f449-ad2c-476a-83e3-82c6654ee384",
        "cursor": {
          "ref": "4fbfdf5b-fc20-4b7b-9412-7367414ce52a",
          "length": 244,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "c39374af-79fc-435b-a86c-9bff39d372f3"
        },
        "item": {
          "id": "5004f449-ad2c-476a-83e3-82c6654ee384",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "2b27af03-d21e-46ff-bdeb-968d09793499",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4eb790c-0b5f-48bc-900e-a0b0ff7e15c1",
        "cursor": {
          "ref": "cf1517a6-4017-421a-8d77-f1a53589aba6",
          "length": 244,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "eb315039-37fa-4fe4-8b36-ce469c851182"
        },
        "item": {
          "id": "b4eb790c-0b5f-48bc-900e-a0b0ff7e15c1",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "3331bf49-3f30-4080-86e2-c833fcb78ff2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acd46064-ced2-4f5e-a434-3d1977ef063e",
        "cursor": {
          "ref": "6a8cedae-76f9-4091-bc53-22da4617da6e",
          "length": 244,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "c66d87e3-b415-4e92-b165-5bbb2719dd26"
        },
        "item": {
          "id": "acd46064-ced2-4f5e-a434-3d1977ef063e",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "7cb57a33-587e-4c1c-b38a-c9aa1616d4bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89c31dc3-f042-4fc4-803d-49fb80c2053c",
        "cursor": {
          "ref": "10957439-b287-4adf-96a4-b5cf6dd7a506",
          "length": 244,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "0bd58388-f7d0-46e1-9e77-2ed8e3145f92"
        },
        "item": {
          "id": "89c31dc3-f042-4fc4-803d-49fb80c2053c",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "2266b2a0-711e-4918-a0e5-e82d10e2eee4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a458842-69b3-4bf5-9b7c-d7133fef3524",
        "cursor": {
          "ref": "a4f6114a-0867-4ae4-a985-9ba9b06f0067",
          "length": 244,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "dcac6a32-c399-433b-b480-e39ac6e68594"
        },
        "item": {
          "id": "9a458842-69b3-4bf5-9b7c-d7133fef3524",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "e317037d-5e9a-43ed-a07b-aa87ff360c35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 718,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68433c3a-e1fd-457b-9d2f-c7a352807ed1",
        "cursor": {
          "ref": "cbb8c366-b893-4b14-a1fd-5dad6ea284f1",
          "length": 244,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "70935a89-8526-4c73-b326-e76c19b86bc1"
        },
        "item": {
          "id": "68433c3a-e1fd-457b-9d2f-c7a352807ed1",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "e69594f1-25ee-40e9-b62e-fd8642a1aa7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19f943ad-e012-4143-b283-f4935f86723d",
        "cursor": {
          "ref": "ab08617d-a1ea-48fc-bb3b-e60477abb7fa",
          "length": 244,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "7b35041e-00a5-4ee5-bbfb-48ac78e2095b"
        },
        "item": {
          "id": "19f943ad-e012-4143-b283-f4935f86723d",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "ba1a437f-92f5-497b-9fd6-d5f0cf68c314",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c23cf43d-5681-4a46-bf35-8753d6b80c7c",
        "cursor": {
          "ref": "5f325eba-6b50-4523-9f67-54e7cce1ad5a",
          "length": 244,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "638df1b5-039b-4b8d-b349-13763d09e067"
        },
        "item": {
          "id": "c23cf43d-5681-4a46-bf35-8753d6b80c7c",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "78d4c4a0-63e5-40b1-bf0e-e2d32302a23f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7019e7e8-1d0f-4910-93df-cfac4011adeb",
        "cursor": {
          "ref": "a0dc6f34-f951-4952-b183-034546eb7fc9",
          "length": 244,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "5c9ee6ba-0a69-4111-8254-3eace1ce35d4"
        },
        "item": {
          "id": "7019e7e8-1d0f-4910-93df-cfac4011adeb",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "9651207d-17cc-40f7-a0ce-bfa0e2f3533f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "c3492b6f-cee2-40a7-b68d-31b32a8a433a",
        "cursor": {
          "ref": "44fd9482-da0c-4f73-872e-1354c0ce6ed6",
          "length": 244,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "b0ec0d22-aa84-4d37-ba25-6a4e8d0c68d2"
        },
        "item": {
          "id": "c3492b6f-cee2-40a7-b68d-31b32a8a433a",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "3ae9f891-6e40-438a-af16-98b4ed1d37e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ceb691f1-1462-4251-8f9c-44dbb05e5952",
        "cursor": {
          "ref": "2b86f47e-906c-4962-83ab-96306687a5b6",
          "length": 244,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "b59ec093-835e-4002-99de-46c4bea45972"
        },
        "item": {
          "id": "ceb691f1-1462-4251-8f9c-44dbb05e5952",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "e9d306ed-37a8-42d2-9ab1-fbaa4660636c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d649a93-ec28-4fa9-9198-6d90bd0a9b3c",
        "cursor": {
          "ref": "a0ba92b9-e267-443f-9345-3e9f945df23f",
          "length": 244,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "dd388e4d-b6ea-4a38-881e-8a8452fa1369"
        },
        "item": {
          "id": "2d649a93-ec28-4fa9-9198-6d90bd0a9b3c",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "d189d2d6-8263-42a4-81b6-a04db51aa107",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0da8b5a2-c0c2-429c-b611-d4dd2aabea4b",
        "cursor": {
          "ref": "f43f3547-8fea-41cd-8036-024f6d93eca5",
          "length": 244,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "7ad34cfb-436a-4f4d-b2f8-0dbbabef7a5d"
        },
        "item": {
          "id": "0da8b5a2-c0c2-429c-b611-d4dd2aabea4b",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "f46580cb-0edc-4dba-938e-e1d4fd2dadd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "879ee41f-ebea-4c5f-b649-cabcd2b4b4c0",
        "cursor": {
          "ref": "9327a01b-6799-4596-915f-cf40a905ee30",
          "length": 244,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "15e12016-e904-49f6-9768-c07f26dc137f"
        },
        "item": {
          "id": "879ee41f-ebea-4c5f-b649-cabcd2b4b4c0",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "3b229946-5855-40e2-970f-856f87f05d30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fb652b4-84c3-43c2-bb90-4532d391a4f7",
        "cursor": {
          "ref": "d6185e6d-004f-4ff9-9561-d880c353316d",
          "length": 244,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "f59c35cd-1149-4f3a-89c0-a80bfa5d3080"
        },
        "item": {
          "id": "6fb652b4-84c3-43c2-bb90-4532d391a4f7",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "3145a4d1-828e-4d15-a187-aba6486b8153",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f89f2bb4-fe72-4c79-b29a-9d024862e9a5",
        "cursor": {
          "ref": "89e0f7c7-193b-4f8c-a2e0-4f534b75cc69",
          "length": 244,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "f74ecfda-fdee-43bb-9dc3-410094467b03"
        },
        "item": {
          "id": "f89f2bb4-fe72-4c79-b29a-9d024862e9a5",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "2140636d-2288-4d79-b719-efeebf981eb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee1c2aa9-f75b-4846-811c-d9ccddd156dc",
        "cursor": {
          "ref": "46252539-9c10-450d-803e-fea29de1f171",
          "length": 244,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "5e55dc24-725a-4204-aa1b-092d4fd3b463"
        },
        "item": {
          "id": "ee1c2aa9-f75b-4846-811c-d9ccddd156dc",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "f5ec47b6-004a-45ca-bfe6-cb8f8f632d4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f127f75-8f77-42c6-92cf-5a784397afd2",
        "cursor": {
          "ref": "d77b0b1f-3b24-4497-b97a-d9298a37a1e6",
          "length": 244,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "a4e2448f-3a28-4839-ac27-93089dd2e7cb"
        },
        "item": {
          "id": "5f127f75-8f77-42c6-92cf-5a784397afd2",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "999bdb54-13ea-4825-8967-97e8c5c75624",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4352cfc6-fe82-44ef-ba47-ea9185859a8c",
        "cursor": {
          "ref": "8d9dfd5a-a108-4160-94aa-37be8d6e3c44",
          "length": 244,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "79b6d10b-5013-46a1-bc47-7aa265a98491"
        },
        "item": {
          "id": "4352cfc6-fe82-44ef-ba47-ea9185859a8c",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "b96ba64e-8ea7-4f29-89ed-05de2489d619",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2ff8e62-3e18-40a2-9be7-b0b4f7d70273",
        "cursor": {
          "ref": "98bcc7d7-9878-4fe5-9917-14eb3b2c2dba",
          "length": 244,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "4c57d6f2-bf1c-41b5-a809-b0bd9a301491"
        },
        "item": {
          "id": "e2ff8e62-3e18-40a2-9be7-b0b4f7d70273",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "8441fccd-49e8-401b-ba53-f4b9b8184be1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd55c41d-4f01-4342-8c9a-48b7d8f4a7c2",
        "cursor": {
          "ref": "ee7b3221-9099-4f82-b261-23ab12bf9180",
          "length": 244,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "f794d5c8-5a12-4522-bf88-f6e6f67a1b86"
        },
        "item": {
          "id": "cd55c41d-4f01-4342-8c9a-48b7d8f4a7c2",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "b1ce070f-4cae-4083-a3ec-4a95a889b13b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5da67132-05bb-4345-8fb4-95aa158af6ee",
        "cursor": {
          "ref": "dfe3c2c7-bec1-46a6-9e2d-c2c6610a4b0e",
          "length": 244,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "5b50015b-f07e-4d50-b3f3-228b1fc2b3ba"
        },
        "item": {
          "id": "5da67132-05bb-4345-8fb4-95aa158af6ee",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "b9c6b8fc-ca1c-4262-9606-c2a27f4ad4d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d10aef20-90aa-40d1-bf42-5616731d690b",
        "cursor": {
          "ref": "03c92ad6-c7c9-4078-9b58-773ac6a06e66",
          "length": 244,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "c838ed69-f206-4509-b827-833ec8d9a006"
        },
        "item": {
          "id": "d10aef20-90aa-40d1-bf42-5616731d690b",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "9a32ae44-6983-48fe-8532-1e1c240b49a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e8aa3be-2e81-43ed-bb01-91873694bb7c",
        "cursor": {
          "ref": "b44055a4-ef15-46da-ae81-95855a965948",
          "length": 244,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "ee69a495-2ed5-420a-b420-ad4a47b0918a"
        },
        "item": {
          "id": "9e8aa3be-2e81-43ed-bb01-91873694bb7c",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "8ede34fc-15f4-4547-b44e-62d6ceae3479",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4295216-ae1a-4573-b626-92133a6d1273",
        "cursor": {
          "ref": "3f79be4a-2e2f-4ef4-bd98-0e7f53f28418",
          "length": 244,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "9255c82f-40ca-4f1b-bfe2-1955a1463eee"
        },
        "item": {
          "id": "b4295216-ae1a-4573-b626-92133a6d1273",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "ce4acdcf-09bc-4f86-96d9-552a3e372e52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76002ef5-3304-4209-bb7c-dc602e2490a1",
        "cursor": {
          "ref": "08d7e7e8-99f4-4c87-a62f-9c0a83439090",
          "length": 244,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "f4bd626e-aaf1-416e-9ed9-6f5f7d01bf75"
        },
        "item": {
          "id": "76002ef5-3304-4209-bb7c-dc602e2490a1",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "a0d9b1bd-60e0-469a-9d7d-5f0ddfc7c53d",
          "status": "OK",
          "code": 200,
          "responseTime": 223,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "0122e026-8533-4c78-aa2e-daee0377c2a9",
        "cursor": {
          "ref": "df429145-e74a-4acf-b761-a63bd67071cb",
          "length": 244,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "0cb504bd-d6c1-4b4c-aeb1-f73dcb93a095"
        },
        "item": {
          "id": "0122e026-8533-4c78-aa2e-daee0377c2a9",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "b9c7f447-816c-418b-84c7-77239538013c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "807abeb0-6ee4-41dc-b776-2d17513a3a3a",
        "cursor": {
          "ref": "e0cbf9d8-6d57-47fb-b97f-2c18cdfe931b",
          "length": 244,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "20c3aa0c-2222-4d28-bd91-ff557fb23e45"
        },
        "item": {
          "id": "807abeb0-6ee4-41dc-b776-2d17513a3a3a",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "172eac89-c16c-42e8-8731-d8ffb5aaa787",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52b010cd-6bcf-4f75-89bf-c195662fff97",
        "cursor": {
          "ref": "aa983466-abcb-4348-aaf2-943003135e1e",
          "length": 244,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "f676ea10-65fb-4b6a-8e27-ba5fe647eee5"
        },
        "item": {
          "id": "52b010cd-6bcf-4f75-89bf-c195662fff97",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "326f101a-abe5-4667-86f2-b958af73c673",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5073f34-ec9b-4d09-926e-eb27ce47079f",
        "cursor": {
          "ref": "4e35bfc0-b260-4832-9a39-72b8654b827f",
          "length": 244,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "efa52006-bd74-4b5e-a834-d4c7bbc463d8"
        },
        "item": {
          "id": "d5073f34-ec9b-4d09-926e-eb27ce47079f",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "249c9fc5-b7a7-4a4e-b287-ab93152aa487",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "112856a5-d3bb-4e7c-a025-c94a52072d9c",
        "cursor": {
          "ref": "f7418f0c-62da-4d24-aba9-899c7f14bd46",
          "length": 244,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "dfaa8f5f-fa2e-4944-b727-515142a6d482"
        },
        "item": {
          "id": "112856a5-d3bb-4e7c-a025-c94a52072d9c",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "bdc36013-f31c-487b-952f-2a69267c6873",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6017f913-3e84-49ba-9680-f814f397bcb8",
        "cursor": {
          "ref": "495877eb-8603-42fe-82b4-f9863513c8c8",
          "length": 244,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "593f6bc1-c9e5-4d51-b892-b10224a47435"
        },
        "item": {
          "id": "6017f913-3e84-49ba-9680-f814f397bcb8",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "35e15387-c5b2-4227-a1b3-cb8cdb707858",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0789dc35-47cc-44c4-b86e-63e276e99161",
        "cursor": {
          "ref": "632b3381-7a3e-48a5-9b1b-c4e849961f51",
          "length": 244,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "a791b85a-911b-478c-9cfd-a8e032dc1b08"
        },
        "item": {
          "id": "0789dc35-47cc-44c4-b86e-63e276e99161",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "ed9051ac-6931-492b-bcc5-7d7460189207",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abaf4d3f-b0c9-4918-a7f0-249cedbf2a8b",
        "cursor": {
          "ref": "20e3914c-9ed9-4244-81cc-5ee1d707f3da",
          "length": 244,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "2f735d89-4349-4595-a58c-7889107e7c94"
        },
        "item": {
          "id": "abaf4d3f-b0c9-4918-a7f0-249cedbf2a8b",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "f98ed551-8205-448c-9c78-da294f20efa8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4fa286c-ee72-4212-8fe6-0acdb2339186",
        "cursor": {
          "ref": "55a2cfa7-211c-440c-b690-fc54a1a176e4",
          "length": 244,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "35b695ad-8e58-41f6-9a1d-2ed3363c2a0b"
        },
        "item": {
          "id": "c4fa286c-ee72-4212-8fe6-0acdb2339186",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "a64e065a-255b-464c-b03c-cff8f84ebf1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31691666-10dd-4cc2-be4c-866def29bc23",
        "cursor": {
          "ref": "b4bbbc97-c7f4-41a6-92a7-1b30ed83fdb8",
          "length": 244,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "8028dcec-ff06-4bc1-9fdc-6cd5c98bd3a7"
        },
        "item": {
          "id": "31691666-10dd-4cc2-be4c-866def29bc23",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "e9695ec0-004d-471d-8e6b-ba784f1a2727",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb6cff4b-0592-438d-be19-8f98884259be",
        "cursor": {
          "ref": "375ebe5b-5432-4551-bfbc-a58b57e7fc5d",
          "length": 244,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "c07ee098-d2f8-40be-bc4c-8fc346fd17a2"
        },
        "item": {
          "id": "fb6cff4b-0592-438d-be19-8f98884259be",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "2c232c00-2961-4684-845f-dde63e059cd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a27f1a8d-3102-4c3c-a541-c137fb3a6f95",
        "cursor": {
          "ref": "bd7e5dc1-e9bb-490d-b3b9-7c1790ffbc7b",
          "length": 244,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "3dca4ab1-cbb1-4a76-a58f-1728342763b9"
        },
        "item": {
          "id": "a27f1a8d-3102-4c3c-a541-c137fb3a6f95",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "afb60f4f-594a-49d9-85ed-16214bae1a3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dcd6069-1e42-4ef8-bdf9-eb579002de36",
        "cursor": {
          "ref": "7f0de0a6-8f38-4b50-a916-fc529d9f4c4b",
          "length": 244,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "8264fcd3-5114-4848-88f4-db0e666cdcef"
        },
        "item": {
          "id": "3dcd6069-1e42-4ef8-bdf9-eb579002de36",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "d9cc06b6-6da0-41da-b9e8-44216c7c4fe2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f588ab41-ec65-441a-9409-5d5e5d642328",
        "cursor": {
          "ref": "0a65db92-e82f-469f-84ca-0a08e3b9cdbc",
          "length": 244,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "2b353852-c033-472c-84b0-43c6cc9b5454"
        },
        "item": {
          "id": "f588ab41-ec65-441a-9409-5d5e5d642328",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "47292f77-4472-473a-8841-722dbe571de9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ad8c9d3-9659-42b1-9a37-92c8887448ff",
        "cursor": {
          "ref": "8f35e844-6feb-4448-812b-3004a6c5ac7b",
          "length": 244,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "653feb3b-1740-4455-b332-38d937822a90"
        },
        "item": {
          "id": "2ad8c9d3-9659-42b1-9a37-92c8887448ff",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "851690f5-ce60-4413-988a-cbfb63371dd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2340e6c-41c7-4d51-b437-5fbd86bee5f5",
        "cursor": {
          "ref": "875bc36d-3d91-4d85-9bb1-c80a7de8757f",
          "length": 244,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "4faa942e-85f7-4b0e-94a9-1fbf38a13492"
        },
        "item": {
          "id": "c2340e6c-41c7-4d51-b437-5fbd86bee5f5",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "39a108e3-1953-4553-84ef-b43ad7282f2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93e1da0c-a611-4d63-afba-6534d6f38b06",
        "cursor": {
          "ref": "9354ed37-95f2-46a6-9482-a8fa782ee06e",
          "length": 244,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "63b116f2-eae4-4344-a273-f3fa027c3dcc"
        },
        "item": {
          "id": "93e1da0c-a611-4d63-afba-6534d6f38b06",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "a6cd2f5d-4403-43c0-be94-cb34dffee2d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 111,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23c98120-8a83-4ed2-adcc-4ff21f61a34d",
        "cursor": {
          "ref": "3225f8eb-5cac-4506-b537-4b21890555cb",
          "length": 244,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "7e818602-ba9d-4e8c-a106-0bca06d1fbd1"
        },
        "item": {
          "id": "23c98120-8a83-4ed2-adcc-4ff21f61a34d",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "32c291a0-c203-4e79-859d-e9f148312d63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f66ceeab-323c-4b8d-9760-a8a3c8d832a5",
        "cursor": {
          "ref": "b8e0591c-ad91-47d4-8098-c6274c3d2912",
          "length": 244,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "12c20cfa-abd6-4d43-9ca5-11b5e1415bf5"
        },
        "item": {
          "id": "f66ceeab-323c-4b8d-9760-a8a3c8d832a5",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "fa2cebc1-2e58-4b98-a126-7b5d7fb9ad81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54fe6c0e-80c0-42d4-b1d1-cc6013d432fe",
        "cursor": {
          "ref": "d1d7def9-18ab-4fc5-8114-abf6c3e29c39",
          "length": 244,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "7f582ef9-f594-4f14-93d8-c28069033697"
        },
        "item": {
          "id": "54fe6c0e-80c0-42d4-b1d1-cc6013d432fe",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "95c98d15-0f52-4503-bca8-88ac38861b77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "225e3e9a-7429-4ff0-b0ee-401a81b4ccb8",
        "cursor": {
          "ref": "e461144a-fc8c-43bd-b6c1-0f7325dd82c5",
          "length": 244,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "4836f97c-5f68-49c3-9077-d4250cb6bdcc"
        },
        "item": {
          "id": "225e3e9a-7429-4ff0-b0ee-401a81b4ccb8",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "e14f26da-bf3a-4dd3-9a46-8abe7ac4ed3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e822fc4-25d2-4e2b-a677-93e8ded0c6ae",
        "cursor": {
          "ref": "3cfb95e6-c2ac-48cf-b203-ef9fcf62cfa3",
          "length": 244,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "f67eabca-2ffa-45df-81b9-a90543552744"
        },
        "item": {
          "id": "3e822fc4-25d2-4e2b-a677-93e8ded0c6ae",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "56cbd9d1-f6ae-4573-a443-67275bf69e52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da4fef8a-09b8-4452-babb-996f8d654d9b",
        "cursor": {
          "ref": "61f65f8c-b28e-4d1e-b010-4e953bfce1b8",
          "length": 244,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "d746c424-fe12-4cc7-95b7-c1db43400ecd"
        },
        "item": {
          "id": "da4fef8a-09b8-4452-babb-996f8d654d9b",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "e4dbc8ab-dbc9-4314-9473-3525b48cfad1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae555879-22dd-4892-b710-9fd646241fc9",
        "cursor": {
          "ref": "c18a7543-9dbc-4493-ba60-8ba3e1559dff",
          "length": 244,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "077d98a4-07da-463d-9d35-bc5f08d9a936"
        },
        "item": {
          "id": "ae555879-22dd-4892-b710-9fd646241fc9",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "c0ae35fb-6cac-4868-a88f-9b1ccc7a6fbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d932c8b-9096-4e64-9fec-46d8b35befe7",
        "cursor": {
          "ref": "19e84076-10e3-483c-a7ac-203516000dee",
          "length": 244,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "b986019e-a773-4d2d-8d5f-728468b9cf58"
        },
        "item": {
          "id": "2d932c8b-9096-4e64-9fec-46d8b35befe7",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "b1ee32e8-cc42-492f-a6da-b2a0f3baea41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c42343c4-25c5-48cb-a9c0-10f4a80d2501",
        "cursor": {
          "ref": "49649991-bb44-4c8b-ab93-62d1dd4edf26",
          "length": 244,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "f6a6821f-6132-4d7f-8bf7-3a0ea49b1f33"
        },
        "item": {
          "id": "c42343c4-25c5-48cb-a9c0-10f4a80d2501",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "867d0f76-8dd7-42b2-a5c5-83a6bb67d39c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0aa00d0b-5feb-450f-bc3d-70f2bf6c463e",
        "cursor": {
          "ref": "44e25841-c31e-4ed1-8e21-590f7f080242",
          "length": 244,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "20d4e5fc-5b38-413e-bb7e-a5db00beca25"
        },
        "item": {
          "id": "0aa00d0b-5feb-450f-bc3d-70f2bf6c463e",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "e5b1fe4e-d47f-4822-8a8d-23d8e5a4c88a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3558abe-6a7b-4927-90bf-abad486c47e2",
        "cursor": {
          "ref": "83dd8db5-f383-4b9e-b751-d7757f0d16ce",
          "length": 244,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "932862d4-4352-4dd2-9347-a3449d5fff43"
        },
        "item": {
          "id": "e3558abe-6a7b-4927-90bf-abad486c47e2",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "b2651e62-07ff-44d5-966d-21eec35fd6c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e6f6271-f648-4c43-8a50-4a40f86ac375",
        "cursor": {
          "ref": "e8434aad-3aaf-4398-a475-c3d4757be87f",
          "length": 244,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "fff96737-f331-4adb-b631-79703049a8b2"
        },
        "item": {
          "id": "1e6f6271-f648-4c43-8a50-4a40f86ac375",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "e12052d4-8f8f-459b-acf4-7b8f14518571",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90b62caf-c1b6-43df-951c-be2a1038bf37",
        "cursor": {
          "ref": "c4516fd5-695d-4f0a-b37a-839940d8e882",
          "length": 244,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "982337b0-ec36-4c79-ab76-48d507a20149"
        },
        "item": {
          "id": "90b62caf-c1b6-43df-951c-be2a1038bf37",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "85e13c10-aab6-4c04-8717-38db129d1311",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccb8a7dd-ccfe-42e7-a2a3-6375ecd592aa",
        "cursor": {
          "ref": "e89eef17-6f20-4247-bd79-03ee1f49340a",
          "length": 244,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "47f397e9-b879-4ba3-a43e-2fc8babdc517"
        },
        "item": {
          "id": "ccb8a7dd-ccfe-42e7-a2a3-6375ecd592aa",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "7ba4f07d-ad16-4549-9d26-209faa5dbdef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92ad56c9-9144-4e16-a695-79da9905fffe",
        "cursor": {
          "ref": "7f5afff7-8b28-46f6-b317-82ae47dec5f5",
          "length": 244,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "10e9828c-e939-49c7-a6c2-a837f03426f0"
        },
        "item": {
          "id": "92ad56c9-9144-4e16-a695-79da9905fffe",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "73c1a538-8c16-48d4-8f19-cce990f1d778",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35073f50-788c-42e3-a9a0-a1032a5e5cf8",
        "cursor": {
          "ref": "1196168c-b442-4868-9f92-f97c078ea81b",
          "length": 244,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "ec7ff816-45aa-46a3-8036-b6e9c8c86e9b"
        },
        "item": {
          "id": "35073f50-788c-42e3-a9a0-a1032a5e5cf8",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "9cca3694-4ead-4e8a-95dc-40ecc93c7534",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d0b4044-bfe7-476c-813d-514f30c5943a",
        "cursor": {
          "ref": "1071f309-507a-48d5-a77b-51719a031bd2",
          "length": 244,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "7a1781e8-eef2-4040-94de-b2c1ae110db6"
        },
        "item": {
          "id": "8d0b4044-bfe7-476c-813d-514f30c5943a",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "41f0738f-2184-42af-8bf7-8dce6926db54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0998368-84c9-4fa2-b9dd-bca0a987ed1e",
        "cursor": {
          "ref": "4e5dd8d2-4b53-4161-9688-1d9022069f59",
          "length": 244,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "fa5ea539-433c-4c25-87f6-8396eb3b7182"
        },
        "item": {
          "id": "a0998368-84c9-4fa2-b9dd-bca0a987ed1e",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "7622db31-2538-4c46-92f6-01c4fd3c09c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c7fa039-982c-41d4-8af4-86703edd4126",
        "cursor": {
          "ref": "31bdfe68-43e0-4c45-8a27-f17bf092d071",
          "length": 244,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "d7aa09bf-b2f6-415c-8b20-c86154760573"
        },
        "item": {
          "id": "1c7fa039-982c-41d4-8af4-86703edd4126",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "c8f6828d-ebdf-464a-8adf-920e6f368ca0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "746ec00d-b4bd-40bd-b9ce-c8d877536603",
        "cursor": {
          "ref": "8ec8dd34-9366-4a4b-b3ec-b4c5d372c879",
          "length": 244,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "7814daa9-22be-4261-ad00-3d0621c7b353"
        },
        "item": {
          "id": "746ec00d-b4bd-40bd-b9ce-c8d877536603",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "49691ec2-f2ed-4e16-8a0b-e6c57150c17c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc61a92f-8600-40c4-b3c3-03ba85e4eb2a",
        "cursor": {
          "ref": "d62174ef-8f2a-4806-8ac5-eaf622cb6e88",
          "length": 244,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "f0cb3ac5-28dc-4a8b-8363-365cdbf532a4"
        },
        "item": {
          "id": "cc61a92f-8600-40c4-b3c3-03ba85e4eb2a",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "84af1057-60cb-4633-b1c1-08b8b63e0d14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "770e5fcf-e9c3-46e3-be9c-d9e18eedfcd0",
        "cursor": {
          "ref": "d03b104b-7779-4b6a-8828-01910660848b",
          "length": 244,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "c2fc97e1-97db-42a9-b66b-f092bbedaf0f"
        },
        "item": {
          "id": "770e5fcf-e9c3-46e3-be9c-d9e18eedfcd0",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "67dc596c-4196-49bb-b987-b02314be772f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3e3840e-61ab-4e86-9cc9-efe28f34e960",
        "cursor": {
          "ref": "829a7ba2-1d66-4f7a-8e30-4f9b86f6cec3",
          "length": 244,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "993ac278-2184-4c9b-97e9-9ccd7319faab"
        },
        "item": {
          "id": "f3e3840e-61ab-4e86-9cc9-efe28f34e960",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "4baaca85-a20a-4141-9423-18ec05f8a75a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a65d3c0-8cc6-4d1e-b276-34d3ede75f0b",
        "cursor": {
          "ref": "1ddf21dd-2059-4bdb-9e0b-d7564cdcb5a4",
          "length": 244,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "2b584232-9815-4e69-af00-bf1ee23fa131"
        },
        "item": {
          "id": "4a65d3c0-8cc6-4d1e-b276-34d3ede75f0b",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "2f60dec1-7a9b-4f76-87e1-76d77bf404aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75a1ea59-6859-408e-91f2-30ca1ca4aab2",
        "cursor": {
          "ref": "5d278c7c-fef8-4a5d-9d26-d1d58bc0b7e4",
          "length": 244,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "bad81715-ef6c-4a35-99dd-b8e42d86686d"
        },
        "item": {
          "id": "75a1ea59-6859-408e-91f2-30ca1ca4aab2",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "323bec92-27ea-48ea-b9a9-f5058106360c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b88d2879-bd48-4067-a1af-a493247d3f05",
        "cursor": {
          "ref": "69eb0686-4394-48a9-bcd2-49f2c0dd3362",
          "length": 244,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "621e6285-e8b1-47ed-84b1-556651b03632"
        },
        "item": {
          "id": "b88d2879-bd48-4067-a1af-a493247d3f05",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "84f13243-86db-4552-a8fe-0b1a24e14940",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e67aad87-6f84-466e-88e1-056bf1549877",
        "cursor": {
          "ref": "8e2fff47-e00c-4e58-b91d-11e9f0f3dc15",
          "length": 244,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "f220710b-a2b0-491f-a7dc-df263dee1433"
        },
        "item": {
          "id": "e67aad87-6f84-466e-88e1-056bf1549877",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "5500afa2-f1f5-410f-a0ae-9c7055e99d1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df74efe1-2611-4126-9632-ba8b17417010",
        "cursor": {
          "ref": "1d245ce1-50e2-4734-86a3-4e0ccc55d9b8",
          "length": 244,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "e9988910-d88f-4965-8d3b-c804ff640871"
        },
        "item": {
          "id": "df74efe1-2611-4126-9632-ba8b17417010",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "09f2c944-8ea2-416a-b301-484f300f3084",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6df056d8-7d7d-40c3-b4ef-ed7ec84bab42",
        "cursor": {
          "ref": "96d85504-49ab-47fc-a3d4-4ca59974eab3",
          "length": 244,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "c364cf34-1d41-4c04-b749-95372d2a087d"
        },
        "item": {
          "id": "6df056d8-7d7d-40c3-b4ef-ed7ec84bab42",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "5f2903e2-5d99-48f4-8a7e-a960d3926b07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7099cd59-97e8-4056-adf7-7462a0b5c45d",
        "cursor": {
          "ref": "850f87c8-9efb-49d1-b49e-3422322cc5a9",
          "length": 244,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "22d7ed2f-7117-4b2b-967a-a5d3a187238c"
        },
        "item": {
          "id": "7099cd59-97e8-4056-adf7-7462a0b5c45d",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "d49c4a3f-a98f-4d16-aa75-6d5ffcb576b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "589cda8e-71eb-45c8-9233-556f967a9e0d",
        "cursor": {
          "ref": "f7b8e202-91ba-4f78-a92c-4c65aba615f2",
          "length": 244,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "51c5d2d0-fcce-477e-80c7-e961be3ba84d"
        },
        "item": {
          "id": "589cda8e-71eb-45c8-9233-556f967a9e0d",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "196b2d75-0260-43b6-a72c-421a9b74d9cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25a18d3c-7795-47d2-a330-5688ecb341ff",
        "cursor": {
          "ref": "e0439399-b3d3-4eae-9fd9-ac7e8ad2b255",
          "length": 244,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "bbd153de-af99-4cc9-80f6-e32f6de78f65"
        },
        "item": {
          "id": "25a18d3c-7795-47d2-a330-5688ecb341ff",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "1b495aeb-e3fa-4b28-90af-8e2d4b15a6aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "186d8f12-63bd-4ff1-bc65-ba103adbb578",
        "cursor": {
          "ref": "5198b392-89cd-46a6-ac74-896ffd15c57e",
          "length": 244,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "57cb6c52-916a-4433-8e90-4dab0b6d0cf2"
        },
        "item": {
          "id": "186d8f12-63bd-4ff1-bc65-ba103adbb578",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "58ce1d3b-4a10-4ba1-9b4c-518a5a34bcfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf689efe-326f-4cca-8574-6f932448a0df",
        "cursor": {
          "ref": "4107d2d3-62a3-4cb1-88ac-3ced68d937cd",
          "length": 244,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "3bc9c058-6934-4cc5-957d-693e96759cf0"
        },
        "item": {
          "id": "cf689efe-326f-4cca-8574-6f932448a0df",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "30270c59-f50e-43bc-95bb-23d8d4f8cc52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 923,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3177ea6f-5422-4119-a659-715e48d1e053",
        "cursor": {
          "ref": "5c181c09-ff97-48ed-8d47-a71823b76fab",
          "length": 244,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "4ac17af9-e4cf-47d6-b230-0bf2b34d0f70"
        },
        "item": {
          "id": "3177ea6f-5422-4119-a659-715e48d1e053",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "afce282d-ef69-494e-9d9e-3ab1a2c79021",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "706f5d0e-252c-441b-8de9-9e1fb39680ef",
        "cursor": {
          "ref": "778c3dfd-dec9-4306-8c04-f7f3bbe6419e",
          "length": 244,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "5b6faf46-9d49-482f-ab24-99d7ca00817f"
        },
        "item": {
          "id": "706f5d0e-252c-441b-8de9-9e1fb39680ef",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "478c8734-c31a-4f45-ad5e-2663d1d4146d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d22c44ea-9253-4dda-8615-fb30e17d3c21",
        "cursor": {
          "ref": "befda9e3-1003-4742-81c1-dc4e8dfdf9e0",
          "length": 244,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "320423fd-3747-44ec-90f0-2b178d7a99d3"
        },
        "item": {
          "id": "d22c44ea-9253-4dda-8615-fb30e17d3c21",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "91b255ef-8578-4887-8069-9480c35c4991",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "896f0493-ea27-4bd9-804c-9ddf1e23b17b",
        "cursor": {
          "ref": "2e1a134a-c1c8-4475-bc8d-56743081e593",
          "length": 244,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "f3299a84-c38c-4d9b-80a6-945c6337c5c3"
        },
        "item": {
          "id": "896f0493-ea27-4bd9-804c-9ddf1e23b17b",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "a2733643-b7be-4e35-8dc3-c1d92587576e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0be514a4-845e-4934-b365-9aed4f34c6b8",
        "cursor": {
          "ref": "1e285047-f5e9-4084-9be4-fae659f35e35",
          "length": 244,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "8daff25b-4b07-48d1-80fa-a1c5197a2cb8"
        },
        "item": {
          "id": "0be514a4-845e-4934-b365-9aed4f34c6b8",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "e2f5e905-ac32-414f-9ec4-fed09b23e21c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf4fde99-5c80-4ca2-87fc-fc5b58eacd15",
        "cursor": {
          "ref": "7a8b0961-fba7-4d77-a9de-951a94071355",
          "length": 244,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "e5a09dbf-8624-4084-915e-8b135e68de5c"
        },
        "item": {
          "id": "cf4fde99-5c80-4ca2-87fc-fc5b58eacd15",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "a5719814-948a-420d-ab18-f529c0d21071",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9acf672-e4a5-4e01-a482-f467512bd24a",
        "cursor": {
          "ref": "7fb3189f-3b37-4b54-9394-020eca774357",
          "length": 244,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "02cafcb2-0c71-4775-8eb5-da6d924d7ff9"
        },
        "item": {
          "id": "c9acf672-e4a5-4e01-a482-f467512bd24a",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "3e70a86b-191e-460c-8cb1-7198ed047ce7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22f1404a-46a6-43a5-8068-bc6870476dbd",
        "cursor": {
          "ref": "b03e87a8-8f71-459b-ad14-0be11a13840f",
          "length": 244,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "65d9058d-94ab-4ae5-98f3-696f0200a65c"
        },
        "item": {
          "id": "22f1404a-46a6-43a5-8068-bc6870476dbd",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "6e413236-0df8-45a7-a5ea-b64a8b0be2a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf7ab6bf-e6e3-458c-849c-b297e4916253",
        "cursor": {
          "ref": "19269401-204b-4bd4-879d-7ed7b71ee00b",
          "length": 244,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "dc2e8d93-9523-45e5-9011-bf752c73d7b2"
        },
        "item": {
          "id": "cf7ab6bf-e6e3-458c-849c-b297e4916253",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "c9ef9007-4b61-4d3d-b0bd-052528cfb8bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "781304b8-62e4-41ef-bb41-5a04edfbf5ca",
        "cursor": {
          "ref": "627950d3-f817-436c-b99e-f43e5284593c",
          "length": 244,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "66db77cf-6edf-4ed1-9392-3500b8d2205e"
        },
        "item": {
          "id": "781304b8-62e4-41ef-bb41-5a04edfbf5ca",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "860011e1-6123-498a-b507-c5dee75c21fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9230c5ee-3aec-4d9d-8abd-2d51813a000a",
        "cursor": {
          "ref": "b8dc3c85-3769-4f65-b6a5-20372ce175b7",
          "length": 244,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "f386b215-b4e8-425b-a487-a558cd071299"
        },
        "item": {
          "id": "9230c5ee-3aec-4d9d-8abd-2d51813a000a",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "c1035e04-a54e-4dae-a583-f913a7802dbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8338613-85bd-474c-930c-411dcc73c4e4",
        "cursor": {
          "ref": "414b38d4-a610-410e-857f-1f5cc763aab3",
          "length": 244,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "5e4d21ee-a12e-475b-8790-3b3679fb15e6"
        },
        "item": {
          "id": "e8338613-85bd-474c-930c-411dcc73c4e4",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "1e62fdd6-522e-4ef2-9505-17aef85bb383",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c71a7f30-f20d-4ac2-8bd1-ebbb66293104",
        "cursor": {
          "ref": "7e4b152c-d4e9-40a5-8ad5-1fd0a7617047",
          "length": 244,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "9487e630-d3c8-4cc9-ae34-1c4b62479d61"
        },
        "item": {
          "id": "c71a7f30-f20d-4ac2-8bd1-ebbb66293104",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "1c79d2df-3578-4f9d-a29d-9fd2acbb00ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49207262-6e7c-4118-9e40-00615490f656",
        "cursor": {
          "ref": "6868f794-399f-45ea-bebe-96bd1eeeb650",
          "length": 244,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "1b88261b-b992-42b8-8482-856d14f5e0af"
        },
        "item": {
          "id": "49207262-6e7c-4118-9e40-00615490f656",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "119b8f15-d6a5-4e17-913d-8855e43409e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64cb540f-006c-4f95-875f-0f0f3c9b2c27",
        "cursor": {
          "ref": "a1950f4b-923a-4f02-a2b5-060765df9423",
          "length": 244,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "fa9a0da5-316f-4406-aba6-f7b07d20fffd"
        },
        "item": {
          "id": "64cb540f-006c-4f95-875f-0f0f3c9b2c27",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "183f7bea-0736-45a9-ae0b-b5411d2535d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a051b8d-6cbe-401b-9de5-4d46b86b0ddf",
        "cursor": {
          "ref": "7cdfee2a-c495-4279-ae84-c3bb985ce1ae",
          "length": 244,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "9c82f354-4718-40c4-9347-ae546e9f26b4"
        },
        "item": {
          "id": "2a051b8d-6cbe-401b-9de5-4d46b86b0ddf",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "b07acbf4-4978-4c70-9359-f4c46046a270",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99e9a455-0e7d-4922-a2e1-cb10cb7fe7e1",
        "cursor": {
          "ref": "f63cdfcd-79ee-412a-9c31-39b434bdc183",
          "length": 244,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "c9ac81dd-c149-423a-9ffb-841e0bdbeebf"
        },
        "item": {
          "id": "99e9a455-0e7d-4922-a2e1-cb10cb7fe7e1",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "45c48922-276b-442c-8c9e-ca2a933b83c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "080d5850-f607-42f0-8bd4-f62b3945ecbc",
        "cursor": {
          "ref": "ad1eaece-d2fa-4ed0-ae68-523c27fa03c8",
          "length": 244,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "1ccef9f5-9e40-4b09-a197-27b9f2a511f1"
        },
        "item": {
          "id": "080d5850-f607-42f0-8bd4-f62b3945ecbc",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "7e744c54-a0e9-4f8b-b67b-3ce96605078e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b8eff84-6c1f-4c30-9942-fd60cd397067",
        "cursor": {
          "ref": "a8b50d30-73f2-4fed-af1c-9e30c4906a82",
          "length": 244,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "cbc62575-c978-4824-a13d-5e1d67138fbc"
        },
        "item": {
          "id": "8b8eff84-6c1f-4c30-9942-fd60cd397067",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "f32425b2-6bf9-44c5-a64e-ba43245c8b0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0754472-d83b-4494-a223-f5188f4093e8",
        "cursor": {
          "ref": "87f87a10-9837-4bab-a02b-e6aae21236dc",
          "length": 244,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "29aea784-f234-4eac-9436-d750c5bc486d"
        },
        "item": {
          "id": "d0754472-d83b-4494-a223-f5188f4093e8",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "375ea6b4-d520-4c58-b476-929df0b6cc05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e577628f-1670-47d2-ba59-191d4abe50c2",
        "cursor": {
          "ref": "19b526ec-60c4-482f-a841-778914c596cb",
          "length": 244,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "74e7212a-22ae-499f-b4d2-f3c0716d535e"
        },
        "item": {
          "id": "e577628f-1670-47d2-ba59-191d4abe50c2",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "4ce5a054-7d31-428a-9fc7-395ef69ccf10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5876ed4e-9f4b-4280-8844-6078488f9c5c",
        "cursor": {
          "ref": "26c9a0ec-4833-486e-861c-01110ff85e77",
          "length": 244,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "fe877cfc-eefe-44ba-beef-5fe84d70eeed"
        },
        "item": {
          "id": "5876ed4e-9f4b-4280-8844-6078488f9c5c",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "cbac9009-9784-49d4-bd01-3b8b696592ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c54f6c45-ed66-4c21-80a7-289629bb46dd",
        "cursor": {
          "ref": "a658d3cc-f5d2-42eb-8905-1a5a24ce3b6c",
          "length": 244,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "79c15d32-0a3e-4e1a-8de8-fae77cd0de9e"
        },
        "item": {
          "id": "c54f6c45-ed66-4c21-80a7-289629bb46dd",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "c4bf91e9-2208-4119-b991-5e9ae1a22056",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "391854d0-8979-4206-ad04-1e17c0239496",
        "cursor": {
          "ref": "07677cbb-ec69-4f44-9f18-79f9f5d205ab",
          "length": 244,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "d1bde68b-3f41-4eb0-8470-8cbc0d82dd18"
        },
        "item": {
          "id": "391854d0-8979-4206-ad04-1e17c0239496",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "d5d6c8c9-05d2-47cd-a78d-1d75af232a94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36f71656-3bb2-4028-982b-88955435a949",
        "cursor": {
          "ref": "1fd53296-625c-4f00-94ec-95e6d949b92c",
          "length": 244,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "71254017-234f-4386-bd7e-9d67c93f1637"
        },
        "item": {
          "id": "36f71656-3bb2-4028-982b-88955435a949",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "2f73a892-b796-4c2f-a6dd-bf937d19f3f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a90b2ff0-32d1-4fb3-8c59-676eda3e7951",
        "cursor": {
          "ref": "9d2a6001-81ec-4a9e-9c8d-b82619152905",
          "length": 244,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "a74d3877-c814-40d6-8f19-2d6f7ea5f83d"
        },
        "item": {
          "id": "a90b2ff0-32d1-4fb3-8c59-676eda3e7951",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "1883899e-b5d6-42ad-9636-8242f3776111",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d053b25-40f1-4bef-8265-b43ef6ee3f5b",
        "cursor": {
          "ref": "d3797c40-9b9b-4677-b67d-f8278285d7a5",
          "length": 244,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "1ff2de7b-cb0b-424e-aae0-75aa088e2298"
        },
        "item": {
          "id": "6d053b25-40f1-4bef-8265-b43ef6ee3f5b",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "3ace09e7-d2c8-411c-a401-d0d56f2e3395",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b98132e-3b00-42f8-b340-ca2284f37327",
        "cursor": {
          "ref": "11f265e6-6fa1-4894-99e1-0395c2b3e521",
          "length": 244,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "7b219df0-3b28-42c9-85f9-a99e670d60b1"
        },
        "item": {
          "id": "6b98132e-3b00-42f8-b340-ca2284f37327",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "6d464906-d6b0-48b9-af4d-0a87da6ed5a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4b9801f-490f-411e-b550-d0ea1e301df9",
        "cursor": {
          "ref": "9628a640-f0d7-48da-ae30-3acfbdbefc1f",
          "length": 244,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "fdc8ec46-b0b7-4718-b13b-35703d24f127"
        },
        "item": {
          "id": "a4b9801f-490f-411e-b550-d0ea1e301df9",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "7c308e75-d8ed-43a0-9c97-b860a6cd63dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "398641ff-e378-48d7-847a-62c147070752",
        "cursor": {
          "ref": "b4f2372c-bbb7-459d-9b60-2d1d06de53a6",
          "length": 244,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "fe850b58-f6a9-435a-ad06-d49d6790d3cb"
        },
        "item": {
          "id": "398641ff-e378-48d7-847a-62c147070752",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "6495e763-b2c7-4d92-b850-91c9a760fb0d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "683e6dc8-5c91-4b0e-ae6a-7fe38d5d474d",
        "cursor": {
          "ref": "8f42266d-6755-4974-872a-66fddee64572",
          "length": 244,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "b6559b0e-7e2b-4a96-b180-4e6d3af1baf2"
        },
        "item": {
          "id": "683e6dc8-5c91-4b0e-ae6a-7fe38d5d474d",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "25e9def1-b9f8-4ac8-84f5-97f3c5f22f98",
          "status": "OK",
          "code": 200,
          "responseTime": 92,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "9aa3083b-1da4-4bef-a5d5-610f15e398a7",
        "cursor": {
          "ref": "ac6f67b6-cb51-4c86-bef1-94ee71944669",
          "length": 244,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "9493d4e7-ff5c-4cd0-8d10-1dc66e976fdc"
        },
        "item": {
          "id": "9aa3083b-1da4-4bef-a5d5-610f15e398a7",
          "name": "credentials_verify"
        },
        "response": {
          "id": "3d914527-7ba7-4e76-94ce-6c6ad8b4e1cb",
          "status": "OK",
          "code": 200,
          "responseTime": 2313,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e39f305-cbe4-4fd4-9e0f-98360c86aa61",
        "cursor": {
          "ref": "e2255efd-2077-4283-922b-056a433a8d38",
          "length": 244,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "83064a76-81e4-4d35-ac2f-91bd4484f977"
        },
        "item": {
          "id": "3e39f305-cbe4-4fd4-9e0f-98360c86aa61",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "8946f24f-ba7c-42a0-b111-a7f12b56990c",
          "status": "OK",
          "code": 200,
          "responseTime": 3083,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "38b61b57-bf69-40c5-aafd-d4516d49e323",
        "cursor": {
          "ref": "8add8498-edb9-47c0-9ccc-060efcb06cdd",
          "length": 244,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "15c31cc2-2952-41b2-a1c0-025f58bea86d"
        },
        "item": {
          "id": "38b61b57-bf69-40c5-aafd-d4516d49e323",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "a2c7d0e8-c240-4841-8594-11b3e16b4214",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "38b61b57-bf69-40c5-aafd-d4516d49e323",
        "cursor": {
          "ref": "8add8498-edb9-47c0-9ccc-060efcb06cdd",
          "length": 244,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "15c31cc2-2952-41b2-a1c0-025f58bea86d"
        },
        "item": {
          "id": "38b61b57-bf69-40c5-aafd-d4516d49e323",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "a2c7d0e8-c240-4841-8594-11b3e16b4214",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "f99eb19e-4eac-49b6-95e4-38400ee92108",
        "cursor": {
          "ref": "fd872385-8473-4cc7-8fb7-0a7219f1c662",
          "length": 244,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "6d282b6c-29f2-4158-a80b-53f484fee2e9"
        },
        "item": {
          "id": "f99eb19e-4eac-49b6-95e4-38400ee92108",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "a712c5f3-278f-4fd4-9ab4-8fe56d93175b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "bcb6e0d9-fefb-4d86-bfd5-6abce646f04d",
        "cursor": {
          "ref": "1274a247-dbb3-4136-a474-2a77970b9707",
          "length": 244,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "5edff569-05f4-4578-8ba7-07edc32b593e"
        },
        "item": {
          "id": "bcb6e0d9-fefb-4d86-bfd5-6abce646f04d",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "cc66398f-0c37-49d4-8ed5-4deef2738c7c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:244)"
            }
          }
        ]
      }
    ]
  }
}