{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "7df7d76f-9ac6-4e73-a78a-0384f4e78933",
        "name": "Clear Cache",
        "item": [
          {
            "id": "787262d7-7c0f-41ff-b4df-a50a00192d50",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a5a447f9-8b4e-4297-9dbd-63471de53ac8",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "88518169-7def-4fed-b866-ab1e00d489c0"
                }
              }
            ]
          },
          {
            "id": "688fb8ec-250d-4c31-b03f-99d8e55daeea",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d35d80b8-0d7e-41f5-896d-d3938c865df8",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "d1490524-ab37-4f03-b4a0-1aa3f7a9fa96"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "c5644e82-73a4-4887-8b9e-45d32c0f8958",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "410e5c5f-ecb5-4907-bdd6-9f9a809b2dd2",
            "name": "Positive Testing",
            "item": [
              {
                "id": "4d671b04-4929-4ba9-b472-00c63435e2a6",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4a910170-ba19-4575-95dc-446f77dbb9f7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e0671b15-35e4-4ddf-9968-4f6a5c68b7b2"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c17abe7a-289c-40e4-b6c3-2b0084c27b17",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7e400747-ba8f-41ff-9892-b16be781554a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "afef96a9-7e64-4b48-829a-0e66de9ce0c8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "961e7d0a-eb38-4f55-afa8-a24092c693d5"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "deac758b-661b-4bbc-bd3c-3c5e65c748a0",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "aeb30165-e029-42f1-8f6c-76ce0de788fa"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c5a91c45-9df4-48e9-8504-fb738f7f4158",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8a39264c-be27-4dea-bf68-522fbdd9f94f"
            }
          }
        ]
      },
      {
        "id": "d45808ea-8300-4f66-9c6b-f3d63a56aa61",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "e4016ac1-e3ed-4196-b57d-77bce9569725",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c1d16ccb-0b45-4830-b9a5-2e9c51ef8758",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "7d4ee0b8-a549-49e2-9c03-6f5500f7f50c",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef3db9be-5aa3-456b-9ddd-66f664e21cf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fcf3e823-8d3d-465b-af15-5d426de8d617"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e6491fd-a61c-4cc4-8674-1608b74566e6",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbf11144-7daf-41d9-b6e5-4b3a9bd379c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "552ca0f5-4251-4db4-a99c-00b495a8c48d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6ff1564-0ca6-4514-8175-a02e1e8a1f5e",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24fa6e4b-d1a7-4f5f-ae8c-85424d870b70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bf8a397b-423f-4a52-8584-24a8f3c2dbff"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "752b6e73-ee8b-4437-aef0-fd8873e6e9d0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b94eb808-312c-4d4e-9d53-71a27bfc3cac",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84fe8438-cecb-4f83-979b-feeaed86fe81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c7318129-7706-44c0-9f2d-f661ef75fa93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd6748d7-d706-4c8d-91bc-fb13500d8bdc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d0af0c1-0b96-42cd-8ea1-e792c7efd4d1"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "b6e01130-1649-4106-851b-3a9e6bb9ae08",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1577278b-9f37-4e39-806b-cb37a9a23055",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0f87673e-abf7-4baf-8861-de2f6d1e1c6f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "bda6f604-0862-4e80-a3b2-4f5baa84ff06"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "743fba5e-5f83-4cca-bb36-31a403fe9204",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "c2436ef5-9712-43eb-9fe3-d7682e18d3c4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c730187d-6630-4cb8-bf85-abe005c36cd2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "768fbd19-6066-46a7-af05-0af43ef8c742"
            }
          }
        ]
      },
      {
        "id": "fa54877f-49fa-4652-b830-68c41a5570d7",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "13fd48b7-1a8a-4a84-9d64-4f5fea161362",
            "name": "Negative Testing",
            "item": [
              {
                "id": "40d59c64-59f3-4527-a8d3-7bd0623ccec6",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "b8e85a4e-6d62-4f79-9595-4d4a95290f00",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aac94648-c288-4a20-ae7d-9aaac4b5b2d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea07aba2-2c86-48d3-be66-359c67886200"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "706ba01a-b231-47a5-a08d-320d2584d046",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a65ed74e-0c67-4803-b294-7028bc73519c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf5ea529-83df-4bbe-986a-dda0cf6aaa06",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5997dfa8-0f78-4284-865c-bc973559b104",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bb41d4f-cf1f-4c35-b7cd-f0080a29d40f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cec857cd-9c0d-447d-b73e-6f38c953837b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "16bc3830-8942-4e19-8711-960c5b629d0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dbcfca1-d9f2-4117-ba7c-22c9e22ebf5c",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f003a45-be3c-4a55-a78c-fdf20cb1279a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7574759c-6e53-482d-8039-615eb77bd78b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b045aab1-fb5a-4aee-91e0-92eb204a037d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cd6aaa0b-5773-473f-901c-af8480af317c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f08a66d0-b8b6-4c06-a710-81112fc49e1c",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1f342af-02bd-4fcf-95d5-06c9d0ce8f02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b364598e-1672-47ac-a45b-7ccb3e378882"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c7b031b-40f3-4b09-95cf-66e9b6d57d32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0fb73b98-9269-437f-adb1-c49e6a68e281"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eaa3beb5-f7aa-49d4-8e99-3279ac3fd0e8",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87af485b-5ca7-4721-b8e8-97e364c84071",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fd60113-96c2-46e9-bb0b-a692f57f6af4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f3bb9e5-9859-49db-9623-49a8a17a33ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6299de7f-5290-416a-ad53-7d78659c1c2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28fdb24d-4021-40ce-95d7-acce432f035a",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77a27f0b-de98-49b6-bf04-c85fade4bb22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "623c3646-26d6-47c3-997a-a7459fd6f5bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42a3f546-f095-4b2a-b17a-56e3097b37d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "855c9b48-798b-4ef9-b25b-c23bfe799ef1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cd102d7-4f24-487e-bcd2-afaea6a91eca",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8413559-ef26-451c-b6f7-410e7b4fb46c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d687e8da-44a0-49ba-8a7f-57169b08e48e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f641455-6d87-45be-9ade-7535c1ee0e0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3bddb0e8-17c7-4447-ad94-58e6e9ad7d3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac25a2ab-0488-417b-bd9e-e9f0ce6099bb",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18e70aa3-403d-413b-b2be-ae7fc1be9ee5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8e207d1-5155-4ba2-baae-8316b238e21b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "371a9ed4-28a4-4257-8bee-2ebd861d0f50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2ba01c97-ea77-4f4c-b579-0d1e95d51726"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26938bc2-6495-4cf3-8dcf-e335708b7968",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0feaa97-f17b-4849-90a8-ef2df88bf8e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5d5d171-bb2e-49aa-a22d-eb28233b1162"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "416ef63e-1360-4906-9045-81c7c5b4690c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "907b872f-7587-4997-bd4d-960850f1b36e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dbcdc0b-c05e-45fe-881f-60a51a254de7",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae6e93eb-3e28-46ca-87c7-693e2e7c3c97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7f66e92-f6a6-4c16-8ce0-25cfb6c502f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed08da14-9d62-4050-aa94-9b958f58bfc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "af77567f-037b-401e-8efb-06fb851e8e74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bef7299-33c1-4fbf-8811-9cb9d183ceb8",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fde7d795-7635-473f-badf-a1a77a6d9d94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "139cf570-8130-40b7-8ea6-8703cc184ac3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e46e3854-619d-40eb-8c06-b588e55cd26e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3a29d820-93fb-4008-8b1f-74494d38331f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66466859-4005-4327-b1ff-6e69ef4946ac",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57899a29-9626-4640-83d4-149e6f0e0e7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37934453-54d8-47d0-a740-d74ce9143e19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "613b7339-0429-4afd-99c9-ce0a57bc2126",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "81b6ae90-5a83-47b5-8a57-34e41fc3af4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06c39ba0-fdc3-4d8e-9206-471fd997798b",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb3d134f-f6c9-46f8-ba9e-2cc061190633",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e82ec7c1-1546-449b-9304-83e5bb4f4a2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62ec8d9b-2e2d-4169-b966-dd88b5e4fe41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ff583e7b-5ca8-44de-81a8-df650faa61a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2466881d-54ca-4dde-b6f8-1cd9a7dcabe8",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b400c089-7b2f-40b5-a0a6-e55ce8352314",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e83d65c8-ced2-4109-ba95-c3d674b419c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c7b9734-270a-40a5-b66c-5dc9d2703200",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cbc22113-1a67-4e77-beca-15910393a3bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f4feeff-563c-4b30-943e-0d3d47eccbb1",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b54598fd-8e9e-4251-b769-043f614ef52f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef6986bc-f285-412a-b4cd-b49202476043"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "397ccb72-93f9-4261-b8b5-f3d0869385b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c69e7d99-affc-4f32-ab98-12df7feb427d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e99ea45e-a92a-4268-91d6-1bd8e0306b30",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9c33dc9-acf8-4891-b25c-8f165d629248",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb3ddb25-b5f7-4287-9740-15b96ba5f9cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2a47983-7717-4fa4-9e1e-0b16d99ac877",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4be05b56-38f1-413f-b152-f1dfc998acb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "957f1e3f-68bf-4016-95c1-57820f7b4d2a",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea4d361c-3c64-458c-81a8-907eeb7548e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03fb92af-9c3c-4e2e-a69f-2c2cfd084a5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13aa64f2-601e-41b6-b0ee-6b05f1874eb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1d9befde-2623-4aff-bb1a-b07baa05a1fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebe341e1-351d-4088-a51d-a641a49f30ad",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3c99420-5113-482e-9c72-57c424ab567e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcef4ecd-c530-4ced-8fd8-5f074d8ed51b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21487478-7de2-4e68-a31c-b1c3c1362713",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "f13abf9a-6e15-4b64-ac0a-040d91febd8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "278ead35-7bd1-44b4-9607-c37ba9c424d5",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b849eed6-6b58-4160-ba51-bcaeb1ec632a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9953b07-24e8-4a11-bedd-9dcb00419dc8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c144cb2-12e1-40bb-be80-c27d28e8abd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f433e257-674c-4057-a2f7-a26b2bb556e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a49f247e-4538-4a0c-969b-837d0f0c3dca",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bade19c-3d45-40eb-9144-bcbe54eae79f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd436ae6-9ac6-45b9-af02-0f46c877cace"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f0e89d6-cc57-491b-9761-4d536ccfba92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ba472185-1d5d-4413-bb29-3f056b65f5ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6984da35-4c8b-4a51-9c44-b61dfad13af1",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e9de0cd-5161-4259-9e55-2681a6ec9142",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3eeb16a2-7c02-4a3d-a4f0-8bd0bf90b8da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df3c70bc-9f18-4993-a42e-61cccec10f37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "62b07929-f17e-4a1f-959e-c4accea84349"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f02f3e8-16e0-4223-a4e1-b66245723ef2",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9087705f-e0ad-4b86-826b-7628c56477ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f952f2f-9de7-4053-94ef-885f802a9751"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99fa1439-db88-4f43-a1f0-621310c391ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b992b8b8-dd25-4926-8508-f21d25e4d14a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "333a07ec-9036-477e-8fdb-ae27060165d0",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1ad32a8-9c7a-4a6c-8576-93c94e0385a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d74d1012-7314-4916-b938-56f34bdffcb5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef9e179c-70b3-4148-93e3-7dbf9128ea20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "12c1c074-bc1a-4d8d-8622-14aa7b110de5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6162aef5-70ce-4083-9489-55b2ef81f4ce",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5b9216f-e512-40d1-aa80-ad7a74bffc50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0135c08-d5b0-4fca-9853-3f5e12c742d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60f6c829-149a-4eb7-a952-81e66b7b6a8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "84e7ea72-6e7f-44dc-a24c-6e67171cab60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e13a9e01-7ab8-4b65-84e1-86c4882915a1",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25f6e229-4d52-4c6c-b554-d2560e9972b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cc5d93a-3b42-426c-bfb4-5d00ff7ae17f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a2b1fc2-5753-4663-a584-e5f78fbd3411",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0e2735f9-8626-40ca-8904-0e0e9a44dabd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0d80e44-92d0-41ad-969a-7dbf2178106e",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54791978-8770-4151-8db8-e6747b000cb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2d2a6b3-924c-4fb1-931c-ac30b328d77f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45337cc9-6090-4ef1-b81d-e439590932a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "86c83bb3-aa29-4591-8a93-1a6d33fe782a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ee32e4d-e485-406b-b7b9-de9535c81699",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52f78a4e-542e-437f-89ff-1f27afbe93ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f3d8788-d8a3-489f-8b21-3a959868692b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48cc98d3-ba1f-4194-9241-edc49dc0740a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f59c8e68-858d-48d6-9f78-6ef16369e079"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a1eb322-a985-4c93-bd8c-8bd9bf7b0ef2",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8af5fae-118b-428d-8b98-5b41795ef3c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "268a13f0-0fad-4bc5-982b-331a39c23e67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab96e9e8-75f2-43a7-9fe0-11d5a190ca5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "03ca5569-d18b-418d-bf48-f81a12e7b81a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98f45fe6-2104-4ddf-ad47-d83cab06fb09",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7185633a-7a7b-4245-878f-204fb3d4ac6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ac0f80f-c326-4327-a27d-85cd212f14d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56c30b44-c18d-4b6d-b233-d7b15770cf15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0bf1aea9-8343-4d8c-b252-5520af4354ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f740348f-06ef-4a6a-ad31-52dcfc3031de",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f7fb849-41d9-4c0b-a874-1ba90aeacf64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "872e8091-e96d-4942-af51-2dd6c38dcbcb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a364315b-497b-467b-9d69-286ce491ebc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "a93ea765-28a6-4beb-8565-63b73b64d0ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e72ed99-a0bf-4319-a903-158971ad8a0f",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97fa7eeb-af34-469b-9470-ebf61598e9ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc479e81-92ac-4b26-9370-60197a921ae2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78af6cc5-0140-43e9-8987-45d959d202f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "97cc3811-67e2-4c78-ae49-2203723dc926"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cef8b78e-6f29-410d-a608-bdfef6fa9703",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c029362-0a63-49e6-bb87-ccfe296ba219",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b417ba73-60b3-4779-99e6-7fcd1c7af959"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e09be7ca-9659-4d0d-ba47-d96b12c0b6fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ddaf7a66-3c01-4d86-aea5-fe3d035d878c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c581a73f-c135-46b4-946e-f1bae47302a1",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75493ebd-7cc9-4296-b00a-1490ea9cdacf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a167d321-dc9d-4b89-952b-095305f3fa6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1c4877d-46fd-48a6-ada5-afb9262c1bdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "244de097-2188-4e3b-a363-f65f9df78147"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a8f1df0-df3f-4cd0-91a4-b27be075b4f5",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "002b768e-0993-440c-b126-12fb15446ddd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "866dda67-bb30-4d15-b8b0-6b29688ae4e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41a80170-a861-4026-a66a-9f0e65d9f057",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ad2319a6-0080-4813-b23d-cee311dc0274"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25b7dfe0-4e1d-4c9e-bdad-eaf0bd6c4fb4",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7f6b557-57e2-48fc-b420-800fba3091cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b732a12-538a-43b6-83a3-0e74d9036a25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a1ccb5a-1833-4ade-a7d5-7821f32659a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "cc3e62c6-a08b-430f-94a0-4e65c8313d04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7f2858e-c70b-47d8-9aaf-aa732608877a",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51430072-d17b-41c5-9bd7-9547ef7ee097",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e119e0ac-4582-489f-a09f-c9769e8569e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a402880f-0662-468a-b418-74245cceffbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "78cfcf6b-fcea-49d1-85cf-0f0daeb220cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b37cbdf8-159a-4683-9049-e20f93df485d",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c21401b-1bf4-4a32-8df6-647fc1c7951a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9365b565-02c3-44fa-9eee-ad7168eb5a41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89e42489-be90-4861-8f12-d47c31de6af0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a95c5e46-b306-46eb-abd4-d0411c167b30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "230229b1-f18b-40cc-ac81-aa6fc3fb07f1",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d2aeced-6483-49b0-82b5-07338012621a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30e6a226-9b1f-493a-8a1b-b140a86da758"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64662902-3051-4011-979b-ca4bb0755c43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "fc8100eb-bf3c-4382-8430-aef58b19c5bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88bb6931-41d3-4dda-bc54-150cc541c9a4",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b849e637-64a0-43ac-be1e-32cc0901899d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73322170-f4f7-4771-9588-bf0cbada1f8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22f05ab2-96c9-434c-91f8-fc0dce62846e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "5dbade4b-aeb5-4cc3-bfec-c93c9849a71e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d319dee-80e6-4dcf-baa0-2c57b04daa6c",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bca4a75-b1fb-4dbd-9742-4c463641a043",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a563789d-cb04-4e4f-922b-3b3a74760640"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e87b71a5-36ec-4c37-ac5c-b2e56b894bca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "33683631-2fe4-43cb-87e0-e4d6dd22e192"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb9a6503-14be-4d49-92b9-36b63efa2c47",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19762bb1-f14c-442c-81d3-2cb3a615d4cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "992a9d8b-2ebe-46e4-a488-4acff6ad616b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c87afba-38a0-46ce-b518-0506653e2fbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "e9076717-625a-4ad5-b09c-9661ed8bfb6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "795ffbd3-108d-4a31-a4dc-5a318680e94b",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be369f36-6e2f-4615-a196-8d58c997c2a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3500e03-0efd-4490-8cde-6fa703f924c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b68a9a39-ea4b-42e5-80eb-276b21bd427a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "02cf6bbe-8e6c-4243-b9dd-ae337e16125e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d348194e-c933-48f9-9c7f-aee84cb13a91",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bb3e1e2-27a7-4fb0-9318-ed84fd00f82a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb68f5a5-c414-48e9-8297-d18b611837aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c024935-593b-4827-8387-2a239b51794e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "72c1236d-fe94-43ba-960f-21181ad66889"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7c9d8bb-da8c-4174-b069-ab2bb143aac2",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ce0671f-ddbd-41f5-8d20-2eb61f4a7060",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b81e3fbd-3255-4e0e-871c-f575eafcdfcc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a0875ca-d1c1-49c6-8531-fc3628564c03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "0d8be027-2866-4c57-a74f-315b7897fe88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb4ad49b-fb20-4bbd-8d50-2f7b154c0efb",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "363226bf-05ab-49af-b4d2-0003ec62bd99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96140f0d-0b01-40f5-a87e-372a789e9143"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a20748e-8a2b-4e78-b555-15908e167d74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "37e78537-55a6-4bd1-8d97-52cdec165099"
                        }
                      }
                    ]
                  },
                  {
                    "id": "215e1e02-4320-466e-9e1e-a8660ddffe9f",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "788c053e-7514-4245-9448-bc53028c0207",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37b77d5e-91ea-4884-9f51-f8a3beeec34e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7df5928e-7d6b-4fa1-be70-08ca1d67eee6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5a798bc3-178d-4010-947b-cfaaa0c5c519"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38b561a1-aec0-43bf-9df2-f92d1a61ab7b",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7a6cd2f-e8f0-4462-aaab-5f85be9b1ca3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87fe63a0-fbe4-4be3-b40f-2040db17b06e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82ee9ef1-90ea-40dd-a7ca-a1dee32b3205",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2ca6dd70-4fb1-49dd-a616-d5177e0b1321"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9375aadf-bca7-4ac8-aa55-0c714c64b8aa",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "daa6d5a1-ccd5-4c3f-9536-90335729c212",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45e468ea-60d2-4add-83d7-f1499b854e24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93bb3a49-77a9-4ac1-827b-2c2df475e38a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9a1de65e-22c5-4049-bb0f-e751ec768560"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93453114-5d34-414f-88d4-2f6ca2865a74",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0b38cae-be3c-4879-acaa-73618d8d209e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc259306-6599-409f-b655-1a3ca45a2f4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30222316-f312-4f78-a110-1e8cc95799cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a2ecb44f-23eb-4cb0-8a08-40ab707a95a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "199ac855-bc5a-47e9-9e3f-bae1e73bcdb3",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b7231d0-da60-4b58-b7d0-adce35ee73aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d30c16af-6220-4749-802a-6ba02f5a023e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5077233d-daff-4f51-80e9-0538b18c767a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "dd7c35c9-870a-4eec-b660-f4d9adf2963e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6923fd62-0138-42c3-b5f1-44938e133e2e",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c2c45b7-eecf-43c4-ba6c-d2c9f6455123",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4177b651-6e22-4d8b-891b-566666db9fb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bbd9b80-6dd5-4efd-9ca1-1d6e29d0dfe9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "34a51525-e99c-4909-9dea-c700de8f97da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3a61c47-9be9-42e3-a38a-806675610379",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17a67d18-d1d2-474e-9d36-f2a74719b48c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfa779f4-53d7-42ab-b05d-538f0f60fb91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b414cb1c-f934-45eb-bf97-a31019a7f8a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "650fcc4e-9d66-435d-80b4-a814de868871"
                        }
                      }
                    ]
                  },
                  {
                    "id": "390c7d78-63f4-41be-8bb5-77f7cdd904dd",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1064a9cf-4d18-4da0-9f45-6c7e6693cab6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b91c25d6-fc17-43e4-9967-0b8a3b59684a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca15f4ed-3308-4f44-ac13-b71180edc011",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ab1fb6b0-5171-4a4c-bb56-63e9e4f2d5db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edfc2163-aee7-4b6b-abab-c7821ab3d262",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f979d2d-87fc-4be3-b542-5fa4863a823d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de2b213a-7920-42ed-ab97-12974a825649"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80830e29-2209-400b-acfd-b836a0722b0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "311a4e28-5fa7-4977-8b36-663b71a8af09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "523a775c-5066-4ac6-b2db-e7b7043cc14d",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "563783c8-1632-47f8-a2ce-bf713283cc22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "169f186a-9bd7-4a65-9920-4a4dd779ae16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8785261-6193-4139-8685-334581b08f75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a0f1ba25-004e-4588-88a5-b8654bacece9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0137e045-cf0e-430c-8dad-7e023828cf9c",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f4e6e61-2c93-4d15-bd92-0cb7909a9707",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "481d0833-dbbf-467d-b010-5d649e404543"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b888442b-1268-4bab-9a73-2d3d93c8fdfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "d4f56e8e-088d-42ed-8d89-d40ecee3cab2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8361b7a4-0ef4-4268-a40a-ac606e2b532d",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e4d900b-d072-4351-8532-4ffe8f1e429a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfddaac2-a1eb-426a-a12a-da965215981f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "552fa7fb-82d3-4a1c-be59-a006a25e6c07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "2702e8c2-a73f-47c5-be18-4d76fe2fe843"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01ccdd23-0c1c-4293-8779-ddbff591f7c1",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9cc4fc8-2327-4b72-a4c9-16035d0bd76a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "120d5884-ccb2-4e46-af93-1398a1245e8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "451a839f-ada2-45e7-9707-378c782689fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "61d6f659-50b2-432b-8346-077236964f07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54b16701-43b3-4d04-83e9-f5cff56321a9",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2140aac7-e5d9-45dc-be27-24a5756cb3e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdb0f776-8df5-45af-b2f3-4d715cba3ea7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a43f308-2c27-42f3-8545-b0eb4ef0e9c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "bd92bb8f-6d80-433a-b0d3-f7ee648b6bdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea2742cc-05a1-408a-b01d-12154965211d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da8c7265-f148-4e9a-aecc-654f8748547c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b184be79-6f98-4e1a-ac77-956c1af27944"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73ec72d3-86e7-41c0-b1e4-6efdf142a2bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "8f234eac-7ad3-482b-9389-6665692891ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02ca8eb7-480d-41d3-8615-e4cc9c2d95ac",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97ea965d-437a-4e9b-85e1-c43189066989",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca32e266-0e3b-47fb-9214-35ce72e5904c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "530f690b-6bf7-49e9-8348-eda02c6272d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "de2441f0-ddeb-4ea8-b732-05bdadbb1bd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a36500be-9ca1-4eff-85e0-30eed1db4991",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83b83fd6-2cff-4e8f-b482-ebb770d5ad4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2236774-0f93-4cf2-88c5-23deb712bbcc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8554d99-b977-4d88-a576-0a0d187fb4b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "e0376351-7e97-45b8-b88e-7b1f7b94a27d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4861011-6ee0-4f64-95d8-b43b48507a49",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e35f237f-1f1c-4ee9-b888-873565c8ed7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f1d5609-50c4-4597-840a-1191e5b74ebb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a6d927c-7432-4a5b-9262-e197b0492451",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "320b98e2-2515-484f-a1b9-029de039daa5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bdff798-5265-4671-b386-267b5b35319d",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1542481-a500-43c1-94d9-32916007564c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0896353-421c-4565-9a5a-f547326b04e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9557e512-9f1a-48b7-a439-1656a809b017",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f968d15d-2ea4-492b-9778-6734c7778043"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1a8f916-c3ea-415a-a313-ba13efe87bd4",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d080b5d-78aa-4f03-8f50-c1de7ed66348",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6ee0f69-ca5a-41fd-b928-f157c8599d7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "401f4d8a-801e-4820-98d7-0d2795831626",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "935fbfaa-985a-40da-b3b7-2e6dd384a564"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d0ef5d9-19ed-478b-9e34-5ae2a24e766b",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b250169-da53-4b98-b202-186f9860b8eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a4c0752-966e-40a4-8811-a9f53199924f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "901cd65c-7512-4df3-917b-503fd9d2f63a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c48a2e0c-a692-4e57-9803-623f5d47adee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "217e93c7-058f-4a6d-a0da-50b1af7d4a05",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70573ff3-65c6-4948-bbb8-9752e0a0815d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "737854c5-d9f8-4ef8-ac36-30e1c60615c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62084e78-94b5-4a14-b6b7-5c03bfe94ca5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "27a444c5-8b4e-4e55-b5ff-a22fea599a90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc102353-ee42-475b-a7b9-efad7045b48e",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ded6049-5cb5-486b-9d5e-44b2d8dcb489",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e9e797b-2ef3-4c39-a264-6e378e4655ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb982924-6967-4577-9356-2f6f5ffb5044",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "c4b4950b-3bee-4977-8379-6698fdef1a84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00beb89c-20ee-4271-b2c3-36e517b07dcc",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "348b6b82-41f6-4f8c-9128-0fe2786b8167",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c34286d9-c564-4424-83e0-eaf402345d7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e7dd7b8-f3d5-4e6c-8584-645b42f1fe07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "2cdd679a-3752-49bb-b052-f3ec73d40338"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf1a547f-057c-4366-82a3-92d0a8be417f",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67cdd436-3ead-4341-8af8-7bbb8d79880b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af3ad3db-55b8-4ed6-aeff-bab1c16d2e6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8f56212-f95f-4ae6-9aeb-b49e7e76211f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "73034114-e740-4d72-b91f-59522490350a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6dd947b-1786-45c2-8173-7febcba22535",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c6bf29e-ec0e-4a6d-8b18-6c4ea25439fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71df639b-0130-42dc-9fba-f3e594da3372"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf8a7178-0c01-47ff-8df0-d465fc8d75d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "da88a76c-79b7-42a1-90d6-bb7a08e220e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6f82348-8bfa-494e-8611-5a26eea1af4e",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb12f82d-5a00-4b38-8967-7e49d1753bed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4ff6398-d830-4602-91db-77e9049f7f92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1769480e-a358-4fd7-be30-12b694d1e119",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6633f928-690b-47bc-9e29-91c109260429"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8df7f837-9965-4999-b624-81a60580ae81",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b929730-734e-4c0f-bf4d-23ec95c87544",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db026581-86a2-476f-b579-03ea774afeb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24bff465-5423-46e8-8745-53840ca322df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9a72b375-ebcf-4735-a6e0-2d9e22146206"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f718d05-f013-4111-b1ad-2b0ba86060d0",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d87fcf68-d16e-42f8-be75-af2910249a2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f493ecbf-d89a-4189-93ca-6d4c8b8e54d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c63ee222-1962-4872-8f4b-e42d51f145ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "be452014-67a3-4553-9223-ae4d0647b249"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91764283-2a69-405e-a8ee-8637d1c80cda",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e73cde16-521f-4847-ba45-27671b7e9c45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24604c13-ea11-47ff-acb5-b3fdb8340c77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55057ac9-d37e-4902-8c62-dec8295b97ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "182704cb-43ba-4f88-a3fd-9d43a849dc0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a25d7ed-e965-4f44-95c9-72dd3b262dc9",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d1f903d-b734-40c7-b082-7c1606c1e4b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15aff883-2fa8-47b5-a115-c96a7efb581d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7c7587e-9986-4bc3-91a6-b8de236bd2a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "88a6ffcb-1fe1-423c-a005-3f1bb515e8bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff4dfbe6-3fd7-4794-ae27-ee602ceb3b5c",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82fbed9a-1436-4702-a322-1682bf86d459",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "698e0c58-f5c1-47ce-bbc9-3d7499dc3636"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6dd8554-ca00-43d7-93b3-af50e6b0ddf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "141608db-9660-476b-b376-eeae23a155ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59eafd8c-3283-4742-bf96-b5ddbd9edc8e",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "124b83e9-6574-445b-9f81-4d5ff0e2b2e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a99efa62-ac0b-463b-8036-19a50502dba3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d193a00b-38c6-4def-825c-1d8e1a7f2af6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1a7f29e5-008f-4336-83cd-9a959bec5039"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fd9134f-27c3-4587-b3da-42050bcb58b1",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "887d0797-8da3-48eb-9e75-f570273173ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4ad8ec3-8156-4384-baaf-9c40748f6bcb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78c30a88-7170-4d2c-b0fe-4b6b4ed22852",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a50d60ec-aea1-45b7-991c-79cd9d537c55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7d3037b-2dae-4bde-8dff-c90292568efa",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff2546de-ae0d-4af3-9206-b5cae038a047",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92889988-c622-4225-b466-bec7c25e11d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b74a224-4166-4ae4-a763-279c0a8f52e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4942c89a-dc6f-416c-8e79-5102107d01f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d548ba56-8bfa-4ae0-b192-5a2dbbef2dd1",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adaa097c-f642-4196-b7b7-f8f220a986d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42e4c1d3-67b0-4da3-99cd-12edd948a6d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9eb341f3-e267-4fbf-af24-55b74811f0d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "f48b7559-eef4-43f8-8696-a462a1f10454"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60cc2278-5448-4815-aced-4b905ff29091",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba6e0c3b-7993-4e1a-84c2-da663eebd6d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6703878c-2db9-4ef8-9de8-191d194ed58d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4747d187-ea3e-4e1f-8a1c-655b0b1cf31a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e9c729df-691e-4b1e-91e7-ac0151c0a4b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a7e9d60-a1af-4dc3-98e9-f8b1c0e6c82f",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cc4b4c1-6a89-4d33-89bc-20e9790d200a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "530990f8-4bc7-439a-9cb6-30cd0ea15939"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de686038-155c-4934-a149-dcbfa713dbac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "62fe3a26-7113-44e6-9453-2d4d96e08bbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57d31176-0b15-4dc2-98c1-5dafb116613c",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8524b54-3955-4bd7-aa25-087c4564c6b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54339580-26a4-48e2-ad38-633407f0aad8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bd202b2-12d5-4bc3-851f-d4e6cfa12d35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d147fed7-298e-4250-a8c9-08491a0e8266"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63ad88a8-e43e-4209-83df-169642cb829e",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14ce6f22-c656-4d18-ba0a-fbfe1641914c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81c290b0-16b5-40f7-aaa1-8af5b46e21ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0279437c-a6a3-4de6-9b98-68d7aa0fd0a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "98ba6d2c-921c-4e17-ba2d-c8e490cf26e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d9dbfed-f552-45f8-a0a8-1bfeb3920258",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25260678-604f-48a3-bc52-bdf63e4f4d1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ee9f4b6-6e63-4782-9aec-0bb1f427c426"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ac880c7-3bce-4dc1-a97a-db959d153e68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "854f8f04-ebb9-4741-98db-ea52df6eb14f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f95f1ac5-a9ad-4e18-94cc-bb4410fe0641",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffc01b85-eaca-4e82-b3b5-008e3d7d4026",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff9822d2-8356-431f-b6a5-96c1eee9efc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b6228bb-39cc-4d3b-9c7f-cba3402e9bf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "5189c357-86fa-47ed-85bc-13fcfcd3db42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f452f7a-73c2-4939-b2fb-dcaf9167a742",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa1d13db-968b-4b6f-83e7-e494a60292f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20acec33-6506-4e04-ad55-cfd61582ba69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47ef9606-c219-42b0-b710-6b62268eddbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "e11bc91e-4ea6-4045-8f51-e3380dbcb16e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "104d52ce-4011-46cf-ac25-dc755359d384",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ff8f46e-2a8b-40fe-9e0b-1fcdfc581c5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "033525f4-5377-4093-8776-41daaa275a8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee60f560-e685-4b32-913f-4d049a339fd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "de655ab0-238d-43eb-b846-70da6c443be8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09c91376-39d6-4491-930e-9e6e70cddb0b",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd464d56-169a-43f3-8a65-fe5a36214fc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce98e9e5-dd92-4367-950d-a1e112d87622"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec03209d-e677-414b-92a6-5c9cbf1f0551",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "971f4b0e-a067-492d-85c4-8997f40f8a3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bebc9a6-d582-4a4e-a3b0-93e8714754ff",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dec72574-e8de-421d-ae70-5f7cf8a4797a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60cdfd63-fabe-4142-b93a-87436a949daf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b61e073-1cfb-489f-a6ec-d2845dfcf351",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "bf7747dd-e2cc-4594-9a28-81ffeb899520"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c7c06d5-c1fd-40fb-88d9-50d7b66abdad",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a39869a5-81e0-4f50-8bbe-137e39cb3a39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "9e26bde7-1f88-4ff5-b585-d86bec0e3565"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9862144-5ab3-4277-a598-6fd1d9ba5c97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "5b8ea95e-786b-46a3-a1ea-645c9ff6e33d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d43cc856-2ffc-4507-ae32-fe1c248b2ad9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5f378726-8b8b-4432-a412-1374b2820ae5",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f100ff28-33c3-4037-a397-c45086ebf040",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a49bd2e9-f32f-4a18-94fd-86bc60713572"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56bf8507-a863-4b3a-8f6b-0b5356c0d150",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2e220e4c-0d46-4f87-84f2-4799b3f6f952"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0b620aa2-8963-4db8-a42e-39862f4b1c3a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "11f95e56-e7fd-49ca-aaf7-9e1aa579ae30"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "dd137e01-2541-4815-99b0-5ccd7b09f015",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3bfa85e3-8f55-4f06-89ba-bb8ffb3857ed"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "96b83525-533a-4b61-a4a4-47d2fc63a0cb",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "70eeb84f-9cb0-47d2-abea-198f0ef60c74"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "1a96b1ef-0222-4c66-9513-a60969a943ad",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5ace7b52-ce27-4ba5-87f3-8ee5bfb93251"
                }
              }
            ]
          },
          {
            "id": "9984b54d-15fe-45c9-bddf-fc0b9d853c90",
            "name": "Positive Testing",
            "item": [
              {
                "id": "6fed2ea0-c8d9-45c0-bd71-ba001d435d86",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "e70f026b-c1dc-4ad4-9f84-ecde40aedbb9",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d1f4428-84bf-41fe-9607-d75822cc47d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "b36e7e76-1b3c-4260-a725-74368cf5877f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2929d24-2e0c-42af-bbf0-845d8dd077b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b72fba1e-f922-434c-bb70-9e6281505886"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "6d570c7a-1917-4810-81d9-b5b2c4422448",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fdb9a480-ae0f-4a7c-9351-bac92731cf8d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c54efe48-aad7-4fcb-8676-fa76bc0707ab"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "93a28966-1bda-402d-804b-f77cb6dd3e47",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "0522868d-d019-4f03-b160-418602a85e1b"
                    }
                  }
                ]
              },
              {
                "id": "52e8b0e0-1e04-49a3-8e2d-04a139571500",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7f73dbb9-0b8e-4f7f-9435-ef9104213bba",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b79c823c-9db9-455d-a601-41ace16de6af"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "146f64a9-6261-412c-95b7-3dd9d02c7f46",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "d57ce7eb-7a37-45bb-a68e-9613983c03e3"
                    }
                  }
                ]
              },
              {
                "id": "2c862825-6314-4a5b-b4e6-090178debb53",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "112502c4-0a8e-4f81-92c5-47c0dc80b898",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "96283d10-0d15-4c89-90dd-d387297e35fe"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3bce174a-9466-4031-9410-0bd84be2e526",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "c45d6a5d-46d5-4b44-9d6a-ec674c58817a"
                    }
                  }
                ]
              },
              {
                "id": "81cb74e2-348a-4446-a92e-eb7bea9edbf5",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "87c99416-cfe8-49f6-b526-f65e6856274b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "84ccd25a-7fd4-424f-8e45-50c282aba72a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "348c0469-5ed3-4c6b-b86b-948c6fe5d6ce",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "a4afbd59-4211-4666-a2f4-7f9de3e2e105"
                    }
                  }
                ]
              },
              {
                "id": "e9e36efb-3ded-441f-af4b-e58ea41373ae",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "754100f7-ef57-4d80-83bf-811e0e42dfbe",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "83e3ed5f-0c3e-44ed-bee8-aa09cbd96945"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bc4d7973-8f95-4835-88ef-0218febdaf70",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "b7709e5d-8f83-4ea9-9bff-296a2d10b2df"
                    }
                  }
                ]
              },
              {
                "id": "d4d94a61-d8b7-41f3-b76a-5518dab01ede",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e9d2049c-b395-4675-9ed3-081bd479831e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b50d8906-9f6d-4402-a86a-4faf7f75dab9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5265dbcb-701c-4fa2-890e-9677e1b36327",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "fd5d7706-ed00-4b8a-8af6-78d738892cef"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ece3e94d-aad0-4ace-b9b7-b55a181fa7e6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "15273aa8-99a5-49b4-8a4c-edc7c3827f71"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "71d31819-c464-43d9-a9b6-c40dea80ee00",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "63ffe0ff-8434-4d99-be31-5cfdb38e9ab4"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f94d7d7e-e781-4798-9f22-1dc4f4ac0449",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "89450a06-71c1-4244-8608-9773ebd353bd"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ca5a1879-d727-45b0-acff-b1b6ac810835",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "dbcf9d4b-531a-43b2-bbd8-4c4fc414441e"
            }
          }
        ]
      },
      {
        "id": "e9dae966-d74c-4871-998e-99214da454d4",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "2ff4c749-1cc0-41d5-971f-671b0e7b2439",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0b069a29-0c78-4f5e-9f80-e7ba80d12456",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "6ff32551-931b-4c65-b0f6-bbee49f2d103",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc284c92-542e-4328-8f07-3479f945f992",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47f3da47-0f01-4c39-b348-920db45da088"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0caac55-53de-4f41-b91c-0b450f81b7ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "24dde825-4de3-4ea8-9d71-7c11bb4ff94b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "923f3c60-87a3-47b5-9e37-fb280a3d15bf",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5fb60e8-0a53-419d-8365-248734f31313",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f26aae75-9dc7-47cb-b403-0d7a48a7997e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c706ccf6-7cb6-4726-ad42-d9c4b2156ba2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a1fd7c5b-da9b-404c-a4bb-5897e9e44989"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5171f82b-25dc-4401-892a-95accef6bf75",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcacaa6c-52ba-4958-ade1-9ee71be3e4f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1674ff9-9095-4a54-9c8d-1595c77b1fc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30347e94-3012-4f84-8e45-07ad46a5365a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d04755f2-7ed2-429d-ada4-2f9f95679f2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13b08bee-53cc-472a-a6b5-72db835cd49c",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50d7cf33-1926-4632-9f1d-f1c9b032d0a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01af0553-470a-42ce-832d-17a75a3fefad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80401563-70ca-4e0d-855e-cfb12f206387",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cfc7c223-533f-40dd-b4db-f0d02f5545f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f985b38-66d3-4031-b6ad-ca9cfd8f07d1",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "766dd71f-01ed-4b84-a5bf-8ef4cbeb89a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc5577d4-5082-49ac-8214-e4b678c24e3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a6d1137-0a9e-4c08-9c18-c7e0063f4dff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ebacd5af-ffc6-476d-a099-dadd67769b73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e054f34-d7b9-4502-98ac-7ddc34a69cc8",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37ff7574-c4ff-4bcf-a52a-4c3a753e35ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93e4aec4-fbc7-4c38-970f-975dd5d656c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "859a4084-9969-4a5f-ba9e-c31480d406ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "82e66266-cc21-400f-9e60-009d00be08a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e466ea9-643a-4d48-89e5-b161a15a3eba",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "276cc611-fe61-49ed-9e56-d790e575023a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30b6d9b5-44d1-40d0-b79c-ee346d3eca9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a55c92ad-34a1-4cdd-8144-267ecc52ea35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "b9a6de91-00aa-4c90-b5f5-fb2786772fa4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51960b9d-eaf3-43bf-adf1-7beba70282ee",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3906d860-51fb-4be6-a9e4-d8ceb6d0da45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e201f3a-320f-4478-9b47-a756c41ba8c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48ef9375-8611-4a2c-9647-05dd61585f8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "79e66a19-96a3-46c0-84a8-062f476d15bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce301253-ba45-4f6c-8735-6cc38ea59d49",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46b8e2dd-4d7b-48bb-b81b-cfd87fb69119",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44dd2b66-c884-4338-a845-2c5657a96520"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "432c7611-a429-4531-a466-ace45bcee5d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d8a1ac68-3d27-4318-8a4e-88041133e279"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd2ca7c0-d561-47a6-8870-c0215a6ea34b",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4a2622a-e7c5-48a4-a04a-f79f32d0e693",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "889cba73-769f-44d2-b1e7-4689b52c49dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d77e4da-f1d1-4a23-811a-023f44ca554a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "10f78528-6ef4-4745-88af-600b39d0822b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83ce52c5-454d-4f42-a30b-c9d0ce3bde2c",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11380fb1-165f-4841-8f5c-30b8c671282c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ca78c4a-5c3f-41c1-b3f3-af3b807a47fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baf4ee01-69bd-42fc-8c0a-04efea4b6e63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "9c4ca14c-4dc5-40e6-b2c1-91c6a2e182a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "477f0cdd-31cd-47c4-850d-5a998a9535e4",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbeaf2ad-3928-4e9b-86c8-775742bcf552",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f2e5819-7f7a-43ef-9ef2-c4ad1dfa59f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1bb432c-e384-4e4e-a762-343d5e7f9930",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0969748d-9789-4469-a1c7-1139627677d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d501617-fdca-4442-a22f-219bf938946b",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75c49680-fcd0-43eb-b24d-4e7d948df642",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a70fad8-ece8-406c-b0c9-f318ce87460d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f7eb4b4-37c1-4fae-8544-1b8307fda805",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8065db87-5d60-4038-a559-9540bf10cd59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94e11e9a-05f6-47e1-a3f9-c643e4f52f99",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7576ca2-e8bb-41c9-95ec-34ffc15af759",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07f9db7a-304a-4145-aeea-55d2cf584526"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03361a64-8287-4e56-9baf-f10e6c91821f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "6b8da90c-05dd-4b00-91ec-a8e63f939276"
                        }
                      }
                    ]
                  },
                  {
                    "id": "897b6d3f-3daf-4e4b-8d3c-af840b529f3c",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83fdc1af-3251-428b-9a4f-6ef0c837d26b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a44b32b5-68c0-45a8-bc7a-37bec53db7da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7628e47-8e92-417c-9a9f-516711640049",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "5b6ed55a-107b-413c-96ac-6041b909ba29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d3cee83-177c-46a9-9de7-6e423ab7378f",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c4b62d6-17bb-45ae-9096-4fa6a49a729b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ac3103c-76c8-4618-b689-ddace089c129"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "621cf80d-0e8f-4bf1-88d6-9641544ffd22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "bb7cad52-cf9b-4d9c-bfb7-df3ddb3fb785"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46b53dfb-e217-4327-87cc-f631b139bb05",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d713d452-69a1-455e-96c7-ae67a774610b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edc53864-6faf-4448-a649-0cd98a3e4b81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b0716b3-3ff0-44bb-880d-4314d78d9823",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "009f3228-37c1-43c8-a612-6a6106f673ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e8e420e-c7a3-4e6e-8005-6b2ef741956d",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4e329af-ba4c-472e-a288-984865920c25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c19d3c7-b181-43e1-adaa-f39065a473b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e781719-6d08-4c7d-8baf-3b4eac956ea2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "ff8dc210-71dc-47a8-97ba-2d342125e5ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a12497e9-2f10-491d-b171-4d1b4b2d58e4",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfca1d35-0797-445a-b857-7d35f109b6ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a4f4c1a-8c1b-441e-a11a-668a4eea67cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63caaeb3-9af8-47e6-950d-e6a1260070cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "401bd4da-01fe-4233-b5c3-e02d35b2af45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b92cdf78-86e6-4d78-aec7-c26b8f82fddf",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e07af523-4f72-448b-9dd4-ac1823df0473",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dae37fdd-015e-4ab3-b5b4-19dbd48b5463"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dee5cecd-8996-42be-b67b-82740b51e274",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "694b8ca8-8d34-412d-ac07-bd8483b3792c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4212e1b8-3b89-49be-85bc-7f05738eabbb",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44021972-98b9-467c-b359-245934503091",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "014ab8c5-0d48-4579-9723-af645294591b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b0dc2b7-91b3-4a75-905d-2f6aef9d60c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e0391a6b-e0ed-4d7a-8d02-8518d8931236"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8670ca98-2129-4f11-acb7-ab504678ca40",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d97b4509-dcb7-4a9a-ba02-7e59f1a04512",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e38756b-adef-4af4-8522-51fa78dde1ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "965267a4-3261-4120-b05d-e8c811f7cfc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0347c4ad-0616-4b45-9da4-874e68d3eb53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2c1be4b-93d9-40ab-8655-543a34f5d263",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b96c733a-9965-4dea-9d46-b3099656c0f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9bcec06-cf75-4613-ad81-02f6588e6bc0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42a615cf-0601-424a-8629-85d58dcde039",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "435f4da5-2cae-4ccc-8c41-1e3ffa4d9310"
                        }
                      }
                    ]
                  },
                  {
                    "id": "591db26f-747d-4bbb-9d30-e25e503ac2f9",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c30b5b1-ae6f-4b9b-bc67-e2c1be4598f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6559d16d-698b-4689-8711-0e4ce9a49fb4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "537450ac-bae3-4769-b8d7-78ad816684f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d3bc879e-c0e4-472b-86a2-f35ec5a3b373"
                        }
                      }
                    ]
                  },
                  {
                    "id": "633a7619-69fc-4d3a-a619-e62e22611087",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c43dc004-7c66-49f0-8b06-c919bf808754",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23ebacd9-c95a-4888-b438-00516317d6f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4328b101-0af8-4dee-9d40-5d34e2da71d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0c467920-26d5-4774-aa90-1d9c56698d99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0b68163-fd04-4a03-be73-9b41bc359509",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c37f7fc5-9dda-4a02-beed-7d3953869cca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0d44a09-3c6d-493e-8b23-211249e61151"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1fd7f77-c9ce-493b-98e3-51f31559f421",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f3f4faf8-fac1-40e9-b285-8a6df845e963"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6429ed58-d02d-4771-a35e-aa95442d342d",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8450eb16-4444-40a7-a36d-53b9ae84ee4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61fc64ea-af3f-4ae4-8ce9-24d8b93bf5a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e84ce503-2d04-4d4a-bafb-b0574cb5d934",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "df7741c1-948a-4230-99a0-4dca6c277648"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64eaa855-fefc-4b4b-ba2d-1e97c7668d97",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0546d280-323d-4218-8665-bedac2a77e1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "603b64dd-5653-46a9-a6aa-5d4be72d1fd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00b7650f-d325-4063-96fe-cef96b80c44f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "55ad09a5-f210-4579-a032-f7fe631d853c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51cbc23f-51dc-498e-9f7a-a48f97ac65dc",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9282b0ed-bc81-4053-bdf3-19c027cb4818",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c958496-6833-4a78-9264-876780423e73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "551f5f52-62f5-4ff6-a0c4-5cbbdc628c5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9f36b403-bc7e-4775-bd3e-f6d022f4d42b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e06b2a2b-8249-42dc-a750-a72564e151b5",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9109920-971f-4684-8b83-e5d3fd2be91c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d38496a-071b-467a-9fd3-35c1f31d6af2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f635acc2-387d-45b1-89d3-a1af65b08e3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "804d5b32-7401-4045-895e-cf7f78844d04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "018eab3e-46c8-4643-8cf0-4bb5c42cd718",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79aa8bdf-45d5-4d9b-b7c9-419d0112e37f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c5639f4-7745-4da4-8c58-8ca2751595ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ac80625-8daa-44e3-bc7a-d55ee3758818",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "09b70576-d3de-405d-8a14-0d2b5d205a9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af5c0e0d-b2cd-440e-b475-5fe0d3332a8f",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93595e2a-ee12-4869-bd9a-8b6129e3e204",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cde67fa-c761-49e0-a07c-e7012944752b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0c81fd7-cb83-459e-b5a7-07471d09d07e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3d0c862a-6615-4988-9d5c-2d6a4a71e46f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0498e315-296c-49c2-a1a4-1eeb92aaf59a",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80fc58a5-27d1-4158-a38b-f0b08f77878b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d46d8ba-fd9f-4197-b998-575dbd7d71a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1aed3b5c-23b6-4841-8d54-0eee515299fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4f5f2ed4-d883-4bed-ab38-0281ece808a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29f3a6c0-1a33-44e7-8b3f-5cc3f0f78094",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8de3191a-e88a-4ed9-8d75-f393982b8b18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "436a0fd7-6989-4769-b432-84af98fbd386"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b6f6cff-b315-4485-9d1e-2007c93bf11c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "216f4880-f873-4677-a818-c3aa85f86679"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1de947df-1210-4939-8258-65d43e6c2ebd",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cb4d55d-8dc9-4fe0-870b-51b334814195",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b998894-64da-4450-848c-31e9f12635b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5aec649c-2e06-4df3-88f0-6bcec897355a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1d385e37-46d0-45e3-9d34-6c1fca5b17c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f032555c-014e-48dd-b7ca-faf4f8793e91",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0149fbc7-cba7-4f6a-91e9-4eb31e2a00aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7df7f945-9877-4e67-ac24-af6afb315b97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e191afcf-5698-4c32-ac8d-07567ab578ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1a337ab7-7a99-404c-b788-2d411b9846b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac333c30-5936-4aac-88b2-d0ef657d4e62",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e44a8fbd-bf66-499f-8be4-9758a7d81383",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0137931e-3b1f-49ef-b899-1523b8398429"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1fb4355-fa25-431d-9550-bf11c2728dc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "904c1ce5-923d-407c-aa36-9841e949edd0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c58ffaff-192d-4b1a-9ce6-dda25b2656bf",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "cbe6f369-1ce6-4fff-9db4-0aecae00a090",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2cbe8bd-c6a6-4e23-a4bc-0632168d74be",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "1f48e8ce-d967-4c16-a0fb-260bdf92d7fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e55067a-4b83-4ce0-81d8-e48b9e8a3280",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "46accaa7-9ac9-43db-8782-f6f5dae1da6e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "de0888e2-9cd9-47ff-9ffc-ce5dae6b3a35",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6259f95e-3ac5-413d-9c45-94d3ec861a9e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "66400291-cf52-4182-94c0-03faf48c01bc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a76149a1-a148-4739-a785-62f34ffc2b5e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "39812f0e-d932-4b05-9c7d-799eb860a961",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "6239c231-a5b3-413f-a464-d89538396aa7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ee05feca-ca5c-4f99-86ec-e008995ecb44",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "08a2d23f-ebfd-492a-8165-4c2891d876df"
            }
          }
        ]
      },
      {
        "id": "0d32833f-ae22-4cf1-a52a-157768a4e0bf",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "68114652-ead3-4c61-afa1-d2fda6baebc0",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4fd107b2-7645-4b50-a563-7d984ef34411",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "12c0eb27-275c-4c1f-a331-64900030f838",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66b6a22b-a976-4143-ad57-ce4b050fa041",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b5968b8-15bd-4323-8fe3-68ec074332f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6aa80d06-8111-4b75-b0bb-90193bc1d27b",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa4044aa-9d27-497d-84a9-b7ec349cdd58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f7c1588-5951-4bb6-93e0-c5c3c329410f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a6ded54-2930-487a-b31c-77fb78c2bf96",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b610f2f3-e9ba-4c74-ae9e-17bb2c81db21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cddcdcfc-2bef-4989-8202-35e06b78c335"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db03af7e-fddc-4b4d-9f78-5da723b41ea8",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00c752de-ba35-417f-8f6b-d778107e9cac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6baf0c7-647b-4a82-bc58-cfee9fefb0ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4585b38-412d-4f4a-91c1-76aeb2fdeca9",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c43e7b20-dbca-4462-9e53-49b2d07797f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb3bd2a5-5897-43ca-98d4-4543a5649dd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26d4a6b0-4a29-4e98-9250-cc0b04d7234b",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "657f423e-32ec-40ee-94c1-613895185624",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d90e73cb-ae36-4cee-9135-cd3b9b04ae77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e4092ce-9923-4dd5-9970-a29a805c281e",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d42d5576-07ff-478f-8566-5dade130cf1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a0f6a0c-47ad-4c18-88d1-8ea1b3b8f5ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6c4fcee-4e47-458c-aa67-056a67ec39b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af5dface-7d85-4c73-87ae-f825d6254fed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16aae4cc-2ee4-455c-bc6a-d78b246f0e93",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abfd6c2f-e5a5-405a-a66c-03f8a13e471b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "39e5ed5f-d627-4a59-9064-8cfe9aeee276"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "517ba076-eb57-47a1-80a3-d3c01d0e46be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f09af67-2656-4fcb-9863-2a2919b71591"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46cc9e05-c64d-423d-8e2b-06bd3c77e195",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a03147e-d9cb-49c4-bdcb-706d0c3abb5c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d619f02e-fa33-448b-990f-1a71304065ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f352484-cb15-468a-9822-b966100dfb00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6425ed5f-1cf8-4500-b868-787a242d60ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15fd420f-f97c-4ec9-8c38-d7bd104c2afa",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04cd6410-b22a-42c3-ad18-9d7c18ac6fc6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f40c7f69-8392-459b-9247-ad0f434a17da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2a38ac8-87e1-4b96-9fa2-b9556fd90b70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d95a8bcd-5f1b-4cb6-9f0f-e1f345db2334"
                        }
                      }
                    ]
                  },
                  {
                    "id": "371a6608-eda9-46a5-b470-84742244e986",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2aef03c-70d4-4659-88c6-966679623340",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bcb7e361-1c8c-4086-a9e6-b18b68579a5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57646af7-dc20-45e8-a8f9-b529ae3dcca1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13465142-d6c6-49af-8a63-c810fa6648e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ce58213-b41f-47d1-b553-420189aa8475",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09758c82-861b-402c-ab0f-e0b2fde3c5f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6308c7a-7851-4bb9-bbed-85d73167092b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5726b7c2-c21b-41c6-8340-3cf6fd9e71dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8d19f46-7e7f-40bc-92aa-d082312a7378"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5eadcdba-a6a0-4a13-8d95-17ee05ac0a85",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4e71688-5690-4863-9cb7-9660e2584ac3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8dac77de-2399-4dc0-9b8e-f09e883fca85"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8dbd2cc-6ca5-4e77-a533-aefa419e4915",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6583bbd-e885-4322-9628-312f86cf6637"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb2bce7d-1b2b-4dc1-8f01-67c21a067af7",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d22dd89b-03f8-4aa2-a80d-d5715987f8c1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ccda81a0-5abd-4970-a177-b50c9b81f5bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ecd9149-d35a-44f2-8380-789851210062",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d3bf942-ab9f-409c-a99c-841e336ccceb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34d62a79-aa15-474f-bafe-dcfec082aec8",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a5076b3-09d8-480e-b7ee-b9773ff894dc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "36266c43-4262-4e9f-9b68-1c9631747581"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93c99941-78b4-4a34-8736-17d346f3bb53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0cf7fe2-ac58-4fdd-9c20-5d1d5d2c0ad3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4f4ee1e-bddf-4c17-8623-0ef3a805fb35",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd8f63a7-0d26-4fc8-b1f1-95a84a6432b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ac18189e-b7fa-415d-b2b9-cc8c2543b73f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cad6d617-a823-4b2a-9f77-ac2b635d1935",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "206745eb-b42f-4fa1-896a-1ae27ee47e71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "073d7c67-3eee-405c-914f-615e108be84c",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5b53d5d-d36e-4d50-bb8c-dfc71c13d3c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7612010-2d6d-4cea-9ce3-33abdbc25fd2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ac6ba45-1d61-4700-a971-94d8ab046d20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54bbfa90-2c03-4ab1-820d-e4eb890f40dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "681ffdaa-764e-44e4-b7c8-bda1aad4e62b",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59a918e1-d80c-4cd3-a1d3-8f762711ddc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "246061b4-bc01-4a75-a92b-fb8da7c03767"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fa3e747-6ed6-434d-b79b-451732dfa954",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0780ac1b-cf36-4575-8146-1253db89dc30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fed8469-b6f8-48fa-bb44-f107afc169a5",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c554f439-842e-4f88-8083-976f36f4e8ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56cfde3d-4a02-40f7-baca-8fc762e30aed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0ffde50-525f-4787-8e3d-25fab42dec1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3772450-6f2e-45a9-a57b-79d9efc838a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6d5f95d-a9bc-4ec9-bdcf-7fd4e03fb222",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71144b31-8554-4bab-a613-9c5994955268",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f11a89f0-7051-48b1-bf25-e3b48fc7d2a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ac4ccc5-ce9c-42a6-8670-e16bdd7711da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "adda0a49-95f6-4bda-a2b7-ed9c816de79d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d954f106-a49f-43d4-9b55-4e40b7ed68da",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef6b7448-f553-489d-9d78-075b96435ecc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6083fb1-92b2-4053-bd09-4545b512b9c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5812d89c-0700-4850-a574-9420a0aae143",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e27dd18-1cff-4864-9ecc-15f3b876399d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25fbd174-4b45-4a37-aab8-57006b85ccf4",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f516187d-2103-42a8-a0d6-4fbf7d9d43f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc1744b3-d281-4d5b-81cd-3950df9dafdb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "accbb2b3-74a2-4dcf-ae5e-9fce5b876652",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b678228e-65aa-4455-be37-c8afa48c8da9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc85dd55-dbe6-4258-8bf8-0994e8a2aec2",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c456a390-8968-4ef7-b55e-b8fb3d09551f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81293a60-0a6a-4b2c-ae87-aaef0564247e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6694e82c-7355-4e49-9bdd-9b77b618da21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc4933ab-c398-427c-af1c-dcd9e3a60de4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b47b75f-0899-4101-9584-c7e70dd27b3c",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ede2935-2bb8-4336-979c-a4b43b4b02e4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0add6a99-a8c9-44d8-b250-ffe5f7e8e19f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "615eb0b1-cbe1-47cf-839c-a108f727cd3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edf86a25-5b07-4834-a21c-59e9a83ae743"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b92c5e1-0986-4cde-808d-1a4748add45e",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f88591b7-ebb1-48e1-8d34-1bf3423a378f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5255aba9-6970-43af-a96c-585cf7d8d995"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "867bc0be-9338-4fff-9e62-bc55865dfa9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10a3bd1a-47de-4bae-9b7f-8c5f7f44b1a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef4997dd-d0bb-451a-8f4f-bd016ae57aaf",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc2f89cb-5e67-4d21-8d50-5835e90754b9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "22991cae-db51-4da4-831d-ebb8ed7ffb55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37e5cdf4-ffaa-477a-b3cc-300e4db10da4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27c95ed9-cdae-440f-a682-e688133ad0f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb44cc6b-99b4-497f-8dcd-16d6ef3e8412",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ae58f6f-640d-4d9a-b949-2a88dc686f66",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bc1cdf42-2904-414b-836b-99295f4db438"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e4b9609-1c2f-4a0b-a779-c3dcfd9d4ee7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25e40cc0-a879-457a-a59d-dbed1c6c6f83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b657570-1c19-47bf-8299-f049f251f5ba",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7720101-373c-4fb5-b359-9552b7c5e127",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7154345b-7735-417d-a39a-eabe19d21bcb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb9d1b44-4524-4d5e-82d0-5289773d96d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd185746-61dc-460a-9b02-42cbf07d3566"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42f7b4c4-9fb6-443e-b1d2-5dd70dab9363",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c63e8bc1-805f-47aa-bc71-f61085a06868",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc926470-abab-42c6-b7e0-c557a674de23"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1a1ecc7-9285-4a7a-a05f-e8de4dc4752e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4981e067-4e41-49a8-8920-8de8415c3d43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "743eec79-9633-4316-839f-c7afd9e90638",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77e33d38-b8c6-42f5-abe9-e2449db32652",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c241fcd-54c7-4ba1-9f12-813c6211df77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12140769-1932-40fb-85df-81e5455f1866",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58146be3-4aa4-47ed-924c-f8665e50b8dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "143c6d92-8819-4d31-a714-8ff494747ea6",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fa88373-4b0c-4c59-b6dd-ad44a8d54b68",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8787a533-4670-4316-973b-39f556b873b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b147d68-f4b2-40c9-9274-9de757c8f2cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c77a00b0-9a1b-42b1-bd51-6e437a4c7f9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42567713-7dfc-4e87-8539-2e7fa31074af",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dee9569e-915d-4237-abe7-cd954d8ea413",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ec474215-d1d5-40ef-99c1-cc9f0cb4fb47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59990bfd-6e5a-44ac-b2ca-a651051df091",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60a2b9cd-5436-4884-a4d3-207ff9b8d722"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a2e200d-fa6d-467a-85af-8317a5dc9ff6",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62daaa57-d777-4a68-93d2-e35a76daf163",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d1d59e9c-4ca3-47df-8e79-23be1e81a8a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8717414f-bf7e-4dc4-a6da-85ba799cfdd4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "496a191e-7e35-4cc2-9f5e-dd912b994c48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc5a2743-459d-4d6c-890e-ff095d3f5e14",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14885cda-8e28-455e-8c3e-b058d0683ebc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6f40227d-c4f6-4b57-9aec-63f5d2684537"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad0a9d77-393f-4fa2-9891-8d97402dfaed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f94e027-aed6-4d07-ab92-252cd11a08da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4ebd81a-ee31-46d6-bbc2-df1b55bc85af",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f16d4b0-9d6e-40f6-951d-5120e99f2c83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a0228d3-b9c8-4ac5-92c8-e41d93b55a2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27a685f8-b387-49d8-947c-63f52ed72fa3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e6d2fd6-c9cd-4410-838b-f3137c2dd6f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e91e6cf-f484-4b29-98eb-c333e9a56abe",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fba3fe40-ca33-4bcc-86f2-e03a0afcf09f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b655d51-b4d6-42b1-b9bb-6d49bfcf28cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9561d91-b2b6-4cfd-9696-410bef06c7f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "530b674d-9e8c-4264-b057-661f46d6b79b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f4ecbb9-7370-4cc9-9228-fdc3f0b310da",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d17bb486-c486-4513-b903-d0c74bda43af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a881b0d1-4a64-42e9-a7e7-f29d76970984"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "725c56c2-663f-4fca-a7eb-1162446035be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fa629d6-154a-4fb8-b93d-04aecaa5160d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d368442a-632d-4be8-8351-ff42db05a810",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9dc726e-7e12-4178-87bf-1fab01a0841a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48d93766-3e35-4287-b72f-4e2707d8d7e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1aa819e7-c427-4479-8ccb-faa624a6839d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97733440-05c7-49d7-aa63-4022a33d72ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "959dbbf7-fcee-44f0-980f-9944e7118c86",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32e16a60-6e6d-47f2-942e-f12ebc7e7673",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "023f3ade-45cd-48f9-85ef-d5e1ca274ca3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba8074cf-f328-4b4b-bf3b-69fee8e31421",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97694789-6f60-4286-90d8-10ec3be7fdc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43e29bf8-8df4-437e-8d27-565e57aa9db6",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7f16390-9a5a-4ca2-9f43-66002d862be6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4722f313-e66d-45fc-8876-bdebf5b221a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff69aace-a4da-46d6-846c-418b06c7525d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b1c2cb4-09cc-4602-9aac-8b0a0a48a939"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10337b57-0844-4158-a9e2-151349524157",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6dcfa57-92f3-4959-8524-63b9b4be0176",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "645144c4-ea5a-45ea-90ed-63455b49bf87"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebfd0fd9-2411-4686-abd5-79033c816ffb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04aa0881-b3ea-479b-984a-68a3871e3191"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d1b8113-d20f-4bd3-9d6f-1885a94d4b18",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36d81937-9f7a-42b6-941e-6750f34874c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "330b9ddb-f018-40a9-91bb-4951f395860c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fd53408-5c14-4efa-aac1-f34e830ddaea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01aecc74-f77f-4c2a-82a3-5a40f0a31d22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c634aa9d-4f31-42dd-8cd4-78f8776f412d",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5626acf7-3243-40b6-be4b-91d001e40e30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd391a4e-b150-47b3-bb9f-89c259050d11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fde535d-becb-4598-85be-b965ba016867",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97e79658-1922-498d-9b17-6088e266987b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f76ddbf-e50c-4a46-b5b1-45048181de79",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ceb3bf6-c626-4ef5-9b3c-43ff8a42bbe3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc7a50b4-68f1-4935-92c3-c24a787deba5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25fe44e2-ad71-4568-8dd9-c4532a2a81bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9984861a-7a7b-4869-87bb-8d4690fefc4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f28c183d-8ca3-4a76-b611-315e4c20a422",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97601b66-d107-4ee3-8354-212e3332e9bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42a49ab7-8a41-4673-b90e-04f296c25fdb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8504ea5-e85f-4f02-b182-6fea5b5c0109",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85b8bcd0-1275-4447-86c3-96c0f08d6890"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed21b6a7-e2fb-4da0-a050-841ded5c3da7",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f43e6148-4aaa-4627-af8f-f46cae6c48d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "416591f8-e4d9-4629-8dbb-4226ab53ad88"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "888ab693-b0f3-4213-bfae-3017e0d3aca1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6722c4f1-fd08-474e-89dd-5d7567f7a006"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c067f32a-e09e-46b7-bc94-3c232bdaf1ef",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d738830-1c45-4a72-9e19-3ef67f9d5e9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9eb445c-05fb-4ebe-8487-97a6e4279f39"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "720d22de-61e6-4c34-b5bd-8b6bddf7cc96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20828507-9fde-4551-9300-61745f026259"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09bcb3dc-cea4-4bcb-af21-3537a1c85fef",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bc5a66f-f584-47ff-97f1-8d1965ba5675",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec62793a-6ede-4b59-a829-3379ab247455"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5727d21e-f5c2-4a51-9c05-7f813427fb9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d45346da-55d8-4d3b-a123-eba70c12f7a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed77fd54-6980-4237-b265-c19799fe9e8f",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1933d8ae-fb88-48be-9889-b81635474a17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3dde5db-b6bd-4fda-b61e-d5913614aa2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d978912-8329-4df1-b278-c567b48c3ec9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5cd1bf18-6625-4393-b786-24476cab7b2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9ee2d10-f985-48cb-bfcf-426342eb23b8",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f497407c-8b2e-4c83-a944-e76bc716784d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42e5512b-acef-45f1-a655-a13aa2914ebd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b326b449-1281-47f6-92b1-151b9b11a40f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e60aa84-78e6-4e40-977f-08eed92387c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37246652-fe40-4b70-9322-5bd871be3e76",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "994f2544-c48f-440e-ba52-23aee7b36cd0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfebcd20-f706-4d72-bf4c-6f7591c829df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f3579d7-0853-46bf-b5d1-d93a617d1ab5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2d200d5-8a2f-4bcc-8ec7-84584c0cd67b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73898664-214d-422f-b61a-c2919ee99082",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "686cd852-4836-4a9f-b600-016c27fa4e0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99e8af77-a7cc-4d28-a579-8ffce3542bd6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5912d3ab-8ac7-468d-8464-0867f1556624",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50d2675a-c2ed-4f0a-bd78-0416e06d5fda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "058d6350-ba66-4198-ae98-bbbf50668bdb",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c58716ea-0393-46e4-a391-c3c164a86c1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f73e102a-41c0-4807-a7ed-0dceda884aaf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2da79ed9-d649-40be-bdac-b801c549025b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8802d26-cba4-40f1-81af-072115cc2571"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d77589d-be01-46e9-81a8-b29fb16f068a",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d186382-6d7e-4760-8f3f-5e671c89ba8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61ab013f-6cdb-4b1a-9ddb-3def3beb51e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91b8e2a8-1f0c-4ac7-9601-6f9276347ce9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "264d1630-5b83-4118-b9d6-a0c97b522e7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cc75bd6-b53e-45d1-94b0-2aa25b2836ff",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98c6e927-60b2-4b07-b5b7-ee45f4ad181a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf843eae-52d1-43fd-972d-3684824ff63e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92aee911-1b2e-4678-8824-ea660980c33d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38cec9b3-443e-45b5-83c9-4d426f136d71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecbe64ab-f572-4a71-a100-879993747443",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "290bbbc6-b2d6-42fa-9c08-626f2e58e536",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64767321-6a93-4ffa-8b6b-05aad6726bbe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "acab38a9-8785-4201-a51e-2147a239ab2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23e5efd3-c2b7-4900-b6f2-b2428eeebeab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0c3d0bd-a405-4e66-a32c-f816a0058ee5",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe4fa808-0a17-4245-83e1-f1fed57f445a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b314f670-631b-4e4d-8347-5159542d04ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "898d498d-a22f-4b31-b4cb-5a891379d10a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea083101-20bd-4866-925f-8a1646c24ebb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cca4c79a-ed67-41bc-9e60-7b4b2d4b3a3a",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d982df0-bd93-40de-aa9f-a8a057d64703",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e6eb191-bb1f-4b90-9793-0cf3f70d5f08"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fea77f7f-7914-46a3-b92b-48d73b4124c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79089698-8db7-4158-be91-bbb127dc56c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6ccf015-0b18-4fcc-a097-a17826ab4941",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b138849-16b8-4472-ad81-61a22c1f0978",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c237cd6-96e1-4cc6-bd32-55ad4d90ae49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00ad7513-17aa-4b8f-899d-5263011ec143",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3be54685-3d9a-48c6-8117-5d83e2ae46d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cc5017c-90e7-4b46-bb5c-2aecb5c5a599",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ed8a841-0a41-4d3f-bbd8-02047017dce8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92029266-0a64-449e-9f27-09c2118039e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4a0a05a-8e68-4b27-b34f-18f83b1949e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7099950b-49b6-4173-9678-2ea690010f96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45fc568f-380b-415c-b509-dfb39300753d",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44e53991-270c-4223-a96c-6aa140529ea3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3b6a571-4af8-45a7-a57a-c39efc1dcb78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "213fe8f4-dab0-4ddf-aa92-4d00c7e73213",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f8ae912-5394-4679-b06c-9f314bd23233"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab33e082-a487-4aed-b536-cac574d0b066",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39d6f692-5aa8-4a63-8eb8-2f81af6d5e4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "267a0582-5c98-46b4-aa42-f73a0e20950e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13eb6af4-b21f-434b-9c7a-4dcfd3607d49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "727108f2-68aa-4e27-b478-dd4f3c6fe726"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4a58617-d930-4812-aedd-7421b4521e67",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "791c2fea-3363-4572-988c-f0a40d932dd1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4db94b22-7dea-405d-ba3c-f3f6ad86fea5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0bdf894-ab43-4dee-ab34-4d9ce5a4fc62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22be1574-2d29-49e8-aace-e5570f0d71e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca6bc08b-d5fa-4934-962f-ea3923f421f7",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2186840f-1956-406b-af75-4531b5a773d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a324be7a-a513-4138-9062-5d0407ffd476"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "557b760d-15f8-4460-945b-ec0ec0fef2ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64322944-df50-41f9-8377-25d4ca12b492"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4291e476-ba36-49fa-b03f-bce0afb723b9",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a61583f5-4ab7-4b62-87c4-54d4eeec38f6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dcb78a23-46a3-4eee-a994-43179125f0cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1d5f484-4f56-4d58-aff2-400086399b46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35ba26c7-ad86-4672-b3e6-47107f671e95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7913e946-1adc-43cd-8343-2a2b262ea19a",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c42122f9-7bb3-4c8d-9add-c788be3a1872",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "068d2cfe-4b68-4fe0-8e1e-a27804b76870"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54c15f3d-6816-4c4d-af0d-83f0b7619742",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "823ea624-c2bc-4cb6-90f9-900c97f9184f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfa0fc55-7c3a-4bc1-8a1c-bf3f9baa3801",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76a5d14b-a2c7-44ab-a8fc-31b8390c9814",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "657d9663-de97-4adc-a1b5-e45c06ae4ded"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "186846ef-86dc-4fe6-bc5d-1651a35dcb51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5a53b2e-d472-484a-938d-dc6e09cb40a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d61a8aa-825d-4fa1-aad1-ad2bee94f427",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e443a243-a0c1-4420-9645-25069d1b3601",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c8ef5b64-8579-45f3-86d4-f504063fa8e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73a98d2d-1426-4d8a-8ab8-1abbce11a262",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03fe4ffe-0713-45f0-aaf3-9e514a07b2f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9582eec6-8935-4a0c-a463-67bd8fe1f686",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "540657ca-f66b-4de8-a863-11c66d71d713",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b5484d12-fe9e-471d-ae3e-5340a3395587"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c98ff364-22ec-476d-8b80-83d41882a763",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0fa1c9cc-21ff-468f-9cdc-a45353bfa043"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6be71bdc-b2b8-4c8d-9943-f1a79acfcb3f",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dda50d3b-6b0e-431d-93d7-a023e4ed5f2d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "61011bb9-39a2-4169-8489-ec4257854026"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d19c5eee-df83-4a8c-a77c-2421b9d311f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7660e5c-7e47-46e3-bfde-f3dfdbd94a50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68d85e2f-0e93-4b8b-8b1e-983d63a569c7",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5d83b2e-0a3b-4e09-8736-c87ffdd352cc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8f14c64e-bc4b-4744-95a8-15cbfd86cf9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1556335-eddd-47fe-b0c3-940a196ff463",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "382a8b98-5c28-4af0-b45d-e1b0d60d5b5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e07dbf9d-613b-446e-b8d6-da7c1f4220d4",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50a0c968-ccfe-4c60-a5f1-a5e4866e76c7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1cf3d93d-ef37-4ffa-8048-27c6195b7a80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2be5f24-690b-4ae1-8910-f9a8d8065653",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d4f852c-0e21-4a7a-85a0-d0e184b53ddc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f66f411-3623-4376-9149-21b4c722bfff",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e29e9ac7-be27-4e28-9f5b-f3ec5e8010f2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "85de94c3-9fde-47d7-8d24-bfae6745018d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a2f70e0-4f30-4b2b-be1a-d7f4e7bd8671",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57c6905b-911b-427e-a567-655a033c348a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72f2a760-3997-4358-91b0-058c8fad9643",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e11cb89d-2dd8-4d86-a7b4-ae098b003e14",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7c39915a-de99-4e8e-97d2-66f84532c6b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fa1f37b-ea49-4d0e-822c-92b74cdd2778",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a1a9744-d3f2-4ac6-ba7e-cbbc7a7cf585"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb54ab90-fe04-4a14-963e-525b47b0dd71",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84134e61-9bf4-4ed5-adec-481d4c73c8cd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a43d7369-9130-4d9a-bd73-350d5a1bfa83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1de4dae4-11ee-4123-8322-026fcd933ef6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f0f7d39-b4f6-4b40-9ae5-33c060d46a9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9a873b1-7787-4369-9019-32957a7bdf60",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19e9a51e-05e3-40aa-b000-ec0ed47f1f40",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ea74a4d2-2b2a-4738-b29e-537542fc6498"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1399f85-748b-4a87-9be2-48036b74f82f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61943a36-9263-4054-93e4-156af4f8c1d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c0e1247-18af-49f1-98dc-24968b308345",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a91b878-72ed-45fa-9e95-7dc8be460b2a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9cf6eadd-8330-40a7-ae4a-f42b0023cc8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e363425-d279-4cc2-90ed-9b1db8ee1fcb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b49d75b-7818-486f-8495-4d0d47c937a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "914ce454-f6fe-40b3-9daa-6942cae6ebe2",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3617d95f-514c-479d-8378-8335bcff8c77",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "76b4612c-3239-47ed-bfe8-6c645acd8a63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2d73de9-3294-44ad-844e-e51e132079dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee93cdd8-5e6a-415d-9646-9076e5a7330d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb72e34c-4c43-4b3c-9d69-db7d92c2a662",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c11acb7e-1fb7-4b20-994a-6beb7b450809",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "06365e99-8e1c-497c-9df3-43a65f900e49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a58a42e9-3076-43db-aad2-a080be904625",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b98e9196-9d7a-4dcf-97e9-6adf1a9399ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e14cbc52-83c6-4bea-8f8c-169a86876558",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4eaa2733-344b-47b0-b1e9-99ab103e471c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a9799e2f-0790-46a7-a431-0822afa2eb10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1735e043-3260-482c-a567-eb775c1e06b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fdf5ed6a-a0f6-4c6c-a289-32d9db1e9b01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72bd4069-41c2-483f-9201-79fc970ab370",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64151af9-9545-4085-a9ef-57835bfca89d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "59af13c7-6fc9-4460-a4ef-06fe507b4c7e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13e7183d-74a2-4f3f-8fb9-1e8c94c324ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "296cc8c3-2dd0-4daf-bee2-b27cf481168f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03151bf7-4227-4aa7-b376-7731a15e040d",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20f59a4c-947d-4dfd-bd07-7abbef2ec719",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "45e31944-be99-418d-8277-5f9e2e0371a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6c39afe-9214-4094-8ec4-79eaadcb259d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23e207b7-dd94-4d6d-b732-5d8dc88497e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd25a4a2-f99f-4780-8a96-51c690b4a932",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c81ccff1-ba8c-427f-a6a6-5bc631082109",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0ed08690-4164-414d-a80e-3a12fb402ef6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dee9985-20b9-4fc1-82d9-e742970c009b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e789de67-8746-49ed-b96b-86b908bacaa5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5374f351-cde4-4426-ac0c-4398ce61f3dd",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb567aea-999e-445a-b361-648a735c74c1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "18938f04-ab80-4dc7-8fde-7f2ae6a90000"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d7f4787-1de6-4a35-9a8d-38fb3f702bc2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d4babca-f18f-4f2b-8d3e-2c1a4c55186c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c03f664e-24cb-4eb1-8d92-b041cd2c75ef",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29d84cd8-abc0-4822-82e4-67baad7f03c6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6734c0fd-3a4f-449d-8798-2de4f4fca1bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c103ddcd-f18e-4e8f-96b2-19e39425de39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64a7108c-db18-489c-8e47-7db5ef66bb47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "547344e7-9dbc-42f7-aff1-e93c7d4af5f8",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b45cdd5a-45eb-407b-b498-8ba25009c563",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b5c5a35-e412-4927-ac35-522f2782eba5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b22eaef-5632-45b1-8f5c-3b249abe1455",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02bbac31-1bbc-42a8-a043-e9b505645183"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51c48181-5181-4924-9a62-fd68fb138aab",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "162571e4-ea3c-4bc0-8dc7-488c7f44dd58",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ae1dd680-9fba-4d09-a27b-d131c3f8238a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "878d7a03-6faa-4d13-ab77-e77b81f6544b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ec6aaa5-b59e-4e8c-98ae-1ed70274b025"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6abd0577-2516-4c67-aee2-5e46eccaece3",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c445606-d851-43ee-8e84-786cfc03d2ab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "51b3a05f-9402-4cb6-b080-c5cfc26c199a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67623307-a8d9-4d0c-964d-c110c047cd46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ba4b294-23fa-4351-a161-4ec954da62f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02cfa2bc-c90a-4325-996c-ec8c740c93d3",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f5484cc-e12b-40ed-b710-8de9bf6472cd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6db1f9b9-e677-48ba-b692-7fb1e1005ede"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6e89b78-4fb3-48be-89b5-d9be205fe919",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fc126ef-67e6-414a-8799-59bec2d28c24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72237f67-3b3d-4b83-8acf-ebe3a5c2054c",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a3ec3b0-683e-4d6f-8c6c-572f197e40e6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "616521e3-5613-4ec9-856b-5bea80da7013"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b3d8ffe-8240-45c5-97be-9afa450191ff",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e02f3bf-ef08-4230-ac23-69a7923b16b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e022436-fba3-4d61-a38c-2388d41865cf",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d393e5be-6556-4bee-b517-56def29c261c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8430a7c4-b88b-492f-8b92-915ec91f20e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8f2c1b1-e0c7-40db-9336-61e439e89eaf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9bca910-eb9c-4e7c-8ae9-ab92e04c240d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba9fcc37-67f8-4b07-af8a-3d70065e4eba",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3459266e-432b-4c32-8d14-1c0ed877d0ab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7ebbdca1-3f9e-469a-9b06-879e62617b95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70cf004b-b38b-4d52-9191-48df9c4833c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b75ca10-bada-459b-a4e8-a5ed47c64352"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7660953f-7af6-4a4e-8dfb-34b2df585bd3",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e303d9df-64aa-47a9-9f35-2ac000a2ee00",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2650112e-78b7-4e39-96f0-5abb1ecbec05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa04d99d-8dc4-4369-bc3d-7beb7d34c4b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfe215e5-75b9-41d2-85d2-354843423236"
                        }
                      }
                    ]
                  },
                  {
                    "id": "549bc74a-0eab-45bf-9ff3-665b4c077a59",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bb1f95d-91b1-4e59-a460-f5e2a6bfde11",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3e436e4d-1b62-47c1-8265-b9a4d3236659"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff78f9c5-ded2-475e-bea3-d8b9ac353ca1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2350ebcd-4113-4c18-8daf-031c49b99f50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f9dd71d-b703-4a92-b9c8-d9f090fa52f8",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74601cdf-aa7e-4e33-afac-1e358b323d0d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "df159ed8-d5a7-4d11-bbbc-1000e0256965"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d275ea22-416a-493e-a924-158aeb139f16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8edd7fc-d270-4123-bd1b-9c45eeb16fb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4a9292e-eee4-4f33-8de0-d8658bbb2269",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cda51052-75ef-4c8b-9e19-4eb0422650c6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "03119bd4-477a-4f78-b783-050541988ab5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f869d18-e3dd-49a4-b0fa-92f39309b8e6",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1b9f7ab-c7f6-4059-8081-932120c7f218"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdc3295c-c7f2-4a70-a1d6-2aa2d8b740a5",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af1e29e1-e260-43af-b176-cf1d17751734",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a7e001b7-decb-49a9-a0dd-6be361892678"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec8133aa-5b51-4161-a8f3-0bcc2de9a4cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1040147c-694c-423f-bce5-63ff6a248cf1"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "80cfe4b3-280d-440d-8613-7b2673d3e32d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "42cec1b1-c6db-47e7-af12-07e3118bd975"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8a89c461-de0c-4066-83fe-de94030692de",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5e9fcc1a-5407-4331-9482-a3b394454e2d"
                    }
                  }
                ]
              },
              {
                "id": "0525b98d-7c1d-4e84-8f3e-1e0dd6cd09f1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "dd0f5a84-9fd9-45ed-ac47-de9897d5463f",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1862fa6f-4afd-4366-8914-d2d2d66ad690",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "37195588-02a3-4caf-a2d7-1299ec5c56c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b2a53b3-9b7f-406e-8a4e-e8a8827dde90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "aa264a4a-fedb-4153-92eb-23a6e59cf708"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b6a1225d-3379-45c5-8faf-101d9c902899",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "47837690-1d20-4891-8ebd-3530be59f1e2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8ebb12e3-0b1d-4ab3-9edb-13539e35525e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3e84dc0f-46ff-4fed-9ec3-5acba31d3bb3"
                    }
                  }
                ]
              },
              {
                "id": "eaa7cfb1-0b06-4738-af06-1082ec0cc782",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "c1191d15-9439-42fe-ad95-96d615d3978b",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9aeae54-517e-44b1-a26e-971e934623f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "d4acc000-b4fd-4d90-bd44-00411589aaab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60848d9c-e774-4758-a712-eab1f4ac8199",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4c9721d-569a-4f0d-bbf9-7b46195b26cb"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "243da8c5-407e-4302-8447-e9cdb7cc31b6",
            "name": "Positive Testing",
            "item": [
              {
                "id": "8bbfb15d-dd70-4cfd-8676-03d9e4bbae82",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5f15290a-0e6e-4f7f-a3ea-0cceeee52ea1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "3348131b-9711-4101-9017-5b2631ce73f1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1eb0d1ac-d870-4bee-8d9d-81d1ddcadcf4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d4c4c49c-eed1-41bf-b753-f288c200d294"
                    }
                  }
                ]
              },
              {
                "id": "e217b1e7-3d8c-45f0-b0bc-b3747eec4559",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2ae788e0-11a9-432b-be00-42c584be4de1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "05738fd3-8aff-4f32-bd55-ac50904c1165"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3e560aee-6668-428f-a1ec-bf3f01f18072",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a84ab585-e694-4c06-a485-bdc970b1935d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8e8e29e6-609f-49ad-b70a-80954750e832",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "053d9399-f80c-4b93-8d7a-adb76c8ba70f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "45689977-246b-48fb-96b7-d32e2b4f6409",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ebd6eef3-36da-49a2-b558-18331f3cc638"
            }
          }
        ]
      },
      {
        "id": "356cf249-7c20-4ffb-849d-da63c3621416",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "3fac6839-b4f5-47c0-9954-1f2fd4dafe6e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "32f6ec56-b0da-4210-950b-a05e960927e5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "200c9147-fd76-470b-bb28-7a86842feebc",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5278bb6b-0153-4bb3-acd3-8a714a6d4853",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "5948b921-42c8-4f9f-bfd0-637a8cbf14fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b34de37f-e539-4869-ad8f-430cf22a9922",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e34ff1dc-6a0e-4316-ac54-8fdfb34106bb"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a8d339af-0490-4a0a-b0db-d230c6e423df",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c3647f50-db50-4357-9750-7cab6edca2a5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ad3c09ba-11ef-463b-8b79-97e0f01b6679",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b106e51f-4a83-4b4a-bb85-342979430b7b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e07e957d-cd3e-4d89-bbfd-3d2da16dd371",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "04894962-520b-476a-813b-a7e24276c4bd"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "163b8647-fa7f-40a9-b575-53778335cba9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "df34b635-47e0-4d91-8927-0b58ee449d9e"
            }
          }
        ]
      },
      {
        "id": "6e6885a7-76d5-4f2e-9500-c6ce2e6fbd44",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "8017483f-1e91-41d4-9799-b3ed66f574e1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "998cea64-2185-4b07-a898-64882b65302e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1626aa24-4bc2-4725-ab97-58a845739150",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ace4e2d-e3b4-4364-a900-b058ab491ae4",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0f163580-1211-4be0-9043-7873b09f94fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae0e98e0-7bbe-41ad-92ff-20e74595a2d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1a931b4d-39ef-4d3a-9034-9907d3573483"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6f0aa3d2-6159-4a6f-86ab-74d149247dc9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7d958689-cedc-4ec1-9856-343fc4999c0f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "95442e57-4e79-4e28-bea6-682d9a153c4b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0ac7775f-0582-47a3-9b0d-07b1b04da156"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a6349480-5f01-411d-b796-e178381aa7e7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "bec55ef7-1c43-4651-8bd9-f482e6dfaabc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "50d46e39-4173-4649-aa3d-9992043263bb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "30b5f878-d926-4011-9dca-7da4fe009e12"
            }
          }
        ]
      },
      {
        "id": "1424ed17-a1bd-472b-ab9b-e627b873508b",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "990c91fe-8ed7-481e-9bbe-ba8052ae10f5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1f8f2cc3-bd4e-4b4c-84f2-16cf8de31785",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4a25d556-af4e-4393-a63e-6046d45c4ef8",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82e832d3-e6aa-4f1f-8133-551ac63618d2",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f5ea6a7c-ab44-4b44-bab3-ff6cfe674f1b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e6d8d3c-538d-4b9e-afa7-b001db316704",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "acbdec4a-b5aa-4074-89b6-af8d20b303e2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2d2460a5-5ccc-40ff-bd73-87e78228cc31",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "11013592-8e3a-4c80-a84c-288f4cdf0bfe"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0cc084d9-e2ba-49bb-83f5-609df1e38e03",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c941602e-e6ce-4a0e-9957-a9054aad5791"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e5b7ecb3-19f5-447a-bd85-cf9d0e21073a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "056cf0f0-b965-4d79-bd27-840f73936cda"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8ac6e1ae-463e-4fed-af0d-263703de2bd0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "64fef104-31e3-4dfd-8a95-354e47da9235"
            }
          }
        ]
      },
      {
        "id": "7a6f98e3-359a-4cee-8ef2-fe79c563caa3",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fd011878-3a4f-4543-9276-5b1fa6b0e37d",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "52dc0641-08e3-40d0-b16d-c2bab36be1b3",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "55a395c0-a6b9-408a-ad62-3b60b598b69a",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "911db7e5-0707-444e-9643-3ed5f416fc30",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "809c76cf-57fd-42bb-9167-dbc4ff177045",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 263
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 59.567460317460316,
      "responseMin": 20,
      "responseMax": 243,
      "responseSd": 21.67525957576972,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1717115842149,
      "completed": 1717115865383
    },
    "executions": [
      {
        "id": "787262d7-7c0f-41ff-b4df-a50a00192d50",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "b1dc59b0-e53c-401f-b181-84f644739973",
          "httpRequestId": "867500e0-5a2b-45f6-a1f5-fcae9b4b5f02"
        },
        "item": {
          "id": "787262d7-7c0f-41ff-b4df-a50a00192d50",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "52ffe076-cd3b-4cf3-9c7e-b7ec3eef1491",
          "status": "OK",
          "code": 200,
          "responseTime": 110,
          "responseSize": 0
        }
      },
      {
        "id": "688fb8ec-250d-4c31-b03f-99d8e55daeea",
        "cursor": {
          "ref": "fb1d8b5e-cca9-4654-8e33-cf84fd24021c",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "a48783c7-5076-4012-998e-5d5bc89a4730"
        },
        "item": {
          "id": "688fb8ec-250d-4c31-b03f-99d8e55daeea",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "7c21e21f-7868-45c7-a640-9bb3be7a2ce1",
          "status": "OK",
          "code": 200,
          "responseTime": 20,
          "responseSize": 0
        }
      },
      {
        "id": "4d671b04-4929-4ba9-b472-00c63435e2a6",
        "cursor": {
          "ref": "3c40c1b7-117e-4e59-84af-f41bb6d75300",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "deb0da1c-95f3-452d-a64d-abee4525eafd"
        },
        "item": {
          "id": "4d671b04-4929-4ba9-b472-00c63435e2a6",
          "name": "did_json"
        },
        "response": {
          "id": "e14dbf39-62bf-4f82-b55b-168080192d2b",
          "status": "OK",
          "code": 200,
          "responseTime": 225,
          "responseSize": 1329
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d4ee0b8-a549-49e2-9c03-6f5500f7f50c",
        "cursor": {
          "ref": "318619b1-ed5b-40d0-a954-ae8bf00e35b8",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "84207c4c-09bb-43a5-8a49-2d038e7721ef"
        },
        "item": {
          "id": "7d4ee0b8-a549-49e2-9c03-6f5500f7f50c",
          "name": "did:invalid"
        },
        "response": {
          "id": "801fb490-a3c7-4982-909b-b1b984c1fe78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d4ee0b8-a549-49e2-9c03-6f5500f7f50c",
        "cursor": {
          "ref": "318619b1-ed5b-40d0-a954-ae8bf00e35b8",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "84207c4c-09bb-43a5-8a49-2d038e7721ef"
        },
        "item": {
          "id": "7d4ee0b8-a549-49e2-9c03-6f5500f7f50c",
          "name": "did:invalid"
        },
        "response": {
          "id": "801fb490-a3c7-4982-909b-b1b984c1fe78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e6491fd-a61c-4cc4-8674-1608b74566e6",
        "cursor": {
          "ref": "7e82e04e-5dbc-4a4a-8040-7b1e0fd0b3dc",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "405d463e-3098-4cae-a2e8-0c323feed68d"
        },
        "item": {
          "id": "8e6491fd-a61c-4cc4-8674-1608b74566e6",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "db968e0c-5dd4-4f2a-b223-b562c5286bfd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 170,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 500",
              "stack": "AssertionError: expected response to have status code 404 but got 500\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6ff1564-0ca6-4514-8175-a02e1e8a1f5e",
        "cursor": {
          "ref": "10694b13-7874-45a8-9ec1-47f55cf2e5bf",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "4eff6dff-0697-49bd-b810-5a91cc742868"
        },
        "item": {
          "id": "a6ff1564-0ca6-4514-8175-a02e1e8a1f5e",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "c0a0f337-a546-4114-ab34-e2159e43a204",
          "status": "Not Found",
          "code": 404,
          "responseTime": 56,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b94eb808-312c-4d4e-9d53-71a27bfc3cac",
        "cursor": {
          "ref": "c7f52512-3013-4619-a714-0633ff4f24cf",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "c5b80462-ff0d-44eb-b349-c56f851d2688"
        },
        "item": {
          "id": "b94eb808-312c-4d4e-9d53-71a27bfc3cac",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "11b16623-0d55-44e8-bf94-d9d21af5360a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1577278b-9f37-4e39-806b-cb37a9a23055",
        "cursor": {
          "ref": "c703ce4a-6012-406b-a9dd-1f728280773b",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "3fd175b0-3845-42cb-955e-5b641fe78352"
        },
        "item": {
          "id": "1577278b-9f37-4e39-806b-cb37a9a23055",
          "name": "identifiers"
        },
        "response": {
          "id": "246d01dd-5b1b-45ef-bf87-08375b31593d",
          "status": "OK",
          "code": 200,
          "responseTime": 148,
          "responseSize": 1345
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8e85a4e-6d62-4f79-9595-4d4a95290f00",
        "cursor": {
          "ref": "bed89a06-7764-4fb7-9cb3-38d0965c7266",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "e16af5da-a72f-48f3-8637-e30c1ad47538"
        },
        "item": {
          "id": "b8e85a4e-6d62-4f79-9595-4d4a95290f00",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "e78b562c-e667-441a-9975-dbb8dc909317",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf5ea529-83df-4bbe-986a-dda0cf6aaa06",
        "cursor": {
          "ref": "dab701e5-f804-4097-8b0a-5ed21e4414f8",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "7ca52665-b7b2-4a35-8c51-dee646b2a5f0"
        },
        "item": {
          "id": "bf5ea529-83df-4bbe-986a-dda0cf6aaa06",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "7032bb0e-74ac-400f-a8c9-d0df18fc5d18",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1dbcfca1-d9f2-4117-ba7c-22c9e22ebf5c",
        "cursor": {
          "ref": "3a0688bd-a170-49f7-8797-c81c6eae1c85",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "26f081e4-e632-47e4-a726-3cd11c017b07"
        },
        "item": {
          "id": "1dbcfca1-d9f2-4117-ba7c-22c9e22ebf5c",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "98e42b83-a53c-4ec6-b08d-12c68861e483",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f08a66d0-b8b6-4c06-a710-81112fc49e1c",
        "cursor": {
          "ref": "0e9cddd7-ccf7-465e-9eab-f17e8834ec63",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "5499d808-7ee0-4f22-b711-c1cc347a339b"
        },
        "item": {
          "id": "f08a66d0-b8b6-4c06-a710-81112fc49e1c",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "b370b876-c6be-4bee-95b6-8053c1e8afb6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eaa3beb5-f7aa-49d4-8e99-3279ac3fd0e8",
        "cursor": {
          "ref": "3cc6a142-18e9-411c-9e65-4c769565dbf5",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "6dab6915-4b48-47cd-9956-370294ea1bd9"
        },
        "item": {
          "id": "eaa3beb5-f7aa-49d4-8e99-3279ac3fd0e8",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "bf7257b8-582e-43cf-87ca-5500ecf361b5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28fdb24d-4021-40ce-95d7-acce432f035a",
        "cursor": {
          "ref": "6e6ca386-d45c-4051-90c0-5f2e6dd7a697",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "5bc545a3-b216-44fc-9d9d-fb6e2f2d1527"
        },
        "item": {
          "id": "28fdb24d-4021-40ce-95d7-acce432f035a",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "d1c7bdfc-3836-4f7b-aeb2-8a843b404401",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cd102d7-4f24-487e-bcd2-afaea6a91eca",
        "cursor": {
          "ref": "d1e8f156-9ec5-4014-bb22-78c09f49e3c3",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "9101b1e2-31b3-4b76-8804-563849d88ccd"
        },
        "item": {
          "id": "9cd102d7-4f24-487e-bcd2-afaea6a91eca",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "557c1106-cd1f-471e-9dff-35d2a2e861d8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac25a2ab-0488-417b-bd9e-e9f0ce6099bb",
        "cursor": {
          "ref": "4d493920-3f20-481f-b5ce-389e5884f64d",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "0454a0cc-dcd9-4d5b-8455-b2f3d63ea741"
        },
        "item": {
          "id": "ac25a2ab-0488-417b-bd9e-e9f0ce6099bb",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "f7f876ea-579f-4916-a0b5-cbb73b55c35d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26938bc2-6495-4cf3-8dcf-e335708b7968",
        "cursor": {
          "ref": "fcba3d13-9dd3-4a98-b42c-25e2818c5f1a",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "e9cafb68-d706-4268-8b87-cc016251ae2d"
        },
        "item": {
          "id": "26938bc2-6495-4cf3-8dcf-e335708b7968",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "2eeed62a-60a2-4838-8fc0-1f87679bce14",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dbcdc0b-c05e-45fe-881f-60a51a254de7",
        "cursor": {
          "ref": "082e5d04-4d59-4c0c-9c9a-c69096e2a8d7",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "b97f48b4-948b-4270-a895-b72595217efc"
        },
        "item": {
          "id": "4dbcdc0b-c05e-45fe-881f-60a51a254de7",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "2c560adb-0f66-4403-ba9b-0c2df34d9269",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bef7299-33c1-4fbf-8811-9cb9d183ceb8",
        "cursor": {
          "ref": "35cabcea-0ad8-4be1-bd0f-03649d28b647",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "85e5cd4e-cec6-42ca-bb4a-4a63ae7a95b4"
        },
        "item": {
          "id": "1bef7299-33c1-4fbf-8811-9cb9d183ceb8",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "ee701a19-9774-4237-98e3-1ba323d6713d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66466859-4005-4327-b1ff-6e69ef4946ac",
        "cursor": {
          "ref": "e6142cc0-bff0-4366-b761-e8cf283f05b1",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "dc65edd9-4517-42b0-83f2-6cfda513fdfb"
        },
        "item": {
          "id": "66466859-4005-4327-b1ff-6e69ef4946ac",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "d62d1993-6879-4c4c-8ea1-c409c38ea74e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06c39ba0-fdc3-4d8e-9206-471fd997798b",
        "cursor": {
          "ref": "346e3494-a2fe-44cf-a514-1ffe2b47de84",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "8644ac0d-ea70-4c9d-a6d5-00e350fbdd8c"
        },
        "item": {
          "id": "06c39ba0-fdc3-4d8e-9206-471fd997798b",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "688c11a3-de56-4883-b1d0-928fa8693d8f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2466881d-54ca-4dde-b6f8-1cd9a7dcabe8",
        "cursor": {
          "ref": "f33bbdcc-ea6a-4440-96b9-cd820d6a5d0a",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "b9de1da3-5900-4425-91e9-929894d2f98b"
        },
        "item": {
          "id": "2466881d-54ca-4dde-b6f8-1cd9a7dcabe8",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "d1604e99-a147-4c5d-9f92-13dc4825989d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f4feeff-563c-4b30-943e-0d3d47eccbb1",
        "cursor": {
          "ref": "94104928-7ef7-44b0-8340-fa029cb4d180",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "86674d01-005c-4552-9860-c406d879a487"
        },
        "item": {
          "id": "9f4feeff-563c-4b30-943e-0d3d47eccbb1",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "e103f6d7-87d0-4e5b-ae93-5c786f8d1b9e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e99ea45e-a92a-4268-91d6-1bd8e0306b30",
        "cursor": {
          "ref": "8c6afb6e-871a-4377-9bb1-51f907f373fa",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "e64cc243-5f2a-4417-b1dd-907755b483db"
        },
        "item": {
          "id": "e99ea45e-a92a-4268-91d6-1bd8e0306b30",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "b55fae5f-1968-4e32-a5be-078d5628103e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "957f1e3f-68bf-4016-95c1-57820f7b4d2a",
        "cursor": {
          "ref": "43c12d16-4e1a-4a03-a79e-0f52471e23c5",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "17904ca3-f1ad-48a1-befe-fc6944855066"
        },
        "item": {
          "id": "957f1e3f-68bf-4016-95c1-57820f7b4d2a",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "040da188-8cff-4752-821b-78c6ae94a284",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebe341e1-351d-4088-a51d-a641a49f30ad",
        "cursor": {
          "ref": "264ef8ad-8245-4557-9716-4406936f1059",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "f200804f-daec-4793-9b32-6948e5eedd9e"
        },
        "item": {
          "id": "ebe341e1-351d-4088-a51d-a641a49f30ad",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "d2273b2b-67ce-468b-90bc-f1a7f663a910",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "278ead35-7bd1-44b4-9607-c37ba9c424d5",
        "cursor": {
          "ref": "b457a45c-2d03-4f34-b196-8bfbadbd7a05",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "a08060b1-a422-4cca-a90b-99f1b671bc83"
        },
        "item": {
          "id": "278ead35-7bd1-44b4-9607-c37ba9c424d5",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "a5b89137-a1ed-46ef-b8bf-56b445b1b129",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a49f247e-4538-4a0c-969b-837d0f0c3dca",
        "cursor": {
          "ref": "29253825-f8f8-4c61-886b-e9876d7a4dbf",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "248a997b-fd63-4a96-9ed0-b3e4c79e2bdc"
        },
        "item": {
          "id": "a49f247e-4538-4a0c-969b-837d0f0c3dca",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "c8b97b70-bd1e-44be-be60-1f65e2ed2fce",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6984da35-4c8b-4a51-9c44-b61dfad13af1",
        "cursor": {
          "ref": "6f4a1158-2ab4-46aa-bbb1-3d9aae262699",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "4cbf7286-455c-4e2d-8ee3-a89c4b670264"
        },
        "item": {
          "id": "6984da35-4c8b-4a51-9c44-b61dfad13af1",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "ef8ecd2d-262d-4040-be43-ff9141f76551",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f02f3e8-16e0-4223-a4e1-b66245723ef2",
        "cursor": {
          "ref": "5bded1f8-987c-48e7-bafd-1bf2d024e360",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "0e425dfa-e65c-4778-b86c-7b8fa8e0f6a7"
        },
        "item": {
          "id": "2f02f3e8-16e0-4223-a4e1-b66245723ef2",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "0b9bc4a6-fd8f-4d46-9e64-5b816945ed69",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "333a07ec-9036-477e-8fdb-ae27060165d0",
        "cursor": {
          "ref": "2b720b3f-157c-4a4d-803f-76a5c6684820",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "f31f1787-ab88-4c11-b70f-584afd8d947e"
        },
        "item": {
          "id": "333a07ec-9036-477e-8fdb-ae27060165d0",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "faf399b8-fb00-430e-aed9-2386dce3e497",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6162aef5-70ce-4083-9489-55b2ef81f4ce",
        "cursor": {
          "ref": "1dd8e620-8644-464d-ad01-0aead3d268a4",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "200e524e-b97e-49cd-915e-d492cc70975d"
        },
        "item": {
          "id": "6162aef5-70ce-4083-9489-55b2ef81f4ce",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "5a3e7e21-eb09-4826-9516-542559ad5de5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e13a9e01-7ab8-4b65-84e1-86c4882915a1",
        "cursor": {
          "ref": "dea9e16d-c5aa-4e61-a092-373419a51866",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "db8e0c15-b2b1-45d1-ab6b-79b547beb6a6"
        },
        "item": {
          "id": "e13a9e01-7ab8-4b65-84e1-86c4882915a1",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "250566c5-05ba-4c2c-9d60-12d13c39e1e1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0d80e44-92d0-41ad-969a-7dbf2178106e",
        "cursor": {
          "ref": "6e83c667-aa53-46c2-afa8-41f50c7e6994",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "2b343406-5278-467d-a60b-e6ba74b4d43c"
        },
        "item": {
          "id": "d0d80e44-92d0-41ad-969a-7dbf2178106e",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "9e67d015-6e49-4e5e-9752-178db969e4eb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ee32e4d-e485-406b-b7b9-de9535c81699",
        "cursor": {
          "ref": "ecccb017-e514-4c28-a05f-4a31526368f7",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "9198509c-4f33-4a08-903f-d66eb02f0c1d"
        },
        "item": {
          "id": "2ee32e4d-e485-406b-b7b9-de9535c81699",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "85fc0cb1-128c-45bd-a3a8-1e7058b94383",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a1eb322-a985-4c93-bd8c-8bd9bf7b0ef2",
        "cursor": {
          "ref": "1a78d88d-05f6-4a6f-a238-90831442bd09",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "4221cfe6-e905-449c-b385-f79d99ab1be4"
        },
        "item": {
          "id": "1a1eb322-a985-4c93-bd8c-8bd9bf7b0ef2",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "64e5d121-1bc2-47bc-a8bd-22f38b7f0dc6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98f45fe6-2104-4ddf-ad47-d83cab06fb09",
        "cursor": {
          "ref": "685256ce-ce86-477d-99b6-ae3a797f648e",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "8cf4b6c0-0d3d-4bcd-ad53-a1d38604495b"
        },
        "item": {
          "id": "98f45fe6-2104-4ddf-ad47-d83cab06fb09",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "15699db9-99ec-406c-9249-a5070972153f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f740348f-06ef-4a6a-ad31-52dcfc3031de",
        "cursor": {
          "ref": "6a980b6b-7e40-40e2-8b64-bdb175695a2a",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "968ceaf9-6141-4928-b0fe-9fba33e9ccfb"
        },
        "item": {
          "id": "f740348f-06ef-4a6a-ad31-52dcfc3031de",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "97c7c559-2b1b-4937-b04a-a2e8253f0a0a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e72ed99-a0bf-4319-a903-158971ad8a0f",
        "cursor": {
          "ref": "5ceabc74-73bc-4dbe-9089-8390b7406742",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "5a710d99-cb15-4bc7-afa3-201d95494fce"
        },
        "item": {
          "id": "3e72ed99-a0bf-4319-a903-158971ad8a0f",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "75653dc6-fa3c-4d9a-a592-9e44737ccbe3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cef8b78e-6f29-410d-a608-bdfef6fa9703",
        "cursor": {
          "ref": "3d708ef1-b901-49e1-938b-3e0160cac10c",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "d7e81725-74fb-469c-a08a-77b5b2773a4f"
        },
        "item": {
          "id": "cef8b78e-6f29-410d-a608-bdfef6fa9703",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "652d0452-67b2-4e6a-aa68-04c790de07a4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c581a73f-c135-46b4-946e-f1bae47302a1",
        "cursor": {
          "ref": "052c388c-cb30-4639-81e0-fe36947db19b",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "c179bc27-f269-4b33-9a52-edb125745bca"
        },
        "item": {
          "id": "c581a73f-c135-46b4-946e-f1bae47302a1",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "f73ca84f-8d67-447f-b5cf-5be97a19d876",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a8f1df0-df3f-4cd0-91a4-b27be075b4f5",
        "cursor": {
          "ref": "1d88f5cc-fd25-4017-8f30-f5ae45a4449f",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "18ea8aff-9319-4dca-ad9f-041f04cae2a4"
        },
        "item": {
          "id": "8a8f1df0-df3f-4cd0-91a4-b27be075b4f5",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "86d7b470-01db-4af3-ad97-ad0182bce3af",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25b7dfe0-4e1d-4c9e-bdad-eaf0bd6c4fb4",
        "cursor": {
          "ref": "8e838c92-1b7b-4e8b-9f42-179a1611c403",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "1b49e5b9-427b-4742-9038-646602a3a117"
        },
        "item": {
          "id": "25b7dfe0-4e1d-4c9e-bdad-eaf0bd6c4fb4",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "31c92ba2-d053-4b20-9f2c-15fc317338fb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7f2858e-c70b-47d8-9aaf-aa732608877a",
        "cursor": {
          "ref": "a63f892c-5793-4ee3-b626-24570755eeac",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "d827c364-b114-4a1e-9a14-b386fcaa7fdc"
        },
        "item": {
          "id": "c7f2858e-c70b-47d8-9aaf-aa732608877a",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "ea8e434d-d1e0-4c15-945f-fdb349b6d81c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 500",
              "stack": "AssertionError: expected response to have status code 422 but got 500\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b37cbdf8-159a-4683-9049-e20f93df485d",
        "cursor": {
          "ref": "bc1555cb-5c55-43be-a5fa-df157db978fe",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "3cba2a1d-238d-4993-8efd-be6163100ba8"
        },
        "item": {
          "id": "b37cbdf8-159a-4683-9049-e20f93df485d",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "7bdd2c35-a221-463c-9913-09a8b835b7d3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "230229b1-f18b-40cc-ac81-aa6fc3fb07f1",
        "cursor": {
          "ref": "c41ec6d8-8890-4086-9e82-971a836d3da0",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "697541d4-346f-4dc7-b6f6-606b12272c0c"
        },
        "item": {
          "id": "230229b1-f18b-40cc-ac81-aa6fc3fb07f1",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "c922a449-c913-4fd0-8638-bfc07d564fab",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88bb6931-41d3-4dda-bc54-150cc541c9a4",
        "cursor": {
          "ref": "e67e8853-a035-4317-8947-8a9197bc3dd7",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "0cf0847e-54aa-4624-9c8f-a568a9cc63bb"
        },
        "item": {
          "id": "88bb6931-41d3-4dda-bc54-150cc541c9a4",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "7693489a-2cc3-481b-8b3b-f5891ba2b655",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d319dee-80e6-4dcf-baa0-2c57b04daa6c",
        "cursor": {
          "ref": "7e86f182-4f04-4a28-9834-e91e4cc8e2cc",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "56c06c15-da80-49e6-9212-e2c3e3a61645"
        },
        "item": {
          "id": "9d319dee-80e6-4dcf-baa0-2c57b04daa6c",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "bbb59dc4-48a4-4949-9717-ab944c128d0c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb9a6503-14be-4d49-92b9-36b63efa2c47",
        "cursor": {
          "ref": "1be4e875-b3d3-4801-94af-30537d4e2d41",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "a6527302-8a68-448b-89a6-9db625faac1d"
        },
        "item": {
          "id": "cb9a6503-14be-4d49-92b9-36b63efa2c47",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "ec76738b-c6df-4b4f-a828-d5964ce70024",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "795ffbd3-108d-4a31-a4dc-5a318680e94b",
        "cursor": {
          "ref": "ba758c94-64d5-47ec-89a8-85892e61e674",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "e572eea8-ddc6-4fb5-bded-82878735a4a2"
        },
        "item": {
          "id": "795ffbd3-108d-4a31-a4dc-5a318680e94b",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "430a4fef-cb05-44ef-a09a-27fea00ddafb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 58,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d348194e-c933-48f9-9c7f-aee84cb13a91",
        "cursor": {
          "ref": "4bac987b-2b84-4910-86c5-8c77ec58110e",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "c75114f2-2b79-481b-b89a-564a806bf945"
        },
        "item": {
          "id": "d348194e-c933-48f9-9c7f-aee84cb13a91",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "409fc192-0271-462d-8d72-2deb056ccf39",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 500",
              "stack": "AssertionError: expected response to have status code 422 but got 500\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7c9d8bb-da8c-4174-b069-ab2bb143aac2",
        "cursor": {
          "ref": "08d7f25b-7651-4bae-b213-57a612914621",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "4310cc50-4a62-430d-9b94-b03b6abd52ca"
        },
        "item": {
          "id": "a7c9d8bb-da8c-4174-b069-ab2bb143aac2",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "35b0df0b-ec75-4cf4-ae88-004ee72b692d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb4ad49b-fb20-4bbd-8d50-2f7b154c0efb",
        "cursor": {
          "ref": "b34779f7-36b2-4805-a368-a2ee85419745",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "95ad536e-3c3a-4e17-ac48-afb368f0c86c"
        },
        "item": {
          "id": "eb4ad49b-fb20-4bbd-8d50-2f7b154c0efb",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "e82cd4bd-545e-45a0-ae5e-2053319822fa",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "215e1e02-4320-466e-9e1e-a8660ddffe9f",
        "cursor": {
          "ref": "bfce5d3c-a526-4349-8369-753fe89c45ac",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "3405ee30-e5cd-40c7-9220-17ed52b606a5"
        },
        "item": {
          "id": "215e1e02-4320-466e-9e1e-a8660ddffe9f",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "5d417992-8bad-4681-a387-059309cda84c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38b561a1-aec0-43bf-9df2-f92d1a61ab7b",
        "cursor": {
          "ref": "35ab61aa-f642-4dc8-aaa4-da79ba7b956b",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "e294c4f7-937b-4e91-a3f0-c4d5a931a826"
        },
        "item": {
          "id": "38b561a1-aec0-43bf-9df2-f92d1a61ab7b",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "41ff71d8-0034-4f88-a0f2-0d9bc5a9750f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9375aadf-bca7-4ac8-aa55-0c714c64b8aa",
        "cursor": {
          "ref": "7c5ec54c-a82d-4f9b-a95b-e76358a83812",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "9de039ad-beac-45c4-a98b-fcce081626a8"
        },
        "item": {
          "id": "9375aadf-bca7-4ac8-aa55-0c714c64b8aa",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "0aa571bb-e88e-4bdb-a98c-f99b66910d03",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93453114-5d34-414f-88d4-2f6ca2865a74",
        "cursor": {
          "ref": "7d38cd16-0b9d-4b33-86ab-1bbc544f0d01",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "8a4383a1-dcca-41af-9812-ed39c7e895df"
        },
        "item": {
          "id": "93453114-5d34-414f-88d4-2f6ca2865a74",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "ae491350-001b-468a-b11e-e0c506825fe8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "199ac855-bc5a-47e9-9e3f-bae1e73bcdb3",
        "cursor": {
          "ref": "8983012f-acfe-44a8-8eac-5ca3c135c16c",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "baac1f40-0d6a-4f15-b551-1e32a230d3f7"
        },
        "item": {
          "id": "199ac855-bc5a-47e9-9e3f-bae1e73bcdb3",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "afb6a5f2-b768-4bb3-ad1e-ce26c26b87a9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6923fd62-0138-42c3-b5f1-44938e133e2e",
        "cursor": {
          "ref": "218b9fd8-efd9-446c-863a-a22f653de3c4",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "9c2e6dbc-58ac-4021-aa92-609ce5bf027d"
        },
        "item": {
          "id": "6923fd62-0138-42c3-b5f1-44938e133e2e",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "ae50d936-dfd4-4191-9488-efdd703a117d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3a61c47-9be9-42e3-a38a-806675610379",
        "cursor": {
          "ref": "08dfa5bf-57f3-4cba-9b27-2586398b026b",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "db57d229-af00-4cf0-aae5-b1f972add485"
        },
        "item": {
          "id": "e3a61c47-9be9-42e3-a38a-806675610379",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "ff359ad5-2fb9-4bb6-9bbf-2c62406ba39c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "390c7d78-63f4-41be-8bb5-77f7cdd904dd",
        "cursor": {
          "ref": "9214d191-4bd5-4c6a-8656-ac2cc3dea7f1",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "4f542919-1aab-43f2-a036-aeb709f1a6e1"
        },
        "item": {
          "id": "390c7d78-63f4-41be-8bb5-77f7cdd904dd",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "7dd64894-cbeb-410d-8db2-342560550596",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edfc2163-aee7-4b6b-abab-c7821ab3d262",
        "cursor": {
          "ref": "4646a72e-4c66-423b-9941-aca5035e8a66",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "1f86b159-7f21-4922-8258-5d4deed5d6bb"
        },
        "item": {
          "id": "edfc2163-aee7-4b6b-abab-c7821ab3d262",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "d17c0ed3-227c-4455-a795-5c9a73c4f9a0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "523a775c-5066-4ac6-b2db-e7b7043cc14d",
        "cursor": {
          "ref": "b0077296-fa8f-46d1-ac6b-bec155ef509b",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "82b06b0e-85c2-46cc-a7c1-55bc0ef0ab77"
        },
        "item": {
          "id": "523a775c-5066-4ac6-b2db-e7b7043cc14d",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "d75f8990-bbf0-4ebc-97b1-f8e8daf63c05",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0137e045-cf0e-430c-8dad-7e023828cf9c",
        "cursor": {
          "ref": "ff70fbbb-817f-491d-b343-51b29c176464",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "8d8c1709-a051-4721-bcbe-c59c6841200e"
        },
        "item": {
          "id": "0137e045-cf0e-430c-8dad-7e023828cf9c",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "16103cba-bc5e-4bd4-b988-1512786bc90c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8361b7a4-0ef4-4268-a40a-ac606e2b532d",
        "cursor": {
          "ref": "bff45e82-f528-44f2-9cdd-ee6df076bb42",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "0355d067-84c7-4598-98c1-d101b3ef3d71"
        },
        "item": {
          "id": "8361b7a4-0ef4-4268-a40a-ac606e2b532d",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "4158e8e4-5d6e-43e0-8de2-fddc27a923cd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01ccdd23-0c1c-4293-8779-ddbff591f7c1",
        "cursor": {
          "ref": "a61ae8ec-5bd7-4a9b-a434-cb4f57c6c937",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "a4f11271-e903-4204-8397-a89ff7a10557"
        },
        "item": {
          "id": "01ccdd23-0c1c-4293-8779-ddbff591f7c1",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "722c8a3b-bc36-4fe4-ad0c-d2884c529784",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54b16701-43b3-4d04-83e9-f5cff56321a9",
        "cursor": {
          "ref": "c833e645-dd23-4fe9-b308-3c86a35f0aa9",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "2ca31f8c-5710-4266-aa50-c1b52a52412e"
        },
        "item": {
          "id": "54b16701-43b3-4d04-83e9-f5cff56321a9",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "aa2d1453-7f1d-4897-9312-6befdf32644a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea2742cc-05a1-408a-b01d-12154965211d",
        "cursor": {
          "ref": "fe94968d-91bf-4c82-9a46-90b49dd63843",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "245aaeae-1e6e-477c-84bf-54dad8df04af"
        },
        "item": {
          "id": "ea2742cc-05a1-408a-b01d-12154965211d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "422acf3d-b8d6-4db2-9ad3-b06d42335b7f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02ca8eb7-480d-41d3-8615-e4cc9c2d95ac",
        "cursor": {
          "ref": "a1abe186-0388-44c9-beed-285059023c7c",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "88b9593b-a2f8-4aab-86cf-c56d0ce96ba0"
        },
        "item": {
          "id": "02ca8eb7-480d-41d3-8615-e4cc9c2d95ac",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "66957587-57b1-4dfb-b4c7-a17db4908a78",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a36500be-9ca1-4eff-85e0-30eed1db4991",
        "cursor": {
          "ref": "04d996f2-3714-488c-be6d-578ee623ef7f",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "3faa733f-1288-43f8-b882-f20f6e16315a"
        },
        "item": {
          "id": "a36500be-9ca1-4eff-85e0-30eed1db4991",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "45c080f0-6daa-46c5-8e52-7f04eb471129",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4861011-6ee0-4f64-95d8-b43b48507a49",
        "cursor": {
          "ref": "a49740c9-1bc4-4abb-ac42-4ce058b18d27",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "5d6710c5-67e3-4f02-89b6-a9a47c76107c"
        },
        "item": {
          "id": "a4861011-6ee0-4f64-95d8-b43b48507a49",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "2c2e96d5-31ff-4445-9405-65968e5e06d9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bdff798-5265-4671-b386-267b5b35319d",
        "cursor": {
          "ref": "6f3c8fe5-4007-49ba-af7c-aedc0f9343e3",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "7ab4ec56-b385-4f47-87c8-f17a509603a9"
        },
        "item": {
          "id": "0bdff798-5265-4671-b386-267b5b35319d",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "5c9421d3-eb43-41c5-a775-2cab25eb1d64",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1a8f916-c3ea-415a-a313-ba13efe87bd4",
        "cursor": {
          "ref": "9a883628-eb42-44fa-8ee1-9a2adbccba99",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "69a3ccf9-842e-403c-9815-db94963cb783"
        },
        "item": {
          "id": "c1a8f916-c3ea-415a-a313-ba13efe87bd4",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "87588a52-4367-48f0-a3c5-f3a2a4226841",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 58,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d0ef5d9-19ed-478b-9e34-5ae2a24e766b",
        "cursor": {
          "ref": "ffa2576b-e6ba-4100-a33a-63e583c9690d",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "dfe0d907-90bf-48d9-b717-4416f2b63f08"
        },
        "item": {
          "id": "6d0ef5d9-19ed-478b-9e34-5ae2a24e766b",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "11568277-8a0d-4e6c-8b1b-3d5eca91f41a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "217e93c7-058f-4a6d-a0da-50b1af7d4a05",
        "cursor": {
          "ref": "79559b08-a9f8-487f-9dd7-60e705582ba0",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "afb31072-454f-472b-87aa-308f0e423e05"
        },
        "item": {
          "id": "217e93c7-058f-4a6d-a0da-50b1af7d4a05",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "84720468-a549-4821-b0cc-9b05cae43fea",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc102353-ee42-475b-a7b9-efad7045b48e",
        "cursor": {
          "ref": "9a333da6-98f8-4c87-a63d-160083db077f",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "7e23b99f-c211-4ba7-bbc9-06394a7c733f"
        },
        "item": {
          "id": "cc102353-ee42-475b-a7b9-efad7045b48e",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "f60d5261-7d95-4e44-9e65-564c90c3bab3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00beb89c-20ee-4271-b2c3-36e517b07dcc",
        "cursor": {
          "ref": "12e8ce67-eb7c-4261-b7c4-8d6b3d588c66",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "6f0d5ca0-11cf-4d77-9c69-51015da2948c"
        },
        "item": {
          "id": "00beb89c-20ee-4271-b2c3-36e517b07dcc",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "e5e628d2-9be6-488f-bfcc-2e8d88f7dc66",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf1a547f-057c-4366-82a3-92d0a8be417f",
        "cursor": {
          "ref": "a30708a1-4ab8-40c7-b790-9b36ef0b0bd7",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "f2991687-6ba6-4555-9246-cb1bdd469d3f"
        },
        "item": {
          "id": "bf1a547f-057c-4366-82a3-92d0a8be417f",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "edbd539c-57ba-4f2b-aa4e-97e226d48070",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6dd947b-1786-45c2-8173-7febcba22535",
        "cursor": {
          "ref": "5e3a20dd-a95a-466f-9b45-8c016d6b933d",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "7cbf5be7-fedc-4c1b-abbc-97ce6ac44b33"
        },
        "item": {
          "id": "a6dd947b-1786-45c2-8173-7febcba22535",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "82d43fb9-ff9f-4e57-8ea5-054027afc4ea",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6f82348-8bfa-494e-8611-5a26eea1af4e",
        "cursor": {
          "ref": "3cb80fa5-d645-4fb2-a9c6-a71bc4229ace",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "52814bbd-6222-403b-a776-5867f79bf428"
        },
        "item": {
          "id": "d6f82348-8bfa-494e-8611-5a26eea1af4e",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "f5c306b9-1ead-4299-85a6-478ca9198ac2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8df7f837-9965-4999-b624-81a60580ae81",
        "cursor": {
          "ref": "4f52eb3e-0536-4cc8-8d69-d8813aa5f480",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "eb5763cd-2bea-42ea-8bda-66b8c625eb54"
        },
        "item": {
          "id": "8df7f837-9965-4999-b624-81a60580ae81",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "7ed02f2f-e9dd-4457-9bad-f35d4aaf95e6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f718d05-f013-4111-b1ad-2b0ba86060d0",
        "cursor": {
          "ref": "d93df89a-9631-4947-bfcb-fafc2acfd164",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "6c8eb684-f3d3-4256-b2bb-5ff4e084d79d"
        },
        "item": {
          "id": "8f718d05-f013-4111-b1ad-2b0ba86060d0",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "e4c164fb-ae02-4f26-a68e-b2cd7b3aec5e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91764283-2a69-405e-a8ee-8637d1c80cda",
        "cursor": {
          "ref": "7f585da5-1ca3-4704-ba05-b0a7c0599dda",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "a6efde32-c71a-4bf9-9f53-e44ddcd4b999"
        },
        "item": {
          "id": "91764283-2a69-405e-a8ee-8637d1c80cda",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "c477d27d-3108-4d68-bc7d-2ed39334fc87",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a25d7ed-e965-4f44-95c9-72dd3b262dc9",
        "cursor": {
          "ref": "bf689962-b09c-402c-bbca-629f84169cca",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "182d6e72-7ebd-463f-9191-60b85eb1166d"
        },
        "item": {
          "id": "2a25d7ed-e965-4f44-95c9-72dd3b262dc9",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "7c692491-c6d7-4d2e-8480-0df4745e7972",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff4dfbe6-3fd7-4794-ae27-ee602ceb3b5c",
        "cursor": {
          "ref": "4678d317-4d13-4cc7-8b8e-aea8b1a65cc8",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "b058e20b-17df-4ba6-94c6-d3eeed32f234"
        },
        "item": {
          "id": "ff4dfbe6-3fd7-4794-ae27-ee602ceb3b5c",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "65043bf8-99af-4070-8c91-31bd4430f7d2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59eafd8c-3283-4742-bf96-b5ddbd9edc8e",
        "cursor": {
          "ref": "6101f963-9899-4c36-89d4-ca26e0fa27ce",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "79c8c0f8-37fd-42e0-a85a-0b0b19529325"
        },
        "item": {
          "id": "59eafd8c-3283-4742-bf96-b5ddbd9edc8e",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "333cc092-731e-4a0a-aed8-e34e3a63dd26",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fd9134f-27c3-4587-b3da-42050bcb58b1",
        "cursor": {
          "ref": "8199cabf-3e74-41e6-8356-70e4f37bcb65",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "0d6ae346-1979-418b-9d5d-eec1f6b48b1a"
        },
        "item": {
          "id": "5fd9134f-27c3-4587-b3da-42050bcb58b1",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "957912e7-5052-4d92-ac1c-50700deff02a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7d3037b-2dae-4bde-8dff-c90292568efa",
        "cursor": {
          "ref": "9b9c4a98-ccd9-498a-a991-9c1c12ebd10b",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "b08eb0ff-f361-42c3-9fba-8232a1289c01"
        },
        "item": {
          "id": "e7d3037b-2dae-4bde-8dff-c90292568efa",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "a4585b2a-7d7d-4c8e-bd8c-bb8c586b9466",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d548ba56-8bfa-4ae0-b192-5a2dbbef2dd1",
        "cursor": {
          "ref": "7711b006-b782-48b5-b5c0-5fecb5a6ee14",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "6a084e6a-263f-4ccd-95f9-e6a54bd2eb47"
        },
        "item": {
          "id": "d548ba56-8bfa-4ae0-b192-5a2dbbef2dd1",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "4daa6143-e1a2-426b-ae78-8125c915a561",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60cc2278-5448-4815-aced-4b905ff29091",
        "cursor": {
          "ref": "ec1fc899-d7ec-4a87-919b-9c6ac4663dc9",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "937d26a4-61dc-4879-a6d8-3f8ace1fed69"
        },
        "item": {
          "id": "60cc2278-5448-4815-aced-4b905ff29091",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "13a54eac-08e6-42f4-b438-89ac1a816b83",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a7e9d60-a1af-4dc3-98e9-f8b1c0e6c82f",
        "cursor": {
          "ref": "30d31440-5402-4cea-a949-9f1d33c3fadb",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "108c8d0c-333d-4c17-90e1-d0b9a26763d5"
        },
        "item": {
          "id": "1a7e9d60-a1af-4dc3-98e9-f8b1c0e6c82f",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "29ffe0e7-bd80-4b93-a1af-8c8161140de2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57d31176-0b15-4dc2-98c1-5dafb116613c",
        "cursor": {
          "ref": "4f426b45-d057-4979-bc6e-749a20027ac8",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "dd5332ad-c489-4e18-a049-f4b5a24078a7"
        },
        "item": {
          "id": "57d31176-0b15-4dc2-98c1-5dafb116613c",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "fd6961c5-75b4-4978-bc0a-168e67c07084",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63ad88a8-e43e-4209-83df-169642cb829e",
        "cursor": {
          "ref": "8c4c3fbf-5968-42cb-9edb-ee66a10c116d",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "6ebaa3e8-f46d-43c5-be9b-df0e5ba7991d"
        },
        "item": {
          "id": "63ad88a8-e43e-4209-83df-169642cb829e",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "4660bac2-779a-4270-846c-22ce72ad1842",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d9dbfed-f552-45f8-a0a8-1bfeb3920258",
        "cursor": {
          "ref": "c198d8a3-9fc2-4192-8413-6f2c6f3bfe81",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "f2fac5b0-88a2-4782-bd79-0b365c7a5a61"
        },
        "item": {
          "id": "2d9dbfed-f552-45f8-a0a8-1bfeb3920258",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "0bc63a52-d4b5-45db-bd0c-f52b7bd6832b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f95f1ac5-a9ad-4e18-94cc-bb4410fe0641",
        "cursor": {
          "ref": "8d5569a7-b65f-494b-ae5b-f7e5d761cbd2",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "b22b1b5c-5ab7-40fa-85f0-353cad9b6853"
        },
        "item": {
          "id": "f95f1ac5-a9ad-4e18-94cc-bb4410fe0641",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "49cfcf89-1b46-4123-92c4-ae4e3b15af75",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f452f7a-73c2-4939-b2fb-dcaf9167a742",
        "cursor": {
          "ref": "afe35253-25f7-4b19-a752-f453bd809636",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "bf6e5576-754c-40cc-8cf9-8971e1fc6198"
        },
        "item": {
          "id": "4f452f7a-73c2-4939-b2fb-dcaf9167a742",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "13672001-3549-48bc-b0f9-63fd67c249d0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "104d52ce-4011-46cf-ac25-dc755359d384",
        "cursor": {
          "ref": "59459b9c-df51-47f9-b42b-de47ea94b628",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "034c598c-8a44-49ae-a888-c066b9439bf7"
        },
        "item": {
          "id": "104d52ce-4011-46cf-ac25-dc755359d384",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "64e842e3-74d8-44f2-a12b-56bf9a71e895",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09c91376-39d6-4491-930e-9e6e70cddb0b",
        "cursor": {
          "ref": "193f6d45-9b54-4f37-a89c-19f3133c6238",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "abe7fd53-ebf9-4f83-8eab-052091b5e02b"
        },
        "item": {
          "id": "09c91376-39d6-4491-930e-9e6e70cddb0b",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "f014d9e4-308a-4415-bbdc-65ff62b254f5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bebc9a6-d582-4a4e-a3b0-93e8714754ff",
        "cursor": {
          "ref": "e87b003f-a532-4c6a-8286-0589710d3806",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "5f2377b6-749f-47c4-90ac-f9ecd096e096"
        },
        "item": {
          "id": "0bebc9a6-d582-4a4e-a3b0-93e8714754ff",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "4816ad4d-b869-48b5-9c24-227456cc1abf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c7c06d5-c1fd-40fb-88d9-50d7b66abdad",
        "cursor": {
          "ref": "021497c6-b49b-46b5-91f0-fad3d000c8a3",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "dcadf63d-d2aa-4271-bc10-42f8cf1b1df7"
        },
        "item": {
          "id": "2c7c06d5-c1fd-40fb-88d9-50d7b66abdad",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "cce350a5-a35a-4b4a-9082-79fa939aab5b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f378726-8b8b-4432-a412-1374b2820ae5",
        "cursor": {
          "ref": "a24e041d-97d5-4e8c-bf07-13d814260470",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "b8e39546-583d-4605-9de4-36d1fb394d22"
        },
        "item": {
          "id": "5f378726-8b8b-4432-a412-1374b2820ae5",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "b72a0479-c1f8-4456-9d07-4a5376bf7ca4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:101)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e70f026b-c1dc-4ad4-9f84-ecde40aedbb9",
        "cursor": {
          "ref": "1462ddb9-b590-4eb5-b122-5e70714fdae5",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "0e452ee3-6911-4ba1-9b3f-84db2cb50601"
        },
        "item": {
          "id": "e70f026b-c1dc-4ad4-9f84-ecde40aedbb9",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "d17815f8-466e-4af8-8eca-301adbbe6278",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "6d570c7a-1917-4810-81d9-b5b2c4422448",
        "cursor": {
          "ref": "20265063-7e54-44be-8518-7867ee86edf1",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "69beedd7-ec30-4846-a81b-92d0590c3106"
        },
        "item": {
          "id": "6d570c7a-1917-4810-81d9-b5b2c4422448",
          "name": "credentials_issue"
        },
        "response": {
          "id": "41cd668c-436c-4ea2-8b5d-5013c9e93fd5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 173,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:103)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:103)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:103)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:103)"
            }
          }
        ]
      },
      {
        "id": "52e8b0e0-1e04-49a3-8e2d-04a139571500",
        "cursor": {
          "ref": "bd6783e6-7da9-4299-83f0-40d3884fd62a",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "30b95519-2f31-487b-99cf-c6be99a4890c"
        },
        "item": {
          "id": "52e8b0e0-1e04-49a3-8e2d-04a139571500",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "58320b9e-fb0c-489f-a650-aa5eaf9db5bf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:104)"
            }
          }
        ]
      },
      {
        "id": "2c862825-6314-4a5b-b4e6-090178debb53",
        "cursor": {
          "ref": "f453d098-c9ea-4bc1-b597-483db567203b",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "4441bad4-3276-4992-9ce5-31a000842cb2"
        },
        "item": {
          "id": "2c862825-6314-4a5b-b4e6-090178debb53",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "a8d5c607-246c-410d-bf9a-625f7f2e0597",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "81cb74e2-348a-4446-a92e-eb7bea9edbf5",
        "cursor": {
          "ref": "4e9e8b99-1380-4ebb-90cf-d3a4146a2ec3",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "9ad5f3dc-797e-4bb5-87dd-d9951476b24a"
        },
        "item": {
          "id": "81cb74e2-348a-4446-a92e-eb7bea9edbf5",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "316f428d-e540-433e-a18f-f985cfcef28d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "e9e36efb-3ded-441f-af4b-e58ea41373ae",
        "cursor": {
          "ref": "efba42eb-5f3a-4866-bf4a-96d8cbbb67c1",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "a6ae3835-d6fc-4b67-aac8-67097f8a5d2a"
        },
        "item": {
          "id": "e9e36efb-3ded-441f-af4b-e58ea41373ae",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "30282a4f-7498-4c70-9109-4a5b95dcdb7b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 58,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "d4d94a61-d8b7-41f3-b76a-5518dab01ede",
        "cursor": {
          "ref": "1a550968-f862-4235-9d31-52798d9aa591",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "545a9c8e-e79e-4de9-833f-60355bbd0471"
        },
        "item": {
          "id": "d4d94a61-d8b7-41f3-b76a-5518dab01ede",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "6b899ac6-925c-4a00-9330-bc8d20934bfe",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          }
        ]
      },
      {
        "id": "6ff32551-931b-4c65-b0f6-bbee49f2d103",
        "cursor": {
          "ref": "20f0e1ad-528d-4bbb-8310-0705fe13c501",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "4384bdce-0a44-4c48-9070-3d1b6bdd2106"
        },
        "item": {
          "id": "6ff32551-931b-4c65-b0f6-bbee49f2d103",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "e4b47777-82ef-412c-8ea7-fbb474115b97",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "923f3c60-87a3-47b5-9e37-fb280a3d15bf",
        "cursor": {
          "ref": "b198ef6d-68c2-4eda-87a0-b3644b9a7c30",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "be721686-bd57-48ea-8cb4-96ba71b9cd38"
        },
        "item": {
          "id": "923f3c60-87a3-47b5-9e37-fb280a3d15bf",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "8f1b3895-5485-4eba-ac09-d92eec83913c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5171f82b-25dc-4401-892a-95accef6bf75",
        "cursor": {
          "ref": "9c18de54-3f61-4a89-97ef-99976c18a71c",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "cfeb8983-4d3f-4588-a774-923f0bc3ab6f"
        },
        "item": {
          "id": "5171f82b-25dc-4401-892a-95accef6bf75",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "b1592cb7-faff-41bc-8a4b-25f758828356",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13b08bee-53cc-472a-a6b5-72db835cd49c",
        "cursor": {
          "ref": "317726f9-e7af-44b1-b749-726c62e31f85",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "0a130a0e-6c91-4237-934c-3197112049f2"
        },
        "item": {
          "id": "13b08bee-53cc-472a-a6b5-72db835cd49c",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "55e5d7f7-8d1c-420e-a1e0-b77633691bdb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f985b38-66d3-4031-b6ad-ca9cfd8f07d1",
        "cursor": {
          "ref": "445bd756-1cf2-4e37-ab90-eebf0ef39ee8",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "d810e247-1644-4b35-833e-3a3c704d4c74"
        },
        "item": {
          "id": "2f985b38-66d3-4031-b6ad-ca9cfd8f07d1",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "228ae965-d032-4588-8a32-1befa981a0e8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 60,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e054f34-d7b9-4502-98ac-7ddc34a69cc8",
        "cursor": {
          "ref": "4f3ce4df-044d-4b13-bfcb-0004efe10be2",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "ce77c563-c3e5-4135-8e5d-f7c97791fab3"
        },
        "item": {
          "id": "5e054f34-d7b9-4502-98ac-7ddc34a69cc8",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "9e4ca196-ba82-4171-a7ad-123ea2d4fb1f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e466ea9-643a-4d48-89e5-b161a15a3eba",
        "cursor": {
          "ref": "5ff1e6ce-98b8-428d-9a78-db86940b33cc",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "64bce802-f5f1-48af-ac4d-fc9e2e822760"
        },
        "item": {
          "id": "3e466ea9-643a-4d48-89e5-b161a15a3eba",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "47285cce-7a6f-4074-a9a5-2ec463543471",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51960b9d-eaf3-43bf-adf1-7beba70282ee",
        "cursor": {
          "ref": "ed4f4e92-e07c-44ff-8db6-05821d09242b",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "89485d4e-1516-4734-b72f-94a28b41da37"
        },
        "item": {
          "id": "51960b9d-eaf3-43bf-adf1-7beba70282ee",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "c3cc6e26-8cfa-4295-b2ff-5f75d406bca4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce301253-ba45-4f6c-8735-6cc38ea59d49",
        "cursor": {
          "ref": "86c61103-ab70-4f13-a323-9eb16bb25b69",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "6a342d98-f2eb-47cf-bcdb-9f166f462bf3"
        },
        "item": {
          "id": "ce301253-ba45-4f6c-8735-6cc38ea59d49",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "7f8c5688-32df-4c17-8058-145417415687",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd2ca7c0-d561-47a6-8870-c0215a6ea34b",
        "cursor": {
          "ref": "aaac149a-5c67-48e6-aa0d-323df0df8941",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "aa4329d9-ac41-4231-9232-b9a516e5932c"
        },
        "item": {
          "id": "bd2ca7c0-d561-47a6-8870-c0215a6ea34b",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "59f794e1-ff96-4698-b68a-3ae682d71a94",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83ce52c5-454d-4f42-a30b-c9d0ce3bde2c",
        "cursor": {
          "ref": "11b0c426-528a-4ee8-9ed0-c205a6d28e22",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "73502afa-eb4f-4025-99eb-d3bee9b11e10"
        },
        "item": {
          "id": "83ce52c5-454d-4f42-a30b-c9d0ce3bde2c",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "75b62ad8-dc95-467b-a244-140c88fa0631",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "477f0cdd-31cd-47c4-850d-5a998a9535e4",
        "cursor": {
          "ref": "5ec8c0cd-d27e-427d-90db-e006197a58a4",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "b37b4c65-be7b-4683-b3aa-3178a36b6e91"
        },
        "item": {
          "id": "477f0cdd-31cd-47c4-850d-5a998a9535e4",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "290e4f1c-d799-4e60-9145-31402be5e4c3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d501617-fdca-4442-a22f-219bf938946b",
        "cursor": {
          "ref": "8e077587-6344-4a21-805b-0e4df204907a",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "c0f20b04-944f-44b6-a8ba-d01b437bb3f8"
        },
        "item": {
          "id": "5d501617-fdca-4442-a22f-219bf938946b",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "b3bde080-8a93-4390-8c53-9519a0ca6fc6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94e11e9a-05f6-47e1-a3f9-c643e4f52f99",
        "cursor": {
          "ref": "ebd88055-c04d-4141-9590-055b0e7d49fb",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "8e2aebda-a21a-4c0d-81a3-a6b0ea105782"
        },
        "item": {
          "id": "94e11e9a-05f6-47e1-a3f9-c643e4f52f99",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "b4c1f6ac-b14d-4d77-8b9c-47f46969545b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "897b6d3f-3daf-4e4b-8d3c-af840b529f3c",
        "cursor": {
          "ref": "e61d8268-f70a-447a-b92c-9ad0b57c4091",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "d0d79b45-e1d2-4f54-9f11-3b102476eace"
        },
        "item": {
          "id": "897b6d3f-3daf-4e4b-8d3c-af840b529f3c",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "ea9958db-0b9d-430c-ae6c-9f65081f4a0e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d3cee83-177c-46a9-9de7-6e423ab7378f",
        "cursor": {
          "ref": "14e768a7-110b-41c4-80b4-8017d00e8892",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "61ff637c-91ef-4926-b596-1cf3ccfd8cb0"
        },
        "item": {
          "id": "5d3cee83-177c-46a9-9de7-6e423ab7378f",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "ad8205d3-1ab7-4863-8f6f-ad55d326db1d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46b53dfb-e217-4327-87cc-f631b139bb05",
        "cursor": {
          "ref": "87aa4b50-2cff-457f-9da4-c8d643b0d162",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "616bee93-ab40-4a35-9032-3b519cbcf8a2"
        },
        "item": {
          "id": "46b53dfb-e217-4327-87cc-f631b139bb05",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "b1f6ceef-08b8-4827-acca-4c5ab082ddf1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e8e420e-c7a3-4e6e-8005-6b2ef741956d",
        "cursor": {
          "ref": "006e1bf3-f3c2-403d-a045-302a19381866",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "04e84a7d-e9d1-499b-8df9-b3f230e246bc"
        },
        "item": {
          "id": "7e8e420e-c7a3-4e6e-8005-6b2ef741956d",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "a6950ec4-3a56-4d14-91c7-b9d652e44e75",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a12497e9-2f10-491d-b171-4d1b4b2d58e4",
        "cursor": {
          "ref": "2dcca3c8-ab04-43c8-b18c-e176003fbbe6",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "0da131f1-0d9d-4efb-9cc8-d31203dda703"
        },
        "item": {
          "id": "a12497e9-2f10-491d-b171-4d1b4b2d58e4",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "fd6de64f-b1f1-4f32-8e8a-23a6558111fd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b92cdf78-86e6-4d78-aec7-c26b8f82fddf",
        "cursor": {
          "ref": "db27519f-fb84-422a-a4a7-1d3b17efd132",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "809587fe-f724-4640-bc34-d4a01b1127e3"
        },
        "item": {
          "id": "b92cdf78-86e6-4d78-aec7-c26b8f82fddf",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "54c64e98-8c1d-4882-a3ad-a2aaecd2d203",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4212e1b8-3b89-49be-85bc-7f05738eabbb",
        "cursor": {
          "ref": "3d326f4a-45e7-4f17-a563-64028f22f2b7",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "4475acc8-0c07-4a26-892b-2fff7ba35272"
        },
        "item": {
          "id": "4212e1b8-3b89-49be-85bc-7f05738eabbb",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "bfa2c10a-1ab5-4c12-b42f-87dc1ff87e4c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8670ca98-2129-4f11-acb7-ab504678ca40",
        "cursor": {
          "ref": "3f6c39d6-f45d-4fed-bbce-142ca1a4f7af",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "90b33600-d5ba-406e-830f-b367d57d1dd9"
        },
        "item": {
          "id": "8670ca98-2129-4f11-acb7-ab504678ca40",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "81a85f5e-6e5b-4659-9537-0de630f7eb89",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2c1be4b-93d9-40ab-8655-543a34f5d263",
        "cursor": {
          "ref": "b7c352cb-3410-46e1-ab84-26b2d78a4b50",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "aed22581-d59f-488d-ac51-0fd8b77a887f"
        },
        "item": {
          "id": "a2c1be4b-93d9-40ab-8655-543a34f5d263",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "846249a4-f6fd-4564-9a7a-b3338c10a205",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "591db26f-747d-4bbb-9d30-e25e503ac2f9",
        "cursor": {
          "ref": "53328d58-df95-4fb9-9747-a995aa8c1f57",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "ee2d74a8-683a-46c4-943c-7e4512b0ac90"
        },
        "item": {
          "id": "591db26f-747d-4bbb-9d30-e25e503ac2f9",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "b510bc0d-234a-42af-ad5b-86cd5450bbb9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "633a7619-69fc-4d3a-a619-e62e22611087",
        "cursor": {
          "ref": "810ec2c7-f8eb-4b18-aba6-bf5634aa786f",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "fa903a58-7775-4e5e-9c9a-674181c9d204"
        },
        "item": {
          "id": "633a7619-69fc-4d3a-a619-e62e22611087",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "758ffee4-e238-4256-8d6d-3bbb0e8b9da0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0b68163-fd04-4a03-be73-9b41bc359509",
        "cursor": {
          "ref": "23375271-cf67-47a3-960f-038b7abe30c3",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "ac1c4209-8efc-4b55-ac32-d371066e82f9"
        },
        "item": {
          "id": "d0b68163-fd04-4a03-be73-9b41bc359509",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "54172a90-6c05-490a-951a-a5eae66450c7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6429ed58-d02d-4771-a35e-aa95442d342d",
        "cursor": {
          "ref": "1a254f91-36c4-4510-a622-45362038690a",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "0f1e6cd5-529a-42bc-af0a-2314e48a8ef9"
        },
        "item": {
          "id": "6429ed58-d02d-4771-a35e-aa95442d342d",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "99dada4c-3a36-4921-bb2c-912f9f625e59",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64eaa855-fefc-4b4b-ba2d-1e97c7668d97",
        "cursor": {
          "ref": "6886e035-c73f-4b57-b52e-60c03c9d9e14",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "7aee5aa5-7c39-43d0-90e2-4ce96ebfa388"
        },
        "item": {
          "id": "64eaa855-fefc-4b4b-ba2d-1e97c7668d97",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "6badf2fb-7dad-45fe-a14b-ce6618a4a69d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51cbc23f-51dc-498e-9f7a-a48f97ac65dc",
        "cursor": {
          "ref": "61a5d53f-1044-473a-a197-ecb805257e81",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "80cc6c7c-721b-46a4-a1ed-d7fadb0550e2"
        },
        "item": {
          "id": "51cbc23f-51dc-498e-9f7a-a48f97ac65dc",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "d4d5db2f-e9ab-432c-97b4-e1812629f819",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e06b2a2b-8249-42dc-a750-a72564e151b5",
        "cursor": {
          "ref": "1e7b9ec7-7a41-4675-88ac-a13425385eb6",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "606230d0-21fc-4aa0-8a90-9b1554d81bd0"
        },
        "item": {
          "id": "e06b2a2b-8249-42dc-a750-a72564e151b5",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "4385d944-bec5-4d01-a9e6-5bbf15b77a3f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "018eab3e-46c8-4643-8cf0-4bb5c42cd718",
        "cursor": {
          "ref": "494aeaf0-181a-488b-b654-a7c9e3a2ef56",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "2a02b0b1-e4eb-4bd8-9ed4-e620bc63c1d9"
        },
        "item": {
          "id": "018eab3e-46c8-4643-8cf0-4bb5c42cd718",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "79cec656-d370-44ae-bb42-548461b10ce0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af5c0e0d-b2cd-440e-b475-5fe0d3332a8f",
        "cursor": {
          "ref": "e778ab66-5be9-4df1-a21b-710e7840d475",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "c6d76b84-f1b8-4017-8fd7-6790afbe43ea"
        },
        "item": {
          "id": "af5c0e0d-b2cd-440e-b475-5fe0d3332a8f",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "7dea2d3f-2227-49f3-a2cb-667ed47d345b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0498e315-296c-49c2-a1a4-1eeb92aaf59a",
        "cursor": {
          "ref": "0abc65b6-5126-4398-91eb-fdbbb1bee92a",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "cadd79b1-545e-410f-86a6-f72f777fb272"
        },
        "item": {
          "id": "0498e315-296c-49c2-a1a4-1eeb92aaf59a",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "cdc5fdf6-661f-4cbf-89f2-33edac57892a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29f3a6c0-1a33-44e7-8b3f-5cc3f0f78094",
        "cursor": {
          "ref": "c7e42649-01ee-401f-b65c-979438bb4f2f",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "90ab2fbb-e5f9-4dee-ad3a-a918cd7a5ce1"
        },
        "item": {
          "id": "29f3a6c0-1a33-44e7-8b3f-5cc3f0f78094",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "934b570e-f188-4062-b5e4-42e660af18d2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1de947df-1210-4939-8258-65d43e6c2ebd",
        "cursor": {
          "ref": "0fb50809-8f23-45b8-97d6-2a08d94026be",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "c38db8bf-2011-4b36-baa7-cbcdd7baf41e"
        },
        "item": {
          "id": "1de947df-1210-4939-8258-65d43e6c2ebd",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "4b2ec1fe-9f45-4403-bd2b-fdfb73bf6ef1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f032555c-014e-48dd-b7ca-faf4f8793e91",
        "cursor": {
          "ref": "a0b0b0ea-1b48-41e0-92d2-08ab1ab68425",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "c8602a2c-e575-43a1-9283-1b031ebf2823"
        },
        "item": {
          "id": "f032555c-014e-48dd-b7ca-faf4f8793e91",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "11514e7a-0b8e-4bf7-94bf-d1bd313690fd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac333c30-5936-4aac-88b2-d0ef657d4e62",
        "cursor": {
          "ref": "26ebe26d-2801-4f2e-a4fd-8fab2eafdc71",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "1c2983b6-e544-4aa5-ab78-058f3fec0d4d"
        },
        "item": {
          "id": "ac333c30-5936-4aac-88b2-d0ef657d4e62",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "a39efa2a-0f5e-4118-89d8-09de69430774",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 58,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbe6f369-1ce6-4fff-9db4-0aecae00a090",
        "cursor": {
          "ref": "7bebce7c-2eaf-48dc-9378-c45450ad9c6c",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "e2871b6e-e175-4ef4-a6e6-1a7e7612d0a6"
        },
        "item": {
          "id": "cbe6f369-1ce6-4fff-9db4-0aecae00a090",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "56f6ab70-f0bc-4d5e-9073-2e2de1bd6f06",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12c0eb27-275c-4c1f-a331-64900030f838",
        "cursor": {
          "ref": "2add4d52-be6b-46fb-be31-6f55c4634fc0",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "e33f8afc-a9ba-48a5-ac82-fd358d05a5bd"
        },
        "item": {
          "id": "12c0eb27-275c-4c1f-a331-64900030f838",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "95999011-7e87-4ca4-a833-4e14ac1b9b24",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6aa80d06-8111-4b75-b0bb-90193bc1d27b",
        "cursor": {
          "ref": "7e75b80f-ed5d-4d58-9115-b98de7a1ea9e",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "bffb153c-2539-45ec-a53e-1ee9011dad30"
        },
        "item": {
          "id": "6aa80d06-8111-4b75-b0bb-90193bc1d27b",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "88a1753d-8ddf-47b9-9995-fabfd08df995",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a6ded54-2930-487a-b31c-77fb78c2bf96",
        "cursor": {
          "ref": "42e0874c-d430-4314-a60f-8fccfc3981a6",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "5210722b-d342-4af5-92ab-e26955d0ac63"
        },
        "item": {
          "id": "9a6ded54-2930-487a-b31c-77fb78c2bf96",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "8c1bd18c-c142-42fc-af00-13868fddd1f2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db03af7e-fddc-4b4d-9f78-5da723b41ea8",
        "cursor": {
          "ref": "5cf90ddc-8743-4738-b72c-f7732fe7b42d",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "2dcd6fab-ac3f-4de5-8d48-52068b20cb14"
        },
        "item": {
          "id": "db03af7e-fddc-4b4d-9f78-5da723b41ea8",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "73bc8d13-a13d-4389-a2e0-d05e7bf79ad2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 58,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4585b38-412d-4f4a-91c1-76aeb2fdeca9",
        "cursor": {
          "ref": "720154e8-aa28-4902-9598-c284a9628823",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "e514b57f-4eb2-47c6-a665-73b1e413fb62"
        },
        "item": {
          "id": "e4585b38-412d-4f4a-91c1-76aeb2fdeca9",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "98f1ec85-0180-4616-9924-3b24fcc7dcdf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26d4a6b0-4a29-4e98-9250-cc0b04d7234b",
        "cursor": {
          "ref": "64e38edb-ad64-490d-a889-cd53203b5c14",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "9f0fe688-3823-4960-af7b-f47030cd899b"
        },
        "item": {
          "id": "26d4a6b0-4a29-4e98-9250-cc0b04d7234b",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "585043b4-7ede-49c4-a1cc-678f1b0a12d3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e4092ce-9923-4dd5-9970-a29a805c281e",
        "cursor": {
          "ref": "ee7e9747-b430-437d-ac7a-c2262968ea52",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "4ab9d92b-8c79-4c94-85e2-1e115a2ba3a0"
        },
        "item": {
          "id": "1e4092ce-9923-4dd5-9970-a29a805c281e",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "07f26f04-619a-4cfd-8866-4b5d1b932584",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16aae4cc-2ee4-455c-bc6a-d78b246f0e93",
        "cursor": {
          "ref": "c76a0669-8fcc-46ae-a241-29f310b8d289",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "ac8dc397-aa58-461d-bb3f-45d3997e46bb"
        },
        "item": {
          "id": "16aae4cc-2ee4-455c-bc6a-d78b246f0e93",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "29a55a0c-be64-4b7c-9516-7175dba50c21",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46cc9e05-c64d-423d-8e2b-06bd3c77e195",
        "cursor": {
          "ref": "97da9068-8837-46a8-806d-e24a35b4b1ba",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "4d2fe885-b0f7-488b-91f7-62963f22d4dc"
        },
        "item": {
          "id": "46cc9e05-c64d-423d-8e2b-06bd3c77e195",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "93605875-b23c-499d-9f71-933ab6d16ebe",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15fd420f-f97c-4ec9-8c38-d7bd104c2afa",
        "cursor": {
          "ref": "f9d2f3a2-9ca0-49c8-8569-d519530adf02",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "03f30013-6757-45f0-ad6b-d9bcce2d72a3"
        },
        "item": {
          "id": "15fd420f-f97c-4ec9-8c38-d7bd104c2afa",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "90936385-ccdb-4f7e-b961-a8211ef19bd8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "371a6608-eda9-46a5-b470-84742244e986",
        "cursor": {
          "ref": "a301d130-13d8-4a1f-995f-d2709c28cb9c",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "d9bfef13-3f73-4f0a-965b-eb06b456afc8"
        },
        "item": {
          "id": "371a6608-eda9-46a5-b470-84742244e986",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "280006c6-de14-4b61-9cf7-58029e08a206",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ce58213-b41f-47d1-b553-420189aa8475",
        "cursor": {
          "ref": "1844f352-4ba7-4db5-86c8-3b903b67f013",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "ea83dd68-709e-4203-b1eb-9e376a8fca78"
        },
        "item": {
          "id": "9ce58213-b41f-47d1-b553-420189aa8475",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "dea847b2-0e76-4bd1-b7ad-7f607e35cf0d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5eadcdba-a6a0-4a13-8d95-17ee05ac0a85",
        "cursor": {
          "ref": "3981a9f4-67f9-4a40-a1c6-268d42664ee9",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "3bdf3004-9ecc-49b7-a307-3fe14326dc40"
        },
        "item": {
          "id": "5eadcdba-a6a0-4a13-8d95-17ee05ac0a85",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "45e2f853-0545-4ec1-b6b3-39dd177c643f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb2bce7d-1b2b-4dc1-8f01-67c21a067af7",
        "cursor": {
          "ref": "6d62dd29-59d0-409f-afaf-c181d69b3f5d",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "fbd3d221-00b7-4b45-a694-b12a82f348ad"
        },
        "item": {
          "id": "cb2bce7d-1b2b-4dc1-8f01-67c21a067af7",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "5970f774-6a50-47d8-b296-abf6a17a158e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34d62a79-aa15-474f-bafe-dcfec082aec8",
        "cursor": {
          "ref": "9c9d383c-ae51-44c4-91a0-d86c2219b46d",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "1b5f58c4-77c2-45b1-a9b8-580483249e32"
        },
        "item": {
          "id": "34d62a79-aa15-474f-bafe-dcfec082aec8",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "5e34bf90-13da-40b1-8e42-ad88a6ed2398",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4f4ee1e-bddf-4c17-8623-0ef3a805fb35",
        "cursor": {
          "ref": "361c9587-bb95-464f-81e2-08ed9d52962f",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "344f3301-3421-4410-8e6a-aaf1c6cf5d08"
        },
        "item": {
          "id": "f4f4ee1e-bddf-4c17-8623-0ef3a805fb35",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "753a1808-1087-4030-8c31-30b9d56c8ee7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "073d7c67-3eee-405c-914f-615e108be84c",
        "cursor": {
          "ref": "7ae529c2-a301-4d00-8130-55cfa86c5569",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "7a2bc9d8-ec8f-4007-b6b2-5074fbae7f02"
        },
        "item": {
          "id": "073d7c67-3eee-405c-914f-615e108be84c",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "a5fe0a82-8412-48c6-a37e-bd03d18cd9ae",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "681ffdaa-764e-44e4-b7c8-bda1aad4e62b",
        "cursor": {
          "ref": "b7637043-e981-43b7-b03d-963409d38c28",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "15c5ed3b-1afb-482e-bce2-9da15dc3438c"
        },
        "item": {
          "id": "681ffdaa-764e-44e4-b7c8-bda1aad4e62b",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "5b33bf43-2849-49c3-921e-9ab0dfadef04",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fed8469-b6f8-48fa-bb44-f107afc169a5",
        "cursor": {
          "ref": "f74e6831-fe4a-459c-9dc1-865d180e7abf",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "abe4f812-6717-4198-b9c6-502c65f8d97e"
        },
        "item": {
          "id": "6fed8469-b6f8-48fa-bb44-f107afc169a5",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "43e12d6e-118e-4e2e-9bbe-f37436316ddc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6d5f95d-a9bc-4ec9-bdcf-7fd4e03fb222",
        "cursor": {
          "ref": "37f5a317-9efc-48b2-95bf-e8923216beb3",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "dab1c0fa-be04-4b0b-9510-e62bc2eb063a"
        },
        "item": {
          "id": "a6d5f95d-a9bc-4ec9-bdcf-7fd4e03fb222",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "b50524e7-387c-4703-b457-c0c2ee90c140",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d954f106-a49f-43d4-9b55-4e40b7ed68da",
        "cursor": {
          "ref": "116190ed-a469-44e0-9ac0-e2a8faac1fa8",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "d113fc78-f554-404a-86ac-b5e7cb7dea55"
        },
        "item": {
          "id": "d954f106-a49f-43d4-9b55-4e40b7ed68da",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "0197064f-a802-4e44-80af-b5f055447a0c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25fbd174-4b45-4a37-aab8-57006b85ccf4",
        "cursor": {
          "ref": "4631d30e-5194-4fb6-b885-4556e89abe9a",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "4453747b-4e17-4e50-9e38-b41ded9a7458"
        },
        "item": {
          "id": "25fbd174-4b45-4a37-aab8-57006b85ccf4",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "262da36c-4d66-4cfd-b4fb-53db025464fb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc85dd55-dbe6-4258-8bf8-0994e8a2aec2",
        "cursor": {
          "ref": "662c5385-2b7a-4602-ae89-472b102bdf5d",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "7db9a273-b7c3-4a14-8394-047978a762eb"
        },
        "item": {
          "id": "dc85dd55-dbe6-4258-8bf8-0994e8a2aec2",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "59cc40c3-4be0-4ec9-ac57-7460a94db5e2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b47b75f-0899-4101-9584-c7e70dd27b3c",
        "cursor": {
          "ref": "0732b014-d0d3-48fe-bdd6-3dedde7f2003",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "4f831ee4-1ecb-40fe-af47-ebd1b90898ca"
        },
        "item": {
          "id": "2b47b75f-0899-4101-9584-c7e70dd27b3c",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "3ee4cb61-b821-4499-831f-f92137508744",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b92c5e1-0986-4cde-808d-1a4748add45e",
        "cursor": {
          "ref": "de1e2746-c1ec-407a-9723-ee03bde45d37",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "e2a26874-2b6a-4b24-99c7-5ddaa6e2e5f8"
        },
        "item": {
          "id": "5b92c5e1-0986-4cde-808d-1a4748add45e",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "08776999-d6d2-42de-b0d3-0f89aa0965cd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef4997dd-d0bb-451a-8f4f-bd016ae57aaf",
        "cursor": {
          "ref": "42d07845-9139-4e99-89f5-fe6613c28a51",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "a133a233-f1a8-463e-b2e3-4f52a351a255"
        },
        "item": {
          "id": "ef4997dd-d0bb-451a-8f4f-bd016ae57aaf",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "f826a6d0-e6ff-4168-a490-7e01a4dfac10",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb44cc6b-99b4-497f-8dcd-16d6ef3e8412",
        "cursor": {
          "ref": "b70ba9e1-f7f3-437b-8a6b-86370169bb5e",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "3ae6a1a5-779f-4eba-8a4a-fc864c77d7f2"
        },
        "item": {
          "id": "bb44cc6b-99b4-497f-8dcd-16d6ef3e8412",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "d72330fd-2e43-4f37-9c13-eb4ece7c58e1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b657570-1c19-47bf-8299-f049f251f5ba",
        "cursor": {
          "ref": "4dbae96b-9437-42d6-8e4f-f60d871ef837",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "b9f7f78b-e6aa-4946-9040-93da77a5c4ef"
        },
        "item": {
          "id": "3b657570-1c19-47bf-8299-f049f251f5ba",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "e20e13c5-2463-4146-83e2-45ace28006ca",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42f7b4c4-9fb6-443e-b1d2-5dd70dab9363",
        "cursor": {
          "ref": "9fa26e88-2146-4249-882f-560050dcb4e5",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "ce34ac89-481c-4c29-b0ef-36bc8587fff8"
        },
        "item": {
          "id": "42f7b4c4-9fb6-443e-b1d2-5dd70dab9363",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "5d7c1eba-6241-4760-8406-d6582c8c47a3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 58,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "743eec79-9633-4316-839f-c7afd9e90638",
        "cursor": {
          "ref": "8b935afd-f1bc-429f-92db-5ab3adf6c787",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "8384cd65-e0d1-4441-99c4-1635b6348e98"
        },
        "item": {
          "id": "743eec79-9633-4316-839f-c7afd9e90638",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "57650890-95a7-4480-b94b-73741a7bc4b7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 58,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "143c6d92-8819-4d31-a714-8ff494747ea6",
        "cursor": {
          "ref": "f695fbed-38a0-4f19-999b-b1531835d3d3",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "c6be760f-dd43-4dc4-aa1f-09a6200bd24c"
        },
        "item": {
          "id": "143c6d92-8819-4d31-a714-8ff494747ea6",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "9b4b9ac6-a2ca-4554-8390-8db4dca9c921",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42567713-7dfc-4e87-8539-2e7fa31074af",
        "cursor": {
          "ref": "50641fca-53ef-4904-bae2-7ac0fd735114",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "91b47a79-4e09-41d0-a815-c381bc8bb736"
        },
        "item": {
          "id": "42567713-7dfc-4e87-8539-2e7fa31074af",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "7442451d-fa65-43f5-928a-0bd1b2e20762",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a2e200d-fa6d-467a-85af-8317a5dc9ff6",
        "cursor": {
          "ref": "ed79f244-21b1-4aad-826a-492735bba1bc",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "7e09732f-24fa-4b73-99b5-a3ba8cadc5a0"
        },
        "item": {
          "id": "3a2e200d-fa6d-467a-85af-8317a5dc9ff6",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "c123c320-c758-464d-81e7-5964be595c3e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:179)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc5a2743-459d-4d6c-890e-ff095d3f5e14",
        "cursor": {
          "ref": "b84dc830-0091-4132-a07b-d6a0bf4c93b5",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "692ae033-dc91-4f8f-9497-9063cb74eff7"
        },
        "item": {
          "id": "bc5a2743-459d-4d6c-890e-ff095d3f5e14",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "9b52ce47-0f21-4ceb-9eec-93a3b8efcb88",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4ebd81a-ee31-46d6-bbc2-df1b55bc85af",
        "cursor": {
          "ref": "7811b249-c88d-4e30-841f-48b2e87116b5",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "d8df8523-c77e-4711-aa23-1c26562339ee"
        },
        "item": {
          "id": "d4ebd81a-ee31-46d6-bbc2-df1b55bc85af",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "6d2be7f1-1868-4ea1-95c9-c7278f297f3f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e91e6cf-f484-4b29-98eb-c333e9a56abe",
        "cursor": {
          "ref": "e5c57892-257a-485e-8e74-f1b0e4c9e9ff",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "0699b3da-043f-4f91-b8b1-a952c7407787"
        },
        "item": {
          "id": "9e91e6cf-f484-4b29-98eb-c333e9a56abe",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "a77c4120-07be-4a53-94d5-137cce401fb3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f4ecbb9-7370-4cc9-9228-fdc3f0b310da",
        "cursor": {
          "ref": "c82a1d93-0a2f-4802-9fff-a44a1566243e",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "1b96fc73-ece1-4a82-8fcc-2518d4ebfa6b"
        },
        "item": {
          "id": "4f4ecbb9-7370-4cc9-9228-fdc3f0b310da",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "e42bd1d8-43ca-48d3-83ae-7ee1afb6eeab",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d368442a-632d-4be8-8351-ff42db05a810",
        "cursor": {
          "ref": "9f525323-2427-4a7f-b07d-3ec1d746c4cf",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "35fac7b9-cf2f-413b-a679-8dada3701de8"
        },
        "item": {
          "id": "d368442a-632d-4be8-8351-ff42db05a810",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "df83ef04-4b18-4bc7-9179-9a2aa4462da9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "959dbbf7-fcee-44f0-980f-9944e7118c86",
        "cursor": {
          "ref": "4171206b-016f-42af-8cbb-8c69130c9134",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "ca07850f-e8f2-4b0e-816e-2f27caba83f5"
        },
        "item": {
          "id": "959dbbf7-fcee-44f0-980f-9944e7118c86",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "1b736bcc-767b-4f70-b384-5fe9d937610f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43e29bf8-8df4-437e-8d27-565e57aa9db6",
        "cursor": {
          "ref": "cdb51381-9339-4e52-ad77-63ad96f90de2",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "f27fd62e-9ca2-4f42-8ea8-daaf87166db6"
        },
        "item": {
          "id": "43e29bf8-8df4-437e-8d27-565e57aa9db6",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "ab1d437e-09bc-456b-bfa2-702caa234ed0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10337b57-0844-4158-a9e2-151349524157",
        "cursor": {
          "ref": "b2649f06-5e92-4be9-9910-6d50650381ce",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "0b8f8780-8fdd-4751-b37e-bb5a51a175f7"
        },
        "item": {
          "id": "10337b57-0844-4158-a9e2-151349524157",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "c76d9a4b-4ab2-4027-a76c-0b43ba00f67d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d1b8113-d20f-4bd3-9d6f-1885a94d4b18",
        "cursor": {
          "ref": "2ca50ad3-b5e7-48a1-af68-82dbff095f37",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "156465cf-6a21-4856-be75-84abad265541"
        },
        "item": {
          "id": "7d1b8113-d20f-4bd3-9d6f-1885a94d4b18",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "86b98371-0d69-4aad-a8fb-5ed34e2be786",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c634aa9d-4f31-42dd-8cd4-78f8776f412d",
        "cursor": {
          "ref": "c257ec66-05a1-4ff1-aa69-ef66e92dca4d",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "c6f934c9-a492-498b-8cce-32b73eae10a6"
        },
        "item": {
          "id": "c634aa9d-4f31-42dd-8cd4-78f8776f412d",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "d8587cc8-1533-4ead-b330-c40abaedaf02",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f76ddbf-e50c-4a46-b5b1-45048181de79",
        "cursor": {
          "ref": "af23b286-6a83-4bc3-bfd1-58c3a7f18a92",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "8784bb60-bdfc-4440-9f62-30f65f635b86"
        },
        "item": {
          "id": "0f76ddbf-e50c-4a46-b5b1-45048181de79",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "b41ddafa-53e3-4455-b1a2-b0ec6d096155",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f28c183d-8ca3-4a76-b611-315e4c20a422",
        "cursor": {
          "ref": "beff85e1-ee64-4bc3-ae9e-1456a7bb1fa1",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "d3a2e09b-f021-45ea-a529-ecfef9844c3b"
        },
        "item": {
          "id": "f28c183d-8ca3-4a76-b611-315e4c20a422",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "53c84240-2624-4b26-860d-5a80dc98625b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed21b6a7-e2fb-4da0-a050-841ded5c3da7",
        "cursor": {
          "ref": "0cd867a7-a6b9-4919-b87d-7d0898f9c730",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "3b84f465-6e04-4c8a-828a-cb80b6769beb"
        },
        "item": {
          "id": "ed21b6a7-e2fb-4da0-a050-841ded5c3da7",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "197eed9c-78ef-4962-b15c-5c30f883798f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c067f32a-e09e-46b7-bc94-3c232bdaf1ef",
        "cursor": {
          "ref": "f7b0082f-0e61-4b10-bf4a-21a850a3c7ff",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "33f13db6-18e1-47c7-88c3-bbd82bfd952e"
        },
        "item": {
          "id": "c067f32a-e09e-46b7-bc94-3c232bdaf1ef",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "cb2df08b-3ddc-453d-8adf-e1ba438532bc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09bcb3dc-cea4-4bcb-af21-3537a1c85fef",
        "cursor": {
          "ref": "386e904e-c7e5-437d-9d69-d60521baf786",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "b6e395fd-e631-4736-a22d-65d96c90bb21"
        },
        "item": {
          "id": "09bcb3dc-cea4-4bcb-af21-3537a1c85fef",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "1fc70535-d019-4008-962f-8faa515b4c47",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed77fd54-6980-4237-b265-c19799fe9e8f",
        "cursor": {
          "ref": "2fea0734-1383-40fb-893f-ff5997befebf",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "6abdb621-1b3e-483a-ab6f-f81ce3ee8374"
        },
        "item": {
          "id": "ed77fd54-6980-4237-b265-c19799fe9e8f",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "aee258b2-b96d-46df-827c-5ddf4c222620",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9ee2d10-f985-48cb-bfcf-426342eb23b8",
        "cursor": {
          "ref": "9125b067-f359-41f6-950c-a7dfb035e8aa",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "b846ae75-e312-4b9a-a98c-bf20e59e6f7a"
        },
        "item": {
          "id": "c9ee2d10-f985-48cb-bfcf-426342eb23b8",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "9df5c266-601e-4a75-bf52-c382e1beceee",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37246652-fe40-4b70-9322-5bd871be3e76",
        "cursor": {
          "ref": "ebe5d36d-3369-4db0-b44c-6cd892b7e8b3",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "60a0b3eb-9cc3-4a70-b2d0-0cf73771fda8"
        },
        "item": {
          "id": "37246652-fe40-4b70-9322-5bd871be3e76",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "d2914707-26b7-459c-beab-82b34be310e4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73898664-214d-422f-b61a-c2919ee99082",
        "cursor": {
          "ref": "98e041d0-7615-4dc9-82e9-4f5ba82b7df0",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "c1519443-b4d6-4d96-8b9b-b46f8cc3c05f"
        },
        "item": {
          "id": "73898664-214d-422f-b61a-c2919ee99082",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "c1fc6e65-61b2-4d3c-866e-38ee50616222",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 58,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "058d6350-ba66-4198-ae98-bbbf50668bdb",
        "cursor": {
          "ref": "5fb2b181-05b1-4069-99b7-c426f7641bf5",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "8ca0af2b-dc4d-4ce2-a353-7656a26ac880"
        },
        "item": {
          "id": "058d6350-ba66-4198-ae98-bbbf50668bdb",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "382e1b6a-f730-4ceb-a8ec-5d4212eae267",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d77589d-be01-46e9-81a8-b29fb16f068a",
        "cursor": {
          "ref": "d99baa89-80d5-4559-9a0c-c34e48baeca6",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "84c6effc-61f1-4577-8996-cfca469423ea"
        },
        "item": {
          "id": "3d77589d-be01-46e9-81a8-b29fb16f068a",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "86770712-f26e-4a7c-9287-d526e6ca06b8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cc75bd6-b53e-45d1-94b0-2aa25b2836ff",
        "cursor": {
          "ref": "3398f479-0c79-4aff-bd37-8dd394e95991",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "d53d1388-395c-4d66-8279-7a1c16b42f69"
        },
        "item": {
          "id": "4cc75bd6-b53e-45d1-94b0-2aa25b2836ff",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "31d7c8e5-abfa-4d69-b018-7e9d4a97dfe6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecbe64ab-f572-4a71-a100-879993747443",
        "cursor": {
          "ref": "55deab2c-49ac-4a32-9856-f9b5c14da6de",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "b9186fb8-8656-44f9-8bcb-aa9eac752db8"
        },
        "item": {
          "id": "ecbe64ab-f572-4a71-a100-879993747443",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "e94a2e35-ef54-4dde-aa3a-8862366e0152",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0c3d0bd-a405-4e66-a32c-f816a0058ee5",
        "cursor": {
          "ref": "77267adb-778f-4ec3-adce-d5e3045989b5",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "bb06e1df-e27c-40f0-a857-4f9538ed38eb"
        },
        "item": {
          "id": "f0c3d0bd-a405-4e66-a32c-f816a0058ee5",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "3f7b7475-8c05-4d91-a048-84723b4c4cc5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 192,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cca4c79a-ed67-41bc-9e60-7b4b2d4b3a3a",
        "cursor": {
          "ref": "272136c0-c1ab-422f-8c3f-34f45cf2794b",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "1e4538f4-3bd1-4ee0-b4c4-441e324ed020"
        },
        "item": {
          "id": "cca4c79a-ed67-41bc-9e60-7b4b2d4b3a3a",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "b9864dcd-55d8-45dc-8c26-546f1fef95b4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6ccf015-0b18-4fcc-a097-a17826ab4941",
        "cursor": {
          "ref": "7bb08667-3952-4a04-a3db-2ff7350d2d10",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "e1ef549e-5127-412a-8b37-08bfb9038758"
        },
        "item": {
          "id": "a6ccf015-0b18-4fcc-a097-a17826ab4941",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "28bc78bd-65f0-4fce-9738-d1dbd50a439c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cc5017c-90e7-4b46-bb5c-2aecb5c5a599",
        "cursor": {
          "ref": "9cfe3cd2-cce2-4bed-a7f7-b096b6779e04",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "d42dded3-b2a3-44a9-ae07-7bb987af2dad"
        },
        "item": {
          "id": "7cc5017c-90e7-4b46-bb5c-2aecb5c5a599",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "47d913f4-2f46-480b-81de-96990b89cc83",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45fc568f-380b-415c-b509-dfb39300753d",
        "cursor": {
          "ref": "02596e3c-a7c8-42f6-a0f4-8aa42de5d6bb",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "cdaf24a0-f84f-4594-8458-dad7cda34f24"
        },
        "item": {
          "id": "45fc568f-380b-415c-b509-dfb39300753d",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "389373fb-3a9f-4085-9c0a-6461644e61ab",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab33e082-a487-4aed-b536-cac574d0b066",
        "cursor": {
          "ref": "735a02f3-a14f-4aaf-aad3-be6459694dd1",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "96b17737-8a85-4b83-bab2-06efcb400466"
        },
        "item": {
          "id": "ab33e082-a487-4aed-b536-cac574d0b066",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "66326a5e-44d7-4bf3-bdd3-fefabfd3d3a9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4a58617-d930-4812-aedd-7421b4521e67",
        "cursor": {
          "ref": "dce2b8db-edf3-44ed-a99e-2acc11654d52",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "5874b70b-6c6b-411a-a37a-8ace4f8a07f1"
        },
        "item": {
          "id": "f4a58617-d930-4812-aedd-7421b4521e67",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "6ef7efeb-9e8f-40f0-89ae-c76313356eaa",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca6bc08b-d5fa-4934-962f-ea3923f421f7",
        "cursor": {
          "ref": "fd25c03f-c1e6-4f2f-bfe9-95641168dfd9",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "36bddb65-7299-4651-8983-a7bcd4ffa77f"
        },
        "item": {
          "id": "ca6bc08b-d5fa-4934-962f-ea3923f421f7",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "2c936775-c17f-4195-86cb-c15233010e0c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4291e476-ba36-49fa-b03f-bce0afb723b9",
        "cursor": {
          "ref": "f251cb69-b1cb-4bed-b4ae-f4fd5086467d",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "dbbaa7e0-8036-4310-b639-2762fc3661e6"
        },
        "item": {
          "id": "4291e476-ba36-49fa-b03f-bce0afb723b9",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "924ec91d-c288-471d-92b6-2ef327e6601a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7913e946-1adc-43cd-8343-2a2b262ea19a",
        "cursor": {
          "ref": "7b287c92-98ae-46a1-b3e9-ceb96e98b311",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "5dcddf3c-75b0-44eb-84fb-d4c3ae97524c"
        },
        "item": {
          "id": "7913e946-1adc-43cd-8343-2a2b262ea19a",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "75dba3e9-de5c-450c-900b-defde20ba9bd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfa0fc55-7c3a-4bc1-8a1c-bf3f9baa3801",
        "cursor": {
          "ref": "9a247913-b7c4-4450-9e96-78d6fc2756e9",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "5c8a1d98-2f33-4a91-afcb-630794b6a202"
        },
        "item": {
          "id": "dfa0fc55-7c3a-4bc1-8a1c-bf3f9baa3801",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "93d2443c-b14b-407e-8e61-dda321897cea",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d61a8aa-825d-4fa1-aad1-ad2bee94f427",
        "cursor": {
          "ref": "883c47b9-6977-4cd8-a9d7-d22b6b84b7d5",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "2e76acdd-24c7-4d8b-8bed-8b6847e956dc"
        },
        "item": {
          "id": "4d61a8aa-825d-4fa1-aad1-ad2bee94f427",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "b93d5d85-45ab-4675-9834-b7484c29a9e4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9582eec6-8935-4a0c-a463-67bd8fe1f686",
        "cursor": {
          "ref": "f3ad5bc2-0b0b-4078-b9f8-bbbdf4359c5e",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "5678017c-7255-4e15-9495-a3e740c845d8"
        },
        "item": {
          "id": "9582eec6-8935-4a0c-a463-67bd8fe1f686",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "c1fd6a64-c672-4f93-a951-87aedfac6fb6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6be71bdc-b2b8-4c8d-9943-f1a79acfcb3f",
        "cursor": {
          "ref": "fd4b0305-b0ca-4adf-9ddc-8505cc9c74f9",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "990077e5-b23b-4fde-b0c9-a70e49564759"
        },
        "item": {
          "id": "6be71bdc-b2b8-4c8d-9943-f1a79acfcb3f",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "4891eec4-1ef2-45eb-8d5f-74a5341de658",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68d85e2f-0e93-4b8b-8b1e-983d63a569c7",
        "cursor": {
          "ref": "814496f7-738f-4f61-8e5f-dc04dc748a37",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "8bda6b2d-5029-48c4-9e7d-49ee93b02642"
        },
        "item": {
          "id": "68d85e2f-0e93-4b8b-8b1e-983d63a569c7",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "46aa3a85-2c74-4137-80c5-a313e7cd0872",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e07dbf9d-613b-446e-b8d6-da7c1f4220d4",
        "cursor": {
          "ref": "299dca85-4c18-4538-85ea-6029c28bbee6",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "b59d68b9-30b2-4201-b2c8-29efe56627e4"
        },
        "item": {
          "id": "e07dbf9d-613b-446e-b8d6-da7c1f4220d4",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "745213b7-ffa4-418f-8d00-54c6cf9876c8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f66f411-3623-4376-9149-21b4c722bfff",
        "cursor": {
          "ref": "6a5727ba-cc94-4669-a6d7-af7f6706d65e",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "332fc2ff-e8a0-4e9a-becb-bce10a3fb8bf"
        },
        "item": {
          "id": "8f66f411-3623-4376-9149-21b4c722bfff",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "17597d68-36d5-4625-89e2-8dc421bb66d2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 58,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72f2a760-3997-4358-91b0-058c8fad9643",
        "cursor": {
          "ref": "7a3bd1c6-3c6d-4ef7-98e7-f9f494cef1c7",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "dc365ea9-f6b2-4107-bbdb-e5008e62dcc1"
        },
        "item": {
          "id": "72f2a760-3997-4358-91b0-058c8fad9643",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "603f98c6-b138-4818-aaff-7bcd96a20643",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb54ab90-fe04-4a14-963e-525b47b0dd71",
        "cursor": {
          "ref": "95aa1954-0155-4b28-9b26-9b721275de3d",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "8e2d1f8f-732b-4871-8ac8-269cffb4bbec"
        },
        "item": {
          "id": "eb54ab90-fe04-4a14-963e-525b47b0dd71",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "a09f545f-ed46-4bcd-abde-ce0ee4a6a810",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9a873b1-7787-4369-9019-32957a7bdf60",
        "cursor": {
          "ref": "5197414f-cfb5-408c-9af8-80f68e83ab87",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "2bf91ddb-d1c5-4acd-b989-1b940ead2739"
        },
        "item": {
          "id": "d9a873b1-7787-4369-9019-32957a7bdf60",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "5f3d39cb-b1fa-4589-bc87-38c745977dc4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c0e1247-18af-49f1-98dc-24968b308345",
        "cursor": {
          "ref": "96567b90-1714-4301-83a8-69fd445757b4",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "45336e30-d4a3-41f0-91bf-a739584dd8de"
        },
        "item": {
          "id": "5c0e1247-18af-49f1-98dc-24968b308345",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "6cf3a759-2ff9-4580-8819-bd29260a16d9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "914ce454-f6fe-40b3-9daa-6942cae6ebe2",
        "cursor": {
          "ref": "1f0c1635-0f28-4d11-926f-45ba8d339e95",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "5ae15ebc-8bdd-46ca-a089-9cdf8b6c1831"
        },
        "item": {
          "id": "914ce454-f6fe-40b3-9daa-6942cae6ebe2",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "5fcbeb8e-ac75-464c-8001-57598d8f2305",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb72e34c-4c43-4b3c-9d69-db7d92c2a662",
        "cursor": {
          "ref": "2068f1ed-8b80-4d48-8e6a-a80cbc60d469",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "4de2cf61-4948-471c-ad34-136bb42a472b"
        },
        "item": {
          "id": "eb72e34c-4c43-4b3c-9d69-db7d92c2a662",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "c1294f89-45b5-400f-8010-5b184d8e913b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e14cbc52-83c6-4bea-8f8c-169a86876558",
        "cursor": {
          "ref": "b9da2baa-6e16-45e4-a6f5-6aa77fd7b5ca",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "f39da62e-b04d-4161-afbf-3299c2eb8c55"
        },
        "item": {
          "id": "e14cbc52-83c6-4bea-8f8c-169a86876558",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "eb3bec36-cea1-4f99-89b2-4aa6c226d5ec",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72bd4069-41c2-483f-9201-79fc970ab370",
        "cursor": {
          "ref": "e19da441-c7d7-4b55-9c21-ed50ae3bdaab",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "ee95e2b5-1013-477e-b930-81307827d29d"
        },
        "item": {
          "id": "72bd4069-41c2-483f-9201-79fc970ab370",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "611c3bea-ae9f-4bcc-80a9-1a36216a8828",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03151bf7-4227-4aa7-b376-7731a15e040d",
        "cursor": {
          "ref": "617a9743-87bb-4281-8a2a-f1388d9b3136",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "73ecdc21-67d1-4c43-b741-ac7d00b2632c"
        },
        "item": {
          "id": "03151bf7-4227-4aa7-b376-7731a15e040d",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "fff8a128-89f9-4aae-9da5-8b03b9d427c1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd25a4a2-f99f-4780-8a96-51c690b4a932",
        "cursor": {
          "ref": "08631841-a6b7-45c4-a5c2-a33d9f46a25a",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "71c622c9-dfb2-4549-b7a6-fbc74b814454"
        },
        "item": {
          "id": "fd25a4a2-f99f-4780-8a96-51c690b4a932",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "5afb8b62-4e86-41b4-b26c-a436ae788145",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5374f351-cde4-4426-ac0c-4398ce61f3dd",
        "cursor": {
          "ref": "8b697f23-1d9f-443a-9611-baec4b6a8171",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "72cd7f93-21f4-48f9-9ed0-7fdd92dc333c"
        },
        "item": {
          "id": "5374f351-cde4-4426-ac0c-4398ce61f3dd",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "7e952dae-f9a7-4f30-9779-b7cecc313b15",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c03f664e-24cb-4eb1-8d92-b041cd2c75ef",
        "cursor": {
          "ref": "ebd8a2dc-9b89-4553-b933-98fb75e2e382",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "1108b8b1-9e5f-4318-9aef-c1616b00611e"
        },
        "item": {
          "id": "c03f664e-24cb-4eb1-8d92-b041cd2c75ef",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "1016538a-627f-49e5-905a-5c95ab84aafe",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "547344e7-9dbc-42f7-aff1-e93c7d4af5f8",
        "cursor": {
          "ref": "32f340e9-214a-43b7-b28d-7416b1d1ba02",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "1d1a6fc2-0d05-4a27-9ab0-98dbfc23950c"
        },
        "item": {
          "id": "547344e7-9dbc-42f7-aff1-e93c7d4af5f8",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "4575f60e-bff8-4bdb-b64d-8000011ddf2e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51c48181-5181-4924-9a62-fd68fb138aab",
        "cursor": {
          "ref": "0e1b6635-5efd-41d6-bd8d-3ea7317c7710",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "4211e632-5ef1-40b4-9415-2ed832e436f3"
        },
        "item": {
          "id": "51c48181-5181-4924-9a62-fd68fb138aab",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "a2348bf5-8859-47be-86d2-c8bf67eb726f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6abd0577-2516-4c67-aee2-5e46eccaece3",
        "cursor": {
          "ref": "74e8d803-e8b5-42d5-b360-d14f850a408f",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "497ab552-8d99-418b-94e3-83871cc31e6a"
        },
        "item": {
          "id": "6abd0577-2516-4c67-aee2-5e46eccaece3",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "fff065bd-f95a-4165-bfa2-2fcd405297a7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 58,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02cfa2bc-c90a-4325-996c-ec8c740c93d3",
        "cursor": {
          "ref": "7aec027b-5be1-40f0-ac97-bf790e749b30",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "5627d292-7f78-4b35-bfb6-ba24b8df5d14"
        },
        "item": {
          "id": "02cfa2bc-c90a-4325-996c-ec8c740c93d3",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "af92b345-61f0-476d-a1f2-70f3fa3954f8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72237f67-3b3d-4b83-8acf-ebe3a5c2054c",
        "cursor": {
          "ref": "79e5e4a4-5689-4a40-94bc-17ef030cd096",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "45fe8c4f-7539-47ec-a020-211eab778b03"
        },
        "item": {
          "id": "72237f67-3b3d-4b83-8acf-ebe3a5c2054c",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "d47f78c6-ad25-40e0-ab97-7555f3a66551",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e022436-fba3-4d61-a38c-2388d41865cf",
        "cursor": {
          "ref": "fdc68ca3-b2a0-49c0-895c-287241c35006",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "c75357cb-76b4-4813-8d46-51ac56a2a7ca"
        },
        "item": {
          "id": "3e022436-fba3-4d61-a38c-2388d41865cf",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "7850a6c2-8e87-4738-b22f-21952433b850",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba9fcc37-67f8-4b07-af8a-3d70065e4eba",
        "cursor": {
          "ref": "eceba6a3-e3fe-46b4-ad47-4eb4542d0b44",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "a1158e6b-7104-4d81-b2b4-c8dfc9f6419b"
        },
        "item": {
          "id": "ba9fcc37-67f8-4b07-af8a-3d70065e4eba",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "02e1dfe8-f0db-4272-8648-e792398bdc13",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7660953f-7af6-4a4e-8dfb-34b2df585bd3",
        "cursor": {
          "ref": "e859ecea-fdfa-4313-885a-76b6f8ddb750",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "cc34bc82-effc-4f0a-b960-fbd80268328e"
        },
        "item": {
          "id": "7660953f-7af6-4a4e-8dfb-34b2df585bd3",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "995428e0-2f71-4f76-aab9-eff7e7daae02",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "549bc74a-0eab-45bf-9ff3-665b4c077a59",
        "cursor": {
          "ref": "b1661f57-a738-450d-90c9-387380b84728",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "264124aa-f4c3-4604-9e2e-345c22a1c545"
        },
        "item": {
          "id": "549bc74a-0eab-45bf-9ff3-665b4c077a59",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "c18f5901-f9c8-42a6-b815-74e909b2a1af",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f9dd71d-b703-4a92-b9c8-d9f090fa52f8",
        "cursor": {
          "ref": "6f27ae58-51fb-47a8-a456-51edb086b82f",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "eb900fe0-6f99-41f6-9ce0-1e1f7b07aae9"
        },
        "item": {
          "id": "7f9dd71d-b703-4a92-b9c8-d9f090fa52f8",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "20cb1081-05ea-4858-9521-eea797ce2b01",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4a9292e-eee4-4f33-8de0-d8658bbb2269",
        "cursor": {
          "ref": "f6e8a96c-5c15-4190-9031-d47240de4992",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "d27326fa-63c6-4f7f-8f65-ba8f1acb881b"
        },
        "item": {
          "id": "b4a9292e-eee4-4f33-8de0-d8658bbb2269",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "ebba684e-6708-4188-afa7-aaf011606bea",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdc3295c-c7f2-4a70-a1d6-2aa2d8b740a5",
        "cursor": {
          "ref": "a349e56c-7129-464d-ad96-4d5d0cf07961",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "3f22b289-2be6-4dbe-9e43-6843faef424d"
        },
        "item": {
          "id": "fdc3295c-c7f2-4a70-a1d6-2aa2d8b740a5",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "c9b0800f-0564-4a13-9dc8-8386f683ddef",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd0f5a84-9fd9-45ed-ac47-de9897d5463f",
        "cursor": {
          "ref": "f15ad24d-758d-4857-ab5c-8dee5079c2c3",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "43688f99-997f-435b-aaa5-b650c99b282f"
        },
        "item": {
          "id": "dd0f5a84-9fd9-45ed-ac47-de9897d5463f",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "24fda7f2-2df2-497d-b10a-425d36e0ccdb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1191d15-9439-42fe-ad95-96d615d3978b",
        "cursor": {
          "ref": "e1d2796f-a0c9-4505-a2ad-819062b5e79b",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "8e2509e9-4646-4228-ba5b-6805a5f3df56"
        },
        "item": {
          "id": "c1191d15-9439-42fe-ad95-96d615d3978b",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "d7b166d0-cc46-48d8-b519-f1d4d855f228",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "8bbfb15d-dd70-4cfd-8676-03d9e4bbae82",
        "cursor": {
          "ref": "e74f5c94-8694-4931-bce8-49ecb1e0d18d",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "b9431f79-9832-42e3-aa6a-56f1e63b67b8"
        },
        "item": {
          "id": "8bbfb15d-dd70-4cfd-8676-03d9e4bbae82",
          "name": "credentials_verify"
        },
        "response": {
          "id": "81ae1fbe-2f16-4d67-8e14-99eda1adfa94",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:246)"
            }
          }
        ]
      },
      {
        "id": "e217b1e7-3d8c-45f0-b0bc-b3747eec4559",
        "cursor": {
          "ref": "f0e63198-4337-46f8-83a1-c1422356335b",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "d9a14eda-8673-4d6a-b7dc-0f60e5f562a7"
        },
        "item": {
          "id": "e217b1e7-3d8c-45f0-b0bc-b3747eec4559",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "ccdd30a5-b673-4c69-b447-d6925015c1d4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:247)"
            }
          }
        ]
      },
      {
        "id": "200c9147-fd76-470b-bb28-7a86842feebc",
        "cursor": {
          "ref": "895669bb-fdab-4422-9616-440eced2db4f",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "414460e1-e270-4db0-a5ca-ca9fdcac9bae"
        },
        "item": {
          "id": "200c9147-fd76-470b-bb28-7a86842feebc",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "14868226-dbd4-4cb5-9255-49cd23c186ab",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "200c9147-fd76-470b-bb28-7a86842feebc",
        "cursor": {
          "ref": "895669bb-fdab-4422-9616-440eced2db4f",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "414460e1-e270-4db0-a5ca-ca9fdcac9bae"
        },
        "item": {
          "id": "200c9147-fd76-470b-bb28-7a86842feebc",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "14868226-dbd4-4cb5-9255-49cd23c186ab",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1626aa24-4bc2-4725-ab97-58a845739150",
        "cursor": {
          "ref": "53535073-35d4-4b42-93b4-936be397dd45",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "1b36124c-55c1-4b49-869e-454ebf976e76"
        },
        "item": {
          "id": "1626aa24-4bc2-4725-ab97-58a845739150",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "9f6135c3-ae8c-4f42-a9ed-aa8c39abb1a1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 58,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a25d556-af4e-4393-a63e-6046d45c4ef8",
        "cursor": {
          "ref": "a2273e9d-7bf0-4fab-82d8-4ae9114bedc5",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "82dd9329-881c-4408-878e-36fa264b6f6a"
        },
        "item": {
          "id": "4a25d556-af4e-4393-a63e-6046d45c4ef8",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "cf3fe7ce-ef29-48a2-8f17-477f6c66bd0e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}