{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "d35a81f9-bb21-40aa-9c36-882f6dc36ae3",
        "name": "Clear Cache",
        "item": [
          {
            "id": "fd8945bd-47f1-4e79-b7ce-3a95eec42697",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3a3a8dcc-1bb2-4d7d-9e4e-c4afb66d39f6",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "e04ad6e3-f1be-486c-bee1-511da0e24ee4"
                }
              }
            ]
          },
          {
            "id": "4feb1bb7-782f-4418-a7be-0588b4dbf3f0",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a3c95f2f-789f-444c-8e1a-04565c75e0e2",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "5b8ac6c7-6fcb-459c-a3b5-523cd07e97a4"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "ee1bb2fb-164e-4d0d-9089-d270bd8002ec",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "991ff7dc-6141-4595-bc5b-9f6230ce3948",
            "name": "Positive Testing",
            "item": [
              {
                "id": "49de2137-98f7-4912-abac-54877ddeddaa",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "30879bf0-9bf1-4130-a440-64e5bfa395cd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cb25e349-ece2-40b3-8be8-499724bc1fa0"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "cf8dcb2b-435c-42f7-8e7a-cb67d1313e5c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3c9e7bad-3503-481b-b08a-33e9f92faa5b"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "88d85394-cb2d-4a73-8595-edc5cb190415",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c4fef19d-e41c-417f-ac4b-be364f02e97b"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2c148ec0-bb68-447a-8041-62185a401d73",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "3f2c264b-dddf-400b-966a-651a8d975d65"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "75ba5154-b7c0-4f02-8586-d44ce3d9ab4a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b3b30e12-a784-4090-9cda-c103bc7b920d"
            }
          }
        ]
      },
      {
        "id": "76347fb3-29fd-4050-85df-f122d519b7cb",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "57d18fc3-007c-45bf-93ad-8092075c72d3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c49781ac-4b81-4d58-b778-96ba6293d19a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "46a09346-ba30-42bd-9208-78619959f6e5",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15b1d875-e4c1-410d-b567-f2eed9f3defa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7e2bb6f3-67ba-4116-813f-7591ab06af3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85dcf17b-3aff-4d4e-b789-ae8803339d49",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5956b3d8-9dba-4346-8ce7-e244123aedf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5efa6013-f528-4368-a0f2-4f2e6c4562c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "358d3ee5-203c-4976-8548-8bb67f6e102c",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfccfdc3-fca7-4161-a9b7-5189a9bfc3e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6fca0f43-5403-413c-9a5c-62e4705e9ed9"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "016450a5-e7ec-4867-bb8f-4efbe10c6a11",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4b06427d-3c8a-4aa4-a7d2-ca003bf25959",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48a7665c-88a5-45d2-bab5-151df3ef2474",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6ad99b20-382b-417d-8eef-c8e770fb863a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db654674-689f-4e8e-8e71-b5aea7688751",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "575761b2-244c-4563-93e8-5ca78b456cd3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "6983be18-3c82-433d-8aca-6b5f381ea848",
            "name": "Positive Testing",
            "item": [
              {
                "id": "0eb66a60-96d0-46a9-9cc2-a8af5ef14301",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "efb2ffe7-dc84-4ead-8599-db956e51d888",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "52d6d51f-1286-4eb0-ba22-6a6acb89b21f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "77d859cd-52ca-4f41-86da-70dbbdb79abe",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "f201f667-6aab-4435-be1f-5eb157bed252"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fb3c3d4b-f239-4c0d-b7bd-bb490eb039e4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "80fe7e38-e3ac-4009-aba3-7737d6a6a749"
            }
          }
        ]
      },
      {
        "id": "f470da2e-db30-4fb2-aa68-8564976a5d21",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "7d79e0c7-923a-43fa-9e9e-b96a924d7726",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3e6643ed-1370-4611-87ad-2ad2b4c82761",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "d8803c5a-cf88-4476-bc5a-992b871f962f",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24a6e9de-b2e3-4fce-893f-e4c19130010e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d801f04b-64f5-4d1f-86a1-811e2c427fa3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c1d84f0-342b-476a-8edb-cd5ee27a4cc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1ce35b53-a653-4a08-ae87-781b509ac047"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ce7d408-ad87-4faf-9805-a85e77a1e87f",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33c429e2-8a89-4947-af91-0b1a41a826d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11e011b9-e1a5-4680-86bd-523c29f483d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6591fda6-c772-49ec-9c26-ceb90297945c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "21d0788c-f839-46ee-9050-48c5e5d32923"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9637528a-f703-428e-a3e5-c3d3e06fa58e",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9939cc50-0610-4bc8-b07d-75fa862135ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10f7a8bd-09db-479c-8d0c-712942e0f553"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77b20272-d289-4a32-980c-717d4c744540",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8def6b62-adeb-41b0-839d-f2d932d54ab8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "427cba2d-1436-4f4a-9f94-36356018645b",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0bbbf65-c4a8-41cd-90ce-7cab38a400f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04cdee2d-2fac-478d-9577-b1b7f998a055"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8d84d30-e245-4809-acc6-b7a540a4c119",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3c62ae55-033f-4168-bd28-d2576113659d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fdbe1ae-7eb4-45b5-a79f-1af47124d326",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b3998f8-0e7e-4673-815b-4098ca8c84d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d9f2ccf-7f29-4364-b68d-178b7fb11eac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dfde53d-b29f-43b6-8e77-c6a92910413a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f1606016-a925-41ef-8e61-455c03e70145"
                        }
                      }
                    ]
                  },
                  {
                    "id": "198b4068-c2d8-4d2a-a76d-c11cc911a3db",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b4edcae-74af-492e-8172-08bf4798f3d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "506b1cb0-05f1-4acf-be35-a9f1341fe7c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d572a9a-b1bf-4626-a777-bb98de50f4ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "06d382f1-93ce-45e5-83d2-0d48bcc95121"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c192716-f915-4645-ad84-05f3f6e23023",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d045b219-f8a0-4591-a42b-c9cf554aad59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79d414a8-bcd8-472c-bff6-8a32d8bc3c63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb497a63-0601-4274-87a3-4b0adae3dbf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a1302341-a318-4998-b0b6-9767a7f9ebfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03c6afe1-6c64-4c45-b6bd-c9c301fbd010",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30ca418b-3994-4849-8451-2048f4d463e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e650ff0-8805-4d8e-8d2e-64331289e040"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "170d9ebc-b49e-4844-96ed-8995d5eaabc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5cc1cdb3-1563-4f69-a783-a44a1d27115f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a0e3a42-3553-4e28-bcf8-cf112f741625",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0867b6e-8f50-4ec9-93b4-991d9897a0eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b6d014d-dc45-4fa5-942c-6c3679025bab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5d86fa1-57c5-44d9-8eba-45aea986504b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "de526a35-b119-402f-93a3-16f675470db1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d49971e-392f-4929-a7d0-1a2e1a67869c",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb73f8b8-b6e4-45c4-b5df-1669b607503b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed268b9f-b2b1-4f65-b7b7-28d3b7fd2ba7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a7aeace-08c1-48c1-b4b0-444edf29d8ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "27ed706e-ad5d-43b4-a6a8-c1627e664405"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cfea288-2151-480d-bff4-20e63b70cc65",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a378d867-267c-4395-86eb-e860c978da02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85e28b41-919a-4c1f-9b47-5750830b858b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a858bf32-7d71-47b9-8b2d-e5ad8f489d55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7df6e4dd-f8a5-42f5-b5f0-be0c031c9b40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0115809-cb7c-4248-8ee9-95bcff383cec",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea82dc0c-c13c-4ecd-a763-b123445820b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df7597c1-550b-4ca1-aa50-f90afa633619"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "135c8128-21c6-417d-842a-c3fa1f14a509",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3aaab429-c0ae-43ad-8a90-3aa982cf0d9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a28b45ba-5e7f-4e58-842c-8c8b8af5ffe7",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f271226-14bb-418c-a6c4-922e47b34f04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b66045f-a851-4c3e-a47d-fd570ea53823"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60e8a99c-b741-457c-bc5b-1b28bf24be39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a6e23b02-1afc-4f5f-ad36-e9aa6d5b9700"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee246a85-b585-42a9-aefa-ab47d2798d1a",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22bb6208-2fc8-4fe9-9fd5-c196e5f52407",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ccd73bd5-0676-4c1d-8287-713416a034f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e6ffebe-8563-4da1-b425-fdadea017e07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f9231b90-4d21-45c0-82a5-bb65633d74bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ee149e5-8872-4857-b7b6-31d32ad88aad",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ca6381f-b836-447f-a603-16bc88748478",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d66ebcc7-47e1-43fd-a653-132a50f2d693"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6b653d7-1fd1-45ac-a6a9-578bd6752bdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "565cad74-fc6a-406e-b524-a871444074e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33f743af-ec8a-4bb8-8632-f1bc394f84cd",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce669026-9fd5-4bf2-a8da-d59fc7f17dc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba2f7124-efc4-4c50-9041-52221835bfc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1ecb640-4469-4af4-91ee-e072ab5fe634",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "346bc644-365a-4e04-b76d-8f91c177c25c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d8ca73d-9801-4426-9c8f-aa781524a42a",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89dd1873-05c9-433f-804b-b200bfb8386c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b05eb0b0-6852-497c-a922-e5e3c92c2ef7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fef3d4f2-1f1b-4902-baf5-99a47abff6c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "84cc8d3d-1050-4097-954f-5aa90495e405"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18e8e6cb-039c-4934-acd7-0a3fd10555f6",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37d51600-c96b-4c4a-999e-b5b3253f89a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7169c4b-60cd-4057-9b81-ad45ae6b73a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54c0feee-2c3b-4d15-a56f-8ad8d283d907",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "23b868d0-b5ef-49d4-8f37-3d3073c9e0df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f42d0fce-45e9-49e6-a159-17f4fb961a45",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "422fee5d-d920-49b4-9ef9-12c7ad3ba800",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2a1bcba-e863-4296-b15b-0eb5107793ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13032394-2d2b-4846-aa9a-715742b6a319",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3e69e9f3-ae7f-4459-8dd1-4d2de7a38def"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50290b17-ecc3-4aed-a2eb-1c5a2b989fd2",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "924f5bfa-67f8-4478-a61a-eb7f9ec35ef8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97249891-0c4b-4adb-bf63-63f57ba9be87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfea50bd-9b7c-4faa-b3a4-ab570458bed1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9fc8f949-5aea-4127-96f2-285921cb7ee4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81013996-dd92-42e7-ba4b-35c6b99b2030",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c95d7cd-e239-4205-a4c6-ec0ff6b6b546",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b059fbd-7bac-4656-b7ac-9a849daf9ec0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29d46917-eb43-45ff-9e9d-7474a7d75840",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "989c3401-f0ab-4611-8309-8de71bc95c75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ac33dd5-f799-4769-becd-0f8bbda906c6",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "565f3fe6-42f1-491e-b239-e4b8414c7094",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91a5e386-2152-449f-beea-6ec94b475e1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09791d00-4515-4272-80fb-45de9e3fbbc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "178fa67a-16ac-4f7c-8a5a-f2f9ed1bc027"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23af6620-5551-4704-af14-b137d8da8c22",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a744542-ca20-4a0e-b68a-c6f03bfcd551",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76516ded-2397-40d5-a570-8407131780e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fe7b861-a7b2-459c-8763-f0a55d24d738",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "50092eb2-6e86-4f84-9159-714a3067d859"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0526c303-91a9-4e3d-bd6e-53e8e6f4b142",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74f0425e-3839-4e6d-ad9f-a8017067c890",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94153c02-ed15-4d1b-a8a0-387bff86c41d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2646c029-1cf7-4989-ab23-7f1e738d55bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "4e028f84-a69b-443d-8dad-18d97ec902f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28d62b95-a39c-4334-9097-86773e4630b6",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46ad94d5-e3b5-408b-80d6-8ac1c9311f1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "107b3c7f-0d24-48ee-a5d2-e96eaa89477e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ccef4a9-6746-4c6c-b25c-9197f4b1253e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "aa1b9a24-c8d6-42ac-8eb3-67a383a8beff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9eb16105-62fd-46c8-ac47-a5685225aecd",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55da7f1e-e9d9-4b4a-8252-2793f3cee45f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46be0c63-a29d-4c58-8aa9-a83687633d29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "225d01e7-74e5-48ff-ae86-9cad90ca44c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "937f3f5a-274b-42d2-a87b-ba0f183bf482"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be0b676b-4cea-40f1-8d2d-a18023c4b48b",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7afaba40-2668-43dc-8ef9-3e7ded015a59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1102f73-c2b3-41d2-a727-4b401b0f9d94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab0fd790-f00d-470c-b06b-9a2679c032a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "55b27c3b-1217-470b-bdf2-2634b6b32374"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dd2783a-7b90-4764-9ac0-01330df84984",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39a140c0-2890-4cfd-b764-516b32083ef2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aacf1207-335d-45ce-9b4b-712b9a4229a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78fd9098-336d-486c-a105-a159f0f196c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "23f554a8-85e2-4ecb-a6c3-fa825cdf2f7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03ab70a8-6490-4632-8533-2fa1ec932293",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73c95c67-fdae-4778-b468-5cb766d336a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ae4f095-2b91-4cee-acc9-1d0900a7fdba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76d07944-db2c-4daa-b849-bc1e72efc5e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a80cd752-d737-4cbb-8073-269e9d15f3d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a665dac-d2f3-41d2-8c8e-d73bbc3f0b68",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68295125-a5a7-4c88-93b9-b841afc506ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7afac4e-9f90-492d-9962-7149cba8a692"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4000a49a-26d8-4978-86e0-f7ec7a78c1cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "5e686442-f5da-4b9b-9d62-e97fa8469432"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2afa5a49-ec3f-4af5-a74a-ae2c5c211591",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb5a682e-9ca0-461f-83a9-c6f2233a49ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09947ef8-8b4a-47ae-8470-9be494d7ffda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc5820a4-e151-4230-8532-a90b4df92089",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "47162b2f-a399-4f4c-8759-1e395706f1c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "174e4e44-c916-436b-a1cf-21ecd6fd03fe",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97afdec1-ec19-465f-bdd0-31f0b9e000e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca7c835a-783c-45c2-888f-ba1320341b86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f84c7bf-69b5-4e11-b232-91b5f321f8da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5931ac8e-b4dc-4da4-9749-adb214ee6669"
                        }
                      }
                    ]
                  },
                  {
                    "id": "045c707a-47c9-4d6d-b594-4d78dc8e9652",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a00c632-7b5a-4745-a2f6-6d04457afc78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71c1cfde-9ee0-4ac2-b65f-b681c16bb43d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e986464a-8dfd-4a20-a007-8c793d1f12d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "40cf95cf-aa60-4338-8015-e241f6ec9e85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b250aa9-867d-439c-aeba-547bc3d739c2",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf79fa1f-d9ae-444b-94e0-cf61c435ca88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "856609a0-259d-4a31-b811-a60afaf42370"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17c10a98-e01f-44fd-b449-fda8346003ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "dcfbee94-97ed-47cd-bdcc-2409b0566ff8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bc37470-fc1d-48f1-baff-4a2a19c404de",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfe0a5e3-6752-4251-93e9-2925d2b7660d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bace19e4-fd7d-4a37-b3fd-8def803851c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4ee4fec-0584-4e16-9e78-117f3b0f74b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "8e5fd206-e294-40da-937d-034c118aca1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2802af8a-f9bf-4c5b-8fb4-bc121a282dab",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b80ebc2a-094a-4ec0-8369-6020fa4a2fb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "736bb609-03b8-4dd6-a053-afd1730cf0d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a77653f4-24dc-4651-a985-10c2c64cd250",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5244f65a-3924-4980-834f-f1b6d7c815e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fe2693c-d561-46a3-8f0e-03ad771ebddb",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af77b6c5-c827-49a7-b152-c43d211cd60d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee78056a-6383-4f46-8f14-6beb9b04ebf4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "828c09f5-e3e5-4540-baff-5dde56feca0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "79f6f348-8ce8-4417-b738-2d581d4cbbd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bfb8f50-c11e-44cf-8d7c-0c5c1bed18a7",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77b8737a-f297-4800-880c-c6fb38fe7a85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac75f3ec-f948-475a-8e13-6c1e92653552"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "543e784b-8a62-470c-88bf-3cfa07c41266",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "089bf958-095d-47f1-bc68-a2a111123231"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13c2c532-5fc3-40f7-97c2-40d722c09e3d",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4751e74b-2983-4577-be11-63b8db16f314",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0dc2c15b-1b77-4284-a4b1-bce8be811979"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92a3fa0c-2ec2-4908-8638-3b8b437cbf36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "d5cd0db2-e98e-45c8-b9cb-1e6201f3e951"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a25c0161-618e-493b-b925-95e50e5a9ac8",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b61d5b52-8709-430e-bd6d-d15355abe992",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93e65ed6-f860-42e5-871b-d84dc8f5efb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92db1927-0ed8-450a-89bb-c999a07cdc9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "205119bf-57a1-46de-a76e-b8a01af9ebba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f21a207-28a2-46aa-b94b-2568d7d3eece",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33ad3fb5-d5a7-43fa-9910-f4e5c709a746",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b93c480-205f-44ec-962c-b3f5d854b5e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dd8decd-799a-4f29-bd31-afe376512f6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "b49e23e2-f1e0-41cb-9834-956af31d55e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca2f5973-8f52-4c18-8b14-4290726705be",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44839f93-07e3-40ff-b2c6-1e7df8dccbd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70117d20-9691-4cb3-8c0a-604bb2b5bae6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01d63025-6842-4ec8-8f10-a01b31d25079",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "2cd22cc1-8302-4f57-a290-55dd4e70c352"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0b7aa14-61cc-40f2-9c27-2c36ccc50cb0",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0753c85-5080-4e59-97ed-082b4b0e60b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b33bbc11-b868-434f-98fb-934a1822f273"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a4352e5-bda4-47ac-9d72-ed57506c2d37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "e3de4474-2b92-445b-bb57-a60b36ef5455"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9de88d61-b645-42a2-98f2-2cda5f2965f4",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16ae769d-e36e-4a9b-afcf-3c83709edf8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0109bfe-ab26-434f-92f6-69fe1248d786"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "912e376a-769f-4144-8e96-3791b91b0ed0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "0a287215-2423-4be6-87d6-35cf758682dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0c62c5d-b74c-4466-b06a-c27e00443624",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4bc76be-5232-4a37-9095-e7e7cef22d0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6abe653-7c8e-4965-96c1-f7f74413d9d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "016be845-443b-4fb2-9aad-c32492ec64be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "cce541bf-1d99-408f-965c-a2371de205a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c9edcc3-f908-4b88-b3be-1d4b07adca06",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "943f4893-dc52-43b9-92bf-c8570286464e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6989c35-fbc0-4187-9634-5ce50ef65a2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6bcba2f-5f2d-48f6-ae71-dfd4a4294ae9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b135de55-e2a2-49d0-9242-3920329048ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2292f17-eaaf-439c-99bd-305e607eea75",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be3d1fd3-a28b-4e55-8165-b52dad355bde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a89e62cd-2cf6-4e67-b368-c936603d4fad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09b33519-1347-4245-90f6-1f8bdaace690",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5499e63e-f74d-4a1a-a7e3-ddd34459bc09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "758cf29d-78be-4afe-8484-048e943d913f",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f9f1e5d-5e6f-4ba2-8852-b0ae7b7313ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3eb0ebe1-9175-4eb0-bace-30b423d480e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c9eb43e-5140-4a45-acf2-5b5af5ebd191",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2a9a3a7d-79b9-44e8-939d-01cb010bae26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91daa7cd-9bb8-4165-82d2-04931dad4c04",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9901bd4c-d152-4fc1-93bd-0e6ac7e8ac2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "609b7e57-a74e-4f1e-99bf-981422606ba7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0233beac-6dc0-4fdc-9506-9d50acee67a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6f8b86d2-06e3-49dd-8955-815135db333e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c119d972-630a-44b9-8499-9f64ea10f27d",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad516a33-821e-4318-9d82-c58fe16c3605",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "434a851a-97fb-48a5-9398-28a20ab3830a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "611ec4da-6915-456c-8409-8b0d2b2d6f6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "55e272b2-a529-4858-b2c9-c17a4ce0db4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d1a9f41-cdd5-44c6-a91a-dbb2c0daca7a",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e872f527-abe1-45e7-9158-d56cdedb5ba8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f009f096-de0e-4fe2-b0ad-931ca410a55a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20658b07-92c1-4b33-a630-4d9333d426f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "ac08a69a-f7f9-4077-8c72-3c5d3bfeccff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7f4c2de-da8f-4d0e-b41d-b4f221be59bb",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fa60259-a23c-481d-8847-56b6417ce8da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e30541c-2b11-4a46-a4d4-852b94bb5784"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87c84e21-8609-41a5-a7bc-d47a22d2b4c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6c4d89d2-8155-474e-92b5-4e9e6a6bae16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f027a0be-f950-4f6a-b853-0bbb8bb564e1",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b160d405-b2c0-4cd7-b670-3f5220177f69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c16ba99-dbdb-4015-b14e-026f4272e75b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f43cc35-052d-4700-8a97-fe614fceb99c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c2efea7f-855c-4622-97d9-19b3f982db18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3c039c1-f751-48b1-81cb-a078b14804dd",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c64baa7-7a5d-4811-a866-843362754e1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f9aa150-8d86-449f-a9f4-57b719b2c3e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e85516a-31d8-4f7f-b20b-4cac4ce85cab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "df707c6f-f55f-4f55-8298-f2ee4394e85c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75487b79-c56c-4855-b1c3-25eaa1c41223",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d09d6623-f46d-4372-a356-9ceaa9e0fe10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab4434e1-ea55-476a-be21-f2320ef082cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c1f3289-40fa-430f-a870-cfbae96b91a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3b204410-adbd-49f5-a289-1afe9507bee1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1897b774-4eab-4bce-bcee-175d0d81d91d",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f37811fc-6edc-4dde-978f-67933cd46bab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8e03509-5c5b-4586-9b7e-32af24513d08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "716a3959-35e5-462b-85be-6d085fb44e95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "ed328eb9-533a-4649-8f90-46cbff5d138c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "219e39f4-cd29-4280-95a6-befbd56d4911",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85657d44-eabf-4ce8-a387-133e4a36e771",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0310a4b3-1ed0-42a6-8d6d-88cbfd5c0879"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4fba14d-664f-463e-9104-7e699751a64c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "c2eb1a85-6865-4672-ad35-096c7634cef3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c57149b-34e3-49be-b7d9-9513fa0268ea",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4673479c-2e9f-4d74-a5fc-f217e94723e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f941ee7-1240-438d-a714-d0c7de489c83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a289c689-bcb3-4a32-becb-a00cb7c228aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "b4df2820-c7a7-4c0e-a0db-aa1c9e2223a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9f7deb3-07d8-47ba-a1a4-9e67bbbd462d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07a8d349-9a12-484f-b06e-291997b79c8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5df2918-2448-4caa-8b85-db6fefbc9114"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f9a260b-1ab9-4b56-95eb-aae0f7cc4e22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "dda8ca5d-089d-4ac9-aa09-715726ae67c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88074e3d-eeff-490d-933b-680def1a9240",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ab17dcc-9366-492b-9b14-3564f1fec346",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a97a1439-89bc-4653-8760-9d1971ee3dcc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d56ff368-8a62-47eb-a390-01f30e9d5154",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "6daed1c8-1527-4767-bc34-b0f38003f7ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "376fd5a7-b973-4746-a2da-71279410bfd9",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc4c1f6b-8211-4f4c-ad75-862f18669b59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d3d8d6d-0460-4157-9ac8-22a0e69ad1bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42111488-999f-440c-90d0-155c1686591c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "6e48d890-7827-4059-b901-2c42b0130c48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "572797ba-e6d2-4858-8d66-a2883804ebc9",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64840ba7-597e-47c9-a700-ecc201ca7fe6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81855409-bc2c-4ed9-9c73-0b71eb72a7cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "340f7a6a-4e27-4282-9882-c08435003384",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "35b27843-486c-4442-9048-7cbe4b046896"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a72afa2c-6dbe-444a-a037-008af99eb8b8",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "034c550b-46c7-4361-a41c-4f5198357d53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bb73dd3-b5f8-4bd9-a81d-fc83b522ab2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f727db7-ff3a-4623-9f09-7269e7192df7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "b257a1dc-36e3-4597-a326-fb16d01db987"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed40df02-3160-435a-83ce-cc30a722526b",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6438666d-0564-4c3d-bbb2-da48b409b2c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5eef241a-d4e3-4a9c-bb0a-a8be70436f0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d63871f3-979a-40ff-bfb7-c7a67f7dbf6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b3461a06-d674-4773-a392-08f455d51044"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2c4d5b4-7c19-4568-a4f3-bee54d809ae8",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4aa186a7-5136-4171-810b-e3368f8bdfd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "895e7e9e-fe20-4224-b9e8-9d159d7f2a52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce3e4993-242b-4de9-bf57-cfc373593586",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6b110b35-dc9f-4e35-84b7-73eca3c513f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64684815-4c40-4fef-b4d0-2b0a4929e886",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d30260c-382a-494d-a694-97a73fbed782",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f3b7bc2-33ef-4106-9c76-dc24fb973371"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccd7a49b-2b62-4bd9-9352-378b6908ae0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "509b36fb-5de5-4b10-8039-07e0574e402a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c082860d-b95b-48bb-ab71-7daa2266385e",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d0a083e-40c3-4776-98fc-8f00651eeb0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e51ac98-a924-4be6-ac06-dc274f9d7917"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0819fec7-3638-498c-9322-acf35aa47f64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2a45afd6-f44c-455d-baa8-f988e59aa014"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0b76db3-229a-4425-a47b-832c935cbc3f",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc27d20f-2988-4216-8a9b-2451b42f05d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf731761-37c9-406a-b43f-a7cc8a970050"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db774dea-a3da-4669-8ee7-6765cbee1ce5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "64300b61-4e87-4f4e-a65f-b80c52b81b32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e70f9ed8-cc43-43ee-a51b-7308e39a4868",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "578655eb-ac79-486a-b828-0afac1601fe9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "baba64c8-6fd3-4052-8f73-858ee29df995"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e68929c-dbf0-4852-8d87-8ab8797e4743",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "d2595904-1d4b-4826-b8ce-af353eaae24f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60329bd3-df73-4687-8551-99a0d9b10a64",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ac87939-361d-4a7f-946d-c6bd4fa5801e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48ca79e9-80c6-4e20-89b9-d79f884883e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e13c0c55-3f41-41e4-b46f-e32dd406641b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "849ef3ac-27c5-4d88-91b9-6b285e837bc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40a3f8c2-d09d-425f-8d13-a3f7d59b12d7",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b449002-d255-4e59-98f3-8c91b332ee66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05981ebd-8995-4875-be87-92c22f42a639"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc9ffed8-b8ff-4133-aa97-1170c140e84c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5d3fb663-6ada-4710-85cd-749b7c46cd61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a353187-5ddb-45d0-8e3d-7dda6b7ae6b1",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d821881-84af-49da-854f-4cddcd31d82d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c42dbef5-e7a7-4ff2-9551-bb2f31285b4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f54be06-c32d-498b-8155-ddd9cb3cb760",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b5af0034-e17c-48e7-a452-a326c663ad2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c21dabe-2b9d-431f-bed1-128e0b124791",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "164c8d85-aa04-491a-844b-e9c9b15d2064",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "094858dd-8461-43f6-82e4-9688d8940014"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "606fa878-1b4f-4be2-a61a-9227ea441550",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f32c99c5-1e98-456b-8b07-219bdefd6ebc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98acf463-35a6-4443-8bec-e7fcb6af68be",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77d24a5d-26a6-4ee5-9240-b9c26dc151e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "425169c3-cc85-4baa-86a8-7404262cdc9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6005337d-dbeb-4ba1-9baa-f811b5667cd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6f9e6732-b12c-4740-a9ff-0ea6c2ad35b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93e66910-ab2e-42dd-9a4d-4187d5835c4e",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4000e1ee-64ab-4777-9e43-eebaf7ce5878",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a8ed94f-0ef4-4283-a58c-80f526554b45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c121722-f350-4e66-9900-f6b151c76250",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "bf91ec49-fb0c-477d-b24f-9f12cc8501a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a6fb6d3-95ec-4932-99d2-1beecc2f7cb6",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35cf3578-6a02-4824-bc18-1b7a9bc5195f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1159e366-7e2c-4205-9ad2-2104685aa5f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6211d6db-5368-4b64-bbd1-8b3d56a808f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "966edbf9-c8f7-4dfa-8523-33ea9be12ac6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ddf1243-50ee-463a-8a29-957663218c89",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ac9edd1-5c9a-4a98-9af8-8aec98a3031d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "302b076a-779c-4b73-8e44-6b5421737322"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ead4969f-2ced-49b2-aab3-60883c9c827f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2ef8bb67-5ba3-4b9d-bbb8-22d088f59754"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85d51063-dc8c-41ed-8866-4fd81999b30d",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "396b15c1-5dce-4063-a9c7-56d5d3d0671e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c16ca342-c08f-491f-b5cd-b0dfb65c768d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af1b7991-26e8-4ace-86ba-7e78faebf530",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3c994edd-9663-47ff-84ee-0853d0940fa5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aeaa6712-3c85-4825-ba2b-2bce9e31e152",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fbd799c-1e25-4e37-b81b-68b21ab6272d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35a3608b-10cb-492e-ae83-130655c7b2ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e18976aa-7b91-4c74-af16-b37045cb5b49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2f4ff1c3-9e19-4fa8-97c2-f0ac5a196bed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "066f188c-6164-432b-b0f0-1f038af36b76",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e3ccaad-5cbb-4c2b-b40d-3b0c23c14c34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76e953cc-8fa9-4717-a7e9-227fdf1fbbe6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de12e89e-1c19-4014-a7f9-39845b907c33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8bbe5ee5-d723-42d1-93a0-6abdf2364968"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83bddd3c-0847-4a90-bcf0-a156250af39b",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2e23d1c-61ad-4f36-a4f1-037755684a63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36dc69f2-9328-4d7a-b41c-96b4af41b1df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c459f9fc-2994-4d8f-b969-9610e28899eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "b6f7766a-a812-4f41-b3fb-f3e706d12f16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad235863-7fa6-4e0b-bda9-549d88acbb7b",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b903546c-d417-474c-88e6-905d74d47bd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "244e38ec-c8fa-4435-bc83-b19fe6a763cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92834c5d-871c-41f7-aab1-c22d3b58a831",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c114ffaa-4047-4267-b500-f3e28e8f1fd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fcf1bd4-74cf-4c34-b500-fa8188b0ac03",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fc4f41a-38ee-4fef-895b-3b1ba4afb9d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b790a37-6ad7-43f4-9565-9fecd31d2f8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71e40ed8-1c05-46a5-b27d-773bdc947250",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7b927f48-3de3-4824-b7af-7b0edb9e8026"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c28ef0b1-c8a5-444e-bbd2-17c42d83c058",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e13a464-a4c1-40af-9e35-9deee5832898",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89f1d815-611b-445b-b924-9c1da9e35c05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aedc7dbe-c047-445c-ac4c-37ddf13f4bef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "616577bc-f5a1-4763-a37b-7b81f07deb39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3120225f-47f6-4730-b9d2-571dbdeef078",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f33c2b6-47a3-4c62-91f1-8bdbf081778e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8019d996-47ea-41e8-9567-6050c2309867"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a039c192-deb0-4f44-859f-3d459218388b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ee93a016-be08-4f96-8f7b-a43100f91c50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75ed8853-4861-4d8b-a25b-2d6d8951b376",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28f937f3-cb97-48f5-952b-e6373336749c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3ef6ea5-ebbd-407e-ad12-4804c1bc7e45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7aee8049-6b3e-4786-ba16-75c571467ca4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e3684cd5-a4de-4e26-9ecb-c6e713690bb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "530cd7ec-b18f-4db8-9135-23f62f836de0",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3937d06a-9c09-4740-bb6b-f66cf001e427",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a923311c-b7a8-452f-99c9-c86f6b734b66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49fbf6f6-5d88-4d3c-ad7a-d5c42313ee99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "67382a9b-2270-430f-9aa2-74429dfa7f8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57b458b1-97a8-4240-a535-37b07c3df38c",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4278df40-6afd-4ad5-8ce1-e5cf89a95702",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f99e04d-3de3-4949-b605-c58c0e7e05f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7dd1722-bbc9-4937-922d-c1d8118dc0a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "52b9bd27-e7b8-4aa2-8375-15f489ef8a62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d46e38d-7043-4ff6-ad22-45cd9a91b6e7",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79c0e2e1-1351-4a79-8998-a23f8e32d349",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc3ae597-165d-4089-8bbf-c68745dddeb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11e44ece-7b76-465b-9949-ac3265736eec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "02451d07-f8d6-49fa-9200-355f04ae6345"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73d9bdc6-21bb-49c2-aad4-d093debef700",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9610559-8756-4c7a-9912-e5567ca48d52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10b3dffd-865f-4579-8df5-82e8e4714ab3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9399998c-2dea-4820-b0de-23466aed401e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "6c3dea5e-6acb-4e39-a524-bde5f3c947ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3406a4fb-efd2-48de-a349-4828518c9def",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4ecd0e7-53fc-42c7-a7c1-693f7e7b16fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c826247d-6368-47e6-a087-2e1ab91c2bd2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d4f82c4-e2b0-43c9-8985-9d297fa12365",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "8cba706f-d8e8-4f91-9e99-69378ac86cd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8af644fe-2473-4005-82b9-049273ad2739",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20130df6-ca86-4718-a4d6-d495ce3dce61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "cb15ddf6-8d6d-46b6-a80a-f5f20b7e5cf5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4db7fc7-264d-4cf3-9ff5-e3e1798c2aa8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "9740c741-5ab0-43d5-9f54-52b8bdf703ce"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e92c1e63-0ccf-438b-adc3-cf1b099f1cea",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "aae8971e-9749-4415-a0b2-62346ebd5395",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9307deeb-d8bd-4014-bd84-72c3e0506dff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7cf6dc01-8710-4e1b-9f5f-fd8e86e62ad5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e70034a6-10ad-4dd9-8164-30712a61495e",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8cd60f54-47ea-4747-8cdc-dd08a6af27ca"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7a5bc980-a09e-44a5-8e02-5828e2be86f2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b01dbb1d-69cf-4b29-b025-00eaf01b38d3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "07842c04-e5fc-4547-b27e-9549bc58dfa3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ccac5c41-45a6-4e96-a7cd-842dc4620b4a"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b61c75a9-2315-4864-956c-bc2804170709",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1c61aeaf-13a0-4d78-aa5a-28bdf01b1012"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f831c705-3c79-4ff9-8dad-6d6942ccb87c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ea7c22a4-2f94-44a3-b7d0-8b941feaf0e9"
                }
              }
            ]
          },
          {
            "id": "f64e39d3-167f-4881-8d6e-db79a7b06c5d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "7b4d470e-c9db-4160-866e-6fad6111c85e",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "1777608f-30ed-4c69-a464-0910dbf952ab",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fcf02d9-15ec-4e47-b8e6-e1bb3b3ac115",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "48927ccd-b49e-4dd8-bf8d-509a82a65c15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f547a673-04e7-4126-baa3-86390a0e26ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73c6f063-4927-4167-b7fe-f5e380391f84"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "edf6f3fa-388d-4261-ad58-b661d71bf53c",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f8d9decc-afdf-43af-9687-5a14b986e2a8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bc6f98f2-a466-433f-93a3-ad8efad9c5e3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8b882bd7-12d7-4e8c-83fb-44418403b82b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "8c2ed653-938d-4205-938d-7b2444b7cfc2"
                    }
                  }
                ]
              },
              {
                "id": "767a015d-8157-420d-81b3-f813d1c2868b",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f043857a-045b-4886-b372-a6aebdbde737",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1024ef9b-dd7d-4571-a812-d0f43c628196"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "87691bd5-6119-460d-81e5-9ef146ce0222",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "35645dd0-66c2-4de8-b516-cae629c43be9"
                    }
                  }
                ]
              },
              {
                "id": "f6a423a9-932a-4d3c-a5eb-ee880bf8a9b1",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8af638f7-63ef-48b9-b7ff-5e344f0c873a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8f454862-b6a3-485c-98cb-ee373e520306"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d520a23d-a9b8-4ce6-9330-7f9299f0b172",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "9396db7c-e422-4e99-a26f-30196452b0ab"
                    }
                  }
                ]
              },
              {
                "id": "786f68c2-4457-4a54-bed3-0644cd283ed8",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fe30d231-c0dc-4cc6-87d3-b7a42febf721",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "227a464c-82f2-43d6-b4e4-f6693f2c3c0c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2a273445-c254-49ef-a330-0629a93c1c9d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "89c33719-b876-4dfe-b2d2-aa4355413186"
                    }
                  }
                ]
              },
              {
                "id": "2fae11d2-4cc7-45ff-b12f-b14a8348eeed",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8c7c1816-dc75-4700-9dca-b7a0f36b88ca",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a5374fc3-979d-4ee7-937e-8bdf3a71a7ef"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d4dfe1d1-1f29-4e8d-9d6b-b49c5677ea1f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "2f74d1a8-376e-44ed-841e-9c9b611d4fc3"
                    }
                  }
                ]
              },
              {
                "id": "e25a9a16-1e3d-44de-b9a0-b64d6c08beac",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8a37425d-4b36-46a5-9f1f-d9cab0dcf57b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bbcb5536-b055-42d6-acf8-6e0515e44827"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4388a02d-394d-4d02-88ed-e8200ddbb63c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "310b8453-84a6-46c0-9a7f-601d1e51107a"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "fb6ffe2b-c088-496d-a45f-d5133e797f32",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "320dc0e1-e88e-4037-9a53-c4654faabc39"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "9c9deb38-3eef-44a8-b871-b182df433a75",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "48f02a11-51e3-4d1c-95fe-eb3747dbe5b6"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "51617302-3086-42e9-b871-50902fd76dad",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "8bd6b7aa-bc50-4d03-a712-8f2e2ac4a1e1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "67a854b9-0784-4d3b-920c-5293da5ee6f4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2bbfb00e-d10e-4947-ad15-0c30cba6f264"
            }
          }
        ]
      },
      {
        "id": "998de9bc-0922-4b78-84ca-e4738c791d7d",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "d0f2572c-ce39-4579-a322-51f6a98d11a6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2676b49f-ff38-4ea4-9e42-d219879dfb51",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "2aab60f1-1952-4445-83ec-3b319f4a49ea",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0400e83-492d-4895-bfc5-42dc368b2c68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71a4c0dd-1100-48d6-a147-21b8ec8e171f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc11eafc-7d4e-42fe-ac57-58cbd80aa412",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "e4b9352e-0563-411b-a179-125d60b83adf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecd972cf-c54c-4499-a4c0-61c90022fae2",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ee71b6c-fd29-411a-ae01-d38bede7be70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96f24972-f377-4b5b-bc45-77dd1022a357"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bf27dab-96f0-4119-afcb-1688ec9f9db4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7093ca7f-af56-49b7-9aad-87e6d916d662"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e85cb1da-6810-4379-9ce8-265f5bfc4fbd",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44636e15-074c-447b-86a3-c27766ad7ed7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29d2c1d2-03c4-4563-802a-05f09e8a5372"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "927e2d72-c8e8-42c1-a046-a01fa6f01d0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3ffbbeef-642c-48a3-9b2a-e309449dbafd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5763f510-60a3-48cb-8dc3-21669f7484a9",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f33ece1e-16f7-4ba9-89cf-a3e6ebf08abb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "435de6f2-8200-45cf-a539-7565ee7386d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a20024a-917f-4321-bd78-09cd028140d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f421bab4-3e00-4a02-9453-8573c6700c7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9ec2db3-49ea-439f-97f9-1118a21663cd",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb758668-3ba9-4db0-926c-390956604097",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b48e0adf-b207-4fab-b4e1-d0a166ee0b2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27fd8139-6c05-4433-afec-8e9edba6a270",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ab8f3b1d-cc1b-4655-bc72-5505be443175"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90de5f0e-66ae-44eb-b254-d708094c45cc",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f14313d-244a-4a31-8f51-34edf96569dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25af68a6-ffc6-47f2-920c-1b91a53b80d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a476a924-4412-4534-92c3-33c52375eb81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "bf2ab3ad-5028-4804-b435-38f0d83158b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3afacfd3-ca71-43e6-af6e-505b99674902",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca39d76d-32ce-4392-b424-31976f652d26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79b67179-c952-49e9-93ba-7d88e89e1348"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce3fbd1b-5350-4957-aa9d-798af9cfd799",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "436fb6dd-bc92-45e6-9add-00a299ccb398"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38761ae3-3a73-4f06-8964-ffe7f66a0d93",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f01eb43e-0bcb-4eeb-839f-91be4a254385",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4c4de83-20e8-4451-8407-11d55a27cf6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b44c3e0d-0627-46f9-8de9-01215f32de4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "12fa708f-d955-4d61-8ce5-fabb2e7f9981"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19300db1-6dc0-4d58-ab27-ee7c7ecd5990",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74e445ee-4478-4a1b-a0e3-1f2e30834637",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89253873-adf8-4db4-a485-32095894cb61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92861aa8-5a17-4d8e-ba20-5170c472b4eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "198821ff-f89c-4700-ba81-f407f2eea81a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48a82abc-77df-4138-87b9-cb49a05a91c4",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08907e60-fcbe-483a-b6c3-d1001a6c3516",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eaae0679-cc2a-4700-b540-0bba44f6cd2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59c66e9d-dec3-4f90-bbdb-7d1840edc238",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "74e24a59-73ae-4202-8508-81811b07db75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "878d90de-b2e6-41aa-840e-74f350490195",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2942d9f6-b2f6-4df7-b280-60b7fba2a418",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e760b677-9429-4fdb-b0b8-d7eaa51c3bf5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1eff8810-b480-482e-8a3e-fa23e71dbda2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "35b2d953-70d2-4c7e-9201-cf6ed7d6a882"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c07c84f-8991-4261-a059-82a42685c028",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22302c51-ffd9-4a6c-8a74-f5d5225684cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da932576-cba6-4df7-901d-b0630418b3f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bdd140d-49c9-4982-8381-9cfa3403578a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bf4b40a0-c4e1-40f3-8648-c6d3e276b4c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10a6594a-17e6-4f71-abe0-9a966f090a16",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1dbc688-ad50-415e-9236-e5060128dfc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28cdb886-0408-4396-b10e-253093039a25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b16d2ffe-8f8e-4363-ad26-403906b0a0ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "729f84cb-a54e-44d6-8e14-a727c244fa57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a76c6e43-ddf9-4e54-8064-9baae0db497b",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc602535-cde8-4924-a591-8fac00e904c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88eda68d-ba3e-493a-97ba-63cc78daa40a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50ebeb4b-a999-4f52-ada9-2b289323404e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "517e59fd-5c06-4f06-b213-ea11c8facfeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8fce812-2832-424c-a5ac-6f32e6749041",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02382153-8844-4c5c-8a7a-53ef72c085dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3af4cccf-1c08-4ec3-ab05-bc2156ce6e70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2cd5c30-12ee-4680-9c2c-607bf939ea85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "2afaa635-91fa-4e6c-a4ae-bbb487fee08f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6567303a-2ef4-4f77-9966-7137951b11d6",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3354f0a4-5aea-4e3b-87a4-a00cf4e027ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca4ac230-5cee-4b0b-8a59-30b3a347f871"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25dcba28-47f2-485d-b17a-fe060398f064",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "ff7bd400-eb78-4035-9e11-abb3ff5e49ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cde7e16-b4f9-4a99-8020-e7be46d95aeb",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38b19c0e-0fc5-4474-9a81-6008e99ebb25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c86e1b4-f7ba-4f03-b968-9f7de94d30e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1195b298-8528-499f-97ad-b7d386b6fc93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "5348330c-1625-44d8-97a4-de9eeef36679"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4f3e20e-9f90-48d7-b93f-b7d02cca6795",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "765a22dc-1bb6-4ee6-9105-0cf90030b8fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "481fb47c-a91a-4609-a335-feb2288d05c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e5534e7-df93-41b0-82ee-4144a7ad7842",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "8ca3f8af-9fdb-4d95-bd4b-f56a032fa3a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb41a570-0605-4cf3-be19-1a160e6246e4",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c9a384f-5f66-476f-853f-ed8f491eb894",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99354559-9235-4549-818e-4cd68427f71c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "119ee8bd-f855-4c7a-b7c8-2d22b7145490",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e774ac1e-62a9-439d-992b-13a825dedbaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a82f36a2-9f7f-4bb8-9e3d-32d8c64741b7",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5243f6b-11a6-4e3f-b5b3-4e4ebb3ef7a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c722780-96e2-437a-9057-6c78bd363014"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95ae032d-ff77-416c-a761-2342a42336b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "30c51e66-2889-464d-9c0c-cc8110428abe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72d1252a-ede9-4fbe-95aa-eb5995e37490",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6db958d9-7533-4960-bf98-7d1bc427cee9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28c44c77-6332-494b-99f2-35af874bd454"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a76cbbd-ed60-475b-a231-3e5b5c34bfd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bce4f77b-7804-420b-b1fe-0da89740b9b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dac5fdf-78c2-4048-a2c8-b827ff8621ff",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26a8fa65-bda8-4007-92b7-91d8b01403b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4031e151-5dba-4c48-bd50-40664a849f08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e9f9f49-b202-4431-b595-08b36b012ad0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "93a2c496-15c4-4f67-b776-425a76f893aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45344e68-81f3-49c4-9fac-55faea81186a",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e943e96f-679e-41f8-8899-979a91b7ac16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3af623a-3a9f-4062-a026-f25ed58e0f72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d74c1fd-b194-420d-a4ea-87acdf225a31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2c094452-dea9-413f-b654-dfc87b4d1915"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a783d8d-bb5c-43e1-be18-883e6e45aec8",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e242ebb-f392-4b5b-91b9-699de0656f2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f203eda-0f75-43ad-bf49-ca8da8756068"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfd1e443-8b21-4a4b-81f2-43ece6c902a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5a25960b-fbb1-4584-bfed-cd9999a12c60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10dd08ed-a867-4d6c-9a72-c182306b2093",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77a48142-a3aa-42cb-b111-f92b9a2f9474",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c974f743-8b62-47dd-b580-d8a0eb983a6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a2c0e45-80da-4dee-9349-59357cb786ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3e46999e-7b64-45c5-bc86-d034e0a9fdf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05afed4d-ab9f-43d9-8230-d4e122f22ff4",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c613dee8-db19-4a18-897d-1796ddcb1db8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "742a0d8c-96e1-4c76-899d-ec54682efedb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac2a1731-3676-4731-9acc-bcac90fbbe1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7f3ccc39-ead0-405c-ab4a-21b85869f311"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb648383-d0fe-44ee-a6d3-6cf506ec92fc",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e208eaa8-9bba-45db-8287-3a9e69df77a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b04bbd56-6be8-42ab-81dc-b4dd88da72e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bdd33b2-953a-4a57-9f1d-93a522399cd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "54af5fa1-9f98-4d27-beb2-cda0db04655b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b812ad8f-ca74-4104-b47b-5abba3b0b136",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ec3c103-46aa-4a3b-97ba-e3b4aec4e010",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d00a72ab-7249-4a87-8354-108fc14d3c1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8b777c4-4683-4055-ab01-da7698361941",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a3e9071e-7af9-4687-8110-78fedcfdc12e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5814088-3bad-427d-bbd4-78dbc126e8a3",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48ea890f-5293-46c7-a02c-a0c907b161fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78b343d9-ef86-4db5-9591-756796e6581d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ca08fd8-6373-4f5c-bfe1-8c3fc4548c0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8871e367-fd6c-494f-8fcc-7ac9dc629fe6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63d76c23-d567-469c-b033-45397f6b8c30",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17c0e5c0-15d3-4637-ac8c-0a891d4c6855",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bbf9470-d703-49d9-841c-7fdbc2868b74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0cbe928-feb2-4b31-b852-e6ec5948c8ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d59db75d-314a-43fc-bdb0-3fb0a34001f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3d01381-24ef-4618-a812-1575b03c84ae",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3277b7ae-3b0b-47d0-a93e-97ca9f52db26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d0ee3e3-dd4b-4bef-b02e-b1d26728703b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c601fd1c-f16d-4dc4-ba72-304a4d0812ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "70055ce9-3ed1-4a28-bb74-0cc3c44621b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4188823-5d19-441f-9890-195c78022181",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "504a9787-3890-48a7-b93d-035d1e686389",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "006a94ec-e97a-4278-ab6c-b0bad4aa1ef1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fb4b693-74a4-4758-a6d2-434042e25702",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d476fe74-1512-4109-a0fa-131b1148e0d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b34edc11-9a37-41df-a322-d9bce239f2e7",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4aa70d3c-eec8-4046-8c2b-452e720ec050",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37c9605e-ad86-4c66-ba37-40b76e42785b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7975eb58-c453-4543-a9ef-484621e0f3e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "acb11d5b-ab88-4e37-a2ad-438d3167a354"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a8782d4-99ae-47dd-8986-4047c1b25816",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b913012b-6822-408e-a932-e826dff7fdcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68f11592-190d-4a00-85e1-3a0626bcbf17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11cc4892-3161-4062-81c6-316aea393b01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "da792e08-a50c-40cc-9d4f-7d172de69cab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91a81ed4-1cba-4bf3-aa04-0c8f17fe0516",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d4f34ca-afa4-41a1-bddf-b97af8072221",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a072dc24-21d1-42a4-9ee6-6dcb47734ed8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7366daca-f6d5-49a9-9a6c-47369e7c3515",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d4d849f8-b24d-47ce-befc-f7a6859d7170"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51a06b4d-8743-442a-b696-1c7c8a722dd0",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2fbf01b-5209-4b18-93dd-2c53b0260fae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1c7507f-dc78-46d7-b002-0b1684e6cafa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb2ed582-307a-4827-92cc-58af2d24b31f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7d5e0663-257e-4829-a4b5-e4962cf82212"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1c2c18b-f1f8-47de-800d-3ceb270b10e2",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "268a7991-70c2-4f09-b8c1-c1de858a52bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "500b6261-06be-4006-b530-e3d365ee042c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05118228-71eb-4591-a913-a10a15cfd064",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7fc4770e-ab87-40f6-81f0-9261a6cce5a7"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a5bb149a-a23d-4caf-ae80-d89f07cd5786",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "35fb1767-5435-4ff7-8ef4-fe639ee8129e",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d04cc67e-d5f8-457b-95d5-f7aaa1ee02ba",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "732b6954-0f7c-4349-9357-bca79edd0f3d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5ca2740-aa91-4c09-b3a2-4566dab27951",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "39068f48-ba10-410a-887b-06f53dac8d93"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "324d963e-7b2f-47ce-b478-2ba9082536cc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a31fc7a0-c3a8-430e-9ead-78bea947b4dc"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6095bc5a-95ed-4fba-8a7c-c2b85516ecd1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c84bd41f-575e-486a-900b-bef4747323c1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "93a385bf-76c9-46d8-ab32-9e3716d5cba7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "858f5d55-3936-4d9d-bde0-5161ad115338"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fc68fa26-4c2d-4062-9a7d-3ca6bb0724dd",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fd952845-1fc0-4428-9415-a7d09efe1554"
            }
          }
        ]
      },
      {
        "id": "1f493630-e537-414c-bf16-1d26aadac629",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "5a02ab29-fc16-4b1d-b668-e5efeb6be406",
            "name": "Negative Testing",
            "item": [
              {
                "id": "caff42a7-01cf-4b38-86ca-75cd1d3fa20e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "c9ece574-689a-4a1a-ad42-8eebc08201df",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc7758e0-058e-4a87-87f2-800940c815cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb847fdc-d772-4022-b52e-26ba3cc553f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d33dc66-7a6c-40bd-ab6c-c4877f25233f",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dc72ca5-de4d-4ce2-98c4-30b79a0da354",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acbf6dac-38ea-4b9b-8087-3d66a3114aab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "765fde49-56e9-48e0-8a49-88bb96f9f9f9",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a86faa6-fde9-4651-b7ff-42453e475779",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "880dfa56-0b92-434a-93a3-df7aed762320"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9288379a-6f81-4adf-8187-0764c7499f90",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74ec83cc-d4c5-4306-87d4-e60a54fafe1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6d539bd-2947-4a3e-824b-af7dfb0e4335"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db3dbf4d-5815-40c9-86ef-f8c936ca86e2",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc3d5c10-ad03-46d4-89c5-5ca81a875c60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc645010-0048-49a7-90e9-d6504c58dfc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "427bbcdd-a5a0-431d-af32-b5041ec087ea",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef21f9bb-4015-4f2c-aa33-bcfda82bfe91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef7791d4-43f2-422c-93f3-82c6ce896120"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b4d603d-318b-420f-82bf-50129fca6976",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a91d349-9fc9-40f9-a3e3-2994f5b31386",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6933ef61-2b28-40d7-ac5f-95b941f78ce6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea014bbf-4caa-425a-96be-66e0fe541919",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37ea3fc8-a74a-47f7-b2ec-cdde1d948e10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90fb8746-9cfc-4e1f-9c06-10040025da1b",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5276820f-8d4c-4433-9772-a2951f6a19a5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "75531d86-aca5-49b5-b7b2-85f8c8f336a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0dccf54-80ef-426b-9a3d-e14d111c6ee7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7418c93d-d660-4f63-b372-194538ba96f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4220eb1f-0b71-42ab-858c-17b9b60e4b85",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21ac4077-c632-4cac-9c98-f6f245e3d73e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9f74f534-5025-4164-a343-4a2518f45839"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4243654-484d-48d9-b62f-865bdde1f054",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6201cee7-0ccf-4bac-a85e-768c4de509f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78f7fa97-7d17-42bb-af4d-e6cf3e182edb",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "830ed466-5fc2-4234-b0ac-e1b7fa280c81",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "57d83385-b39f-4d8e-9078-c9ff954f98bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7eb6a46f-639e-4f49-b2c2-6f121979ffe7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "311d5654-5307-495f-b410-807a313f62a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c461da1-44c6-4028-8972-4db7d4159622",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1368cc78-ec92-48ce-92ea-8859c313103d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ddff483c-3f00-4f85-b90b-05b7936a4631"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce0c89b7-7e9b-4979-b64e-c74090da332e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13d14084-336d-4fce-aa4e-3bdacf6f84de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a56d0ed5-af87-498a-92b1-2bfb0d2b29d6",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d375fb14-d009-4dc5-8901-7c1739d1c0f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "235f9768-491f-4937-98e8-3e132fcb38e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10c5f116-5058-49b6-b4ea-d2112163d027",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bdf522b-215d-4f15-8bfa-a0fc3e16c762"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f06413c8-dbf9-4c13-9227-5ceaa9b08ffa",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb28de39-98f3-46b5-931d-d71d7f670881",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c005021d-799d-4e24-a972-7d28f4b5f7b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb7573db-cbf5-42fe-bdb7-f90437ca1827",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05a018ec-56e6-4ea9-94c8-235c5cd943b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e843ae28-7287-42fe-83ad-040c19f10fa9",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba4aa590-0d84-4aa2-91b2-de0f827d13d9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e67acf8f-7b68-49fa-a47f-100ff3eeddd9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20c5f045-7544-4bed-a229-d6179388913c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa45179c-e22f-4a78-bf17-542877b885cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7a973fc-3b6c-4df5-bb41-bb2f90371a5d",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82a64531-6d31-43b9-b402-f03c7cb84b88",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c611fe18-763e-40aa-8e18-9abefc9d65e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50760f88-8f49-4b06-9037-7e7c2a10654e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4340e02d-ea10-447a-82b1-67ea4e39b936"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe3fbae9-7399-4062-8578-4b1f6e943d48",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "921707ff-2166-4094-b748-1f1470da9990",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "129e9e98-8249-488f-b958-e6b31c1aae9b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0984be7a-588a-45e2-a153-395b2d44cda0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0c36b82-d5a3-4aad-ab53-5fe7b811873a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "253465e6-f661-4d30-bd5a-b07d14777acd",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed8c6b2b-00fb-4c4b-be60-fd56effefe2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4b8aba8-0394-4142-8c6d-c84aec51a4f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9568bc6a-3869-49ac-9fb6-6a6dd4c7bea0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1d37b91-d852-4596-a01d-d8f934365d89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00870fc0-5103-4bd8-bad9-072409682e76",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52f23623-0775-4ffa-ac48-e9bb69067992",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f00c6d6a-2d7c-4f45-8008-44ed11978ce2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf17f9ae-c74b-42e4-b89c-202c472eeb62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a160791b-2292-4d3c-8e3d-1eb40d3ea3ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2bc89eb-43dd-4a27-bc2b-b8f9c5e15378",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b43074a-2b9b-4fe4-b06d-c25da8d9adeb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3c81d75-3a87-45cc-97e4-8bb40a18e76d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74d0ad1e-1666-43ef-ae02-f8c62372dbf1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "923914f6-c131-4312-8094-f54829d8ccdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "778d8705-0127-43aa-b64e-ca8e7c42a0ee",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0a4651f-5175-46e5-93c1-ca8975e99954",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "795d8489-3bae-4347-b89c-cd56ddcf8aad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0d3fa21-dcd6-4e41-b696-434093d0226a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbb52ee1-60bf-4380-895f-a9903a23b573"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99b4e575-fad9-489a-8453-06cc50c7cff4",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "779d108b-0d16-4a0b-9f95-8d2c691fc583",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff3d53f2-afdd-4231-9458-e1f2a502ff64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90b0bec7-2395-4644-bae3-93e4185c33d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc3d3c65-8f87-4ef6-9148-8e348859feb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6648504-99bf-4038-898f-026758fa8af8",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa946aa8-d7e5-4d0e-a312-f8b7497f6ed8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "754a2224-4dc4-4d5d-86e8-864966af9bb3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1ef5034-7c2e-49fa-8b5f-b43dab4ad005",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f826df7-e01c-4abf-9853-6adaaa076dac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15dfc8fe-233b-47b3-aadd-2f8170d55866",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a076e20-7dd7-426e-b227-f7e1f44c31c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e89cc799-b7bf-47a5-b5ad-a2d5349d2503"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71657319-092c-4e41-a053-4b1b957ad853",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9be7164-c74c-42b9-a767-c3b0d892bf83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6954150-7761-44c5-b4c3-35edbab570b3",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c121064f-7260-48b0-bf3d-ca9e815742ca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d8b0c5f4-ee1c-4f41-97fc-38a3107c800e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f68de9af-ba35-4363-9cff-bc29e26fddc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4096f2f0-e070-49f4-869a-6d730ba87c44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f54f4f78-862f-4dbe-a2fe-f4794fbfafa9",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a43cb0f-cc72-4c1c-87b4-7328d118e9f2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b8d698e9-7061-4529-bb83-f598d10d2e66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e94d9ee0-2921-4af5-bc15-17a39e40a64c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b5c528c-cf48-4dcd-aac6-85fc94e89cbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1da5312-5c1b-48fa-8a3f-3855cb97034d",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d78e4bc-1aed-4597-a0d8-09a6e2235fa1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5b41e1da-6801-49be-b160-ee8560f02f2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b274f1d-842c-4279-8f48-eed5266b0f9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a535916-ed93-41e0-ae19-791937d8c4ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a9189dc-71c1-486e-bf9c-f7bffe44729e",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8d7eac1-d860-4f6a-b09e-643f2eaae662",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "91c3d83d-75d2-4f67-8012-b2ca336d4c0d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85b9d389-2f5e-4e7f-ae10-fc5cb7e4ca50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4f3344c-50db-41ee-bc57-3f387069cd05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62636528-e97c-424b-a5cf-85b0e8908f4a",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dccbcfd8-24d7-4620-ab9e-8d0ebae59a74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6c09e78-0abb-4231-a71a-bdce3738af57"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6d8d8a0-066c-4fd2-9a9c-d273c5f46cc3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a645bb4-71ed-4b07-8c5f-62f402465f9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a544768-0960-4335-87f4-3566432fbce2",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eaf85ef5-9198-4fcc-9f07-11815e53ce00",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "774af668-c959-46c8-9a87-ad5d81ac488e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2714b67-7b2f-4f06-85d8-df5a1472299e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6babdd89-1c8d-4349-8030-ef17fa318753"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da6a7f51-eb31-4905-bed6-c6cbbf878804",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d942b045-0f90-43a1-aca5-8a299c12d4e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e05f8833-ae77-40d5-aeff-ba839fe327ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d7f77ea-7b0d-49b2-ad25-5bc32e2b5a07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7a919f9-001f-4e4a-904b-6e2ba2732c0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a003cba8-1f02-462a-9191-de0254f2d880",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edc80939-6343-46c5-a6bc-66f937d3470e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2710941f-43a7-4dd2-80eb-894c5776fd56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f089434-9a1b-438d-bca1-ae76123f5a9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16baac33-00d4-42a3-8af6-188668a4639d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d719bb77-7eac-4d2a-9f0c-884d271eb314",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "115e6948-47c6-4b50-9ee6-2dff2d13e121",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0fdc689d-7eb7-4927-9f9b-679f74b245ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00000830-b9eb-4cd7-8726-8feaccd26889",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "276234d3-f648-4729-acfa-77d660174538"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff57fd69-a4c7-4ea9-ae39-696ab1024091",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0148922c-cd08-4cf0-b008-c0d0ea6beb95",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "86f07ef8-0d61-477a-aeec-b76c6ca46b77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e594e1a-34c6-44ed-9f51-bac478182d85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "703cde9c-11b5-460e-b401-b4dbbf858f3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b846205f-a576-47e6-9e4f-5433ed2895f1",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "908c710a-99d0-4c79-ae72-7ae15751d0ca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2ed898c9-1325-4087-a50e-7c022105e005"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb305c37-672f-45ef-bb9a-2c595e5e205d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b297c2b-b20c-4423-9790-fc2e9180cacb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "313e7744-2faa-4ad0-a33d-fba398077758",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18fb0ca8-5bb2-4e88-8f9c-af5047f13617",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "163a2d58-4960-4494-a4ce-4b0438d99e79"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c5a821e-a58a-4199-911d-75bb698f174b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24c10bae-8aee-477d-96fe-080ebac4549c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af1eaff0-8bcc-45be-aa6c-6f1b0600f521",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a70d00b5-d3f7-4ade-8faf-09e84f1fa36a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6f7622a-b017-414d-b804-069a3430bbcb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d941f806-e10a-432b-9f49-fab572809a9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "424bc430-4faa-48d9-937a-d29caa8a79b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee341f1b-6ef2-405f-a635-609badebc512",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bcab649-15d9-48f9-9886-dfe931e8b2a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34af1b28-130a-43cb-83f0-c0e3cd6dd666"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bb2735c-97e2-47ba-a1f6-2251d73e77e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "252273d8-be37-4fdd-9931-a1f1ad1d1195"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a63d7dc-11b7-4e62-9e27-e6c3f39891df",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1b1ba85-0450-40d7-ad3f-78589932bbf6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d98cc0d-ee9d-44b9-8fff-8a1a75e6aa6f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a331902-b19a-4250-bee2-b85c2eb4685e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "349fffa0-04a3-49df-868e-8bebba0ad486"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aede7062-c31a-401f-a498-ea56bc97e6b8",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24400532-6b57-46fb-aab8-7e10d150a6a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6b86382-0099-4bde-a21f-d9ddd66fc589"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5ed2929-8de7-42fb-aa40-7033b0a62671",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45603b20-6485-4fd5-8381-01f2074027e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "582aad04-111e-4ea0-962e-51dc8056a953",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83a51edb-85eb-4ebf-ba43-d6a69ae30765",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1fdb6b4-e5ef-436f-897d-412728720b76"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1bb8ec6-2b8b-454a-9205-a31f28bfdda7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7036eed4-6e1a-4878-aa3d-24e6e81b7831"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7074def0-87c8-4575-87f2-9b7382a9fcc5",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d3f9b4e-e9eb-4a37-b3f4-27c762062181",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd07d599-1e97-42c4-a4cf-5aee5332a3d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c8c4ce5-7aa7-4801-ad1d-9df3f5d9a7eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbd1028f-444a-423b-ade6-c91d4cd41b02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71ee4eb4-6ddb-4ed2-8d49-65321ece58d3",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66f922f7-0b28-4874-8d95-d5178385ee6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a750ba11-8797-4f23-ab54-ee83ad3bcf38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36582502-a7a9-47cc-aa49-84a6491bbe7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b7f7ce9-8b65-44df-b6bd-f878f916b880"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89a57541-b25b-4cf9-908f-ada2a87a7a11",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dc4ac77-b101-4a3a-99d4-09e394d37a1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73e39f5e-2333-496b-9bd9-81b8a3d57f32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb2466b5-0f63-4d55-9831-360fa33e6c9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95b4c91a-05dc-444a-8059-71e2bf32c8e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b97905a-df78-4214-b6c4-f121e94f7e8e",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b7e02a2-2898-48d9-afa7-8180a902ca1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0fb41096-cb4c-4cf5-9b28-64b6d3221f3d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62b11f11-bb7a-4691-b03b-7dd51778ad00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd734ef6-2a65-4ad9-8496-11c6912b7c83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22ad1827-fd61-4345-88dd-c59f91979559",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cba46c0-f278-4b45-aa36-2a4c8f0594cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "def99845-8baf-4389-9c71-04061e89b20a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ffb93fa-2350-4216-b28e-62eef8d3ed9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae119cea-2acb-4983-9272-3789f1ea9570"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33fcbeec-573f-486f-82c6-bb10834e58a8",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e044154-63cf-4a89-b21c-fe4c0ff2ed44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35203c1e-052d-423b-bd01-28081ea738a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e36a3486-0b94-43e2-9b0e-27c8a001633d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25bdd424-f3f4-4cc8-9ab7-a2da977a5ff1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fa11765-ca1a-4015-840d-4daed55c1bd9",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e52874c1-3223-45f8-a895-a222c3c4979c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "340bc470-a710-4968-a31d-ffbb98fa3e77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ea4e7ca-218d-4ebd-8822-40dc1923c969",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00009613-e771-4a5a-a673-fbe325ca6845"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc0dead3-2f2a-401b-b324-6626b718b838",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96c021f3-ba70-4be9-9ca4-66d1e6e27c6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b858ca9a-0237-4853-9277-b599ed593cbe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2009af4-8fad-4e6a-b5f2-7b63a672a0bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21f3bd9b-8562-47b0-b0bd-d473a639a5ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "caef11c1-07f9-4c7b-9b34-78c7ca4db4e1",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5af3cf07-c96b-44f8-82dd-9952a4999741",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "769ffb58-f085-43a2-aba3-d5c002a3a641"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e43b79f6-22c6-4757-8055-987664331d9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d936c4fd-abc7-4d24-a314-f8e259aada73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a57c9912-a7f9-428a-8371-3682d0f16417",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b175c3cb-123b-4b6a-8150-de4685378c0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30218223-346a-48f2-ae9a-dcceaaad6854"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b306474-7503-4fff-a110-193f349c12bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ca94f1e-a49e-4efe-9c29-dac9a27cdb03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de7c92ba-d851-4bcb-b4d0-f18e9a86c808",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0011fec-afb7-4214-89f0-f50faf036eae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df60f7c6-c44c-450b-8932-7cb2bd614164"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f843cd41-69e6-4da8-ad65-e14567197144",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d7ec883-efff-4955-9ad1-b9b3bcd7f7b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82166dfa-97f6-4581-af9f-7dffa156bb85",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ac8be33-3e20-44f3-aafd-63b991e09187",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a13940b3-e55c-4222-823e-e2be2e3014e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "318450a7-1586-41bd-87be-9b3cd11e591e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79d55d99-7758-4ebb-9bda-b461e94c5319"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c0159e1-8a4e-4cd0-9671-125b8dedbfd5",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d884faec-e24e-4d34-8ddc-39611ad73eb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e00623ba-7d32-4a53-9219-210110980821"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1586df8-7699-48f6-ae7d-fb6700a10a19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "209b54cb-1be6-4de2-b1e5-107ccc764883"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43262895-d314-4af2-9341-d641d1c8a75c",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8325fab-c5eb-42ce-937b-461bd9cc02fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "264ed73d-e5ec-44f0-acde-08d4e5af540e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a544358f-ba0b-4c27-8a18-75fa31816c89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c21b83fa-cd1e-4f53-88e1-3e77260c7e48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "756982a9-b8fc-4f4f-8b97-f68455b6a363",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "332e1acc-6ff4-4182-8678-3cab7853b538",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "095ab794-ebfb-4912-8d58-b8f6288d2b52"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0c8e3a3-4b07-45d8-b9af-ad6882acbb50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ad770d6-a904-45c9-8207-30979b1b5e0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cacc853-553d-47ce-a867-31c3cc5c1c88",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e636e034-db58-419d-bb81-3e3369f96cb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7ad5b0f-c0b7-462a-a08d-eb6d51aa4e84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54be6fb2-fce3-4060-99fd-8bae8fae8106",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32c64979-30a1-4841-9eee-50a06e8c5781"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df031ac1-10af-4daf-8b78-579300eb208f",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab364d14-cbbe-4b06-9d37-3237384de5ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f781026-f27b-4a86-826f-e596b38cc518"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8900aa48-04d8-4e9f-8b21-47f249b91a2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9aa57994-f165-435b-b6fc-bb097d66aa9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82a2a4f7-8fbe-481a-a7fc-c875934fe2a7",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95404d92-fd42-49ca-a443-8f9e97afddfa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2187b19b-cc48-4250-b5b3-37973312142a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "004e835a-8cc0-41ea-8eae-437bf7e71a6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a08f4955-af12-43f3-adb7-60f3ab1231f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f49cc35-055c-4682-a2e7-0291b0ff5d6c",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e33f776a-b2f7-4fc7-b2c0-bd65747419fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5f507c2-b6a4-408c-be2f-9fc99a769188"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf1547af-13a3-48fa-a27c-e28a1264d998",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e0c6cbb-a2e4-4bb1-a7f0-a0ecc879659a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "024917b1-65c1-48cc-bad4-c1a356578d6e",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1d14c4a-58d1-481d-8404-efafb5701317",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36a299a7-fa88-405a-9b09-9a69b17e7995"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfa3ee71-e436-4207-bc81-dfcfa3ff30e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45d66ea9-1e3e-4838-b1a9-b24d4f382b3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdba3537-4ea0-42a5-b7eb-2597f11e8ab4",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33c7dd3e-5069-45b4-b7bb-33c63b96de64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0005e3b8-5004-491f-8144-f34b946ccef4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7d80f12-f2d2-40be-bb58-e5d8e42dd28e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bc2a5a1-07ec-4830-866a-fd36b38701d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9470dd9d-b65a-4524-985a-91a1ac8ad960",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8da5b37a-6975-47a5-822d-6e7c350005f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a7e3928-fd51-4aee-8696-348f5c9bffb8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1550c6a3-8d6a-446c-ab44-650c1051ac45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "446ef84c-a7b4-4c5f-bc6e-9da0813ef872"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d1ec00d-d7b6-4455-98aa-492eac0712e3",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fb7b658-cfb1-4124-8a65-0aebcf1a1654",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eefa7639-e785-4ef4-b31d-b861ef433161"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2574f2e-2264-465e-b5b0-a19daeb0d377",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60e69689-ed40-4eeb-86e4-c9f9b0237da1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fb52c22-b4fb-4d9a-9029-c8921d506b8f",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfddd945-d743-45f1-84d0-5848700ad326",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aeb348ef-0ddb-431b-a969-ab016765ad62"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7aaef6cc-601f-4ad8-9a48-7aea8d4a5ec9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54667753-820e-43d3-bb5c-121d34f26e8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ceb2311-350e-4a2d-a5c2-cbb97748f8a8",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc587e56-6a25-4b1e-93f7-5d6a3d1eb33d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4bfad570-9a0f-468d-b2a0-b815b1750dc6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7fb5a6c-f7c5-4a7a-9d62-83dfce10bb1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e50e011-6c03-4ba6-b8e7-09659dcd268d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c11adc97-c6a1-44dd-bbdb-0d8f4cc65281",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d2dbf23-4cf4-489f-a2c1-0fc2b36878e8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "44ac00f9-5e14-44f4-8dd1-9350c833a0fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a49b4c6-a454-4e58-9072-3710ea25984d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c8ae68f-931d-442b-aa42-581533442ad5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d77a332-2f39-4f87-9d50-247a290abb69",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16e2f732-08ae-46a3-a3d6-2aa2ac563f3b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8467e743-f5da-4bcd-b94c-a3848f3bda67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3cacefb-4dc0-45ad-a5ee-5b0f639e6be8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b6a4151-0a35-4459-9f04-ba581a40740f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65b598f4-318c-4f49-8fc8-3d9a649268e2",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3612d690-a59b-442e-a7c9-e35ef0a5e3c1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7da367ab-97dc-4124-b7fe-71f7488cf85d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43bd49e5-16e0-4403-8af4-111815316e26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e250f0b-cb46-4459-a829-1a5160761c6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ea61c46-e1d1-4ccc-965e-4b26cb8c89fe",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61fe8fdf-371e-4d5a-9028-bec17581598f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b202efd2-16a1-45c6-b7fc-ea6c34ac8635"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a17d2fb8-6620-49f3-8d5b-7220a8886e30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52eaf3d1-0a0b-47c7-9a9d-b3c2a3fff2e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd3dfc01-4715-4557-a991-fcf445cd237c",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc454569-0ccd-44e3-88a2-1fd3a6b81434",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e1372b3e-4891-452a-ae63-ad2c1349467d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3be81fae-df86-44af-989c-d71f6e3c620d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbebd0b6-0713-49ff-a40f-6bdae6b74d00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b420c4e3-e3d5-4a6a-ab6b-2a1024451452",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46d162bd-7d92-4f35-b80c-be834be391b8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9e028692-50a3-4b27-a017-9d64affe3a2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81cb2127-dd4a-43af-b0e8-b4513619c350",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc89e079-2cb0-4f27-94bc-c7fd423907fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cdb0f67-4d0d-4116-8b95-829ce1410973",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97b71d03-9c04-4857-b13a-6ab89fcadbbb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c3b6e8d1-26ba-478d-b494-b3ab673e9033"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "881b4015-a7f3-4b56-ac26-d0df687a9846",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39ba1ee5-b3b0-4d6e-8ecd-9489dbe54b9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "452abe8c-a460-47e2-b6fc-669cc3eaac98",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d652c6be-b2e3-47d9-ba50-86d43609b1fb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "52a84537-fd63-4a67-a03d-042232c47c17"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a33ad631-64a4-4d49-b6d2-fe6cf8047d9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba8aff94-a615-43f8-adfa-44f354ea5e2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af7aede2-03bb-4768-9a81-c29fac06e4b5",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39e14d47-47bf-4f82-a7ae-f0fda60d2784",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e7d61ece-4194-4343-8154-be53b33f27b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5c28bf7-6830-4430-af8e-9910b1c4fc5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f744b55f-bf18-4d72-abd8-01412b51924b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cb56801-46d0-4d00-97f4-842163114c14",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dadabc8-4a98-4fd5-8730-026ef8de8d6b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5e6cfb17-4a7c-4fa5-b4de-8915a9220104"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c8df94c-d6a6-4ebd-8056-b737c8992ad9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2feb0d36-4775-47f6-a2aa-0dc4acc9d134"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc57a94a-bcf1-43bf-bc8e-2c5f9484dd49",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dad588b8-94b3-4143-b122-cc6398197c9f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9515a77c-e058-43c8-8ec4-61a07f6d004a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "419867dd-8513-4ea9-863e-a6c66c51bc28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5bf52991-42aa-4770-8c74-4bd6ac1960c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bcc7e99-8b16-4b1c-aae6-42e837b563cb",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdbe2893-775a-49fc-b7ea-ef41912adb75",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "427af73b-73e4-4f4a-8995-10ff1236a218"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dec3a0e-6256-41df-80cf-39ce1576294d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef300d83-4bb5-4e3e-9c55-670b2bc968e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8ea3691-5b3d-4f87-95bb-7aed708728e6",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5998f2ce-04b7-4541-a275-d3effde6974c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af7b2743-0d07-4ddd-8bff-4bca41fd15ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7f0a5f6-a81a-4563-919d-7eb8fdc47c93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c69140f6-b883-4871-b259-7ec13873b228"
                        }
                      }
                    ]
                  },
                  {
                    "id": "136679e6-1b66-4f1d-9914-28bd5af51a3d",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82fee50f-24d7-46f3-bc74-483a094b0b62",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eccbd078-4df9-4237-a771-1300556204ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f310c00-2551-4256-a2a4-486c0a29fc71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97aaddc4-f15b-453a-81d5-8a6b21a0a727"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58f9b63e-eee8-45eb-a349-d9f3df8c640f",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62e874d7-7775-42dc-ad77-4cc63b7bb43b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "45394e24-88f5-4ff6-8dea-1cd6b88dfbb9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74ab87a0-3179-44e5-9d72-6a89c2890239",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31e5cdf6-80c1-4584-ba01-5465cc696cfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f53f4a20-ccca-4f8c-88fe-4ef0a2af4521",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3166d954-42bc-40bf-a7a8-e22d46f24f27",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "82547f2c-81cf-4241-8f2d-8c21ce03260d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d524e6e-779f-4b32-9ae2-c45558a93c79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cb7bfb1-7337-47f5-a291-2d1663d8ed5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a225c9c-614d-49ff-8ace-74526e6e8990",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83e10657-ef46-4141-ad3a-9925ba7af828",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "228d53c7-480b-47d1-ab87-9dcea2814a8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea400169-89ce-4fbf-bac1-d4b37a1994f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b01da5a-af3a-46ea-b7fd-7bb8706bf043"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16b5d1b7-b99d-4107-b55c-7e9bac0bc04f",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f82a4274-72f2-4957-aca3-b90c8448ac8b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a7978799-3086-423c-89ae-07a6a21f71f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c9e3be5-bc38-4a95-8815-84a76e54b1ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "779e2284-7731-43b0-8fb2-d009dfb0e5d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a70c5e2c-d030-47a3-9b8f-647893a20dd4",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f48d6f0b-09a0-4524-a131-42c092894305",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9b3a4af-123e-49a2-ba59-63fdaba93892"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8a0aca0-2e27-4b83-8c67-71c5d056758d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc51e3f5-a830-4bf4-9c29-7b20f42680a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c0685d9-609a-4c6c-93a4-552b7c1b9411",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3aeaa13-f4c3-4faf-a739-5a74c5cc8ffe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8c8053e9-b208-4028-a3f2-a90f15ea6ee1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f0b413d-1c4e-4d17-a6d8-7ce4f495ae1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36e07267-8e00-438b-86e1-29c44c55400e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c2f4b10-718c-456b-8940-b2f63add5080",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f02d369-bcf8-4460-89a7-c722c086f36e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "db882cd8-b5ca-4229-8d63-99e2412ea089"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdf17012-508e-4e16-b499-f88ffd7cc65a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94f48432-d5d6-47e4-b7e8-eb6e01f30d48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f865e515-3da2-43f6-80f5-694f13287fdb",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "584863d4-27c2-46f3-9d67-240b3b01e7e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "698083d7-9be1-46ba-9fa5-7489b88c54e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f105df53-7b93-48cb-8299-99c6b6ea0ac4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d933c764-f9aa-4348-8391-26a761dfa641"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acf76046-1e95-439c-bbe2-d30854a34b5c",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "856de84f-9575-4532-95b5-897b62e8d842",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4053e344-46d5-4d13-8b7c-e2c09e4fba7b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8ceb341-1c0c-43cb-9cb4-a08fe808b525",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb888c99-8c53-457d-b3da-9d13f453a8d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27a4f663-c838-472e-bedb-ccc5ffce32b7",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8be93a5d-f5ef-4e6b-871a-e9b66b124f51",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1f83f3cc-7fef-40b1-83eb-2da9fcd7b785"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d6daa6d-0bfb-4029-be03-346582571049",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "091b9fcf-9388-45c4-86f6-bf5c4dd315d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "320a96a2-a5fb-4159-b204-14cab3765ec6",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f9c062d-b9c4-46ef-b090-307e43ab07f2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4a2dd47e-fda9-44d9-957b-b51c3724bfa3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1058f7f8-1589-4d74-aaeb-2f99fde26e21",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd6f147c-d774-4f64-9289-8178e7db2767"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3f5d4a6-2d69-4482-a355-2e733d70a05a",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efe69b59-16d7-4a13-9988-7228524f6e39",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4653b0e8-fbfc-44e8-bed9-8087e272636d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d22d9e53-f375-4802-86ed-57fdb6300bd7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcea971e-f96d-4aa6-8b18-92ad3afbc7f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cfc8aaa-25f5-499f-881c-ab6315684b1e",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1a3d89e-540d-4cef-bddc-0bb4b4463499",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af81dc1b-96ba-48b6-a2f9-b96979f8edf6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f394fdd-e7a0-441f-a345-3c131b0f6bd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b68caf93-a18a-485c-be0a-09a55167b0a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7531b2d-b538-427f-a6eb-d22c72ab643a",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6143e7c0-fa3c-40ce-a01b-2c0271e93f22",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7637dc7f-d036-483b-a011-d67d7e4f6dd3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed0f6818-8fa4-4f9b-9ce6-2991bf67de0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1dc1926e-5e6a-49c7-935a-17d3c9e21e5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36f463f6-7b5f-4a7e-9b5c-ce14f0044559",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58af4f16-39b6-4a52-bdb8-347146644484",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cf4cb147-cf7f-4cc4-98a5-afb34d546230"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8c5a262-c502-4699-85ef-a9d6591d16d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3914192d-1b85-4508-b835-c30da3f20f8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e81216e-9cbe-4a1b-ad01-8553a85d2019",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8fee496-da40-4cfd-a6f8-d9f01d4650a7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0d13e081-8989-4e2e-a7ac-6a48f2d1ed03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e13e2b31-1ef2-4a76-94d6-d4d740fca1dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30342381-5bbc-4546-ba95-de4cf7c91bd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e2a1fb3-49a6-4732-99cc-7d0b4e7a12c4",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8d7bb07-b19b-4cc7-affb-e59ad0a8a5e8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "91f519ae-a1fa-40f8-bff6-cae8bc3bea81"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d53b5b33-49e4-4da5-9aa8-a5a26f6e1416",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e450dee-6c52-4c3c-ab92-34993ab5d1b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ad9fcb0-c5dd-45bb-a903-580cdcfa0c07",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01c2f32b-205f-439c-a724-a35cbd500808",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d8eacfe7-6136-469f-9301-7bfd2d6c4f6d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e65cbac-bf39-4e7f-b7ba-aa93b6bde524",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f404b24-417a-412a-91c0-5be5a30b34ec"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8d466004-713b-4ca1-b350-bc1306c33ec4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6e83f1a9-d4ea-4c01-9d13-5e20300e81c6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ff05597b-aa42-4184-b9dd-d8045fe6acaf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0bdcd60c-e859-4174-b813-7e3a94b036ba"
                    }
                  }
                ]
              },
              {
                "id": "b37d242a-cb79-42b5-89e4-105b55d260ec",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "774ad928-4d66-49c1-bf6a-2f7bfe7c5dcf",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34c03f6f-8270-4c50-9f75-b0912e2d9ef1",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "59ad3465-49f1-45f5-b4d2-a164d844e50b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe49b1bc-1bf9-4f65-a4f8-831f0e0f6881",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b71b0193-43e0-45e5-acd0-c24edade3b5f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a70b6be8-455a-48c3-94df-7cc68ddeab07",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "861a46b5-2d3d-44ef-8677-c9d03783275a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "aac5345a-7436-48e6-8998-97b87bc86f86",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d6263476-088d-44bb-b323-6756490c72ce"
                    }
                  }
                ]
              },
              {
                "id": "84c2fc17-c19f-46b9-b9a3-eb63759da2e6",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "a8d4de5b-f4f4-4870-a76f-040ae7a3badd",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8393ed5b-55e9-471d-889b-0543e18b8e5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "8b013e9c-987b-463c-b448-4d478d510213"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d82a046-1404-4441-83b1-7516bdc7014f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8963ebf8-c2c6-4bda-a9bf-ed50f41fd149"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "46c469f5-b90e-48b1-9e51-e9dcfd98d815",
            "name": "Positive Testing",
            "item": [
              {
                "id": "56b3358e-f05b-438a-a10f-fa5d09a5b0b2",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "99d2e397-e63e-4c18-9385-4dc97f2f8c69",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "ba6b0bd0-ce6a-472e-b880-e9b5707ef58c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "460a7737-18ef-4967-a44b-60083f4713f2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4ab0f014-2004-4cac-b3af-85d10a7b87bb"
                    }
                  }
                ]
              },
              {
                "id": "437e2851-75fa-432f-9762-31548cced7c1",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ac7ff065-30ca-4162-9aca-2fc4e0f950c1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "471cecb2-84c3-4930-8e4f-81b43239cc08"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "79b5643b-2eb0-4152-a889-f0660850e99d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1120978d-9a28-4300-9407-5ed08ba639dd"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "79817916-202c-47fb-94b7-5c3c485987b2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "efa74505-76b9-4886-9ea9-de0260eb68ee"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5e4c2f3d-9368-482e-9eba-dac1bce869e3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7c107229-541c-40f8-a5ed-1a9439f8148d"
            }
          }
        ]
      },
      {
        "id": "a6a090b8-baf1-4bdd-a885-71ebf7d5b9a6",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "88727123-ac1f-464d-a330-2ef7c7ad7188",
            "name": "Negative Testing",
            "item": [
              {
                "id": "fe66c900-7fce-4316-b9ea-7370023d3d96",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a86c1230-7632-4242-bd9a-ea750260595d",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd67fe6e-4057-40ab-8600-3d2292317b3b",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "c1582d02-b133-4227-afec-a93f39ed0f2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1480dfdf-8455-4dad-9700-a9f8f8ef0a0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "277ab9b5-2eaa-4eab-9e85-1bc6257a3e16"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cfccf5b3-3f88-4e36-b1a1-118ea076b38e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3b6796f6-9d9b-402b-9f9c-637ae48a32a8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "da58700d-4d16-43a3-84af-a4b9e65b90e1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "975999e6-9a9a-475b-94a1-3e3398182793"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d0ebba8b-41fa-46f9-9d79-d8dd91de3da8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "e05d9750-cde8-4a2b-bcda-fff41c6eb70a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2aa207fd-dfa5-40cf-8d2f-5719a7c4ce42",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "dae783ac-05cc-454a-8a46-3f0982ab0041"
            }
          }
        ]
      },
      {
        "id": "0fe48d07-143f-4e24-b008-9ece22bd5f42",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "d9992e98-ead6-4222-80a2-e9f221f6ecb1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d06f1922-06ee-412d-9706-f26c7657a780",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "27f0319a-1362-489e-a0cb-9f8946851d6a",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e2dd390-7607-40d1-b4b1-1b2cfd4170c6",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "93174c1d-8e4e-4d01-a1a6-7d59f75df05e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3172562-3901-431d-a1aa-d52fb748e8e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6c0157eb-9582-4037-b3f9-b419ee49b884"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fdd2b7ca-c93d-4242-8f0b-fa3610e6d6b3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ac4bf24f-a9ee-42eb-9605-80f65ad412ae"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a54d8123-df19-48ab-8306-cf32006f6d05",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a7e3d935-173e-4154-842e-24b6fa7c5dad"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b09adc26-1acd-4748-9f11-9695f6d4944f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "22aefd30-1132-4ca9-9fb7-da4cd6391d29"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "08952f3c-4198-47b3-b1c1-e1a4ec5e1602",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bf7934c6-5243-4888-bb62-21e052971f7c"
            }
          }
        ]
      },
      {
        "id": "0d5c87f3-9daf-4900-b44e-1f4dc836971b",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "0dcd8965-aab1-43b8-86e9-85838931fbaa",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1b2b2235-5721-49a0-b8a0-b1651e332477",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e088a98c-b271-4205-943e-139a9bc41718",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef175fe7-50ba-4546-a03e-a094d584334b",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e868257e-baae-4e29-a54e-3020220ad94a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60632f26-cbeb-4832-947a-c8e47e901648",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d600d53c-1195-4eaa-a0b5-97162bfe209c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2401d282-a60b-4514-87eb-8a2ef8e20709",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "62ce2c31-accb-4067-8061-7f4d90b3ce3b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "55debd6e-8d15-4ab5-b0c3-558b5b8b29f9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "35f8c509-189e-4dd8-aca9-11c3765bc0d4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c81a5690-6252-401a-bce6-bd41993350a2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "c6cfe0d2-9686-4b4d-aac5-11db6e64f0ca"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a2960466-a66b-4164-a20f-dc9771544ae6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "db716535-00c4-47a8-b989-390a238293d1"
            }
          }
        ]
      },
      {
        "id": "9c8d282a-6f13-46bf-ada3-6440da05963d",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ed7f5e40-380c-481c-9b32-8531bca3c53a",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3207a6c9-2e8a-4d2d-b91f-140fd5cc597e",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "ee35426e-2adb-4d2f-a66e-c7314c141061",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "24a43c13-306c-4f17-af48-ee12d401c929",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d6c43555-e8af-4695-a43e-7bd0a9248473",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 71
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 70.60317460317461,
      "responseMin": 8,
      "responseMax": 879,
      "responseSd": 89.03299543223396,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1717115841396,
      "completed": 1717115868030
    },
    "executions": [
      {
        "id": "fd8945bd-47f1-4e79-b7ce-3a95eec42697",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "b29d7ccc-25a6-448a-9469-fda56e9b30a3",
          "httpRequestId": "fab7bae0-4af2-42b3-bcbb-f91e2772099b"
        },
        "item": {
          "id": "fd8945bd-47f1-4e79-b7ce-3a95eec42697",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "9c25912f-4c10-4951-87b8-c2a609e1fc46",
          "status": "OK",
          "code": 200,
          "responseTime": 60,
          "responseSize": 0
        }
      },
      {
        "id": "4feb1bb7-782f-4418-a7be-0588b4dbf3f0",
        "cursor": {
          "ref": "ad8cf2cf-583f-4119-9113-cb32cccccba0",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "4a5a056d-68c7-4617-9d45-a1c4d23866e9"
        },
        "item": {
          "id": "4feb1bb7-782f-4418-a7be-0588b4dbf3f0",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "5757e526-10c7-43af-813a-579e073072d3",
          "status": "OK",
          "code": 200,
          "responseTime": 8,
          "responseSize": 0
        }
      },
      {
        "id": "49de2137-98f7-4912-abac-54877ddeddaa",
        "cursor": {
          "ref": "cf371a8e-98d2-43df-929f-317b64fce7a8",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "c2a71613-a956-401f-9b7e-1076c19a9d00"
        },
        "item": {
          "id": "49de2137-98f7-4912-abac-54877ddeddaa",
          "name": "did_json"
        },
        "response": {
          "id": "b362a2a8-c8e4-4ffa-b7d5-8c622f2df7d9",
          "status": "OK",
          "code": 200,
          "responseTime": 144,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46a09346-ba30-42bd-9208-78619959f6e5",
        "cursor": {
          "ref": "d3e52307-2d72-4251-a3bb-b3cd273d3271",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "dfc7a4eb-68a3-40eb-ab98-8e3921bf9d5e"
        },
        "item": {
          "id": "46a09346-ba30-42bd-9208-78619959f6e5",
          "name": "did:invalid"
        },
        "response": {
          "id": "6d9eb6ac-249a-4706-83ab-60a41faf93b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 213,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46a09346-ba30-42bd-9208-78619959f6e5",
        "cursor": {
          "ref": "d3e52307-2d72-4251-a3bb-b3cd273d3271",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "dfc7a4eb-68a3-40eb-ab98-8e3921bf9d5e"
        },
        "item": {
          "id": "46a09346-ba30-42bd-9208-78619959f6e5",
          "name": "did:invalid"
        },
        "response": {
          "id": "6d9eb6ac-249a-4706-83ab-60a41faf93b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 213,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85dcf17b-3aff-4d4e-b789-ae8803339d49",
        "cursor": {
          "ref": "18ed155a-8f82-467d-9bb2-266327d377fc",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "d3291586-1cf2-46d4-95e8-2d8b791f506a"
        },
        "item": {
          "id": "85dcf17b-3aff-4d4e-b789-ae8803339d49",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "4e168985-55b9-4c89-8335-8474e01d49bc",
          "status": "Not Found",
          "code": 404,
          "responseTime": 305,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "358d3ee5-203c-4976-8548-8bb67f6e102c",
        "cursor": {
          "ref": "aa1a9e62-c858-4299-a325-62d23c086019",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "5844f373-5ae8-4a2b-88b1-2ebf58e5b335"
        },
        "item": {
          "id": "358d3ee5-203c-4976-8548-8bb67f6e102c",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "16079568-938a-47cb-a80d-3b88670b2ee2",
          "status": "Not Found",
          "code": 404,
          "responseTime": 43,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b06427d-3c8a-4aa4-a7d2-ca003bf25959",
        "cursor": {
          "ref": "d8e6404a-f47a-45f1-b89e-2c08220f0695",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "de4b6b7e-1542-449e-97d0-a90e9faa5546"
        },
        "item": {
          "id": "4b06427d-3c8a-4aa4-a7d2-ca003bf25959",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "02a79ea8-b90b-49f3-ba6b-146dc58bac26",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0eb66a60-96d0-46a9-9cc2-a8af5ef14301",
        "cursor": {
          "ref": "11c3ece1-fe9f-4d06-a60a-c8b09ffc2fa3",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "6a007e88-6abb-467a-a0d6-47fdd0a61220"
        },
        "item": {
          "id": "0eb66a60-96d0-46a9-9cc2-a8af5ef14301",
          "name": "identifiers"
        },
        "response": {
          "id": "f791f75c-786b-4b3b-9d81-e4b3808b9654",
          "status": "OK",
          "code": 200,
          "responseTime": 90,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8803c5a-cf88-4476-bc5a-992b871f962f",
        "cursor": {
          "ref": "52a43b78-9321-4ad9-9e24-961ecccfe544",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "35ba7ecf-7cd4-4669-912d-b5bfe00722a8"
        },
        "item": {
          "id": "d8803c5a-cf88-4476-bc5a-992b871f962f",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "39cb8d59-036e-41e2-a1e6-619e249e030e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ce7d408-ad87-4faf-9805-a85e77a1e87f",
        "cursor": {
          "ref": "589f81c7-eed8-4fc7-a0b2-a6413f558dda",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "c8b5c16b-660d-44dc-b9d8-e306f330f790"
        },
        "item": {
          "id": "7ce7d408-ad87-4faf-9805-a85e77a1e87f",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "012806cd-a875-4372-8201-00f201b48c0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9637528a-f703-428e-a3e5-c3d3e06fa58e",
        "cursor": {
          "ref": "e118b133-90bc-4dae-bae6-2e6eeb9906d9",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "5a7fe765-9c05-4770-8608-7c1183bff65a"
        },
        "item": {
          "id": "9637528a-f703-428e-a3e5-c3d3e06fa58e",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "59bb8381-d472-4bbf-9847-408917255bcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "427cba2d-1436-4f4a-9f94-36356018645b",
        "cursor": {
          "ref": "303511b0-192a-428c-9fbc-0750d73e2f0a",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "d99dc423-6198-4e3d-9ce7-9804f8b047e4"
        },
        "item": {
          "id": "427cba2d-1436-4f4a-9f94-36356018645b",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "c1c37eab-6c24-42cb-88cf-6e64f0da93e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fdbe1ae-7eb4-45b5-a79f-1af47124d326",
        "cursor": {
          "ref": "cf3794f1-b4af-4749-a193-baa6860c9ac1",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "5c7b7161-cea6-4263-a93c-cc022288e1e8"
        },
        "item": {
          "id": "9fdbe1ae-7eb4-45b5-a79f-1af47124d326",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "f740f7ad-18a3-465e-bcbc-cd57823075f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "198b4068-c2d8-4d2a-a76d-c11cc911a3db",
        "cursor": {
          "ref": "87dd3613-8e33-4c51-9086-930fefced192",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "2186233a-e9db-4f2f-a3ed-41b267771913"
        },
        "item": {
          "id": "198b4068-c2d8-4d2a-a76d-c11cc911a3db",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "2048b4c9-b127-4a1b-9d19-01b00f27c5fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c192716-f915-4645-ad84-05f3f6e23023",
        "cursor": {
          "ref": "8d4a7948-e250-47fa-b383-c646f645a0d8",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "dbfe2595-30bc-4cb5-a85d-4f9173571f71"
        },
        "item": {
          "id": "4c192716-f915-4645-ad84-05f3f6e23023",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "4888a5d9-5211-48fd-87ad-ba14a13c8479",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03c6afe1-6c64-4c45-b6bd-c9c301fbd010",
        "cursor": {
          "ref": "7696113e-feca-4db9-9881-ec752b75c0b5",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "582a0344-3f78-49ea-b9ec-df2857750c5e"
        },
        "item": {
          "id": "03c6afe1-6c64-4c45-b6bd-c9c301fbd010",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "67c519ea-e1b6-4474-9718-e9ab8bec5352",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a0e3a42-3553-4e28-bcf8-cf112f741625",
        "cursor": {
          "ref": "0491e36f-c465-45f6-b298-dbce2bfa117b",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "72a53b02-6a74-4e8b-9909-279673ad252b"
        },
        "item": {
          "id": "0a0e3a42-3553-4e28-bcf8-cf112f741625",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "53e60d59-acc9-4060-b685-16e08813ebe5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d49971e-392f-4929-a7d0-1a2e1a67869c",
        "cursor": {
          "ref": "6ea9282c-ac49-4b88-858d-e26c7561961a",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "2c5e6cfc-b4fa-4b4b-936d-ec1e01a2fddf"
        },
        "item": {
          "id": "2d49971e-392f-4929-a7d0-1a2e1a67869c",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "5b14132e-33f2-4fd2-9b3a-6a59ca397646",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cfea288-2151-480d-bff4-20e63b70cc65",
        "cursor": {
          "ref": "5055f6ac-f794-43df-86f0-8ac135f2ea37",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "4b655eb0-1d12-4f20-9f7c-927a8adb5c98"
        },
        "item": {
          "id": "5cfea288-2151-480d-bff4-20e63b70cc65",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "4e443432-5170-4d49-8d0a-730b6df52220",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0115809-cb7c-4248-8ee9-95bcff383cec",
        "cursor": {
          "ref": "b35b7af7-f1d5-4758-b450-296f7e49324b",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "7197830d-78b6-41da-b085-f3595acfbb21"
        },
        "item": {
          "id": "e0115809-cb7c-4248-8ee9-95bcff383cec",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "bd8459f5-62dd-4af1-bbf5-1a250382b603",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a28b45ba-5e7f-4e58-842c-8c8b8af5ffe7",
        "cursor": {
          "ref": "623e67a7-db84-4e5b-a400-219be319e472",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "bf45a2a6-4175-4c11-962e-3f874474dd9f"
        },
        "item": {
          "id": "a28b45ba-5e7f-4e58-842c-8c8b8af5ffe7",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "6753d72c-8207-438f-9f03-97f119a867da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee246a85-b585-42a9-aefa-ab47d2798d1a",
        "cursor": {
          "ref": "b1919db4-d69f-405c-b2b8-8c3c40cdd45b",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "cfa5df18-e41d-4c17-802e-5fc6105dd0a9"
        },
        "item": {
          "id": "ee246a85-b585-42a9-aefa-ab47d2798d1a",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "d4004215-1993-499f-a16d-3094a41068ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ee149e5-8872-4857-b7b6-31d32ad88aad",
        "cursor": {
          "ref": "f068cc2f-995d-4525-9527-b533aa7d0b2e",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "5be28cbd-f6e6-4eab-b87b-593997fefb5a"
        },
        "item": {
          "id": "4ee149e5-8872-4857-b7b6-31d32ad88aad",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "ab40609c-7677-413f-82de-c4274c79b4aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33f743af-ec8a-4bb8-8632-f1bc394f84cd",
        "cursor": {
          "ref": "51616290-6a65-4412-bc6d-e203091aae88",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "b5f4ba63-4a19-43a6-8ab9-197d15bbcc36"
        },
        "item": {
          "id": "33f743af-ec8a-4bb8-8632-f1bc394f84cd",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "6c1bd570-50af-4dcd-bbe5-bc5bc6f715cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d8ca73d-9801-4426-9c8f-aa781524a42a",
        "cursor": {
          "ref": "4c24a6b9-a793-4450-b9d3-98c038311eb4",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "d396094c-19f6-49a0-9b08-5cbf27b149bd"
        },
        "item": {
          "id": "2d8ca73d-9801-4426-9c8f-aa781524a42a",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "86e0f393-ae42-48c7-9c87-34b477601402",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18e8e6cb-039c-4934-acd7-0a3fd10555f6",
        "cursor": {
          "ref": "099fd27d-7a79-4574-b867-f3eea4f5a4e0",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "b65ee98d-fd5e-4ed9-8171-9ad67d4cd7e9"
        },
        "item": {
          "id": "18e8e6cb-039c-4934-acd7-0a3fd10555f6",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "1f4db93d-ab12-42c2-ae96-e3ed9d3915d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f42d0fce-45e9-49e6-a159-17f4fb961a45",
        "cursor": {
          "ref": "8c434911-1746-4b90-8e08-66fa504dba36",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "f81ef52c-cc38-407f-aace-853f34558db6"
        },
        "item": {
          "id": "f42d0fce-45e9-49e6-a159-17f4fb961a45",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "e66fb0ef-4f5a-4d1a-8c74-6cac1f73f6cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50290b17-ecc3-4aed-a2eb-1c5a2b989fd2",
        "cursor": {
          "ref": "f47369fb-0a23-481d-9952-a3550b66fbf7",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "c962df90-9246-4dfa-9aa0-e28c45191c99"
        },
        "item": {
          "id": "50290b17-ecc3-4aed-a2eb-1c5a2b989fd2",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "156f9727-f8c5-46b1-832d-4854788c794e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81013996-dd92-42e7-ba4b-35c6b99b2030",
        "cursor": {
          "ref": "4d8b8da8-5fc7-41fa-acf6-48eb95f832d1",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "eb31e12d-a31c-4016-8c3e-b43fc3c3815c"
        },
        "item": {
          "id": "81013996-dd92-42e7-ba4b-35c6b99b2030",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "f3e9ea8e-ae1f-4ea4-85c9-80c90d962f87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ac33dd5-f799-4769-becd-0f8bbda906c6",
        "cursor": {
          "ref": "9c48410b-36b2-498d-b074-24c93e4a4ce0",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "aa8d2923-b05c-4da9-a8c8-43a80ed5e852"
        },
        "item": {
          "id": "7ac33dd5-f799-4769-becd-0f8bbda906c6",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "840119fa-9814-45c7-b961-a63aa1fef0da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23af6620-5551-4704-af14-b137d8da8c22",
        "cursor": {
          "ref": "5d6248e7-c81e-425e-ac45-a43f6a4842b3",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "688d11a3-ce45-4fe6-8215-330cdcf00b5c"
        },
        "item": {
          "id": "23af6620-5551-4704-af14-b137d8da8c22",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "922bc814-4b13-4e1a-b56a-3cd9abc64768",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0526c303-91a9-4e3d-bd6e-53e8e6f4b142",
        "cursor": {
          "ref": "4ae835a3-7354-4831-a49f-650761a0d136",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "981eb345-589c-4443-bf01-7c12a6a23b84"
        },
        "item": {
          "id": "0526c303-91a9-4e3d-bd6e-53e8e6f4b142",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "5aff5f50-3f65-43e1-9c7a-6e6c28f52467",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28d62b95-a39c-4334-9097-86773e4630b6",
        "cursor": {
          "ref": "ce4c5ee6-cb89-478d-a04b-bd6ddb545b99",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "5d00b2af-f387-441d-a2f1-0aa13b33b820"
        },
        "item": {
          "id": "28d62b95-a39c-4334-9097-86773e4630b6",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "62136499-758e-4ba9-8398-c7e332b48db4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9eb16105-62fd-46c8-ac47-a5685225aecd",
        "cursor": {
          "ref": "3f34a963-e11a-4cfd-9e9e-abb5f2f2e122",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "9d043406-0aa8-4502-ab58-1dd8d61cec3c"
        },
        "item": {
          "id": "9eb16105-62fd-46c8-ac47-a5685225aecd",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "f2b5c5f1-0048-46f7-9688-9d7540cdaf03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be0b676b-4cea-40f1-8d2d-a18023c4b48b",
        "cursor": {
          "ref": "b033d04c-1d6a-4f20-acca-c7fe3e59cb41",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "7e771a98-d9e1-4d8d-a32c-d7490f2e3886"
        },
        "item": {
          "id": "be0b676b-4cea-40f1-8d2d-a18023c4b48b",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "6b870cef-393c-4c6e-a59e-5d2e590c846d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1dd2783a-7b90-4764-9ac0-01330df84984",
        "cursor": {
          "ref": "503360b2-a5ca-43b9-b24c-c8ff03748cb2",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "87b65b53-fc1f-4441-ad73-b4a408949a03"
        },
        "item": {
          "id": "1dd2783a-7b90-4764-9ac0-01330df84984",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "f1934286-5699-45be-9166-a2f315515c98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03ab70a8-6490-4632-8533-2fa1ec932293",
        "cursor": {
          "ref": "d1c8d67f-47d5-4a03-9073-8124054fba50",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "2dcea310-6480-49c2-a05e-35bc7d1bdc32"
        },
        "item": {
          "id": "03ab70a8-6490-4632-8533-2fa1ec932293",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "9beff458-1c02-4fb1-b3c7-2ca173a9b4cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a665dac-d2f3-41d2-8c8e-d73bbc3f0b68",
        "cursor": {
          "ref": "ab7043de-c545-42be-b7da-a5d862f7df71",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "03d5d3a7-8c7e-4ef9-869a-54af0322cc10"
        },
        "item": {
          "id": "7a665dac-d2f3-41d2-8c8e-d73bbc3f0b68",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "013d0e63-c8b7-455d-a2ca-380fdaaf3541",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2afa5a49-ec3f-4af5-a74a-ae2c5c211591",
        "cursor": {
          "ref": "50d0a6a6-3758-449c-91b6-9e87f923d758",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "941accd0-2cf1-41cb-ad65-1991eec417a6"
        },
        "item": {
          "id": "2afa5a49-ec3f-4af5-a74a-ae2c5c211591",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "a0801f12-4095-488e-bcb9-512431d3b2d1",
          "status": "Created",
          "code": 201,
          "responseTime": 879,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "174e4e44-c916-436b-a1cf-21ecd6fd03fe",
        "cursor": {
          "ref": "f4c629c1-7b0e-4b4d-b4ca-740a7b53ce01",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "e214961f-a1db-4b87-ac91-aff77c2c4672"
        },
        "item": {
          "id": "174e4e44-c916-436b-a1cf-21ecd6fd03fe",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "82c6caa2-b0fd-4fa7-a805-73a3f11e0735",
          "status": "Created",
          "code": 201,
          "responseTime": 301,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "045c707a-47c9-4d6d-b594-4d78dc8e9652",
        "cursor": {
          "ref": "ed49604d-8d6d-405e-9652-05c8ec755db3",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "bf773751-b11a-4cf8-9468-1977235c4949"
        },
        "item": {
          "id": "045c707a-47c9-4d6d-b594-4d78dc8e9652",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "a63c4e64-de6a-4cf6-9c13-77b01297e150",
          "status": "Created",
          "code": 201,
          "responseTime": 279,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "0b250aa9-867d-439c-aeba-547bc3d739c2",
        "cursor": {
          "ref": "8d86a244-7576-4de3-bf6e-827488714918",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "4d38d8e0-d0b7-4aee-85de-c48cac5316a6"
        },
        "item": {
          "id": "0b250aa9-867d-439c-aeba-547bc3d739c2",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "d554b2a1-6142-4b2d-b383-dcea5fa2c262",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bc37470-fc1d-48f1-baff-4a2a19c404de",
        "cursor": {
          "ref": "add6cb24-3b8c-4c4a-a3f9-5109a2a83b64",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "b66a64d5-183a-46fc-80e0-fb1766f71d81"
        },
        "item": {
          "id": "0bc37470-fc1d-48f1-baff-4a2a19c404de",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "efd3e9dd-06d4-4091-b481-ae59c84c4570",
          "status": "Created",
          "code": 201,
          "responseTime": 289,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "2802af8a-f9bf-4c5b-8fb4-bc121a282dab",
        "cursor": {
          "ref": "020f472f-19b3-4222-b620-0553f88981a5",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "df3903b9-c35e-42db-9efc-2f59d8e05cf8"
        },
        "item": {
          "id": "2802af8a-f9bf-4c5b-8fb4-bc121a282dab",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "e7625bb7-27a3-4867-9aa9-38226a2bcc86",
          "status": "Created",
          "code": 201,
          "responseTime": 271,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "8fe2693c-d561-46a3-8f0e-03ad771ebddb",
        "cursor": {
          "ref": "4df3d8e7-7845-46e8-8f42-57973b6e6600",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "f0acd8bc-f0ec-4cbc-ab07-b7d24884bb6d"
        },
        "item": {
          "id": "8fe2693c-d561-46a3-8f0e-03ad771ebddb",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "1b6bc6ad-4ee9-47b8-bc9e-93a1ee957b97",
          "status": "Created",
          "code": 201,
          "responseTime": 269,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "6bfb8f50-c11e-44cf-8d7c-0c5c1bed18a7",
        "cursor": {
          "ref": "5dfab651-8d2b-430a-a5e2-ad335fbc758b",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "8a202aa4-8c2e-46fc-86fe-5a979cdaf302"
        },
        "item": {
          "id": "6bfb8f50-c11e-44cf-8d7c-0c5c1bed18a7",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "7153439b-5355-4f9c-9511-ff5b0236a656",
          "status": "Created",
          "code": 201,
          "responseTime": 328,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "13c2c532-5fc3-40f7-97c2-40d722c09e3d",
        "cursor": {
          "ref": "dc40902e-a98b-48f1-8d69-dd1a967da400",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "e27ebbb4-95a1-4a8b-9d20-1ada264e5a7f"
        },
        "item": {
          "id": "13c2c532-5fc3-40f7-97c2-40d722c09e3d",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "14e88677-ddb4-4f55-a17b-2c0d62ab4e0a",
          "status": "Created",
          "code": 201,
          "responseTime": 253,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "a25c0161-618e-493b-b925-95e50e5a9ac8",
        "cursor": {
          "ref": "d84c193e-8858-425a-af61-304c9106b968",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "41eb28a4-2925-400e-97d0-8cb6a243d778"
        },
        "item": {
          "id": "a25c0161-618e-493b-b925-95e50e5a9ac8",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "69937325-bc37-4a26-bc7b-dc5ea1599200",
          "status": "Created",
          "code": 201,
          "responseTime": 282,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "3f21a207-28a2-46aa-b94b-2568d7d3eece",
        "cursor": {
          "ref": "562a8487-910f-4ae2-b6e4-fc8d4ad70634",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "ac1d75bb-2b4d-4e6c-b0a0-6705d16d89a9"
        },
        "item": {
          "id": "3f21a207-28a2-46aa-b94b-2568d7d3eece",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "5e602219-a8fd-4d7d-aa4c-157d0e5e2464",
          "status": "Created",
          "code": 201,
          "responseTime": 284,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "ca2f5973-8f52-4c18-8b14-4290726705be",
        "cursor": {
          "ref": "7baf3de9-f488-49f1-8fbc-d8a853ec74f1",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "c1401f78-add0-430c-9219-1bce21e8ef8e"
        },
        "item": {
          "id": "ca2f5973-8f52-4c18-8b14-4290726705be",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "cffacdbb-7a98-45f5-830d-951f543d0352",
          "status": "Created",
          "code": 201,
          "responseTime": 257,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "a0b7aa14-61cc-40f2-9c27-2c36ccc50cb0",
        "cursor": {
          "ref": "ec53d11a-13e6-46f5-b71c-ec84cfa9efc0",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "c72ad07b-fc0c-4834-a01d-f17258cdc019"
        },
        "item": {
          "id": "a0b7aa14-61cc-40f2-9c27-2c36ccc50cb0",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "a225f0fd-5fa2-45db-8bf0-e61c5aee918c",
          "status": "Created",
          "code": 201,
          "responseTime": 297,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "9de88d61-b645-42a2-98f2-2cda5f2965f4",
        "cursor": {
          "ref": "4f621020-a3c2-4d1e-9419-b9f5e7c4b1ea",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "a6fc139b-5647-4363-ab46-af1b0af99bb9"
        },
        "item": {
          "id": "9de88d61-b645-42a2-98f2-2cda5f2965f4",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "0a9f04cd-5a70-488a-a831-3c2b562f3604",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0c62c5d-b74c-4466-b06a-c27e00443624",
        "cursor": {
          "ref": "bf71cf1b-c7e1-4e04-9746-a0abc131825a",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "32f1e533-7fd4-422e-84f6-7aceba5fceb9"
        },
        "item": {
          "id": "e0c62c5d-b74c-4466-b06a-c27e00443624",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "04618a8f-ddeb-416d-95f9-ba22636d0ad4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c9edcc3-f908-4b88-b3be-1d4b07adca06",
        "cursor": {
          "ref": "cd69c3b0-6639-41f5-988f-a15024e1b4f1",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "a7394255-3b67-40ef-8df3-a4a11d4cf6a3"
        },
        "item": {
          "id": "8c9edcc3-f908-4b88-b3be-1d4b07adca06",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "291d84f5-6d9d-4ec3-83a9-c09395f4fdd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2292f17-eaaf-439c-99bd-305e607eea75",
        "cursor": {
          "ref": "3c8c9a9c-371d-4dae-8089-feb631a5140c",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "44fa6202-8124-4eaa-92e7-3fa0a8524ca4"
        },
        "item": {
          "id": "f2292f17-eaaf-439c-99bd-305e607eea75",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "3d5d4150-a391-43d9-88dd-64a8d25bfc14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "758cf29d-78be-4afe-8484-048e943d913f",
        "cursor": {
          "ref": "60c57900-47d4-45fa-bbc4-44c23e208270",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "e9febef6-60d6-4525-9613-45d1c3215aa5"
        },
        "item": {
          "id": "758cf29d-78be-4afe-8484-048e943d913f",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "29bbff4f-787b-4549-b5f9-48932af47eac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91daa7cd-9bb8-4165-82d2-04931dad4c04",
        "cursor": {
          "ref": "3c5bea4a-ba6c-4583-be43-e6a94d119fef",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "80679b74-c7c2-4edf-b83a-a2619476134c"
        },
        "item": {
          "id": "91daa7cd-9bb8-4165-82d2-04931dad4c04",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "52d2fef2-1153-4966-8180-033ecb676399",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c119d972-630a-44b9-8499-9f64ea10f27d",
        "cursor": {
          "ref": "d763a804-8d95-4b4d-b71f-5bf45ba5d04e",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "01390d81-df83-4ac6-b70e-55cf2791a32f"
        },
        "item": {
          "id": "c119d972-630a-44b9-8499-9f64ea10f27d",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "9365ac69-1be4-4a30-aa40-6fb9d9a96bcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d1a9f41-cdd5-44c6-a91a-dbb2c0daca7a",
        "cursor": {
          "ref": "531aa60d-e753-46e5-a880-b4425d3559fd",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "90c4de26-612f-410b-a4b7-e7c68c553cc3"
        },
        "item": {
          "id": "0d1a9f41-cdd5-44c6-a91a-dbb2c0daca7a",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "4cb0e920-b694-40bb-9b97-8dc662415b41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7f4c2de-da8f-4d0e-b41d-b4f221be59bb",
        "cursor": {
          "ref": "e005ad01-9da2-4721-9915-3ddb40df329b",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "276a1ff2-47e1-4c9e-b7e1-40e9a06904f8"
        },
        "item": {
          "id": "d7f4c2de-da8f-4d0e-b41d-b4f221be59bb",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "af252825-051c-4b84-9039-7e41af737d29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f027a0be-f950-4f6a-b853-0bbb8bb564e1",
        "cursor": {
          "ref": "8160865e-cabd-4fcd-abd2-15a6a45d06ce",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "fde80a97-72dc-41e1-a48a-ce6bd8ab205c"
        },
        "item": {
          "id": "f027a0be-f950-4f6a-b853-0bbb8bb564e1",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "c3a3b516-b1a6-43e4-b902-b3e36f559120",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3c039c1-f751-48b1-81cb-a078b14804dd",
        "cursor": {
          "ref": "767b5077-ad1c-4c41-9aeb-3101b0fdaf37",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "3d2951fb-1b86-4f2b-8d5d-19b4ba54ce24"
        },
        "item": {
          "id": "b3c039c1-f751-48b1-81cb-a078b14804dd",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "3a634f6d-b2f2-4a8d-a96a-98a3e64489e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75487b79-c56c-4855-b1c3-25eaa1c41223",
        "cursor": {
          "ref": "57c701e4-8109-4761-ba14-1678f0814820",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "9a9c7b5b-0f5a-43a3-880e-50bf7dd7d3f2"
        },
        "item": {
          "id": "75487b79-c56c-4855-b1c3-25eaa1c41223",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "1a9c7246-2393-4310-bd69-0d4bede30788",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1897b774-4eab-4bce-bcee-175d0d81d91d",
        "cursor": {
          "ref": "1c751c22-cd1a-4ca6-a58c-6c7172379804",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "89c6c787-8f98-4310-8627-e70dc5adef55"
        },
        "item": {
          "id": "1897b774-4eab-4bce-bcee-175d0d81d91d",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "3dcbcd5f-30be-4a27-9c9a-1b3f3cae94af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "219e39f4-cd29-4280-95a6-befbd56d4911",
        "cursor": {
          "ref": "4ed5dd33-5b31-4e85-9b86-cc2beb040f4f",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "16e64ec7-bc98-4380-8d59-de6fd8e0671a"
        },
        "item": {
          "id": "219e39f4-cd29-4280-95a6-befbd56d4911",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "f847b9d0-8cfa-426a-bc89-df88883654f3",
          "status": "Created",
          "code": 201,
          "responseTime": 265,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "5c57149b-34e3-49be-b7d9-9513fa0268ea",
        "cursor": {
          "ref": "b9c0c4a2-882c-4263-b1c7-0f9613a94ea4",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "e691ed16-1f3c-484f-89e9-bf09e931fde6"
        },
        "item": {
          "id": "5c57149b-34e3-49be-b7d9-9513fa0268ea",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "bc2e344b-6538-47d5-a029-ced90e145e53",
          "status": "Created",
          "code": 201,
          "responseTime": 278,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "b9f7deb3-07d8-47ba-a1a4-9e67bbbd462d",
        "cursor": {
          "ref": "c0d79c7e-c5fa-4305-b9c6-971bac020a61",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "2ba11a75-0b4d-4594-a539-09b8414d3aa0"
        },
        "item": {
          "id": "b9f7deb3-07d8-47ba-a1a4-9e67bbbd462d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "df2c5a95-6b1f-4a61-84a4-b1d5250e5dc8",
          "status": "Created",
          "code": 201,
          "responseTime": 272,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "88074e3d-eeff-490d-933b-680def1a9240",
        "cursor": {
          "ref": "d315e256-7b1b-4c03-99f9-3ec56fab543a",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "f63aa3b2-3e72-446a-b6c1-08e3bb8407a9"
        },
        "item": {
          "id": "88074e3d-eeff-490d-933b-680def1a9240",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "df451077-f151-4807-9a75-72460fc2cca3",
          "status": "Created",
          "code": 201,
          "responseTime": 268,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "376fd5a7-b973-4746-a2da-71279410bfd9",
        "cursor": {
          "ref": "5c12cb98-398f-49e4-a09a-8546cd94e730",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "55651dac-bce0-4d83-991c-cc75ea9e7eeb"
        },
        "item": {
          "id": "376fd5a7-b973-4746-a2da-71279410bfd9",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "0fe5dd3b-c64e-474d-91e8-cdc8c80099d9",
          "status": "Created",
          "code": 201,
          "responseTime": 255,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "572797ba-e6d2-4858-8d66-a2883804ebc9",
        "cursor": {
          "ref": "c1a143f7-cf2e-4dd8-8c27-e9d0cff519ef",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "44648b7a-2261-4063-a65a-41d3e5c7ed23"
        },
        "item": {
          "id": "572797ba-e6d2-4858-8d66-a2883804ebc9",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "be961cca-911b-41cf-b344-c5129bc36316",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a72afa2c-6dbe-444a-a037-008af99eb8b8",
        "cursor": {
          "ref": "2473a713-ea95-4196-aa48-86e6e58305b8",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "171615e5-83d5-4417-9b1f-644494c5dcc0"
        },
        "item": {
          "id": "a72afa2c-6dbe-444a-a037-008af99eb8b8",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "ff54e216-3d74-4fb4-978f-b7c487ce5e1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed40df02-3160-435a-83ce-cc30a722526b",
        "cursor": {
          "ref": "e78d00ae-b712-49c2-9060-d53cdc90f34e",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "b8ba5e9d-66d7-4be6-9bb9-4b990807f3e0"
        },
        "item": {
          "id": "ed40df02-3160-435a-83ce-cc30a722526b",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "3cee5c08-17cc-4e96-904d-aeaddc4022bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2c4d5b4-7c19-4568-a4f3-bee54d809ae8",
        "cursor": {
          "ref": "d4ebcb3c-1036-4e9c-b170-01be87a0f0f0",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "33f5df37-7740-46e3-9d95-a9a54b01061c"
        },
        "item": {
          "id": "e2c4d5b4-7c19-4568-a4f3-bee54d809ae8",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "c2294f7e-8f5e-436d-b8ee-5264a6ff5453",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64684815-4c40-4fef-b4d0-2b0a4929e886",
        "cursor": {
          "ref": "bcee5fa2-f551-4385-adc5-fd3974132d00",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "1ed7d04d-bae4-4cba-8e19-f3d7082ed05e"
        },
        "item": {
          "id": "64684815-4c40-4fef-b4d0-2b0a4929e886",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "8eceec2d-6e19-433c-9e95-e172f1ca8b78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c082860d-b95b-48bb-ab71-7daa2266385e",
        "cursor": {
          "ref": "77363d47-4599-4e9f-ae72-1e3ec413eb31",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "269250b2-a534-4dcc-95ca-39c2b8e91cb5"
        },
        "item": {
          "id": "c082860d-b95b-48bb-ab71-7daa2266385e",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "2e440067-d8cb-4448-a395-376e9ad3fecc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0b76db3-229a-4425-a47b-832c935cbc3f",
        "cursor": {
          "ref": "29630292-f377-44c0-b4bf-f074c024de8b",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "b1b09041-2952-4b70-a8ab-9214f788097b"
        },
        "item": {
          "id": "d0b76db3-229a-4425-a47b-832c935cbc3f",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "14df3a87-f7de-4e40-8894-e274a7bbf62a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e70f9ed8-cc43-43ee-a51b-7308e39a4868",
        "cursor": {
          "ref": "9d0c6b73-0a8e-4239-97dd-6082933ccaba",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "46ab0ff8-02fe-483f-8788-24f7f37dabcc"
        },
        "item": {
          "id": "e70f9ed8-cc43-43ee-a51b-7308e39a4868",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "9ee7c514-f67b-412a-94f2-c2325319bd4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60329bd3-df73-4687-8551-99a0d9b10a64",
        "cursor": {
          "ref": "bad9374a-6aac-4d71-9987-8b9c322435ab",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "d14714a4-13d2-4cb2-ae2e-447e789ff9e4"
        },
        "item": {
          "id": "60329bd3-df73-4687-8551-99a0d9b10a64",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "ac35c7e5-975e-4450-b395-516a0a200703",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40a3f8c2-d09d-425f-8d13-a3f7d59b12d7",
        "cursor": {
          "ref": "11b51dc5-6e75-42a0-aff3-047bb90bf24c",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "0014f55d-693a-46a8-af72-27fc59064ad5"
        },
        "item": {
          "id": "40a3f8c2-d09d-425f-8d13-a3f7d59b12d7",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "de832784-32d4-4dfa-aa6d-1c7defe283bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a353187-5ddb-45d0-8e3d-7dda6b7ae6b1",
        "cursor": {
          "ref": "a2f305e6-29cc-426f-b92b-32b41fe9f319",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "225dadda-e082-438e-9701-c0b3dc7e00b1"
        },
        "item": {
          "id": "1a353187-5ddb-45d0-8e3d-7dda6b7ae6b1",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "9dffee3b-765c-47c4-ae94-16d7d01260cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c21dabe-2b9d-431f-bed1-128e0b124791",
        "cursor": {
          "ref": "b29b1f4d-547e-4492-9da2-a8e046a43a04",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "26926d73-e743-4d79-8e6b-5765d2ef29cf"
        },
        "item": {
          "id": "0c21dabe-2b9d-431f-bed1-128e0b124791",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "b1ace43b-6d14-4247-8785-fa9328c3ba61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98acf463-35a6-4443-8bec-e7fcb6af68be",
        "cursor": {
          "ref": "e2e62033-4dc5-41c7-87e7-ea4cabd714f4",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "6de1d7a4-f578-49e0-be65-e615cc500076"
        },
        "item": {
          "id": "98acf463-35a6-4443-8bec-e7fcb6af68be",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "fb7ef165-35a9-48b0-a67f-ba7ccb3e4c7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93e66910-ab2e-42dd-9a4d-4187d5835c4e",
        "cursor": {
          "ref": "05e0d4b0-1e2d-46d9-a34c-e4c4f821f02e",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "7986ff4e-d34c-45f9-8a52-6d8539849e55"
        },
        "item": {
          "id": "93e66910-ab2e-42dd-9a4d-4187d5835c4e",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "521ea5b6-caba-4468-958a-be90e4604e34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a6fb6d3-95ec-4932-99d2-1beecc2f7cb6",
        "cursor": {
          "ref": "348a1709-3b04-4082-8ae4-c690d8a6e1f4",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "03d17edc-0020-4ab8-9c08-bfb6f3b639a7"
        },
        "item": {
          "id": "4a6fb6d3-95ec-4932-99d2-1beecc2f7cb6",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "92aa5a7e-c030-426f-a850-eddabfe14ac6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ddf1243-50ee-463a-8a29-957663218c89",
        "cursor": {
          "ref": "a2e736e1-ed9b-4e40-b118-87c57aef5612",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "1bdb843c-41f0-4572-a04d-3aaf0b1b3eaf"
        },
        "item": {
          "id": "7ddf1243-50ee-463a-8a29-957663218c89",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "1606f189-a6d0-44d7-a1f4-b2314dcc2652",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85d51063-dc8c-41ed-8866-4fd81999b30d",
        "cursor": {
          "ref": "8bc6c8e6-7bad-47cf-b638-ff488c6a2aed",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "9746b735-fbd5-4423-9a5c-2d7bdf5fa512"
        },
        "item": {
          "id": "85d51063-dc8c-41ed-8866-4fd81999b30d",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "6a8e6ff8-6266-4511-a9a2-f457464acf75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aeaa6712-3c85-4825-ba2b-2bce9e31e152",
        "cursor": {
          "ref": "c5dec104-28e3-4684-b102-71dae36269f6",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "fa2539cf-6945-48ef-a6b6-437a64965518"
        },
        "item": {
          "id": "aeaa6712-3c85-4825-ba2b-2bce9e31e152",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "2c5e7dbc-1b08-4df8-bc25-c86e0f02ff96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "066f188c-6164-432b-b0f0-1f038af36b76",
        "cursor": {
          "ref": "6511b842-e640-4418-ac0d-8e5f6fbe716e",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "858262f5-f6c9-402e-9d87-97b8205de8aa"
        },
        "item": {
          "id": "066f188c-6164-432b-b0f0-1f038af36b76",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "0a935471-eff0-4fd1-b7f9-ea2a1f9911ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83bddd3c-0847-4a90-bcf0-a156250af39b",
        "cursor": {
          "ref": "c25900da-6203-4149-bfaa-39e04be2dadb",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "9e1d3e46-bf84-4d1a-8745-6c5e6c556df2"
        },
        "item": {
          "id": "83bddd3c-0847-4a90-bcf0-a156250af39b",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "619d4cf7-c895-4ea2-834a-98b3369edd2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad235863-7fa6-4e0b-bda9-549d88acbb7b",
        "cursor": {
          "ref": "04c6f61d-78c0-48f4-b51e-3de9d5029d31",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "12ae3112-2cc6-43ea-b46f-ed10e8cc4899"
        },
        "item": {
          "id": "ad235863-7fa6-4e0b-bda9-549d88acbb7b",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "c344253a-e44c-47a9-9592-9a55701bcc20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fcf1bd4-74cf-4c34-b500-fa8188b0ac03",
        "cursor": {
          "ref": "29d1422c-8471-41a3-870d-343fd475b422",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "f3011594-8eed-444f-a885-f1c116e880c5"
        },
        "item": {
          "id": "9fcf1bd4-74cf-4c34-b500-fa8188b0ac03",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "5f29c1e1-078f-4317-a739-92a6caea65e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c28ef0b1-c8a5-444e-bbd2-17c42d83c058",
        "cursor": {
          "ref": "0ed54c2d-0a0b-4987-bc3d-f6b315a0ca54",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "ac7f0388-5683-4747-a565-3ba22a25a2d8"
        },
        "item": {
          "id": "c28ef0b1-c8a5-444e-bbd2-17c42d83c058",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "eb5fdcfc-9652-4107-85c7-b09f2eb3ff40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3120225f-47f6-4730-b9d2-571dbdeef078",
        "cursor": {
          "ref": "8d11a223-fe4b-4b34-b963-06bf9869ddb4",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "c47effe1-4333-41bc-a37e-0cce1768df5e"
        },
        "item": {
          "id": "3120225f-47f6-4730-b9d2-571dbdeef078",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "45ddb9cd-f5a8-4c57-8095-bc9c24634bd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75ed8853-4861-4d8b-a25b-2d6d8951b376",
        "cursor": {
          "ref": "2a289b00-20d0-4115-947f-bbbb86cc599f",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "5ceee790-9fd1-44c1-a6d2-7bf15540ec42"
        },
        "item": {
          "id": "75ed8853-4861-4d8b-a25b-2d6d8951b376",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "7d93cdca-716e-417e-9173-65b63897cc3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "530cd7ec-b18f-4db8-9135-23f62f836de0",
        "cursor": {
          "ref": "aa4e86f1-b50d-4685-972b-da839014cd81",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "31be9a2b-d049-40cc-b631-d00bace4005d"
        },
        "item": {
          "id": "530cd7ec-b18f-4db8-9135-23f62f836de0",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "7781d8df-c8f2-436a-bc97-2f3061c10753",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57b458b1-97a8-4240-a535-37b07c3df38c",
        "cursor": {
          "ref": "be90466c-17ad-4d21-8fd4-b9f4010a81c8",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "404082c1-dbb4-4707-9a41-58d2c6443ed9"
        },
        "item": {
          "id": "57b458b1-97a8-4240-a535-37b07c3df38c",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "b59ec9d7-43c6-4a56-943e-db5178ad14fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d46e38d-7043-4ff6-ad22-45cd9a91b6e7",
        "cursor": {
          "ref": "c3849286-05ca-4ea0-9833-d8da7531f60b",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "7dc93163-7f97-4a9b-b7ad-267018ecd6b4"
        },
        "item": {
          "id": "2d46e38d-7043-4ff6-ad22-45cd9a91b6e7",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "5282db99-3607-4551-af91-72f7461b75df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73d9bdc6-21bb-49c2-aad4-d093debef700",
        "cursor": {
          "ref": "9b52dffe-01b1-41f0-814b-9d48cbbfba80",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "26b287f3-cb52-41e4-ae55-a7797ba9d1f3"
        },
        "item": {
          "id": "73d9bdc6-21bb-49c2-aad4-d093debef700",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "67e7463b-66f0-4b0b-bc85-df269d30a808",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3406a4fb-efd2-48de-a349-4828518c9def",
        "cursor": {
          "ref": "ffb43e2f-d952-413c-a8e9-3f8e8e29619d",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "a929aa11-1895-4c1b-a330-f3cc8879118b"
        },
        "item": {
          "id": "3406a4fb-efd2-48de-a349-4828518c9def",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "dac067ba-e3ad-4365-a6e0-d8e5e535b970",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8af644fe-2473-4005-82b9-049273ad2739",
        "cursor": {
          "ref": "f0c5c689-bcb5-4d02-a9af-d92bd9331b5e",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "a385f735-9637-4267-b3de-ed71e2c0d9a6"
        },
        "item": {
          "id": "8af644fe-2473-4005-82b9-049273ad2739",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "56955b7e-da5e-40e8-ac46-8a4287ea66f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aae8971e-9749-4415-a0b2-62346ebd5395",
        "cursor": {
          "ref": "d12b40b8-a43a-4beb-bdbd-ab3875e216a7",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "908f3dc7-cd7f-49ec-aed6-bb39d79ee757"
        },
        "item": {
          "id": "aae8971e-9749-4415-a0b2-62346ebd5395",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "08c042f7-e343-460b-9857-5d31a1176656",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 28,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1777608f-30ed-4c69-a464-0910dbf952ab",
        "cursor": {
          "ref": "ab7dcab3-60b7-43b6-8bd9-f986391c2b6e",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "751d1df6-1415-4af6-a599-29652a670a3e"
        },
        "item": {
          "id": "1777608f-30ed-4c69-a464-0910dbf952ab",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "fc77fc27-44b1-4021-908b-c51f9657d27e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "edf6f3fa-388d-4261-ad58-b661d71bf53c",
        "cursor": {
          "ref": "d9bef0da-d0a0-4953-b298-40b7203a1486",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "c797a286-be8b-4694-8e1d-a01a0784f73d"
        },
        "item": {
          "id": "edf6f3fa-388d-4261-ad58-b661d71bf53c",
          "name": "credentials_issue"
        },
        "response": {
          "id": "37637a7c-3960-4172-9da3-c40c3dd3579f",
          "status": "Created",
          "code": 201,
          "responseTime": 284,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "767a015d-8157-420d-81b3-f813d1c2868b",
        "cursor": {
          "ref": "837632bd-c4cc-4537-b4ce-e6c3a4f16a97",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "cfc2772c-27e0-4843-aea1-bcfbd5d87689"
        },
        "item": {
          "id": "767a015d-8157-420d-81b3-f813d1c2868b",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "62ad0699-aba7-4397-898d-f3abd519de57",
          "status": "Created",
          "code": 201,
          "responseTime": 265,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6a423a9-932a-4d3c-a5eb-ee880bf8a9b1",
        "cursor": {
          "ref": "a817dec9-50e5-4188-aa9a-d458d9800a65",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "34704edc-c22b-4a3b-8647-8458a66a4258"
        },
        "item": {
          "id": "f6a423a9-932a-4d3c-a5eb-ee880bf8a9b1",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "e285450b-5163-4fd5-aed1-4258bf5f6933",
          "status": "Created",
          "code": 201,
          "responseTime": 354,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "786f68c2-4457-4a54-bed3-0644cd283ed8",
        "cursor": {
          "ref": "d3a99a23-7212-4e61-9a81-5f108ac2e3ea",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "2fb46941-1bf1-4a76-9e16-367005771e69"
        },
        "item": {
          "id": "786f68c2-4457-4a54-bed3-0644cd283ed8",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "82681ac1-e77d-47bf-8079-f3b93e5e9cb6",
          "status": "Created",
          "code": 201,
          "responseTime": 275,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fae11d2-4cc7-45ff-b12f-b14a8348eeed",
        "cursor": {
          "ref": "e856f473-a7cc-4745-b0f0-5a871e39b9bd",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "89d89df2-f5fa-4f02-83cf-326d0e8818f4"
        },
        "item": {
          "id": "2fae11d2-4cc7-45ff-b12f-b14a8348eeed",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "ab9e01c6-0ed5-45cc-92a6-91288e48f832",
          "status": "Created",
          "code": 201,
          "responseTime": 309,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-05-31T00:37:36.421Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-05-31T00:37:36.421Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "e25a9a16-1e3d-44de-b9a0-b64d6c08beac",
        "cursor": {
          "ref": "3aa5bd98-8a2d-4ed9-89dd-60d46cb075e8",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "37280967-e353-422b-9f8c-b64050ac8dad"
        },
        "item": {
          "id": "e25a9a16-1e3d-44de-b9a0-b64d6c08beac",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "8e6f189b-85fe-49f2-87ec-1526b74e468e",
          "status": "Created",
          "code": 201,
          "responseTime": 283,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2aab60f1-1952-4445-83ec-3b319f4a49ea",
        "cursor": {
          "ref": "73c8fb63-4884-4c67-bd20-51faf43008aa",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "a3a5e781-18f7-49b5-a779-469ece982117"
        },
        "item": {
          "id": "2aab60f1-1952-4445-83ec-3b319f4a49ea",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "dc5b8e64-f937-4248-bea2-e6c9b1f7048c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecd972cf-c54c-4499-a4c0-61c90022fae2",
        "cursor": {
          "ref": "2f4f6fa6-271c-48fb-97ef-7206b574638b",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "45ef03bc-13b5-418b-bfbb-7cd67c42f208"
        },
        "item": {
          "id": "ecd972cf-c54c-4499-a4c0-61c90022fae2",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "16477965-2005-47e0-9cc5-68d581eb3463",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e85cb1da-6810-4379-9ce8-265f5bfc4fbd",
        "cursor": {
          "ref": "092c0afa-d0f4-4a11-8f8e-02d30001e80a",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "58843eb9-64f3-428a-b6f9-c34cbac7c7ca"
        },
        "item": {
          "id": "e85cb1da-6810-4379-9ce8-265f5bfc4fbd",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "31eab433-030a-4083-b764-0a5c79c53eb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5763f510-60a3-48cb-8dc3-21669f7484a9",
        "cursor": {
          "ref": "54bf53ee-b6bd-4393-b2d1-cddcb2cf4b89",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "fd82bcf7-99c5-4602-83f0-db86950baddd"
        },
        "item": {
          "id": "5763f510-60a3-48cb-8dc3-21669f7484a9",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "f2e39fd3-5049-4f5a-a5fb-de3164f1d345",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9ec2db3-49ea-439f-97f9-1118a21663cd",
        "cursor": {
          "ref": "383a27a7-712f-4b5a-b364-174dc251e9df",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "4ddbd946-8491-4499-b8ad-618dd82f04ef"
        },
        "item": {
          "id": "c9ec2db3-49ea-439f-97f9-1118a21663cd",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "80352453-9de9-4dca-9ad2-442c8209d696",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90de5f0e-66ae-44eb-b254-d708094c45cc",
        "cursor": {
          "ref": "9aa2ca5b-1e0b-462c-94ca-7d7a8c1f3495",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "44576180-ca9d-4a8e-a241-159da9c36398"
        },
        "item": {
          "id": "90de5f0e-66ae-44eb-b254-d708094c45cc",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "4e0ed32c-1fdc-4952-9bf3-739e3b17ddd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3afacfd3-ca71-43e6-af6e-505b99674902",
        "cursor": {
          "ref": "1115fa7a-36ae-4345-87b6-0529cd64cf12",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "1fbdef41-8c9f-44b1-b478-d61b145725c9"
        },
        "item": {
          "id": "3afacfd3-ca71-43e6-af6e-505b99674902",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "6666aca2-76e3-4850-8055-9b16589453ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38761ae3-3a73-4f06-8964-ffe7f66a0d93",
        "cursor": {
          "ref": "4b62ebcb-92a2-4f45-b6f0-1fff1670fa4d",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "3d1f5dea-7e1b-4154-b306-46ae309f1253"
        },
        "item": {
          "id": "38761ae3-3a73-4f06-8964-ffe7f66a0d93",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "65cde2f8-23e3-4a11-ac53-5c99d37413ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19300db1-6dc0-4d58-ab27-ee7c7ecd5990",
        "cursor": {
          "ref": "922fc829-6d0d-4aa7-b3ad-cdbd4c733a85",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "87a369ad-d44f-4b82-b522-d05ffef9898e"
        },
        "item": {
          "id": "19300db1-6dc0-4d58-ab27-ee7c7ecd5990",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "c26799b6-56e6-4f8b-9461-44c6afb27627",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48a82abc-77df-4138-87b9-cb49a05a91c4",
        "cursor": {
          "ref": "e9e20087-44c1-4ee5-a26e-95d79c951bf9",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "7ae781ed-6ec3-48a1-81e7-ac51de04c630"
        },
        "item": {
          "id": "48a82abc-77df-4138-87b9-cb49a05a91c4",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "fe250657-a904-4bd8-96e7-d827c927b3c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "878d90de-b2e6-41aa-840e-74f350490195",
        "cursor": {
          "ref": "8b44c3f3-7f6a-4bfa-b550-9be2753e5f53",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "f96d65ce-6cf9-4775-8469-a9362acea013"
        },
        "item": {
          "id": "878d90de-b2e6-41aa-840e-74f350490195",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "11c0e361-6444-4739-b2ca-8c39c140557f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c07c84f-8991-4261-a059-82a42685c028",
        "cursor": {
          "ref": "224b4a29-270e-4f06-b4d4-36f0565a75d2",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "7de4262b-d083-4916-b70f-a6d3342a6e4a"
        },
        "item": {
          "id": "2c07c84f-8991-4261-a059-82a42685c028",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "d2187f59-056f-4bd4-99cf-657284b8263f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10a6594a-17e6-4f71-abe0-9a966f090a16",
        "cursor": {
          "ref": "4e791e6c-a443-4db8-807b-f7b8c239a419",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "5f4bd2f3-96da-4ef6-8437-0852d199cb94"
        },
        "item": {
          "id": "10a6594a-17e6-4f71-abe0-9a966f090a16",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "8b9a638e-1a18-4980-af4b-ed6c304fc06b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a76c6e43-ddf9-4e54-8064-9baae0db497b",
        "cursor": {
          "ref": "0e13c6ea-b048-49fc-97a6-91386c7be0b7",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "2c70f1b9-4bd2-40de-9ddd-f7a8d30a82a2"
        },
        "item": {
          "id": "a76c6e43-ddf9-4e54-8064-9baae0db497b",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "9dbd2a1a-9ef4-4e31-bdbd-893ce56e8ce3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "a8fce812-2832-424c-a5ac-6f32e6749041",
        "cursor": {
          "ref": "0b8cba12-6d5e-4b7d-b676-f924310de083",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "091e9907-d6bb-4656-870d-c8bbd644e49d"
        },
        "item": {
          "id": "a8fce812-2832-424c-a5ac-6f32e6749041",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "ec9a5a07-200c-48ce-b47f-5e68ae2d9239",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6567303a-2ef4-4f77-9966-7137951b11d6",
        "cursor": {
          "ref": "275336db-bd77-47f5-86ee-0e16b2705020",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "fadbdc1f-3d32-4eef-83b8-ac537a5df24b"
        },
        "item": {
          "id": "6567303a-2ef4-4f77-9966-7137951b11d6",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "e317a751-d650-407e-88b0-3d236cba8c4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cde7e16-b4f9-4a99-8020-e7be46d95aeb",
        "cursor": {
          "ref": "01236653-6d26-4191-a03a-b995b5f49ff2",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "f6fd5b71-2115-46f2-937b-6ae25a38227e"
        },
        "item": {
          "id": "7cde7e16-b4f9-4a99-8020-e7be46d95aeb",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "49392b69-8586-41ff-8e55-dd0d31d08f0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4f3e20e-9f90-48d7-b93f-b7d02cca6795",
        "cursor": {
          "ref": "7f6bb4e5-3b56-474b-8746-adf9d76f7086",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "e8da8fd8-b977-45b3-8d90-a1606b8d0f32"
        },
        "item": {
          "id": "f4f3e20e-9f90-48d7-b93f-b7d02cca6795",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "649515da-c891-4719-be0f-ce00450fd9d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb41a570-0605-4cf3-be19-1a160e6246e4",
        "cursor": {
          "ref": "732d28f2-ef23-4491-83c2-74fbc33e77c1",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "dfe83a4e-85a7-4d13-b415-550b4bc5d0a7"
        },
        "item": {
          "id": "bb41a570-0605-4cf3-be19-1a160e6246e4",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "407b092a-a41f-4fa4-b656-62cdf667fd9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a82f36a2-9f7f-4bb8-9e3d-32d8c64741b7",
        "cursor": {
          "ref": "3d834a14-229c-444b-9690-3a3baae835c0",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "f3983952-c559-4bfc-9b85-7a0c9f5435f6"
        },
        "item": {
          "id": "a82f36a2-9f7f-4bb8-9e3d-32d8c64741b7",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "925da5bd-fb2f-4c31-bad0-ade85dc66b9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72d1252a-ede9-4fbe-95aa-eb5995e37490",
        "cursor": {
          "ref": "0d1483fe-3bd9-47ef-914b-01efc299f7a0",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "932a3ebe-ca77-48f8-9684-0eeb413886ca"
        },
        "item": {
          "id": "72d1252a-ede9-4fbe-95aa-eb5995e37490",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "ec746fa2-43c8-4525-9f77-e2be9fc03ef2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dac5fdf-78c2-4048-a2c8-b827ff8621ff",
        "cursor": {
          "ref": "0f3af7ba-f382-4433-b5ac-abf9eac2cee3",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "3f9e5095-52fd-48d3-bdd1-b2a38239a7e2"
        },
        "item": {
          "id": "0dac5fdf-78c2-4048-a2c8-b827ff8621ff",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "c32c18cc-44e3-4372-a0f3-ffb8376bf82c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45344e68-81f3-49c4-9fac-55faea81186a",
        "cursor": {
          "ref": "73d0f9df-7b56-4cba-a83d-1ef72777130b",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "39ef6f6f-9327-419f-8432-3482882d1947"
        },
        "item": {
          "id": "45344e68-81f3-49c4-9fac-55faea81186a",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "552c1219-0841-4fd1-9bde-7899f21de8ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a783d8d-bb5c-43e1-be18-883e6e45aec8",
        "cursor": {
          "ref": "c4830ae2-9150-49de-8e2e-16bf43865576",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "b6e3dffb-8e9c-4223-8d87-3dfdfb82ff1f"
        },
        "item": {
          "id": "4a783d8d-bb5c-43e1-be18-883e6e45aec8",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "5f5fb0e5-a2ff-4f1e-9dc1-c0e203b71577",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10dd08ed-a867-4d6c-9a72-c182306b2093",
        "cursor": {
          "ref": "5b336172-0772-4bba-b180-fc53a003df1d",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "def6661a-f572-40c3-9f1d-09aca4f200d6"
        },
        "item": {
          "id": "10dd08ed-a867-4d6c-9a72-c182306b2093",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "3916ae22-b62a-4e0a-abf7-9a487efa8589",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05afed4d-ab9f-43d9-8230-d4e122f22ff4",
        "cursor": {
          "ref": "9f6833cd-70c8-4916-8b76-d81c42953f42",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "a005ec88-5fd5-4703-8b32-9e7333d7f234"
        },
        "item": {
          "id": "05afed4d-ab9f-43d9-8230-d4e122f22ff4",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "6244c52b-dddd-426a-9519-b2a2855c084e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb648383-d0fe-44ee-a6d3-6cf506ec92fc",
        "cursor": {
          "ref": "f255656a-5f2b-448e-90b2-33c0323db488",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "9fd07367-c93d-4a46-8f56-74d13c1b70c2"
        },
        "item": {
          "id": "fb648383-d0fe-44ee-a6d3-6cf506ec92fc",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "cf8ba305-0142-4bf5-816c-3ce5adf3dbc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b812ad8f-ca74-4104-b47b-5abba3b0b136",
        "cursor": {
          "ref": "d7dc8b9f-7c73-41e0-b56f-11e18d80f0cc",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "75f2e7c9-18ba-438f-a0d5-85c550673001"
        },
        "item": {
          "id": "b812ad8f-ca74-4104-b47b-5abba3b0b136",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "ded9681b-9a42-4772-bdfd-cf6e735995dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5814088-3bad-427d-bbd4-78dbc126e8a3",
        "cursor": {
          "ref": "67f7fc7d-86ca-4684-9428-42f3961fd5d3",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "38502197-14b9-43e0-899c-09e81dcf992d"
        },
        "item": {
          "id": "e5814088-3bad-427d-bbd4-78dbc126e8a3",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "ed35ce04-d2b2-46bd-acba-d1d3b9b7220b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63d76c23-d567-469c-b033-45397f6b8c30",
        "cursor": {
          "ref": "97888ad3-e043-4391-97f2-6848469955d3",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "650b6784-e95c-48a0-81e2-b7bf4cc85883"
        },
        "item": {
          "id": "63d76c23-d567-469c-b033-45397f6b8c30",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "7414266d-264a-4706-9ead-f6ab9e5dca91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3d01381-24ef-4618-a812-1575b03c84ae",
        "cursor": {
          "ref": "13820173-3d34-496a-a339-031486328cc0",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "1b7ecf6e-5db6-4557-a32f-23682357a7e0"
        },
        "item": {
          "id": "f3d01381-24ef-4618-a812-1575b03c84ae",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "f783fe35-6f52-4a63-9b6a-49bdb1df962f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4188823-5d19-441f-9890-195c78022181",
        "cursor": {
          "ref": "2775709d-c606-4ac6-9088-fa981b602567",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "f541ce11-8529-4d71-be70-7bccb525d55f"
        },
        "item": {
          "id": "d4188823-5d19-441f-9890-195c78022181",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "01328fc1-905c-4acf-8e97-22ffe5571320",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b34edc11-9a37-41df-a322-d9bce239f2e7",
        "cursor": {
          "ref": "c569a749-937f-455e-a1b2-caf3d990c275",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "6b0d41e6-2fca-4faa-8d01-aa29709beb17"
        },
        "item": {
          "id": "b34edc11-9a37-41df-a322-d9bce239f2e7",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "7a6d1d88-d6a6-48f0-bbe1-5d3ee78b41c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a8782d4-99ae-47dd-8986-4047c1b25816",
        "cursor": {
          "ref": "8a247287-6334-4c11-b605-2c35ae0ab33c",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "c7c71f5e-d29d-48de-b4b8-1bf791b161a9"
        },
        "item": {
          "id": "6a8782d4-99ae-47dd-8986-4047c1b25816",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "f25895a8-1d70-4def-bfb4-d314e2dc25e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91a81ed4-1cba-4bf3-aa04-0c8f17fe0516",
        "cursor": {
          "ref": "f7b1295f-8c7d-45d6-acc2-535f91c79eb1",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "51ab7a17-5b26-4e47-a4f6-188c3b438eae"
        },
        "item": {
          "id": "91a81ed4-1cba-4bf3-aa04-0c8f17fe0516",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "a58f9b66-346b-451f-bdbe-8be7a38ec2cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51a06b4d-8743-442a-b696-1c7c8a722dd0",
        "cursor": {
          "ref": "99563c34-16e5-4daf-9d96-5e6726ea1317",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "86308010-cc3e-466a-8917-b2a5c74f0fb6"
        },
        "item": {
          "id": "51a06b4d-8743-442a-b696-1c7c8a722dd0",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "1c8b73c8-20f6-4ac4-9459-1a450914f77c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1c2c18b-f1f8-47de-800d-3ceb270b10e2",
        "cursor": {
          "ref": "e810f165-350e-406a-8f82-9600e16596dc",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "10782dd4-8cc3-4eb1-882b-e6c908c941a4"
        },
        "item": {
          "id": "f1c2c18b-f1f8-47de-800d-3ceb270b10e2",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "398eef76-c829-4290-8fc5-0938df60f275",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35fb1767-5435-4ff7-8ef4-fe639ee8129e",
        "cursor": {
          "ref": "292799d5-9669-4ad1-ad46-b06ee357ff22",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "a852c202-b5ea-440e-b58f-eddab150157e"
        },
        "item": {
          "id": "35fb1767-5435-4ff7-8ef4-fe639ee8129e",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "dfd3b39e-a1ff-4ee6-a1f5-24242e21fc02",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9ece574-689a-4a1a-ad42-8eebc08201df",
        "cursor": {
          "ref": "36471f4f-a792-4d32-a1ea-1c8ade01088f",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "2bc17957-dc9c-4b85-9ae2-ae3a9499c24e"
        },
        "item": {
          "id": "c9ece574-689a-4a1a-ad42-8eebc08201df",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "c418e07d-629a-40dd-8a31-f0a4fe591159",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d33dc66-7a6c-40bd-ab6c-c4877f25233f",
        "cursor": {
          "ref": "eb02e8ac-66cb-4546-8edb-403bd5a9d771",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "5dc2d516-a25c-47c7-a1d4-8f1523dad527"
        },
        "item": {
          "id": "9d33dc66-7a6c-40bd-ab6c-c4877f25233f",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "1a378554-a80a-47d0-b893-ec02b3cebfc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "765fde49-56e9-48e0-8a49-88bb96f9f9f9",
        "cursor": {
          "ref": "644805f0-4195-4f59-9588-23563be6059c",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "3b35649c-d501-4e7e-93a3-54c01fcdc32e"
        },
        "item": {
          "id": "765fde49-56e9-48e0-8a49-88bb96f9f9f9",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "569a1e9b-6c6d-4aff-9391-3b5235a33f26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9288379a-6f81-4adf-8187-0764c7499f90",
        "cursor": {
          "ref": "3125562a-7fed-43d3-8e84-42dfc47cd644",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "d02caf71-5c5e-46e4-9c29-061f0983add3"
        },
        "item": {
          "id": "9288379a-6f81-4adf-8187-0764c7499f90",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "8327d416-9cfd-4acf-b407-e38a6f969c09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db3dbf4d-5815-40c9-86ef-f8c936ca86e2",
        "cursor": {
          "ref": "ed8b0d28-c507-493c-a91b-3c2c44531113",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "911956a6-9490-423d-b0e3-ddb0e8aa4cfe"
        },
        "item": {
          "id": "db3dbf4d-5815-40c9-86ef-f8c936ca86e2",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "a4a3778f-ff90-48af-80ff-2e6ae903b1e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "427bbcdd-a5a0-431d-af32-b5041ec087ea",
        "cursor": {
          "ref": "dda15372-2c21-4d6a-8786-fb075715719f",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "e17fd116-cc32-4ea0-b527-d47599fcba76"
        },
        "item": {
          "id": "427bbcdd-a5a0-431d-af32-b5041ec087ea",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "d88e8c87-afea-47ed-ada3-17bada34349d",
          "status": "OK",
          "code": 200,
          "responseTime": 92,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "3b4d603d-318b-420f-82bf-50129fca6976",
        "cursor": {
          "ref": "a9db93e7-d1e4-4b9f-b066-add392d82ad7",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "5ae41eeb-e867-4422-b392-7fb0c965f471"
        },
        "item": {
          "id": "3b4d603d-318b-420f-82bf-50129fca6976",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "2562a465-4a2a-4942-8e68-d96d44decdfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90fb8746-9cfc-4e1f-9c06-10040025da1b",
        "cursor": {
          "ref": "70d5b1e2-1eb4-49eb-aefd-67074f09b9c0",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "0a0bf216-6b87-4fe0-8862-8d66da025631"
        },
        "item": {
          "id": "90fb8746-9cfc-4e1f-9c06-10040025da1b",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "b62b9139-eac8-4d13-a035-f9acc5710df1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4220eb1f-0b71-42ab-858c-17b9b60e4b85",
        "cursor": {
          "ref": "0e510915-237c-4397-b9a9-373ae7fea016",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "45a9dab0-4d07-4262-8c7d-77a7ce9be589"
        },
        "item": {
          "id": "4220eb1f-0b71-42ab-858c-17b9b60e4b85",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "103f100b-9ac3-4c9b-bad2-8e39afb952dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78f7fa97-7d17-42bb-af4d-e6cf3e182edb",
        "cursor": {
          "ref": "a524eeb1-2ce6-4f24-82f9-d12b7c5532a0",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "3949de99-0cec-4cec-8438-30baa0699226"
        },
        "item": {
          "id": "78f7fa97-7d17-42bb-af4d-e6cf3e182edb",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "b93be66d-5218-45dc-8a35-9454496b370d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c461da1-44c6-4028-8972-4db7d4159622",
        "cursor": {
          "ref": "88991227-c293-477f-be9a-c9244b507c7f",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "07b2a754-6aff-44ec-a0af-605d7b5de257"
        },
        "item": {
          "id": "7c461da1-44c6-4028-8972-4db7d4159622",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "d735e91e-e92c-4743-830a-229a8880f9ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a56d0ed5-af87-498a-92b1-2bfb0d2b29d6",
        "cursor": {
          "ref": "1a749edd-0912-47d2-8e3b-faf3fed73b2c",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "eb6e51a7-c62a-45c4-b14d-d02b41cd766d"
        },
        "item": {
          "id": "a56d0ed5-af87-498a-92b1-2bfb0d2b29d6",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "46705d8e-a68f-4254-b43e-6bc1e6f4f964",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f06413c8-dbf9-4c13-9227-5ceaa9b08ffa",
        "cursor": {
          "ref": "fcf2876f-7462-4ebb-b3fc-48e5fee201b2",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "fd738ba4-11f3-4e1d-b890-764376de8300"
        },
        "item": {
          "id": "f06413c8-dbf9-4c13-9227-5ceaa9b08ffa",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "098996f3-0835-48b5-a8ae-b474bf6024e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e843ae28-7287-42fe-83ad-040c19f10fa9",
        "cursor": {
          "ref": "8575c36f-1ec4-4264-9940-9e02f6ff7a65",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "73c2228f-840f-4ab0-bf10-2db5a209787a"
        },
        "item": {
          "id": "e843ae28-7287-42fe-83ad-040c19f10fa9",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "53905545-5b56-42fd-8ed5-53f6177c26ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7a973fc-3b6c-4df5-bb41-bb2f90371a5d",
        "cursor": {
          "ref": "85e587f3-4ad5-41fa-a992-a9f65d1a6719",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "3decbb5b-f897-4924-b158-da5a7daadc1e"
        },
        "item": {
          "id": "f7a973fc-3b6c-4df5-bb41-bb2f90371a5d",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "133ab2ad-f56f-4bbb-aaf7-74456d3143a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe3fbae9-7399-4062-8578-4b1f6e943d48",
        "cursor": {
          "ref": "194c5cba-d225-4e4d-92c5-27b20e19f88b",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "e3170695-9118-4353-8520-cbe61320a1bc"
        },
        "item": {
          "id": "fe3fbae9-7399-4062-8578-4b1f6e943d48",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "702193cd-f69a-497b-8bcc-56b8845915e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "253465e6-f661-4d30-bd5a-b07d14777acd",
        "cursor": {
          "ref": "bc8fac11-2c69-455c-9569-add0ff39d9b5",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "665008d9-ede6-405b-89aa-c84f89d155e6"
        },
        "item": {
          "id": "253465e6-f661-4d30-bd5a-b07d14777acd",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "4fb36fc6-43d5-412d-a618-fed956f19325",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00870fc0-5103-4bd8-bad9-072409682e76",
        "cursor": {
          "ref": "16785ed2-f70e-4ee8-bb17-91d451026eb6",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "8afe4e0b-8e47-4a09-babd-b57063314164"
        },
        "item": {
          "id": "00870fc0-5103-4bd8-bad9-072409682e76",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "a3a14659-a96e-4857-84d0-8e9c49947254",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2bc89eb-43dd-4a27-bc2b-b8f9c5e15378",
        "cursor": {
          "ref": "30eb1f5e-5312-47cc-91c8-ec61204cddaa",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "6ed67613-2247-4bc3-8baa-806f65c800d5"
        },
        "item": {
          "id": "e2bc89eb-43dd-4a27-bc2b-b8f9c5e15378",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "006db1f0-e1f9-455b-970d-d53c4f5b2917",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "778d8705-0127-43aa-b64e-ca8e7c42a0ee",
        "cursor": {
          "ref": "c83e316e-99cb-4187-9aa3-d032db46633c",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "40988ee6-fbf3-469e-929b-9e48f34f2462"
        },
        "item": {
          "id": "778d8705-0127-43aa-b64e-ca8e7c42a0ee",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "bd9267b7-3cdb-4f93-9422-22f92432dca1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99b4e575-fad9-489a-8453-06cc50c7cff4",
        "cursor": {
          "ref": "187b9fc7-5689-43f3-ba06-f86dc30cf4c8",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "2d3af27b-9665-4b80-9a23-afc11b304d5a"
        },
        "item": {
          "id": "99b4e575-fad9-489a-8453-06cc50c7cff4",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "a937936c-7586-4a2c-832e-f2e270f9e616",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6648504-99bf-4038-898f-026758fa8af8",
        "cursor": {
          "ref": "246172b8-e06b-4787-b38b-f339119feaf2",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "0f755628-cae2-4886-b9dc-ab0e5cc2d23a"
        },
        "item": {
          "id": "e6648504-99bf-4038-898f-026758fa8af8",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "82776fdb-a078-4a8e-a1c5-ce7374a61843",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15dfc8fe-233b-47b3-aadd-2f8170d55866",
        "cursor": {
          "ref": "1cb111d8-5d9d-45e9-a35d-948db7c1c1c0",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "e06eb8d7-bc8f-4f37-9d8a-03cab439ec2d"
        },
        "item": {
          "id": "15dfc8fe-233b-47b3-aadd-2f8170d55866",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "94277b15-a0db-4c74-8cc6-aa63c80fd9a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6954150-7761-44c5-b4c3-35edbab570b3",
        "cursor": {
          "ref": "aeba9e58-ade8-4829-82f0-eaccda989139",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "6befdc4b-5b7f-44ad-9a32-d7caddc11e1b"
        },
        "item": {
          "id": "c6954150-7761-44c5-b4c3-35edbab570b3",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "fa2327f3-2962-4a32-87cd-9dd08e364263",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f54f4f78-862f-4dbe-a2fe-f4794fbfafa9",
        "cursor": {
          "ref": "ffbaa3ca-167a-4141-a57d-87ea8b377ab9",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "64027468-41dd-449a-ad2f-74c5e4d73b19"
        },
        "item": {
          "id": "f54f4f78-862f-4dbe-a2fe-f4794fbfafa9",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "c3f8c7e1-ef5a-436b-9beb-9249c1dbb72d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1da5312-5c1b-48fa-8a3f-3855cb97034d",
        "cursor": {
          "ref": "d01152c0-32d2-4dee-b0b8-ea251743aaf1",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "9f44bdad-a48c-4e08-a048-4a5d87c46642"
        },
        "item": {
          "id": "b1da5312-5c1b-48fa-8a3f-3855cb97034d",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "b35f82f3-5f53-4ad7-bded-19886c5fd8d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a9189dc-71c1-486e-bf9c-f7bffe44729e",
        "cursor": {
          "ref": "1fb44727-c21d-4664-b778-a0c661822254",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "76c0942c-7283-4f7f-bcd0-a85b9db53d98"
        },
        "item": {
          "id": "6a9189dc-71c1-486e-bf9c-f7bffe44729e",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "170ad942-dd8f-4b7a-b023-2d3974206ef4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62636528-e97c-424b-a5cf-85b0e8908f4a",
        "cursor": {
          "ref": "28f67b8f-cf97-4694-ba50-1a673ffd5e03",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "9bd423f7-4a62-44d4-b3b4-0e46252113e6"
        },
        "item": {
          "id": "62636528-e97c-424b-a5cf-85b0e8908f4a",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "3a12d714-b436-49a3-8db9-801743daad21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a544768-0960-4335-87f4-3566432fbce2",
        "cursor": {
          "ref": "024479cf-8eae-43a2-bb8e-8fc4b2be19af",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "45579983-b617-422a-8d63-6c7dbc2225f6"
        },
        "item": {
          "id": "3a544768-0960-4335-87f4-3566432fbce2",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "1477e66b-6059-42e0-972c-898b9d5a9bfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da6a7f51-eb31-4905-bed6-c6cbbf878804",
        "cursor": {
          "ref": "d5b03b03-b845-4bc5-aad4-653ba10b91d6",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "505c9951-facd-48b3-99a1-1d37bbf73880"
        },
        "item": {
          "id": "da6a7f51-eb31-4905-bed6-c6cbbf878804",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "a14ed37b-dee9-4150-9a13-f002e05bfef3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a003cba8-1f02-462a-9191-de0254f2d880",
        "cursor": {
          "ref": "2849b639-6c54-4f8e-9e9a-39351a619794",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "adf9de2d-0f92-4dd0-83e3-35da4ce26a81"
        },
        "item": {
          "id": "a003cba8-1f02-462a-9191-de0254f2d880",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "231530cf-4b4a-45fa-8b3b-0f2a4e043c80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d719bb77-7eac-4d2a-9f0c-884d271eb314",
        "cursor": {
          "ref": "0d024b3d-6524-4566-b74c-97491152875d",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "b49fb844-ccc8-4aa0-a2b5-46b63b0f9666"
        },
        "item": {
          "id": "d719bb77-7eac-4d2a-9f0c-884d271eb314",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "de9e9c3b-8968-43b3-be80-f0873514d0d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff57fd69-a4c7-4ea9-ae39-696ab1024091",
        "cursor": {
          "ref": "bc1d7d3d-4487-4c3e-91e5-7725ebbec1fd",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "b8b890ff-94bc-48bc-acad-13e2b57509b2"
        },
        "item": {
          "id": "ff57fd69-a4c7-4ea9-ae39-696ab1024091",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "d1c0d2e8-6bd0-4654-b95f-6b827bdaf25f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b846205f-a576-47e6-9e4f-5433ed2895f1",
        "cursor": {
          "ref": "6cd12ecc-7114-4375-adc1-92a5277033a9",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "df193cba-aaaf-4343-b2c7-1c2a1f5eea77"
        },
        "item": {
          "id": "b846205f-a576-47e6-9e4f-5433ed2895f1",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "f2001095-3cd3-45ac-aeb1-0e1f0c1df051",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "313e7744-2faa-4ad0-a33d-fba398077758",
        "cursor": {
          "ref": "77613d6c-f608-4dc9-81dc-3c554805083e",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "5be57e1e-3401-497f-b4bc-7c2bf6c47e95"
        },
        "item": {
          "id": "313e7744-2faa-4ad0-a33d-fba398077758",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "0f9b8076-fcee-4dc7-8ad0-7d136be6eaad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af1eaff0-8bcc-45be-aa6c-6f1b0600f521",
        "cursor": {
          "ref": "319def35-f70b-4159-ada3-0edf747b65d0",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "d3bbf952-768b-44b1-88ed-270738b37d09"
        },
        "item": {
          "id": "af1eaff0-8bcc-45be-aa6c-6f1b0600f521",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "1569e56e-5ce2-445d-8df7-fb8fae7d7ff0",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "ee341f1b-6ef2-405f-a635-609badebc512",
        "cursor": {
          "ref": "6c63e89e-6607-4b1a-97bd-a0ea6c1b032b",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "5b7682e1-4b1e-4bc7-bdb3-c2ab77a4274b"
        },
        "item": {
          "id": "ee341f1b-6ef2-405f-a635-609badebc512",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "f0976ba7-acd1-45b8-8959-c87e0c0f6401",
          "status": "OK",
          "code": 200,
          "responseTime": 88,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "2a63d7dc-11b7-4e62-9e27-e6c3f39891df",
        "cursor": {
          "ref": "4327c591-a12e-4f2d-8f72-a811faff7829",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "b9e3c436-0ed7-4522-86d7-5d6519ad745c"
        },
        "item": {
          "id": "2a63d7dc-11b7-4e62-9e27-e6c3f39891df",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "22a24921-a44b-460e-9928-b2a9d9a9a8e8",
          "status": "OK",
          "code": 200,
          "responseTime": 78,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "aede7062-c31a-401f-a498-ea56bc97e6b8",
        "cursor": {
          "ref": "a0ee75a7-d5da-4bc0-89d9-4eef67803df1",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "2515e419-1f5a-4df9-8c3a-3eba0473b34b"
        },
        "item": {
          "id": "aede7062-c31a-401f-a498-ea56bc97e6b8",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "8ecc868b-c22e-48af-81c3-621739adc4f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "582aad04-111e-4ea0-962e-51dc8056a953",
        "cursor": {
          "ref": "4c796b0a-12e6-45bf-b685-a3b07f5a1277",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "08ff0ec9-2d70-4f7f-a9b9-d07e5edefb71"
        },
        "item": {
          "id": "582aad04-111e-4ea0-962e-51dc8056a953",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "649144ca-5356-4761-b7d8-00a1cd376993",
          "status": "OK",
          "code": 200,
          "responseTime": 90,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "7074def0-87c8-4575-87f2-9b7382a9fcc5",
        "cursor": {
          "ref": "d1d91a7f-eecf-48eb-b44a-cab7dfce8de8",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "19f1bdbe-7a86-4e85-99aa-a4904ad26589"
        },
        "item": {
          "id": "7074def0-87c8-4575-87f2-9b7382a9fcc5",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "912e8aaf-4ead-45e4-8350-4e0d11bb8d14",
          "status": "OK",
          "code": 200,
          "responseTime": 77,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "71ee4eb4-6ddb-4ed2-8d49-65321ece58d3",
        "cursor": {
          "ref": "22d65389-1eab-41b8-809f-c492d4388ae3",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "38f1b9e8-0f90-4df5-916a-52abd5a6da4f"
        },
        "item": {
          "id": "71ee4eb4-6ddb-4ed2-8d49-65321ece58d3",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "2c8d0b3c-d9a6-4f1a-b5a0-8db4e37805ad",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "89a57541-b25b-4cf9-908f-ada2a87a7a11",
        "cursor": {
          "ref": "d1fc7453-0e62-4dc0-b3cd-020e43467c99",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "d17ab919-b79a-4943-a3b2-ec328a89ba2e"
        },
        "item": {
          "id": "89a57541-b25b-4cf9-908f-ada2a87a7a11",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "960a072b-8896-49d6-89e0-e0e2454df7a7",
          "status": "OK",
          "code": 200,
          "responseTime": 96,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "9b97905a-df78-4214-b6c4-f121e94f7e8e",
        "cursor": {
          "ref": "c2f79c92-8c9c-4997-88be-9370e27e6cf6",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "801ced92-6e11-485a-a969-1d42edfde697"
        },
        "item": {
          "id": "9b97905a-df78-4214-b6c4-f121e94f7e8e",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "6cc318c0-e308-49c0-94db-f09f2ecad1ef",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "22ad1827-fd61-4345-88dd-c59f91979559",
        "cursor": {
          "ref": "8e91697f-7482-4670-a150-69e047457bb1",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "229a4f50-9300-4b3b-bb02-329e59ee32f0"
        },
        "item": {
          "id": "22ad1827-fd61-4345-88dd-c59f91979559",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "524b93bf-6374-4710-81d3-46a338bdf02b",
          "status": "OK",
          "code": 200,
          "responseTime": 100,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "33fcbeec-573f-486f-82c6-bb10834e58a8",
        "cursor": {
          "ref": "dc7b70db-2e67-4084-a7ca-7e5626fc5b46",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "201a2448-69ba-4647-a5cd-2906110fd39d"
        },
        "item": {
          "id": "33fcbeec-573f-486f-82c6-bb10834e58a8",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "26ec96a0-5d40-474b-b07e-1dc586608b73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fa11765-ca1a-4015-840d-4daed55c1bd9",
        "cursor": {
          "ref": "ba1572b9-e494-40de-a119-1411060cac5e",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "bde6f62e-d165-4a8b-a98b-98eaf67211a6"
        },
        "item": {
          "id": "1fa11765-ca1a-4015-840d-4daed55c1bd9",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "e6b03817-eb5c-4d28-b691-a65a47cc0314",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc0dead3-2f2a-401b-b324-6626b718b838",
        "cursor": {
          "ref": "0c40df35-9a66-4dd6-8106-b3a76ad69989",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "79642d28-41a3-45c7-b7e8-d0ccd71d423e"
        },
        "item": {
          "id": "dc0dead3-2f2a-401b-b324-6626b718b838",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "06651b73-1aa3-497e-a9b6-8aae252ca6d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "caef11c1-07f9-4c7b-9b34-78c7ca4db4e1",
        "cursor": {
          "ref": "32c6c55d-86ef-42ee-b201-a03cb86d3764",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "0eae6b0e-4880-4a29-8b09-a1007cf2b66c"
        },
        "item": {
          "id": "caef11c1-07f9-4c7b-9b34-78c7ca4db4e1",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "a33341ee-0b5f-4441-91fb-78e942947012",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a57c9912-a7f9-428a-8371-3682d0f16417",
        "cursor": {
          "ref": "f881faf3-ccdd-4e31-9a4b-057a128bfb9c",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "abfd416a-884c-4cd1-97c8-e70bc5be90e9"
        },
        "item": {
          "id": "a57c9912-a7f9-428a-8371-3682d0f16417",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "2a4881c6-fb2a-4234-a7e7-5886602f9680",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de7c92ba-d851-4bcb-b4d0-f18e9a86c808",
        "cursor": {
          "ref": "834d0c84-0744-4046-913d-09a93e7a02e8",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "97c4845d-10cb-4c20-bce7-db41c42167d6"
        },
        "item": {
          "id": "de7c92ba-d851-4bcb-b4d0-f18e9a86c808",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "bdd66f6e-db60-4387-a463-5d98af78aab1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82166dfa-97f6-4581-af9f-7dffa156bb85",
        "cursor": {
          "ref": "22c68ff5-9e8d-494c-85cd-30065764a7bf",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "94081e5f-64b5-47ed-86e6-b0ccad744ce6"
        },
        "item": {
          "id": "82166dfa-97f6-4581-af9f-7dffa156bb85",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "13b2a408-0aed-4244-ac49-64e8b542734c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c0159e1-8a4e-4cd0-9671-125b8dedbfd5",
        "cursor": {
          "ref": "a5e28193-5a26-4ffd-b82c-8efa0e8d2dbe",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "44d4f0da-3b38-426f-a7e3-bb17e6b330de"
        },
        "item": {
          "id": "4c0159e1-8a4e-4cd0-9671-125b8dedbfd5",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "aa50f0d3-d07a-4015-828a-d028cd610c86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43262895-d314-4af2-9341-d641d1c8a75c",
        "cursor": {
          "ref": "ae17813d-4fe4-4486-a263-68101c00a736",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "66499c65-0c22-409b-ab5b-d7ef025ee73b"
        },
        "item": {
          "id": "43262895-d314-4af2-9341-d641d1c8a75c",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "f4394562-0ea7-462b-871f-765b069b294e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "756982a9-b8fc-4f4f-8b97-f68455b6a363",
        "cursor": {
          "ref": "1fede4ea-dc69-4b26-8eca-691928babb8f",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "02079087-cfad-412e-a2e8-9ea4b1a58d1c"
        },
        "item": {
          "id": "756982a9-b8fc-4f4f-8b97-f68455b6a363",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "b0b3b405-861f-4442-bf0a-5e50e89decd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cacc853-553d-47ce-a867-31c3cc5c1c88",
        "cursor": {
          "ref": "5fd1dea3-9511-4e94-be9d-fa7c8ddc90e7",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "7adcbdc4-9419-4765-8fb5-f2552fa3cb59"
        },
        "item": {
          "id": "7cacc853-553d-47ce-a867-31c3cc5c1c88",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "c80b0b09-d7a0-41da-8204-60508ee7b3d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df031ac1-10af-4daf-8b78-579300eb208f",
        "cursor": {
          "ref": "b5881fa9-f45c-4ce4-aea9-fe6a9c8a0e53",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "067314c9-b9f0-4d61-8e03-dd1b582c0f86"
        },
        "item": {
          "id": "df031ac1-10af-4daf-8b78-579300eb208f",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "80d5d5dd-8176-4038-a79b-97a68d38de52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82a2a4f7-8fbe-481a-a7fc-c875934fe2a7",
        "cursor": {
          "ref": "59f23d48-830c-46c4-8be4-8f3c787826fa",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "9f338855-1103-4a21-bebd-c8711dd397d6"
        },
        "item": {
          "id": "82a2a4f7-8fbe-481a-a7fc-c875934fe2a7",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "e5321ab3-dbe4-4e84-9403-583870d0361d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f49cc35-055c-4682-a2e7-0291b0ff5d6c",
        "cursor": {
          "ref": "0ebb4bcc-5c5a-4f9b-9399-dd720a356f7d",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "8cb3381e-3bc9-4bd4-9bb0-5eb3c4d55802"
        },
        "item": {
          "id": "2f49cc35-055c-4682-a2e7-0291b0ff5d6c",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "d83a26c9-0bef-425f-a46d-b66da604a94c",
          "status": "OK",
          "code": 200,
          "responseTime": 101,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "024917b1-65c1-48cc-bad4-c1a356578d6e",
        "cursor": {
          "ref": "9da35c98-5bd8-4615-9a13-10459a6d5ea9",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "ab077d96-67ff-4a18-bb3c-a9727baa29f2"
        },
        "item": {
          "id": "024917b1-65c1-48cc-bad4-c1a356578d6e",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "532f2313-9e65-41d3-8a5a-ec4ce94f9065",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "cdba3537-4ea0-42a5-b7eb-2597f11e8ab4",
        "cursor": {
          "ref": "5d7cbb8a-16b2-468c-bc34-0977000fed4c",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "1bd84ce4-3286-45e9-bf0c-4c0a2b2ce317"
        },
        "item": {
          "id": "cdba3537-4ea0-42a5-b7eb-2597f11e8ab4",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "77690656-97a7-4b17-9c53-f8de25063716",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "9470dd9d-b65a-4524-985a-91a1ac8ad960",
        "cursor": {
          "ref": "07659a66-7b5a-4663-91da-98fe80ff6e99",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "f09df781-4f7e-4cf1-b1f2-58fe7d3bbb5a"
        },
        "item": {
          "id": "9470dd9d-b65a-4524-985a-91a1ac8ad960",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "971a9d66-9d65-49e3-8554-35067fbc6aa0",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "2d1ec00d-d7b6-4455-98aa-492eac0712e3",
        "cursor": {
          "ref": "d9288920-c9f3-4495-ba4f-1ccc23e3977b",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "2b2b8ff1-d7d4-42d4-91d3-d71f252ab2bf"
        },
        "item": {
          "id": "2d1ec00d-d7b6-4455-98aa-492eac0712e3",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "3ff136e2-6ef2-4211-a3b9-c6b2968f33a9",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "8fb52c22-b4fb-4d9a-9029-c8921d506b8f",
        "cursor": {
          "ref": "aa197522-52c1-4d9e-b8db-71403d210b31",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "c9aae674-0d36-4358-b5e2-4eab561bbc53"
        },
        "item": {
          "id": "8fb52c22-b4fb-4d9a-9029-c8921d506b8f",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "40142b90-5253-47cb-84da-77655b1bf767",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ceb2311-350e-4a2d-a5c2-cbb97748f8a8",
        "cursor": {
          "ref": "6ab0c1dc-a3bb-4f78-8854-c246b119f6ef",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "9318d017-1e73-4f78-9641-2bd501c94de5"
        },
        "item": {
          "id": "7ceb2311-350e-4a2d-a5c2-cbb97748f8a8",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "3fda1c91-706c-4f0f-8a8a-2278068007c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c11adc97-c6a1-44dd-bbdb-0d8f4cc65281",
        "cursor": {
          "ref": "55912d5c-f266-43f2-86e0-d7334a14b879",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "beab3110-8e85-474a-8476-ec0ca4c5b397"
        },
        "item": {
          "id": "c11adc97-c6a1-44dd-bbdb-0d8f4cc65281",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "b1b241ca-4ce0-4afe-9a8d-9ad521f6916b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d77a332-2f39-4f87-9d50-247a290abb69",
        "cursor": {
          "ref": "2070c447-4070-4750-b620-bcdf2ea5d506",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "b7df9039-d7e6-4e22-a677-3066ab49039c"
        },
        "item": {
          "id": "9d77a332-2f39-4f87-9d50-247a290abb69",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "8449f078-2ac8-42e6-9eef-d76257354780",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65b598f4-318c-4f49-8fc8-3d9a649268e2",
        "cursor": {
          "ref": "099e02a4-9055-4579-8003-51faafb9024e",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "cb078450-b62d-4be0-930e-c620ed776aa6"
        },
        "item": {
          "id": "65b598f4-318c-4f49-8fc8-3d9a649268e2",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "91ecddc4-925e-492f-8eff-29287b15dc8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ea61c46-e1d1-4ccc-965e-4b26cb8c89fe",
        "cursor": {
          "ref": "0069fd16-a0ef-4845-b7be-b1e9cbff6079",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "418c0ff0-77f7-49db-ac09-39febd280c10"
        },
        "item": {
          "id": "2ea61c46-e1d1-4ccc-965e-4b26cb8c89fe",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "3dcd854e-c7f6-4dc1-b90f-de8adad3d9b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd3dfc01-4715-4557-a991-fcf445cd237c",
        "cursor": {
          "ref": "234da8a7-2a5e-4dcf-8e81-57144d4996e9",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "fb4f4e21-d6c8-4a9e-8f36-e22c45137c28"
        },
        "item": {
          "id": "dd3dfc01-4715-4557-a991-fcf445cd237c",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "c14864ea-d955-4511-9843-2b62a0827d2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b420c4e3-e3d5-4a6a-ab6b-2a1024451452",
        "cursor": {
          "ref": "c0ef70c1-85df-4cb6-895d-a9867ea365fc",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "e2be718f-56d0-47b0-a680-8fcedd053d54"
        },
        "item": {
          "id": "b420c4e3-e3d5-4a6a-ab6b-2a1024451452",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "d1114d4d-ba61-405b-971b-b463a116736c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cdb0f67-4d0d-4116-8b95-829ce1410973",
        "cursor": {
          "ref": "60dab333-9479-4f02-ab9b-382a6fba57e3",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "86d2b37a-37ee-4253-b4d1-3b72bf98ab2b"
        },
        "item": {
          "id": "9cdb0f67-4d0d-4116-8b95-829ce1410973",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "49ad6a88-d938-4291-9f64-41f4fd3d85d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "452abe8c-a460-47e2-b6fc-669cc3eaac98",
        "cursor": {
          "ref": "7cb269a8-b4f3-4d71-965f-a72e1c2ea46d",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "80f355dd-86d7-42e3-b782-30afde330473"
        },
        "item": {
          "id": "452abe8c-a460-47e2-b6fc-669cc3eaac98",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "51ca22db-f63d-4f95-8fc4-af198fefd7fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af7aede2-03bb-4768-9a81-c29fac06e4b5",
        "cursor": {
          "ref": "cfc39f07-21c7-4dba-923d-e44497c76031",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "60b3da68-f8b6-4470-bf28-4bdceae6a593"
        },
        "item": {
          "id": "af7aede2-03bb-4768-9a81-c29fac06e4b5",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "5aea3b37-2d7f-44d7-bf87-73cea175a62a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cb56801-46d0-4d00-97f4-842163114c14",
        "cursor": {
          "ref": "09dde9d8-4cb9-47d8-8578-df6367b61f23",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "53d4ef5b-255f-425a-aeef-292cf489e57c"
        },
        "item": {
          "id": "0cb56801-46d0-4d00-97f4-842163114c14",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "eca4e7fe-41bf-46ef-b724-e22c1305f235",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc57a94a-bcf1-43bf-bc8e-2c5f9484dd49",
        "cursor": {
          "ref": "e9d5611a-412d-4a47-b73e-8ccbf270b2d4",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "08fb3a4e-d768-41a2-9b34-5407d2758c15"
        },
        "item": {
          "id": "cc57a94a-bcf1-43bf-bc8e-2c5f9484dd49",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "08014c02-73a9-4ba1-ab2b-413851fab7d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bcc7e99-8b16-4b1c-aae6-42e837b563cb",
        "cursor": {
          "ref": "9dab1823-1677-49d6-a621-b3fef8bab8ba",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "1201aea8-6379-479c-8270-394223b6368c"
        },
        "item": {
          "id": "3bcc7e99-8b16-4b1c-aae6-42e837b563cb",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "72111b9d-3954-479b-a4a7-89ccf3858bc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8ea3691-5b3d-4f87-95bb-7aed708728e6",
        "cursor": {
          "ref": "5a9d695d-d465-4efc-9424-cd0aff7d5243",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "d5b75ccd-439a-4631-9f63-1ed4b2ab1209"
        },
        "item": {
          "id": "e8ea3691-5b3d-4f87-95bb-7aed708728e6",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "b6f1ad6d-390c-43b2-810f-2528b65007a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "136679e6-1b66-4f1d-9914-28bd5af51a3d",
        "cursor": {
          "ref": "52d29980-520a-4e07-a0f0-2b207ef83361",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "884d4015-7b5c-415c-8371-f2f3786823ff"
        },
        "item": {
          "id": "136679e6-1b66-4f1d-9914-28bd5af51a3d",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "a0d4020d-8547-4305-8160-24ff902f4d98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58f9b63e-eee8-45eb-a349-d9f3df8c640f",
        "cursor": {
          "ref": "7fe1ac1a-a0d0-4fd5-8994-503177b54726",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "7c6d1666-992e-4c30-a662-ad84f83dab50"
        },
        "item": {
          "id": "58f9b63e-eee8-45eb-a349-d9f3df8c640f",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "7f5f8a1f-4961-4fa7-ae17-ef2cd5e01de9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f53f4a20-ccca-4f8c-88fe-4ef0a2af4521",
        "cursor": {
          "ref": "c87ad5aa-2d32-44c7-b2d6-47e43bf6472b",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "3e5e8e0b-40d4-4125-b4c6-38e7a875eea3"
        },
        "item": {
          "id": "f53f4a20-ccca-4f8c-88fe-4ef0a2af4521",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "656d8122-1e9c-42d9-9acf-d3c45fa330e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a225c9c-614d-49ff-8ace-74526e6e8990",
        "cursor": {
          "ref": "ca9871c3-b3a9-4369-ac24-a435dae0d55b",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "7ebffeab-532b-40b7-ad80-8366141480be"
        },
        "item": {
          "id": "2a225c9c-614d-49ff-8ace-74526e6e8990",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "eaf03629-2d54-4f8b-b170-3a2e0958c805",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16b5d1b7-b99d-4107-b55c-7e9bac0bc04f",
        "cursor": {
          "ref": "3867fba4-db30-4cff-835b-032d84745fb2",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "d04a994b-ab09-4b2c-9d7b-af61efddd5f9"
        },
        "item": {
          "id": "16b5d1b7-b99d-4107-b55c-7e9bac0bc04f",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "dc022a47-fcd0-4ce3-be47-32589ba03296",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a70c5e2c-d030-47a3-9b8f-647893a20dd4",
        "cursor": {
          "ref": "4014fd37-133a-4308-abcb-213ea71ffd49",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "b9747a1d-1b9e-449f-b9de-faed00144ee4"
        },
        "item": {
          "id": "a70c5e2c-d030-47a3-9b8f-647893a20dd4",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "94d7991e-d132-4105-b364-d019415d58a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c0685d9-609a-4c6c-93a4-552b7c1b9411",
        "cursor": {
          "ref": "b8bc969c-5148-423d-8c5c-d077096dd958",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "003078d5-7741-4862-bfa1-f66f5027ca1c"
        },
        "item": {
          "id": "3c0685d9-609a-4c6c-93a4-552b7c1b9411",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "f6aeac32-f21c-4702-bb2f-c1c6626717d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c2f4b10-718c-456b-8940-b2f63add5080",
        "cursor": {
          "ref": "d608ffe6-c6ad-4218-ae56-ab004e3728bd",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "5b299cc2-3fa9-4574-b7cd-863837a39c5b"
        },
        "item": {
          "id": "2c2f4b10-718c-456b-8940-b2f63add5080",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "caa3e9f8-7c5e-435c-8001-48987d86ffdc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f865e515-3da2-43f6-80f5-694f13287fdb",
        "cursor": {
          "ref": "e53d8b01-2476-4efd-8055-04f261dffb52",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "d6b1d8b8-7f40-45bf-bbcd-254bac6c1bac"
        },
        "item": {
          "id": "f865e515-3da2-43f6-80f5-694f13287fdb",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "9a7336f9-c9de-400f-96c9-038d252465db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acf76046-1e95-439c-bbe2-d30854a34b5c",
        "cursor": {
          "ref": "8723301e-c43a-4d0f-a4e5-fd8674dc4d4e",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "c2fa26ca-df8a-4e4a-8a16-6dfbb4c3d7bc"
        },
        "item": {
          "id": "acf76046-1e95-439c-bbe2-d30854a34b5c",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "ee35a467-52d1-4fb9-add2-18203666f6f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27a4f663-c838-472e-bedb-ccc5ffce32b7",
        "cursor": {
          "ref": "d691dd96-7fb7-4501-996f-6aa6f8185439",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "d6a3a030-f505-4c1d-abe1-205a4ca37035"
        },
        "item": {
          "id": "27a4f663-c838-472e-bedb-ccc5ffce32b7",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "fdaef03e-ca23-4d64-bd67-9945421d576b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "320a96a2-a5fb-4159-b204-14cab3765ec6",
        "cursor": {
          "ref": "24aa5f12-f169-468a-81a6-3f1f333d8f24",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "03eb9602-931c-4d86-a9f9-c41c73b76552"
        },
        "item": {
          "id": "320a96a2-a5fb-4159-b204-14cab3765ec6",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "cd2e7904-52fc-4349-bd2b-393f21224de9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3f5d4a6-2d69-4482-a355-2e733d70a05a",
        "cursor": {
          "ref": "1b8b683c-c212-4cea-bd57-0c558806aef2",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "0cf6fab5-0c7c-4a2e-bd16-3e4b95fbaafe"
        },
        "item": {
          "id": "c3f5d4a6-2d69-4482-a355-2e733d70a05a",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "62d8bfc8-ecbf-4c85-a56b-837c41c49725",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cfc8aaa-25f5-499f-881c-ab6315684b1e",
        "cursor": {
          "ref": "dc5c109d-a09a-45c8-8d4f-0530b4e7c406",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "5bd920f0-b0d6-48a0-842a-4230dce49406"
        },
        "item": {
          "id": "9cfc8aaa-25f5-499f-881c-ab6315684b1e",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "d48d94ef-9ba1-4e94-b7cd-cda4822493e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7531b2d-b538-427f-a6eb-d22c72ab643a",
        "cursor": {
          "ref": "2704d8d4-0675-43f5-9db3-a329ffa9b7fa",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "b0dd10b3-6cf4-44f7-b046-7ba4e89121dc"
        },
        "item": {
          "id": "b7531b2d-b538-427f-a6eb-d22c72ab643a",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "030a040a-778f-4129-b0e2-edff1d290466",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36f463f6-7b5f-4a7e-9b5c-ce14f0044559",
        "cursor": {
          "ref": "000c8194-4625-4742-8eb4-4ed23ef47bef",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "216191dc-a2f2-4d79-99d2-bdb11f2fa117"
        },
        "item": {
          "id": "36f463f6-7b5f-4a7e-9b5c-ce14f0044559",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "27caf81f-5a38-4738-aa7e-846b03d51792",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e81216e-9cbe-4a1b-ad01-8553a85d2019",
        "cursor": {
          "ref": "64ea3166-23a6-45d7-9a3f-8709ad8cf180",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "5feeed91-8852-4b4a-be4c-3fb7a5cff408"
        },
        "item": {
          "id": "4e81216e-9cbe-4a1b-ad01-8553a85d2019",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "bb2a7b32-f292-4596-9815-4a08a4c6110a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e2a1fb3-49a6-4732-99cc-7d0b4e7a12c4",
        "cursor": {
          "ref": "9819579b-fc23-4177-b92e-f40dca045760",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "54f8ee0a-71f9-4f0e-a7dd-95fd6d5fabe6"
        },
        "item": {
          "id": "9e2a1fb3-49a6-4732-99cc-7d0b4e7a12c4",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "3437c513-07e6-4279-9b2f-f3a81ac70fb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ad9fcb0-c5dd-45bb-a903-580cdcfa0c07",
        "cursor": {
          "ref": "3b1d5f16-7f26-460e-8b55-4902d0156ac4",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "cb60a122-a493-4f88-a787-9476fd2e9716"
        },
        "item": {
          "id": "5ad9fcb0-c5dd-45bb-a903-580cdcfa0c07",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "1cabda12-2074-40cb-bab0-8bbe9aab0476",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "774ad928-4d66-49c1-bf6a-2f7bfe7c5dcf",
        "cursor": {
          "ref": "7f6126bc-24c4-40e2-8ff4-a4872f715e83",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "41ac5eb9-00a3-4b96-9f2f-55e4c133cf2c"
        },
        "item": {
          "id": "774ad928-4d66-49c1-bf6a-2f7bfe7c5dcf",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "bc7a5533-ed43-478d-b543-19ccdc6f8475",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 28,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8d4de5b-f4f4-4870-a76f-040ae7a3badd",
        "cursor": {
          "ref": "7eea54f0-0633-4858-9bf9-f494182b0cdb",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "a00bd0ac-eb1a-4f52-885e-0976df8d59b5"
        },
        "item": {
          "id": "a8d4de5b-f4f4-4870-a76f-040ae7a3badd",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "3df27b7c-2437-4eca-a5b2-3e2999b9561c",
          "status": "OK",
          "code": 200,
          "responseTime": 120,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "56b3358e-f05b-438a-a10f-fa5d09a5b0b2",
        "cursor": {
          "ref": "c346f193-e75b-419b-8e17-8ab13e3b9a8b",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "b482d230-1e6b-441d-b3a6-10d0b6528842"
        },
        "item": {
          "id": "56b3358e-f05b-438a-a10f-fa5d09a5b0b2",
          "name": "credentials_verify"
        },
        "response": {
          "id": "6130df0a-7d10-49e1-a296-8bdf06c1e91b",
          "status": "OK",
          "code": 200,
          "responseTime": 91,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "437e2851-75fa-432f-9762-31548cced7c1",
        "cursor": {
          "ref": "28fc37c5-e1f0-494e-a91c-e7da74e17c71",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "cd27df39-e4d1-40d0-954d-21354e1dbb5a"
        },
        "item": {
          "id": "437e2851-75fa-432f-9762-31548cced7c1",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "5404a43c-b80e-430b-a216-c88a17b41a7f",
          "status": "OK",
          "code": 200,
          "responseTime": 93,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "a86c1230-7632-4242-bd9a-ea750260595d",
        "cursor": {
          "ref": "5e8ff615-3517-4299-bb5f-0926daab638c",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "8d75e5e0-fefc-483e-88ea-72d9c0b843cc"
        },
        "item": {
          "id": "a86c1230-7632-4242-bd9a-ea750260595d",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "c59bf857-d918-48f7-afff-320fa6f5b24d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 27,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a86c1230-7632-4242-bd9a-ea750260595d",
        "cursor": {
          "ref": "5e8ff615-3517-4299-bb5f-0926daab638c",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "8d75e5e0-fefc-483e-88ea-72d9c0b843cc"
        },
        "item": {
          "id": "a86c1230-7632-4242-bd9a-ea750260595d",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "c59bf857-d918-48f7-afff-320fa6f5b24d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 27,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27f0319a-1362-489e-a0cb-9f8946851d6a",
        "cursor": {
          "ref": "433c1e62-d3eb-411b-8516-b6cea4f5a8c6",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "d1dbba35-fd89-4b81-8f49-84d5293ff936"
        },
        "item": {
          "id": "27f0319a-1362-489e-a0cb-9f8946851d6a",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "d1abf3f1-c05a-4d7a-bac7-a49f417f890e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 28,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e088a98c-b271-4205-943e-139a9bc41718",
        "cursor": {
          "ref": "2aa46bc0-3f3c-49f1-8475-59516f20fe8e",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "10583751-955b-41ac-b386-e70db75920ae"
        },
        "item": {
          "id": "e088a98c-b271-4205-943e-139a9bc41718",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "419fc6ba-af2a-4c8d-b879-65304c919228",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 27,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}