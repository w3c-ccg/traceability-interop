{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "ee727df6-942e-445d-95a0-b26aa846b831",
        "name": "Clear Cache",
        "item": [
          {
            "id": "5bf9fc17-e69b-4cd6-988d-4fdaa746ac33",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "fa963008-cf16-4db9-b434-2ccf3db6498f",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "92bfb3ed-2b69-4fdb-86b6-a9019998eae3"
                }
              }
            ]
          },
          {
            "id": "1b35a7f7-75ad-4658-92d2-44a1f1c2e1d9",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "08a39385-a26a-4611-ad93-219098d47ac9",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "39a5ba4b-714f-427e-b8b8-57916fcc03ad"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "81fa51ab-b952-405f-9b8d-feebb4a4329d",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "ed3b2859-1f19-4e3f-9812-1fbc21186543",
            "name": "Positive Testing",
            "item": [
              {
                "id": "5509606c-d31e-4c04-a07e-bff1cb94cec7",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "034ad092-8ea3-465f-be1f-44db8fa809d2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d9192965-e6a7-47dc-bba4-3e55e8b6bd22"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "16ec626a-4b6e-48aa-8bdc-fce24e6ffa94",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "67afe829-21b3-40e7-af9e-b83655454dfb"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "99f8a522-9b10-4982-84e2-7d845243aee1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "47c65c12-5cf8-4036-9158-ee0ea9f5514e"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "288c7f9a-8f69-4116-a289-877a91c1312a",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "df9ec64e-9051-40a6-ae73-a8e271f333c7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "86cb5120-50d2-4858-8621-bee22f63f4c2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e39ae0cf-0a93-46d9-b6fa-7809c789b7f0"
            }
          }
        ]
      },
      {
        "id": "542d0401-45d1-4fe1-9388-b73c7cca361b",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "ec334146-0613-4970-a563-0cb202abe1a1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "db1df4f3-b0a8-4a0a-b5f1-96299eb820a9",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "166928f8-f129-4ebd-95c1-40c171603e4a",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4af367a8-bdd1-44b4-8f43-4d721c436f7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8e772153-a6a9-48d6-9bc6-853463a80d2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8458de15-d848-4910-9602-8e0a73f483dd",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5923ff00-5c94-44e2-8bc3-c739a2a532c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c821d2b8-25ba-4421-bd47-9621f070a442"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7da183b-d05e-4faa-8dba-96e8ec027ece",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aafac946-958f-4c08-97f5-388901dd2fc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bc73d611-6852-49d5-ace2-4d79c5c869e3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "fbb32094-af82-4a84-9194-7a99e7e9ca12",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a04af37c-e0fd-4b8f-9515-f6f6ba5be019",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d81c239-571a-4421-afb8-3d13daf4b7c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "daf01cb9-b0c1-4b60-acf7-4a4c1e7474b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75cc39af-2ed3-4d07-8982-416e867c288a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f0a63e0-3629-4f71-8ef0-95a3c212ce63"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "770bf891-1dd5-4c8a-9915-33d6d2f5c77e",
            "name": "Positive Testing",
            "item": [
              {
                "id": "4674e569-af0a-458c-8966-750d8bbcb3d5",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "45159084-e347-4f6a-a048-5db12b96c60c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "f5712980-4c51-43ab-af07-670ca3d8be2d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4480cbb2-b18e-4aa4-8ef7-03372ee0f7f3",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "7e62216c-9771-4294-afcf-3becadccb7b7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "aea6b506-94c9-4c2a-8a34-aa27331261a7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ca1527af-27ec-463c-9563-c8765b9b3b22"
            }
          }
        ]
      },
      {
        "id": "25b47c53-40a6-4004-96d3-1f61b04b66f6",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "25d6cdf5-a133-434b-a015-ac0681dc7d98",
            "name": "Negative Testing",
            "item": [
              {
                "id": "753a07dd-09ba-4e29-aacd-708f1c061fa4",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "c7201a61-89ea-4fa4-a336-8fe48f1c5d57",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ece0584d-4c30-4922-9f61-71249d7a82f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81745823-915b-45cd-aff0-7a2b8e9669e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7e3fc0f-281e-47c3-8bf6-faa92e619f16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bf5d1ded-9fcf-4ddf-8379-49ddb93f8d04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dc9c287-9915-4089-a705-79f7f984c1eb",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "caa4e371-00cd-4f37-9ad9-3171916057d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "628a9e4b-300b-4ac8-9240-b0c879a60a86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4257761-581b-4ffd-a8cb-f42468126efc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "341355d8-36b1-472a-91d5-424062b88adc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a651496-38ff-4528-99b6-d016ace33178",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cd4512a-a6a5-4b65-bb2d-47700e3907b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1dcf08a2-9f70-4135-ab82-6a981236bc77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b10f670e-c1f5-4c01-9e23-db1fe7cf0064",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fe2e6891-12aa-4587-ab5c-827473257c54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9194b135-ba16-48f6-9c05-91fb66af6e86",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf5156b5-4ffb-417b-824f-35ab2de9ce71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85442860-82d0-4189-a79a-bde53463fc33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c91b7898-349f-4553-9ecf-b79ee47bb331",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1b73847c-b369-45b7-bc45-f08e3c1eec0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bea683c3-38b3-4c90-a56f-acd691f04f08",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6cdae14-244b-4530-839f-e57d1b5d1ab7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a80ef5f1-0e1e-4ccf-b8bc-208be5ccd510"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc4a1132-0893-49cd-ae20-920445654938",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2b998cde-e7c0-431e-ac4c-bcf7b530f3fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c16c5979-26ed-49ef-8e6b-f4a8f09c9e76",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21ad925b-b8bf-4795-83f7-cd156729c1e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9aa4591-10fc-4fce-bc39-1f5876bbc86b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49d6f223-8b5a-4fff-8319-d306f34b6d30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "80ae77a7-abde-4040-9b0d-fc703e98ba9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0da34a2a-a2ef-42ac-819e-c145f935c094",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0cfe0f3-a40f-4718-82fc-528677ba0f4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1baa682c-c42b-42bc-a62f-1d50261631a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21bfe789-3cad-4e78-9bb8-4d5cd9eac084",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "92109bce-168f-4ba8-a2c0-3e86dbcb3548"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bc19880-8e01-454a-9472-fcbbcc2498f3",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7860a889-d290-49e3-b786-ea75073c0b34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b69fd9dc-9705-445d-820d-2d29fbc817f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe849426-7bf4-4114-bf31-641156644a3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6c78e251-1ec2-458d-ba65-b9269f477c53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cae81ccc-6d15-4c61-87e3-2ac3bcd9c445",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f38fe15-dfb7-4a24-95aa-79666a76b483",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7575001e-6f49-4be5-9f3a-17ae6c3536d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "741cbe1c-94c7-4746-86f0-a6835e65c729",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8c14a4db-ff57-424a-b2bb-c8c8d846f39b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9d34ffd-18c1-4be4-bc1d-d4d33c27100d",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bdec1b8-2768-4c4d-82d5-9e2a42f9d6fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca3d103c-2e9f-4986-869f-eed6ef767780"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c1854ce-1fc4-45fa-9606-7dd0f7463b29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "82e95be8-4a76-4423-ae8e-bdfd92d4b143"
                        }
                      }
                    ]
                  },
                  {
                    "id": "683365b8-7247-4412-a20a-351ce5ad6ebc",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e14b248e-f246-4c7c-930b-4af8af980b3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2780433-cc5c-4916-a4e9-d899afd24a4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "269d6e73-ecbd-47a5-a4db-b938a82c4b8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4a76ff62-ec00-4bd5-87b9-81f196fbd1e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce9e5634-c7df-4c9f-a60f-8a468220aef9",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44a3190d-49ac-49e7-b82d-ccdbcaa81676",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcf6a35c-9559-477b-b8f9-a866a65463a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1cf2919-3eb5-441d-91a3-1adc74ecaaa5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bab6cdd2-f52c-4bbe-beec-02c9d211d6ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34718d26-a360-468d-a034-9220d52bd026",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8deca1f9-bf71-4ebb-b14b-769299014cc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11a2706d-a75f-485c-8696-3dbf5475633b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcd16fc8-77f0-43b9-b8ff-ec8c0c0b7e71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ca6ced15-4124-4bf4-b90e-7020305d6b55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f720cf06-e8f9-4f52-b202-68984c942d81",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e408e2e5-8791-46a2-8fcf-2d2cbc03cdd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a46c1d0f-e23e-4274-9f4b-b1091c0d541c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "763c4cb1-fe1c-468f-85c6-71910250649d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5fd8fe1f-d474-4b33-8fbb-e252354d49b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6af6c26d-66fa-4cc0-8635-451a2e8d9fe5",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10bcd77d-839f-4bc1-8238-da9d13b93e75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f432f8d-e0ad-496a-b4f4-561e74a496ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3874de22-fd43-45c5-bc49-45b2041666f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7ac31f2f-2af4-459f-af8e-543e7b42ce9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d1f2567-2d60-4a29-a034-29a6a260710e",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbab9278-d9f0-45ee-8ac3-ae643b660a02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5a5879d-af47-4260-a513-1935076f7d81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfaf427a-f0df-4f79-be96-13f268f06e49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9cbbdd22-5f5d-48bf-b776-7ad4591b5857"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2a1ffcb-077d-485a-90f2-8fcc2dbd5916",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb33b612-e195-4a44-942e-ae3a1bbdaf7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "327e16df-ec08-4ee8-b6be-906c689dea98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51d014b9-2116-4661-866f-40db454becc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "be5b119e-408f-42aa-82ef-4eedd29e8bbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "832aa889-7f3f-428e-998c-8e175ac8288a",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c9004db-7976-4766-972f-dd579931986f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8eebfe0-3555-47fb-8ff7-be3b13d75818"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "747b48d2-6f38-4eb0-929d-691bc72723ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "cf7c53b3-43b6-4ffe-986f-7bbd164f255d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9de01783-2732-4311-abca-f2a07f98261e",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5201ec57-f2db-402d-8d05-b2de24a0ae37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8994c9b7-0262-4623-84a5-73c5e4e82395"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2eec563-e092-47dd-be06-6c6ddbce1b68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "91cc3e22-221c-4c2f-a8e0-80ba5ffbe72e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0abb9b1f-20ec-4f68-8fe6-8305529ce848",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09c68a59-145b-47c4-8188-6ff0c35590a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "620f814d-0e0b-4c85-819e-c3bd20e7d297"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd69fb35-6e80-4804-93a1-b408895ff737",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9bf4e327-f487-4de4-8125-dd083ffcf644"
                        }
                      }
                    ]
                  },
                  {
                    "id": "486e5e60-ed0a-4a88-89c9-8065842ca7b1",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b429a5b1-f1b5-4197-984a-202394a76acd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3245921-2667-4b60-b483-d935f1e98633"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86d71176-b9e2-4142-b97a-72b2ed385fb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c93aff6d-1798-4a15-aeea-c5b11785b2e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ddd7740-e6d9-43c9-a50e-0890ab34a343",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaef1313-f17f-43cb-b913-cc662de7dc50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca5c4df1-a100-4cc0-9368-d7369997379d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f17aa17-5523-45fa-ae38-896cfab98493",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "57cb5d75-866b-4779-a631-b75772e23d7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8da2d115-9c46-4be9-a9fc-96a6a99e1ae9",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1fe9fda-60d9-4a6d-964d-94aa5183cd9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "921108dc-3882-42fc-a33a-e731d04f852a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e23a0e34-c10f-4242-9aa9-441295b66857",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "813763fe-c26f-4a77-b203-2035934fa3e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cc9af6e-96b8-412d-92fe-4b5a5fc5a52a",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c66897a5-6e2c-4af2-b544-133171dd5075",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab2c80c6-c8bf-4146-906b-37310f2eb19c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "243e23c6-a01b-4d43-9483-6daedf15ae47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "5bbefde5-6055-407d-8f31-0569315ad232"
                        }
                      }
                    ]
                  },
                  {
                    "id": "638e5f03-9448-4bff-b5fb-d6577cceb13a",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77fa646a-a0ed-483e-b8ba-5ec5c3ff0b75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a9ca084-59d0-473e-a371-934b937527a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16a2892c-33bc-48b0-9b7c-627a35ee2a82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3eceff9e-3daf-479e-814a-80bd7914b383"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a74360d-7aaa-4ea4-825a-01c46ec79fa4",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53ec34e1-3e4d-421f-96dc-647335a4e340",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c239456-2063-4661-b82e-dc838236e901"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f740085f-1559-49ab-b166-d6cd4b039c2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9e9525f5-3b48-460f-8071-d30bfe035c2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7b0e5fe-ee68-4aec-8525-e5f11ceb4cd5",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f30f9ea5-48db-4734-815b-9cbbad626f05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "208c8039-b00e-485f-a4cc-ca07a2c94975"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57240433-c4be-42be-a442-4dbd9e9554c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6b1da76c-7e78-46f6-892f-70a7370a68c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f44a9e8d-7462-4b51-b156-16524f153a2c",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c0e8f0f-a81d-4dcd-bbf5-12ad4ca7943d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95f8cad9-67bb-4801-a10b-925a2f3c06e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2003a58e-46e4-44d7-80ff-5bc8837941bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "bd4154fb-d713-481c-b2a0-d057f5476803"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19848b41-0e97-4dbd-96e8-c20e6f428be9",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6882d043-1504-411f-988b-8a46aa36cbef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61028cbb-3c03-403f-bd41-eca5027960e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13d1800c-f9f4-4813-8dce-ac64d68a49de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "32bb2b43-63f8-42f4-8ef6-e96511b3677b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9adba37-0424-449f-92e4-2e9297078304",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c10a372c-c50f-4043-a063-d135be052508",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c276967-f901-40e4-9aad-3e5789af1120"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d63319e6-6a05-4b90-9112-dc44bb1b7d36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "927e8e8e-d959-4f8f-b335-8b829a268a98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b181eaf-fc3c-4d87-a6b9-09f77e215225",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef4be357-213b-4d91-8c6d-1a27dae9e6c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "559f7562-1edf-4e74-a889-4bf4105eb6de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccf9282e-c920-49e6-9273-fe73d2188e92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2e03fadf-66e9-49f0-8f33-d958c8bc489d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "895f9212-b85b-4ba6-b3da-b68726660419",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39fee395-158b-4a19-9071-02f7fed24d8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1c0908a-bb2f-4402-88f3-387833eec2fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b1638ee-a396-4fd2-8767-48db45d67e49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "29ca1494-c96c-4fd7-998a-60cafac51497"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe508527-f9ed-45fc-a1fd-608cf11bcd46",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aeaf9705-e8f9-4b79-b1ae-940b510210b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b4a396f-c56c-43a2-bec7-9ef83dcd8e01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8df4e10b-0515-4757-ac8b-0162ecafa6fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b8ab5ae0-c355-4119-9d1f-2122db308311"
                        }
                      }
                    ]
                  },
                  {
                    "id": "144326bc-f21e-4d55-9a11-acc3abce6dc6",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82ae38c3-d378-470b-a90e-49885faab8fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38f0cec3-e4f4-456d-bc5c-abcc1df8962c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0785804b-c955-4b09-a7b4-53966ba5c00b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e7e37626-3b36-46f3-a494-9800224feff0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e5e0c0a-0ceb-47f1-a27b-28f76e7a3e5e",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b0f34b2-7c1b-49a9-8fa2-6efc2b72ac43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c6fb344-9743-419b-9d82-620ca8854a37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "622f01ae-e6b1-469e-81bc-ab80480c486e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "b0beff11-1ed7-4b44-a678-f29a064cebd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27bf5d4d-8012-4a32-9287-9e27e478e7dc",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2225c775-ad9a-4b89-9524-89be8bd9d3f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fe37c6d6-0e25-4bb7-828d-b0cf97707815"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4500c45e-6895-4ec6-ab7c-23edd9caee96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1f009753-fd52-4d6c-9f1d-c5a2383a50dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31fc09a5-6458-4651-86e8-4ec146007b56",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2ba4515-ab3e-46c8-a4be-dbc3f025fb35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "037a8df6-03e3-4ffd-8991-b9ad30092639"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c27dd59e-ea0c-4bdb-859e-80c902c65dd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "56a38d81-c88f-45cb-a6f8-3b636716a492"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cfb2e44-30df-44c0-8f1c-4291344907df",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc191602-1fe6-4c07-9c23-9da20db6a279",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32cd4672-070b-4ab9-b1f2-1ca1a84e9f4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17fdfcb8-5efb-432e-9521-d7f20fe1d8c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "1c6c5074-cbe4-44b6-b848-dd44acf397e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "011720fc-37d5-475f-86a2-48f75fea94c2",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a11944e5-eb58-41a1-8a7b-e5210fecbf6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "faed377c-3756-488b-bdf4-aa6881b64c6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a49ad028-5d12-46b9-8f57-8b2dd7264065",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "238db0e9-5f56-4bee-84a9-9ada3777f471"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fb52663-b544-4d29-b496-0798a2f33ba2",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b82961b6-78a9-4fc7-8c88-3bdcaaa0f915",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa9968dd-0b60-45b9-8658-91f07da8e890"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a9fbd9a-e835-4cd3-b3dc-237cf0190545",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "542d8d75-460b-43c4-b1c1-df2d8e3f1bc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5618b21-1e19-4d25-b782-cf8e44d58ca0",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae2fa723-0a8a-419e-91ee-a8564d092e83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c995966-4fa2-4264-93bc-c0438f76f568"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a4cd25e-16b9-4fb6-aafc-2ed318a5d263",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "e3e7a65a-b82e-466f-ae41-c13f1f16484c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "117002af-164a-44f3-9d9f-6239a1780641",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6e63bcd-4859-425f-9633-49979fc468de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2a06036-6283-444d-bbbc-7549bb5a59e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72e4b72d-4225-41f0-85cc-26ff312d4170",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "31d8d4f0-bee5-4a11-96ed-9051c7c87d05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4027fe64-5bac-4c20-ace9-95d881de4ee6",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0bc3eb5-5b20-4f03-b06a-c91971cb725b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "048e9d46-14a4-46d7-b662-401dad1a1af3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cf27b28-65e8-44d7-a7ef-446adc64c712",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "ea12ab11-3659-47b2-838e-ab4e3943e235"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f55fca9-4f0a-407e-8029-a1fae6a7b5bc",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7c470f5-e5e0-4dc4-a30c-28030bdcf187",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1567bed9-39ff-4ec1-865e-a5b6306559de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38c9f4ea-2453-49fe-bd0e-4630cbef4c4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "9207f9b7-c0ab-42d8-be8b-8cd32124848a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed542a84-9159-42d3-a02b-2cb0139a5a67",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c02d7496-418c-4cc9-8387-d2952650a7c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "703c8937-ec7f-4dd3-a8d7-f2bcee467653"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a7a8770-70ef-4f33-b91f-cdc2c9e41052",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6bb4018d-fefd-4e02-a35e-738f3b3fbdfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c297f663-8e6a-4f8a-9d14-966c10e597a8",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ff6587e-9338-4283-8f3a-38443ccf3a6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4feb53cf-bf6d-4efd-8385-34124e91b3bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "441defce-28de-47fa-b70f-fc811db3a34a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e087f8b6-230e-4e41-837f-d24e2f7cbbd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71030164-34eb-4777-aca4-b62248ab5960",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6fab73a-236f-452a-8791-574205a18441",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad47b077-cdce-4c65-a4ae-b39ff90ba957"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6632063-569d-4e38-8cf6-67530f0c46b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d9cee9cc-3272-4885-b7f5-e2d266857bae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7bfb359-8f57-4094-b015-b9c65335e265",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92c97689-ad4c-4713-aa5d-146ac7d42fb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66104c98-c874-4454-9124-b6e909a0cae1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "feeeb63b-14dd-48c0-a120-d014b52cb358",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "80fd6c29-c6c3-4bea-836b-fd745ced8849"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b6d6ae7-6df6-4a58-bff6-99083a3324a8",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a86efdd-7130-42e9-950a-73b5de77c5e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e58394c5-1e7e-4e59-a8c9-6d61934487c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf3ee9a4-11e8-40c9-9d18-4d8b85828331",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fda83c7e-8f8d-4bb2-a961-eb378bad2f79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16a60264-32b0-4fa6-9d00-6eb4b4cd593e",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c106e66d-793a-45c0-9b81-c0ba6c4e228e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4379a02-ec5e-49d2-a55e-9ecf873c0a76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cde5fdcf-8e34-4f6f-b2ab-79f5897f7dc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2733ade6-47f2-446f-b713-57eabc45f5a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "287d239c-dcab-4adb-8aea-692be4a43c39",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecc5b892-20d4-47e9-8d52-72efb6c16014",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c1949bf-6460-4d3e-b821-d8e904e1c8b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d6fc083-a632-4c9f-8cf3-2fc3b1e4df25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "9a505c23-43cb-42b3-bd55-e1a06057722b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08d9d5c5-29fc-408a-a8cf-49110dd21767",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fb1231c-f75b-4682-a94b-099da410c076",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03925bf2-a79b-47dd-ae02-fc6c2827e7fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "262ac4d9-744c-465f-a83c-542fac354bdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b7615e87-3d5c-44dc-998d-9bc6fa7306c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f40b8e1-d480-424f-94bb-0e757375952e",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f10d1153-1068-4555-9343-aa5aa3d9227f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0716b92a-3d52-4250-a75d-e5570dd61aa6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f580930c-1083-43b4-b665-ad35a6cc885c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "38c467ec-0c8e-4359-a88e-b3afbaa1e4ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d60d481-6f51-44eb-84fd-1799e81e72f8",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3d966e1-15f3-42a0-85da-091053c061f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d15d6f9-ad0b-4e6b-8d90-96b8d86c62a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e44cce6b-90d0-47db-8d2b-77efab88329d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7d10ec05-330c-4288-aa2e-2cd367af2d8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b58f653-1c74-4ffb-a798-648c42d7de58",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb454112-e296-4051-b116-541eb1d02a26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae355f66-f7da-4578-8fbb-39898d9be134"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cca2d766-5910-44a6-93e3-023e9a9ac992",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0870dd2b-2307-45a7-a24a-039a530ebf6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5382caba-0a58-4469-a08d-c11c7a85048c",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06165f6c-569c-4550-80dd-9b8dbeb2adc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c53f89d3-a01d-4656-a173-8639fb44cb5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9766a486-9069-49aa-bb36-0688e5905d86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "a7725d3f-f066-4043-b469-445c70462c39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32e98551-08d5-4cbd-bcd9-adf5b007c951",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d69c5310-b80d-4e7d-9e1a-02e4c33cc31e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97620b91-1f42-48d9-a8cd-cfe1827d8088"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edf7337d-0522-4712-86c6-d1ed9a05cb84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "a0c9c87c-9497-4fa7-b532-5e72f8a5643f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9398641f-6bac-49f6-84e9-6a94e6ac94fd",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37e31b03-6f49-4323-822f-22e7eb031f6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8b3ced7-13ba-4387-bde4-6e4b98ca2b5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6e44f9f-b1cd-4ede-bc53-7d566b768896",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "38eebff4-30d0-4d76-92d9-cd81e53e87f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b98fc0e-dfed-49b9-a1f9-e370881bc2a8",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "418fecad-3560-4e26-9f6b-f23d786ce795",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a20ad987-eeba-42a2-8875-6edff169cc5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "482e12a0-9839-4b2c-8b73-d9aab75f8069",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "759566ba-01c8-42c4-83fb-4779c9e55447"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce37a822-38c4-4cc2-96d6-8c4949e23a56",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60e40afd-9112-4511-ae66-c0bda70f6cc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c9f5de4-7222-4f99-b51f-b88359fa482a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "317c5dd0-6956-4c1f-88ec-b54340b29fc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "62069740-3d4a-48ff-a720-9e471a964f5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92796734-86bf-4038-a9fa-a6811a271fed",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd924551-5b4e-4951-9796-8096fc3e2868",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c398a222-dd4e-41f4-b7a4-53438b314b89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d5562c5-0a55-4a38-80e1-b129cfdc218b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "ae5f9a7d-38f5-413f-bdb5-d4e244cb67a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0df1c8b1-1439-4ff2-83d7-d53698574bfe",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55c011a1-bd8a-40f6-b289-62cd8bfc6058",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "578a9d75-7a39-48b8-a3a2-8c9aee82908e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7d51d6b-fefa-4a44-9f7a-983cf6101726",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "c57ced0d-1e95-49d5-86d1-92e04b93e063"
                        }
                      }
                    ]
                  },
                  {
                    "id": "425b0ead-e586-4115-a50d-fc91f32ad35a",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ae6ce94-16f7-41d3-824d-d7030e5e095c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23998bc5-7379-4d3b-bcd1-49c41124e07d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "129d2b99-3530-4532-a2d5-8b18c78d1c74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "763d596e-7daf-4eae-9d17-0ce05ed872c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f919897-fe94-4335-9798-69b13ae5d9ea",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6b7d419-55a1-4303-9a1d-dd2388105edc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "998d0654-eff1-4704-8c83-1f899d8f717f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00175d8e-1374-4374-8745-0a5cb60e8e17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c8c0aaf5-1bd4-43d8-94db-1de45b29a4ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48eae2fe-60dd-4ebd-b8cf-e8a80155273c",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd5d3f04-318a-49eb-96a7-f273bfe8d947",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f71dd52-641b-44f6-8f0d-fd4a961884f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83beff26-8080-49a8-bf94-700d522755dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1ba7cd83-b0e3-4f48-bb93-5e8105e1331f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12098291-83f3-453a-a714-976969686054",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "191d4bcd-8273-4a9e-8261-1af5c29c3558",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cbed313-c29f-4669-9323-04877640c8f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ade1665f-70f1-48d0-a386-9e4672dbe621",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "77a8a4ff-ab7a-4396-b986-d7208bf24d95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2caea496-cf5a-4b2a-ac19-b8d09f9725e1",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6af20aa8-76e3-456f-b71a-861009476363",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0440f425-5fa3-4967-a0ed-2c47e74cb739"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06cd2954-8fc2-4dd0-bb45-e04ca6bc6043",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "edde8b8d-3aad-4994-a117-16933d657f40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6485add-04a1-426f-b02d-b09e7176e619",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd1affb0-ff2a-44cf-b8f8-6672ea9348e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f2d31a8-2b45-4de7-9f17-acaed7327b15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d39ac42-007b-4691-b19d-ab70d21bb33d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "1380ec04-22bd-4adf-b453-b8f0922a1858"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f25205d3-d5ba-4f61-95f9-17d26cc6e9f2",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21994202-fb4d-45ae-b116-82a1ebefa92b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cea8643-27e1-4815-b887-886793cb39ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3421f68-001c-4cb7-bb9b-24b4544967a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "267ff573-37b3-4feb-8676-0a37c9ee7bdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14dd4039-7f18-41c8-a3cc-2fb00fe408e2",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91881986-ed04-4dad-b6c4-8639c3a3011b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "905fd1d0-0956-41eb-9b95-a80ac6399ac7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55318dec-8800-4311-a34a-796360d452ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e67aef9c-d374-4cae-9b0b-624b87362da6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e80c8d4-0e59-458f-827d-ec3a9f216521",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dc66725-02b4-47df-94f2-10afe2880832",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12657973-195d-4ab5-91b6-e7739875d416"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bd8c373-b801-490d-8580-bb04bca623f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cc7d21d5-7006-4067-868a-9d1b4de0c517"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d8da623-d5a4-4a09-82c9-d82bd5a11aee",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "576aa475-61cb-4448-af53-3623fb2d4ef5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6387e1b-bc90-4342-91fe-7ea3f8941939"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8fe991f-2cf9-4310-8d20-e1987620eed8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e8f349dc-0997-4f68-8bce-8312d856f726"
                        }
                      }
                    ]
                  },
                  {
                    "id": "becc1788-f1ac-48e0-9665-2896b5b9925f",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b058bfe9-87db-4e4c-8b25-d666eed5c3d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b0ff66d-cf7d-467e-9ffc-c91dbbe3b220"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "348339fb-9007-49ca-af11-0b24583bc2fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "27750826-4ad6-4013-960d-ff5fa7035a77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ced0a05-faf7-4300-99e3-1a0870344209",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ba26486-6aa8-4a29-b9b3-a9fda6e74f48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "182a2e53-334d-48be-8186-5274c8ae7759"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2eeaaad6-c0f8-422b-b2cd-393e4fb874d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ef290c0b-3b89-4219-9c87-55ea55a78ca0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "315a903f-3595-479c-94b2-e5769a8cd578",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3c570c7-b592-434a-a3e8-1f8d4d7b2d16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29fb4764-17db-4fbb-8f0b-6fe529fc7bfc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f56d3b92-7775-42de-80c7-cf68cb8031a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "478b8e7a-0bc5-43cf-bb5a-9c11cceba1ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63dd00aa-de8f-4135-846c-09dd2685c9b3",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14d42311-a6b7-4fc7-8fab-40590bf4b8ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5e32010-43f1-4911-89b9-18f04070e7a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4b9e2a6-d5b6-4fe6-9a03-b36576866e51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "53e78b87-d4ec-45bb-a36e-f5f876866edc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "936d230c-3370-4da5-82aa-fa314a05a4eb",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9556f1f4-ae50-40c7-902f-517c903ff779",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5385fcce-3957-452b-a2d8-e1922490fc39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da8a3d31-060a-45c0-ac09-dd6960259ffc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "33d87904-eab2-4fde-b9a9-48b16cbb2277"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dc04b8d-e140-461c-9672-44dcdaf355be",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3dff083-9867-4ee6-8970-29edcc97684a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ce3b848-8f4b-44b5-93b1-5b96ac820379"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d69970e0-5b47-434e-b785-66cf0be61041",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e423b4a2-3c67-4503-8dac-0740a6835a22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9202f81e-8b74-40aa-998f-81eaaeb1be2b",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9029386f-946f-4ec0-a482-6437db275987",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4476fe95-ed5e-4239-a432-a19caed0b252"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfb1fcd4-75df-4985-9569-9003495bcc7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f12cf9a3-f4a4-45cb-8882-d694171d6f65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91934bd7-b3b1-475c-a658-e101e35eb826",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9eb430fe-08ff-4092-abc3-731aa19230de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ea77fb1-62ca-4819-8539-bc8a3b04fd8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "822cc193-717f-435d-9409-647652bdaaa2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5a340316-f193-45fa-9c6e-13d0f1c37106"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9ddf05d-d367-4fdd-9bc2-4cd5585db3a5",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91e6c6dc-1dda-4d77-a11d-2d2de6c8061f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "748c8e8d-84fe-44b6-b99e-344f9f89e0a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a36bdb27-56c0-4985-af9f-fc211450004a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "70340893-eb43-4bb3-80d6-c452281427a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "592d471c-c5a2-4d58-9692-db75f41aee8a",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dcf102c-9e8b-43b2-96ff-61311fab5cfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ba7448d-494d-4cfa-b699-3857457b6543"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f92f2829-f3ec-48c6-a1ba-dbb5ffd900d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b04cc36e-151b-4ca3-87ab-f5f09803155a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fae824f-b10b-4c76-8dd7-e2b15abce643",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a097c2a-f9e8-4772-94e6-70e88d82d0e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb7cd29a-346f-46de-b2c7-aeeec1ebe106"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9ee3861-99ae-4911-b3dc-9db95a5f20c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "05082c60-62bb-4ede-a535-0fdc481a66ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de7c2466-5ce7-4b63-8792-93dffa81e976",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2235d275-6180-4016-ac5b-3b350f052841",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f21dbd37-95dc-4e98-9bbf-316ba82f7d13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "848e5ddb-e25b-4ecc-9da1-4bb45917c74c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1d9f4b31-53af-4d4e-9b0f-b3e65980743d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8178edb0-968e-4760-927b-4ae8c1597062",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a5b2c2d-051d-4099-942f-8c97733520b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c06dd11-2a45-4eb9-9e6c-fb51d77ae39f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62a2d655-bcc0-45b7-b3b5-080f7bdbda4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "70db56d0-8f64-44b3-9a24-140048d06381"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ca5238c-fd35-4b1c-b3ce-e5373ce1cfda",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73532523-a9e0-42ff-a63e-caa231741b75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "353a2621-07a9-4b32-a6ff-e4e081a2569b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1727919c-449c-4ca1-a308-a57a05667348",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e41f761e-535d-4f95-af6a-d3340a6bcc6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "650d2299-2957-4b5f-8398-bad6313f00d3",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c1ef66f-95b8-4e85-8bb5-ab92b1b34e3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b808962-227d-4859-993a-dd1d15aac3a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7daf8a0f-4105-45d8-a216-c80b319c083e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "4d552a77-d743-41c8-8258-bfe14e695c87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e86ec9de-10ea-4c1b-b378-853f22dd8297",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75e29d96-314a-46a8-a15c-729f23fbe589",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68cb3671-07cf-4ee0-a33a-3767a1aebe57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fb540c5-0e3b-41f6-88bc-b48576e97598",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "9417fe08-ce3b-49ec-a9f5-6425b5bded09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e70ae88-3473-4a16-bb84-b3c1cffa2f55",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f07aeff-ad34-4973-aad6-c25d05f053bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5c9db56-d9c6-4af1-9af7-6e38176e2ec7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12320b74-b32e-4daa-9154-3a7f679292d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "f649514f-c9df-483f-9b8a-a4fcf8c22580"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a096a24c-00ec-473a-bb1a-4e25c7546b71",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9848f4a-d715-4ba4-907a-1a9ed2c37bcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a5fb09b-9ec2-416d-966c-56ffacb43343"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87bb3461-075e-4c41-bb4f-4073b496b1e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "7727c7cb-65fb-4bac-9f80-5f0198882018"
                        }
                      }
                    ]
                  },
                  {
                    "id": "104faef9-343c-4870-b2fd-564e1b84200c",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ea3ad6a-6693-4789-8df2-4f8ac9053ca4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37505947-b4b3-49b9-9074-af8b64cf93d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5238826b-512d-4390-ae1e-0541185da7fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "681efa6c-53a9-45e1-a186-fc7976c3f3c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "913017a9-59e5-4fdc-9e1f-a119e8aadd96",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd6927db-b378-497b-9026-d1643a73697c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "bef66fb2-bb2f-4893-9282-74aa1ef9da13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d41efb5b-e014-4a44-982b-ea534512b0b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "d41d71ff-1db0-4cfb-9258-7b5485a74b4a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "7fa76152-fec1-46c1-af38-09d0d0b0b7fc",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "62396a76-e592-4ea8-bfe8-609dc009e446",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3507733-1755-491c-ba29-8f33339979a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9382fab3-531d-4802-b2e2-6afea674d188"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31fe5d4c-87d3-41b1-a59b-920f347cb954",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0e97dd64-229e-4816-9fe6-f5be7802f9e4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "eea384e9-5f45-4d9c-8629-fa3f285e438c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fb33c32a-1e38-41f7-be85-35315a6ca3af"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5ba5a4ff-5802-4cdd-9547-b2cada2bfaa7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "88ff453d-ea77-4dd1-ba60-94342b381e52"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8d61f94c-d51b-4efb-bb49-79ac4cea8fa0",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ad6b735e-13b2-4db4-b03f-a338d021aeb1"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "576fb075-6af3-4cb4-a14a-de0c96fed5f8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c938b024-e976-4dc7-8335-9ef493859b4f"
                }
              }
            ]
          },
          {
            "id": "059bf3c6-0405-4266-9a99-6f6ce7e5b794",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e0ae305b-61d3-4b66-a612-6d0ca1d69043",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "b092236d-562a-4593-a687-619e01d8b83a",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c6a0048-5ab6-4021-9d90-eec6fba9c047",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "e0e3f3b4-18c5-4f4f-b7c3-2d486f59287a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f48f23b5-cfab-48c3-9000-7cce724e61c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0c6b840-babb-4af6-bcd9-aa3330b57647"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a33a0eb0-64b8-4923-a4c0-7a9e534cd484",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "07a43d7b-15e6-4b96-a378-91c4da77a3c9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f709e621-e0cf-4817-a47b-1c1a3d05eeca"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d3099fb6-cb01-494c-88c4-7cdf7983aad2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "72d9eb2b-4c4f-4b35-9d5d-173162231bd4"
                    }
                  }
                ]
              },
              {
                "id": "9f1a8fcd-2ee8-4276-bc3a-f7b5b8a6f5f2",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "91937e8a-bdde-40e2-ae5e-edf151b3ce9b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "344596cd-0aee-46d4-b302-1a447380cdfa"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ee622299-35be-45f6-a2e3-6880f0523699",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f1c38b16-e581-4cea-9d0d-9bd170497ca5"
                    }
                  }
                ]
              },
              {
                "id": "a897eeba-3abf-490d-a152-2d7e9fcc4311",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5634f338-d02c-4c82-ae8f-f837e07d2e91",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c8ffbd2e-e415-4153-805a-21c538f62af0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cf4bb857-6906-4ab1-98b0-2cab2678b9e1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "a0222d9c-f2e2-44c7-80ab-ff6dc7e839a9"
                    }
                  }
                ]
              },
              {
                "id": "9b0290e4-b312-43ec-92e4-ed4f8172bee2",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "62e54a9a-f647-4db2-a4d6-ce86803c7146",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "97ced8b4-eb9a-4a2e-92c7-c38251997265"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "925bbc6c-23c4-49fe-9820-b493084e9a00",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "8b2718ac-12f0-468e-b81e-7b28ade2b135"
                    }
                  }
                ]
              },
              {
                "id": "eee53ac9-d84b-4dc7-820a-e0d973128011",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f22a9b5f-7206-4246-a1dd-cc035da550b8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9af37544-948d-41ad-a9bf-4777a78a6c50"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d46e1800-1878-4ae3-ae2d-71eebe71c3b5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "103c4e01-f30c-4415-b1d6-4ecf6f421b1d"
                    }
                  }
                ]
              },
              {
                "id": "d9b46afb-96db-4146-b132-cf02033a3c02",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "25056839-3971-4a0c-a133-2026e8996e99",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "25a17840-d435-4da0-8d05-1b6601a36d35"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5c889ff2-45d7-49e8-abc9-fe3d80627325",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "4731c8ff-b6a7-4043-8308-c1f69276ec01"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0b294f42-c2f9-4539-a835-7f9a143936ac",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3b8e1f3f-cce0-468f-8ea5-10f70d891420"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e3ea4b45-5d4b-4e3b-869c-cc92273cbca3",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "51f8c773-fda7-4d3d-96f6-54d46c1c7830"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "098ba91e-4ae8-4a16-b51a-9229c7411899",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "804ad1a3-017d-4a4c-9d8a-66d9e220a3c6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7c05e784-f51e-452a-91aa-5a9135cd53b6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "976cc94c-cb8b-4e8f-9a9f-11255e7f98cc"
            }
          }
        ]
      },
      {
        "id": "a0246942-e2c2-4131-9f9b-2ab706613b8f",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "f51069bf-db9f-40cc-a2b3-d401d1f8c2cc",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f85351d9-8ebe-4722-ad3e-e96c205cdd15",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "6e2cac54-8e57-43d0-912f-a307594f4ee3",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "512f36cd-5a70-48b1-a813-46bec47f05ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbc796b0-f0b5-4b10-a582-1b112b5d8688"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "429cd274-b0b2-43db-be2a-4130229283b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "81f4d893-37b9-4a21-b337-ab87e658f1ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "308d3d66-b429-4b51-a685-261da011b258",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2251232f-a261-4e63-ac0f-652df61120a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37fbe26c-b283-450d-8891-543cb6a242fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fbf7a74-d581-4870-aac8-5d3d11e18a3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2b92bf45-c546-4e58-b317-5ea3ee2d76d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3be1fa14-97af-4a10-af02-614b22c836fd",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0c5e43d-97db-4307-bff9-a3363e83b0ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ef58e83-8e81-4b63-a4ab-e912aca5a45c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6619078-6e42-49bb-ad0f-0de7eec9e85b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3d978166-343a-4451-9879-1ff1e9a8039c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10a7b72d-6b55-4577-88cd-c3ed426a0a57",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02aa64da-995f-4a40-bc82-70ddd65c08e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2be6d6d3-9b42-4303-bb9b-fadda8925058"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc485028-6775-4c67-9761-0af0444c83d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2b2520ef-39af-4688-b94f-30ec8d602845"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2db2dcb8-9989-4a9f-a0fa-ba0c125db7d4",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43770c7c-91c5-40ad-a89b-4afd8ebd8e1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5477f159-2a3b-47ac-b8b6-4b77345d42a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba196a60-0b0c-4eb2-a063-b38ff9a3f0a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2284a560-84d4-4916-9de8-317ff54149cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f299e95-f756-4d2f-ad32-2571eb8ae084",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5fa7884-fcfd-4f9a-a6a4-59beb2c49f04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1edfeae7-aaca-4866-ba44-a7c3caa6faa4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95d7bcc7-728d-4f1b-96dc-145811a49256",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "da0b26e8-d347-4223-b753-44ac1b4108c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bab18708-6d2e-480c-b5e0-63829f4646d5",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b2b961b-f0bf-4734-a6be-971938b9bb33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82402a54-ad03-4c2a-8234-79edbcd9028e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a75ba3d7-693f-4091-bb7f-902a7cbe2813",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "0b0563de-146d-4222-8cc0-5a3b4633eb72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "653e5042-e0e2-4003-b6dd-070d6493db31",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e72d5cf0-7da5-4f9d-b338-9b631ec8cf41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bb184fe-b6cd-49aa-b2c5-1c9730cca0cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52418ea2-fe02-41e6-a72a-1c2735c54c63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a5b9d6c5-4eac-48f2-a68f-1f286322da6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcc972a1-f8d0-4d1f-bddc-d9b182f9a14b",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c5a4816-d466-4d2e-9ca8-c6a0c2028980",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d21d61f-73b9-477a-a885-9f678fdcb0ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59ed3194-0aad-4ee7-8bb7-a379bacb5edf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9e22fe4a-41c4-4069-9132-e33a5f91d986"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be238e12-501d-4109-b01b-f5fd1d617978",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e112a805-443c-4322-87ae-52725870aa67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3aebde62-754e-4950-8265-bec79ecc8139"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "750890a5-655d-4e2a-b2bf-0adce8b3649b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "80b03945-6bec-4934-9aad-4d75aa1e8e81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9887d53-a72d-474a-9fcd-446cc3966929",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08bbe8c9-6050-4f6a-899b-f077bea7dd3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd3cc8f1-7167-41f5-9dd2-d6e50541ce0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aecdd7ba-5833-450e-93d1-baeae2e6984e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "b820b44a-14fc-4807-8b9c-e02c0acf7dde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a3cba2f-df61-46f6-955c-31560cc69942",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5b12b37-9ef8-4d41-903a-63899c6891f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2f20d8a-7565-42f1-b684-05a2f112bac9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad067b2a-681b-444f-a085-0232f845a4ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4258d4ae-ca94-492d-9ae2-f3012e62baae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4996d759-b7f7-43e9-b751-a2763e045035",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29a463ff-7858-4fe2-b6ae-4c28dbed6280",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eea15a52-fe61-4fb2-ace5-8a7917afa041"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19d3ad63-0d23-4909-ae9e-db3c92654881",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "91ee1171-e6ee-4b3f-afa3-455e9a61eff1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8447b32-6104-49e1-8d92-45ab9325d706",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afea2fc3-59fe-44fd-84f0-13f253ba9103",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed2f41b5-aea1-4f76-b2a6-f4a9d769424f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d03beda9-8fef-423e-8b6a-4f18517c7129",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "bcdcc70e-b854-481b-b363-7ee6a6fe4e3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22b42b12-7268-4996-a77b-13795c0fc550",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45bd5413-a7f0-4556-aeea-40e3c655ac50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e93d09f-5be5-44e0-81d4-9bb7cd96ce7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2580fbb9-3e82-4bac-a86e-517245716e34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "500c10c0-91ea-49c5-9e32-9caaa36bbc10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f0a7501-5dfc-4f0f-ae36-afb8eeb3d965",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f788a6b1-3b42-458b-9a7b-58a0bb99a0ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94e12ab7-0b22-4c45-86ee-5188c9071809"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0656c5ae-d679-4f36-b5fb-580c395f5ed9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "1df55734-7e16-4dbd-95be-ff3ea73a6a91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2df37ef-8c81-479f-94a9-bee15bfeb8ca",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "608da4b5-df1a-497f-858f-41fefae9715a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6dbdda23-b6ff-4971-a09c-2140a5dfabf7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a942eeb0-1c6d-428d-a998-b01fa6440d5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "fc9dd2e5-d5c4-4e37-866b-2caafd08e368"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dff29ca4-6f9c-463b-a779-191b3104ab69",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dff645cb-9d90-40ab-9f3b-f410a8a1fcd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce5312f7-3a88-4f40-a309-3508a2e98cfd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "062d0cd5-69ea-4caf-ad95-2ad0bd026358",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "9bb726ff-7d6d-437c-8fd5-c38edfb4a20f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed1f111c-9fe4-4e4f-ac92-058128a6b550",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f789b45f-f05f-488e-b34a-4b0f37bfcfd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e9f6f8e-db79-4c83-9838-d0fa83dbff56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a08bc0e-088d-4ec4-80b1-cfc113a843a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1d835fea-4696-4329-8c87-5994c120d46b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ece29a79-a7d8-4c40-b118-89fc7d9d1731",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7c44256-69a7-4c72-8bd3-ff1a402cf652",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3585071f-7bff-42ad-b028-4b315c5f04d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7acbacc-ac07-482d-b007-86c43b42d959",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "41168ab3-34c4-41c5-9836-6d2529c4f065"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccee451f-b996-4418-9c17-81059f6a85f7",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "055f7d50-8297-45c4-b54f-b5660d6f259b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dff90951-85ee-4b33-ad34-16ebd31a42e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94bea69a-121a-4d50-8e01-54fb2416c01b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a83cf428-2ad5-4c21-8d0d-8484a77ec918"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92f086a7-a4fb-4cc1-a800-00ab44cfc7ee",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6c63ac2-c81b-4884-84cb-f2bd9f1850cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd4002e4-7ac5-4314-80e7-d293a683ccfa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "435b7092-cb8e-49a7-ba57-1727c98ebdd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c52655af-2561-483b-b928-8f9271339e9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bd49cbd-a449-4d03-80b4-41e297036b6f",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d3c855a-6df0-4e60-9c9a-d57124806915",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7196e834-e03d-45d5-b776-29dff6cc0bfa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb53caee-5792-4e9b-874d-9363eacf3f9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ebcc6cdf-40d8-4d6d-a825-551afca3a3fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63c95187-51fc-47fd-aa8c-693b75a91d79",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "070b1591-ba3e-4e19-a909-0ef61331ac51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04ca846b-70da-4aaf-9e42-bd24615b2a5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52cd5582-151a-47b4-a8e3-e73dbe2a9463",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "81babb17-5c26-4d12-b6fe-740c284735bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "273f2c9e-67e3-48db-99fa-b2025a4337ab",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45f34189-bfa4-45a8-811b-9552694190d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef215d65-7455-408b-8668-ca9066ee5254"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6507b258-2518-4564-a4f0-721bc3c9d2ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7d7bc66e-52d2-46fa-ae28-27a2a75d4233"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f74471e1-a13a-4a04-8e5f-febffefd57b3",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "057427fb-75b1-4225-bc05-823be5769ed7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe782c81-038a-4ce9-8686-20510d4edeaf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7726656-6ecd-4574-a052-12753f2526a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "46584c3a-2318-43bc-b12b-9df627c76320"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cf4ce16-9cf1-4481-a347-2c4b32803853",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41af698b-e325-45fc-b88b-f481505df243",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e25e7fc5-876f-42b3-be84-6cd3b45230ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79759af3-dc68-4e73-a77b-2d3d6b973476",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a612115c-4c77-42da-b2ae-2ae0095eec50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fe1c302-26fa-45c9-bb1d-49fc65da6f7c",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e48b1b23-ad3f-45ac-ae93-5209e617f010",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9970a927-35c9-439d-87b7-be65761e0059"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01df4be9-263c-48d1-bb4d-c1bea1ea8469",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "998279b4-d2a3-424b-b73e-8e99999b88f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0eda56d0-d706-4e69-aa3c-3b47e82114f5",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "366be77f-422e-4aec-8070-16ed62eb7d52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c68c832-4cf7-420b-9102-cfda4d0be4ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0afb3427-b24b-41e7-8b92-7369f690e7ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a2fc08e0-9c41-4206-948f-f1f304e4a7ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3854ae96-5c81-4a50-919d-9bf7e1c3ed05",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b49c052b-862c-42dd-a6de-a6dba15d1685",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c159e79-c2c9-4eb2-8ef3-0e0e0ef0b805"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "481525e9-5448-41d1-9024-80d082f2ce7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "26987f85-b2a0-4bf5-aeb6-af460e118f46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0943249e-81b7-420d-82e3-617b03c5be60",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40e2417e-a01b-45b2-9723-5e3197e509f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdccd22a-c2a9-486b-bfb5-2d12eeca217f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c184e375-b585-4010-9d3b-d55318f3b700",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "542c0682-d7bc-4b9e-b8d9-c340ac34bccd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54271cbf-1f9f-4233-b58f-3b31b1349d0d",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d5aa643-ac48-44da-8c0e-fa338bdb323b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b46af4f5-b0a9-4616-ae8c-7210746ae195"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a706c0b1-36c0-4fc8-acdf-95fbfa004cbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7317e851-3ceb-4170-8fb8-32d296176099"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c96014ad-aaec-48f6-96e6-f260e26e79a1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "704ab838-cda9-4b02-9038-26a2f1b29446",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a962b831-e070-48c4-8b89-d89a15e04ec0",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "2ce8c3a7-27fe-486d-a3d5-19e4c0a8af35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03a76b84-f398-4270-a08c-d97417e720e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0f672d53-7909-432b-b41e-6a6581ffec44"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4e201372-c79a-4613-a8d6-04346a984a14",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fc52e28b-fc2d-4046-9ce4-8663359f320b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a0156ae9-2366-4f7f-9291-ff2c92d76efd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a42f357b-13a4-4008-bb19-9df13df1811c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0a233777-eb1c-447b-ace8-0974dd3b037a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "acca7382-87d6-4e40-ae05-0c87d7688fa9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "69ee8506-7f95-4030-9919-863bef044b12",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "905ef57b-f876-461b-ac0c-c9505f08a1e9"
            }
          }
        ]
      },
      {
        "id": "6c97d6c9-a3ba-4aff-8ea1-ad51c642b148",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "f45f7198-866e-4fd7-b7e6-5c77f87b0cfb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6e2dab1d-3241-4fe3-b6c3-5b0280f5c632",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "711cbac9-743c-4987-b8d2-234f88f0f292",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b1d9c51-5251-440b-84be-513ca41630e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f975516f-c748-4e8b-b131-c0357c14fd31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "846a9d8a-a173-4ba2-93f8-17b2f2a29eeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "07ce6c5b-e456-4775-89d8-5f4f3f912f42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "becf7621-69eb-45ac-afa7-a6d788971100",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce259e6f-ac86-4934-9930-5f4df07c3ede",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b67812a7-c48c-4784-a136-8f7b5d8e27ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8527e50-be5d-453f-b41e-b433e824d7a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "31895421-491c-4f08-bac6-5272f847a933"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a02a9caf-b06b-4535-aeaa-99428c08fc7d",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50d994ba-c760-4630-86d2-74be6ebf25c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54fde1f7-236b-4f61-9e10-4a42f839badb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c40baa4-625f-4c06-bfab-8d3ce14da9f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "063a25ae-8d69-4b09-bcc0-1ff7c00628d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95c65c26-7b7e-441f-af70-be0a26540608",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33abadf3-0036-4d14-8456-6c0cc5706d71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3432223-7202-4336-9ad6-53805fa121e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23436e79-96b0-46c6-a743-1f8fb039a9f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "be090d8d-83ad-46cd-9e9a-274075eb7261"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdbf2fd4-5456-45a7-93ef-907c986760fe",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7342e5e-d3c4-479f-8ae5-d9e635301cd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ee0ab28-2a59-489d-8547-6de08d8e3602"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4df18d81-bf76-4d5b-91d6-981130b66b25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3a4bddc3-6cc7-4db8-a65f-0cebb73c17bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "083ce523-3a84-458d-874b-4a5bdf4a2c8e",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "703e72e3-e27a-48d5-ac58-260523a13d3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2dc53e27-0853-46f4-9fb4-e81bd56145b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32e4a766-a189-4cf2-93f8-0909117fca62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2bcbb076-380d-4c42-824d-96a6c8027ac8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "401e43fc-a945-4c2e-add0-45a8984664b5",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de20bd58-2185-4372-9a60-a9abf8190e9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4253d8df-d246-44f4-a81d-5bc5a97ccb4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b71b931-033e-4f5f-9e4a-4e431f7513b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "5f5b248a-596e-4a03-9697-32b899a34b9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66da4c4a-cb6e-4627-b533-1723a2503e0a",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25621817-4b9c-4019-8d8d-016e41196bbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc186508-7cbc-46cf-8f92-467b42e7c5bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f6f3bf7-e6e6-42af-b1d3-cab3a46950c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9f37e041-c4c4-4cfe-a8de-446a3c15512e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f4f26eb-9f86-42a8-b333-df1abc3327d0",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79a630bb-ac71-42ef-8911-546ae990358a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d11da9f4-4652-4c08-83a8-91ea98444bf5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5718b119-5ea1-45f3-b600-a4cb04e4c5fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "81e7f00d-d9b9-4b4b-9024-33c15be216f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bde374cc-9ca2-4009-bc67-65c632c8617d",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05f7fa23-ffa2-4743-9d78-d8efe9aed6f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbc902f4-36c4-41e0-8220-6e9dd6c2fd1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "810e76e4-b942-4de0-9bf4-90e61d47f77f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "16ee06f4-960e-4d43-9f0d-d0faf5439162"
                        }
                      }
                    ]
                  },
                  {
                    "id": "758057da-933e-4009-8524-2c516bb9853f",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d644a66-6ef3-4d47-9018-256dc4592b31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4bca91f-e3d2-41da-9031-a886ee1ad617"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b9cd44b-1da7-4dd9-a188-3222651388b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "09441157-de84-4881-9384-2afeb451987f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cf8a777-1ba4-4260-9267-bb0b61992483",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13ed4b0f-a7f4-4ed5-89b3-c1c09574d4e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6241df65-b9a8-4800-9fce-75e26416afa4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5218937-fe08-433a-8213-900ea4abb8de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3509579b-d689-4d8d-bf73-bc651c5dd4cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf9a95c5-fdd2-4616-85fb-e495c42a0439",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "977ba57c-9e7b-47c5-ac45-0e905f0a5b09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfc09ec8-4d3c-4ee0-9147-e1a1e303a4c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f28863f3-2737-440f-90e0-eab0bf023688",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "372cc882-6976-47f2-823c-544d0d90c182"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e496f1c6-bb3b-4485-804d-b4d7d85846ca",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5aab5654-d2d0-4244-9e34-eee5354c3668",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c84c37f7-64b5-4ac6-94cf-fa53fe265930"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f34b9b32-109b-4df8-a483-e7b136a9db79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "ffd40e25-9e97-469c-9757-ced4382d2961"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1716095e-0a0c-48fe-a49c-f2b917ed38be",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3751019-9054-4b3c-b38f-3580f98c8bdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e5048df-6355-4f71-855e-648f120f1e2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53d9f7db-00d7-4c42-9ba7-bf1f7e9f92a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "c9479689-8582-47dd-8aa6-28ea7a936093"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eed46d14-0dab-46d4-aa20-c5f42662fc37",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7bbbf31-1789-41db-b308-9834f9777677",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c23ff250-d399-4f3b-bf64-30df26d6cb8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af12e0a0-117a-42cc-91f2-6675a8d222eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "6d00f357-d0cc-41d8-b709-70c0b8174291"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9054804e-0fe9-478e-ab3d-154a3cd55c20",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b0c6ae1-58cb-4254-9d27-8d2e64b29324",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73c03267-83bf-4983-9227-093621402293"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a5d86d3-2d43-4673-8e2f-7fd47a798540",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "f148e19b-a377-4ec3-aae1-69426976b4ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60ac7af0-08ba-4ce9-a8d0-b24aa40d0d9e",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82a17894-b688-4c5f-b982-9bbb5709230f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34738a9e-b6e0-488c-b479-8802e64194ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05a1d93e-164a-4632-95a4-ca365806c1c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "05ec3dfe-4735-42fa-bf07-47008be7a6c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24e7f455-b828-4435-97ba-6025b69feb31",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "656bd5e8-453f-4493-8f2e-c9adece8888b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ccc80c76-442e-44b1-b7aa-594e430cb84d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7efdfc39-bab2-45ab-950a-bdd783905100",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4fd12ccf-52a7-402b-a496-ce9c9ec64b01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afb36487-8edc-48bc-b1aa-1ef73fa8651d",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "019b38ec-e9ed-4136-9185-f4cdb125953e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94632518-d41d-496f-a947-4d7ccf545b5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b024cb1-68a9-4675-894a-8c6ed45b3fb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "de54c73a-4c70-4a37-b402-92e4b12c391e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa67138c-fda7-42e0-b940-57c5874f6766",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45b62cd0-def3-4aab-a2b4-14d4ecfc93fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3342547-746a-41b8-8b98-dda1b0857b2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9495adb0-c958-4b4e-960c-ba36e080b176",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c0fd0fc2-0284-400b-a6af-77f6048511f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c35e1c7f-17e2-40e0-883c-b031e0f06281",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cc42074-718b-484b-af1f-e018a7e04d45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "307edf45-e66c-4055-b574-9f7be5c0960a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91aa448d-b6db-472d-970b-9f6731be99cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fed8cd84-9161-4d65-9620-d78ab4bb9b5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "934ca438-6eeb-49ce-8622-bb722ad73dda",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "921ba414-05a3-494e-a19d-e81cf6905fa9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "369da76c-3193-417c-9d63-0cc783d3eefc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a86b2ee3-f954-4273-b251-532d414f41d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a5908be0-3758-4555-b851-8c395127450b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a185ffc-2120-4ea6-8bd8-6a8f623418a8",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9292378e-5ce6-47a8-9163-7ba534ab2913",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ed5b29b-6b90-4ffc-a0e6-b9cd2e12a5e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fe9c19b-0420-4cc7-b606-fee79e6a2220",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e5e43c56-6e6b-4ea8-bfbe-c71c38ac577d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0e00eb0-0380-49c4-8bfe-f308f8169da6",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9cdb9f6-1bd5-4bfe-82d4-e4f8d6093509",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67974a72-a912-472d-a23d-0b29a2923246"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2709bc0c-67b8-4890-85f1-1e7be80a3b85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "26eb7d21-fbe1-43b5-91e0-0ae5e859a2f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99015876-abd6-4238-b75d-03de9da34363",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e24956a-3779-4ff2-ad35-3fde9a0a6cdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0fa90ec-6627-407a-bed0-83b256ed1d56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a529e679-6569-4d7f-955a-f562bd0679bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1b726fc6-dcc5-4ba6-8623-1368ee511057"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2902bd11-dc57-4bc2-9f87-78de7e4a9c1f",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "149a78c5-01d1-41c1-a9f7-209d36d895aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9a9f0d1-f204-4b9c-9ee6-6e3a22a07db9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2a73db6-838a-4911-9591-9369845f45e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "196a808e-0e84-4cc0-aa21-85308420ecb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94e0d9db-9d45-40c7-ab1f-1b4ca603ea16",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81c56583-b44f-4296-a3f5-bf95fbf88d67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0088c353-087a-4e63-83a5-6e976f417007"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff4c4dba-7c65-49d8-9011-c9afce5d7952",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7d443c3a-3abc-4641-b243-9238a317ddb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44aa906b-27fc-4f5f-b243-3e8e8554eee8",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb6d94c9-b7c3-4db7-b4fd-cd48ca1dc55e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e403b0f5-6ce9-4af6-bdac-506a5873401c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7efa2c2-5aaa-42e2-bbad-712293711ec4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "aef9bf94-ef5e-4ce7-8d24-ae263ac84c3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec601be0-71d2-46f2-b24f-bd9eb5f3591d",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b153ee2a-b85e-403b-9088-f4dce7cd3e63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "077c5073-19d2-4eb1-b410-0aa65d783e3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1578b78b-056f-4b2e-98e9-be9a34fd04be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f85cb909-c60f-4e53-b057-68c9c0c682a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fe54bb3-4f95-427d-a63b-1a5f36dd8f17",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a45c08a-4213-4239-9602-ed703fac59cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "481c7831-9775-46f0-a414-3284039c280e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0ab2f30-5f0a-43b8-86e1-d0ebc19b2dcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "21422a4f-a051-491d-b0a9-e5cb529cd455"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d8d9507-899a-4bdb-8aaa-682db01817bc",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ae9bed1-a572-48ce-b7fb-5680db155752",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9492a583-be91-4df8-b0f7-e4f33e0af90a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f78dfd51-09ec-4362-9b7e-97c2e0a2d4b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0cd28a82-c08a-47f3-b0f9-906a9cf3901a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f56890d4-97ed-4aa6-99e3-55438b128d0a",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c21cb283-705b-44c7-a5fd-5827c307cbdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4211e674-a5b5-499b-bf4b-e5e2f5ec29ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b741378-e014-4d3b-a511-5c4c47ba8619",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cf1734f5-aea8-477f-983e-5ed313e55e3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5fa76cf-f843-4b06-8979-f2dc232d8d93",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5eeb98d-1e7f-4d7c-9f49-d576422f47e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b2358a0-3588-46c8-b515-2cdd46e03645"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd36a930-a047-413b-8497-e7fc4e5dadd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "de53c949-b2b3-4660-b5f8-00ae24e233a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f50f7b92-a3ce-4b66-abb1-9a56cf1ee9e8",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d879f83-4be0-432a-bbaa-33596c080326",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b8f4e93-c988-4be4-b875-f68509f76939"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b38bd4f6-1ecb-478b-9978-434ec3266467",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "293edd90-4bb4-4876-a3ad-ff5d38e13733"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bd9968f-0d18-4103-88d3-b4621f99e61d",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15c6368d-6109-4e86-a740-564203271b79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4095f4e9-3663-4742-be27-cc8d469fe9d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "548a9956-a37c-4b6d-b2f9-7de08b5cd95b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b6196595-c67d-4eaf-9b3c-724f96ab53bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "deb38b43-f502-44b9-a8b1-7b575b01045e",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4398850a-55f6-4718-89bc-8672c3373d4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "120e4e84-9fda-42cc-936b-2419b0a4c0e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a429290-85c5-4e84-8758-fb05a8f980b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "96ca6f56-b7bb-4708-85d5-7f08295a13d2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b9fbb8f2-d14e-43de-a387-2d083bb86899",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "fa40e868-a13f-428b-9265-8e50a5d2b8cc",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e9f15e7-3691-41c5-9539-48a0527ac9fb",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "5bde8dff-fea6-4707-8d11-5dbc87dc873f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b400dd29-6a07-48fe-8c75-7e595c32803d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "34ab445c-acd1-4900-8037-86f3fa254b55"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f43b3adb-4194-4da2-9b91-b4b886d9acd5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0d6fab1e-be3e-4460-a45e-46c953d9dae8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fb394be7-e188-4020-8395-59af2a3eaa4b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "57718577-31b9-4bb4-9770-e784916f4ea9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "54e448d7-ae20-40aa-bb93-1e50cfd5ce2a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "98dff3c7-f310-46fb-a51d-cdb29577f480"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "59b37236-8e95-411d-acb0-77dc3d564aa3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "12e3f818-03e9-4813-adef-468c445fcb52"
            }
          }
        ]
      },
      {
        "id": "9279eb79-7c4e-4f11-9f7f-ad59acfe3cde",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "55e60c94-7be4-4882-b498-e8eae4099b3c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4448fde9-b741-4170-ae76-6f067e10e0ba",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "ff41eacc-9e0d-4095-a9cf-a7a1128b1cff",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2e162e5-36c5-45e7-837b-c6a2d6212968",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "814163e2-56ac-45f4-a249-c5cf35302b4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9ea6599-a469-417b-bf55-8f4d435e7b68",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2a09d3c-05af-43f6-963b-e1b9250bf954",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e856b754-0077-46a2-b78c-6f6818c83e57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "560f65f5-b9e2-4f90-81b5-d0003d1b6d6b",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9f7f482-f287-494e-a603-c32d16f058f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b4b044c-4ff4-457f-9373-3be49e25568d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "821902db-c5e2-4c26-a9f8-13ef640c12cf",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47d7f0eb-511d-4e2a-8668-b6e6dfd0c370",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48375cb0-8c0c-49a0-aba9-cd1719a3ada0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69a57e1a-aa25-4657-9247-fa07d8719938",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ac71735-dd89-490f-84b7-2d2b17786d3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5235f921-924d-42f8-9793-f40d374978fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "658cd30c-cca0-422b-9f6a-e49111662f48",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d4cb73a-aa00-4b32-95c2-b240166a79c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80428e17-aefc-4089-b45a-3b0da3eb8535"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26f98885-3092-432d-8942-4688d10e404f",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03a82427-b580-4004-8554-0722e6e4669a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "695a6317-44c6-47c9-a37c-b6ab15f1441e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa02541a-d3ef-410b-b0dd-fafd12c64d60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "054b46e5-953b-44ed-96de-c455698d14f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96ca82e5-e35f-4e6c-9107-c663bf29b549",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3676ebed-24a1-4203-8f99-712c77f22be9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b51616fa-e3de-4302-ba6e-46b19b95b35d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18a56b30-5047-4d7a-a7b3-33f461370018",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "150ff081-226c-4b17-9a20-05d766c06bf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "425cfd9e-381f-4abe-90ff-ac9bf717e1f2",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2184dbb-b616-4c97-b85c-c22949e065c8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2935c2e3-7e9d-4d08-a436-e3eb5a42806f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05b962da-f3e8-4bed-b5e0-c3bcbb79b27a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3709f4c1-c944-4171-a33f-a9a35b3cf430"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62e1f12b-9041-4634-95ac-0bdbff0ec1a5",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd57efdf-cae7-44a5-a4d9-83bb122d9219",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c05dea0f-569d-4556-b333-412d1cfeccc8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "675f90ad-b36c-4b0d-8480-b2950d05d27f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81e7c86f-5d78-489b-8d6d-d3b160a2af97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0682bf23-7e24-43a6-bce6-ef04c1e49413",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d7159c1-6c2a-4c7b-a928-1a0d0f1913b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14ce81c6-a8fd-4697-a556-42b947dd5a55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29d7b2bd-ae36-4e7f-b2e3-1efe8859148b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aef0a373-2793-4f84-b52a-5c4752f93a37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b24b9156-65f4-4f0b-8268-58df3a5cd35a",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39d7776a-bf4e-4503-ac82-2a25962b1312",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7925e485-bc97-4974-8a8e-419ff7f175d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5277bfcc-a43e-4f20-b389-9044b6fdf73a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c94d497b-1dde-403c-a36c-acdf6999e3e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee8491d3-2029-4638-b794-ea14658cc9f7",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df4d2408-a1d4-452d-8c2b-ec27abed30b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "19ae0939-2396-4a39-8b06-55561c301c77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3a124be-cce3-42c0-900f-4f84a9c78909",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4eb2e980-abaa-4003-b346-8689cf3d14e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b75ed7d-9ba8-44c6-b6f2-b29d44cdcdcc",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a1c132b-4d7b-47a9-b2a9-f9146d4696ec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7e556a97-c641-45fb-b88a-e1954fa20de1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "097ff2e6-d537-4e9b-a63f-d5c1aa96cfee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c68cdae-9dd5-42a6-9463-ff0e02f79409"
                        }
                      }
                    ]
                  },
                  {
                    "id": "baa34c59-410b-47cd-9241-7dfb8f933829",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5342c23c-2994-412c-98da-c46aaa028654",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "54193a4e-1532-451c-bb4b-3de620c015c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7608fc36-df6c-4963-b5e1-9cfcc4cb983c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b53ec3d-60f1-4b0e-860a-62fd8928c03f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e554f5d2-fd2c-4b22-8a8e-2365eea0143a",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fd95026-fbdb-49e2-bd28-4080410a891d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9082f78e-e0a0-49f5-a430-1f8df8c87e73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75b3124d-8cb1-409a-b639-0c48f77f8f51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "594ccad9-535f-4010-ba16-197380b1c46c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1214f1d-c1c6-4527-9dc8-5d51a199036f",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd3da3f6-d30b-439f-816c-efe1190e2bb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ef422c6-2259-401c-b2ef-7cd3ea8968b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce9eb68e-803e-4bae-a511-162a3283ef57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b0c3a75-15a7-4864-85dc-f1ae3a4df1a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f935590-f96d-47ed-8c5d-5c1c989bb8b5",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ebc0abe-b245-4913-8aef-ed89fb51e058",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b86d011-d9c8-4dc9-a632-0de3780e6eab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "838dd7f2-54d9-4f32-8e34-85de412b20bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dee23e42-22e4-4456-9c4d-d04e0f6f3be4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "606207a8-d99a-4827-b46a-84ab46364a2e",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f104eba8-8d01-4bb9-8e7a-dcd57f907d5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1dc8129-9507-469a-822f-6a943e277597"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40343ae8-5d61-4f1b-b1f9-b6d09ec570be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a863cd0c-3c41-419c-80ce-ea8044a852ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0978e37a-6a11-4521-a6b4-0dc93ae28b9e",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc4bbf0c-dd34-4ff2-8d24-9e5a53e7d297",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c2e2d4c-2a78-497d-a810-0dd1caec2c06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff7379b9-56ca-4e18-a498-95aa77fb3e66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83fd36e8-df1d-4ad4-ba6d-05589f7656bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64c6e219-b9e1-400d-963a-30c9fbdc17e5",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b02cb8f0-a698-4db6-8eb3-09d4ec617af6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44090597-54d7-4830-9680-9bfdded01059"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73d6a8a3-6541-4746-b113-7d87d92c7eb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8be20aa3-07b9-41e0-959f-8b414d74a8e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fefbeff-2307-40be-94a6-405695149818",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cd3e905-403d-45ba-9b08-30ac64c9dc4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98b3b622-3d90-47b0-976f-30250a4b6039"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3694ff8b-231d-4815-a93c-cc2f4dfdba79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7ca3eb1-c4fe-415f-a64b-db6f8ed2326c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90461336-ad33-4c6b-9dcf-51945888d84b",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccf811f5-66cb-4f4e-a11a-784d0ca3fcba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85288219-337e-4d7f-a2a6-059d6107afcb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "108bd37a-8b13-4c9c-9c71-e8b9d4792c7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3166dbea-6b61-4756-8473-519c0c977c0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "572b5274-3e00-4fd2-8a2e-39de6d9739d6",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9aea5b5a-8aeb-47ad-ae3c-166fb8b35200",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fc30c20b-55e0-4c66-81d0-8e946542f8a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "520d8e10-e9c3-45b7-a4a2-87072b715104",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e22a68a6-85ff-42ec-818a-2fd7300eb2ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46073add-2314-439c-a23e-fac6aa6d1bee",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d102ee79-15eb-42b4-83df-2ae9c091d67e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9b59efbb-8f2c-4208-a3a0-0245d8fcecd8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "efc03072-faf3-43e6-ba2d-606c92ed1e19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c8b8f99-e0e3-49ed-94bb-56f13a7c96e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d733db05-9835-4e50-9fda-c41c1aafba28",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c95dd94-13a6-467e-aa08-9909213e9ad9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dfeea653-1e88-48ec-a942-dd22ff01a264"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f1b89e0-e9ac-44be-8d80-6d12691df382",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8869a5d-252b-4df8-a354-d8552f85d19e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f302bc3f-b986-477c-969e-8f0a69adae34",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d947a7a-0f49-44ac-8174-7056c13f74b6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "707df457-f211-4ce2-9c54-751d72027eb6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e216cf9b-0138-4d77-8065-38eb311c7a30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b6e4202-de2e-4ef6-b62b-a97d1095a174"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68858024-845f-4e03-a8cb-e790768d8253",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d93a7359-b528-4d7f-a68a-cd3d28fe5694",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d069eb68-f2b3-4cee-80da-475bc7557326"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e80b23a1-0b96-4392-8626-60ec287ff15b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b681c75-e80c-4257-8b76-6e176c534b9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72e57356-7b35-4918-abd0-f8e1ee0a660e",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "059e3da0-bfe4-42b3-b005-a47ebb0754a8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "be2c398d-c55d-4fbb-b11d-07e04132e0cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f94f0a7-4380-48ef-b7da-628688a9520f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfc1f3bb-829b-48f5-abff-3fd50b2f2596"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4bb8c6c-f0d1-4f83-984d-5900f3f6cd52",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d2cdade-527b-4c5a-aa4a-880cd33f6cfc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0bc47db0-c7ce-4930-b9bf-9ea1a984ac51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db1c1857-f0e3-4a85-a838-5b0c06503a62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1623d936-61e6-429b-b148-4776342ea0da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "022b140b-9990-4fd7-be74-2e731d4e691e",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52493f5f-798a-4f5d-846e-ce2c3635da47",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bc70892a-ee33-4101-8900-e217112aa3c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f76519f0-7ab1-49f0-af17-03feed039fbd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e39d9c8-8a71-45e2-8b1a-8be653fc43fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99463c93-808c-48f2-9b36-7358ba23f7b4",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6210b81-3b61-4b52-a545-70846cef2b81",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "75c880a6-393e-432f-bd2b-3d11e5776d1b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "622c11f6-5d9a-4db0-a1de-e6431fda3a35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d16e9b9-048d-45d4-9e16-09f5ef0d550d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "385d4d3f-5325-4a2b-89d1-8325a2599995",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fd139d3-5ea2-4249-b711-edc9cef0619a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "632d47b8-8e92-45c9-b4ed-4ab4f1bbb9a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e41380d5-728e-4a48-be41-e1e8acc6f894",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd63071c-f4c5-4f2b-b879-8ffc2c67aa6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f08c7fd-7a61-436c-bcb4-651daa0a55a9",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64b0bbec-120f-466d-b6e9-07bddd42358d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "174c111f-8718-44f3-bb48-e6619ea3e3de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6686869c-063d-4231-94da-6b532618da3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1bd8a2a6-842a-4026-acf9-baefad5d2a9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73d8e8df-23bb-4b0b-ae10-7fca1cb55868",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "681aac17-29c9-49d7-b7bf-341a7f5c4811",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bcac4e5-60cf-4458-bd95-c4e90459feb4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "619d29fd-5ca3-454b-bb1c-239979060396",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c4dd5a7-3579-466a-a7d5-5a3afecee602"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7271e61b-96dc-453c-8f1e-11273e06212c",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e33d745-4a16-445f-a6f6-f7711366f50b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2cdd5bc-7daa-4c73-9bff-9fc1a04aa1e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8225d51c-0572-473c-9377-8f9039656708",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c643fac4-a89f-46ca-9a23-ce7c34d7bb90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "440f3d49-609e-4ef0-8190-7928e26db370",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a09c4c3-caba-413a-af4e-f24c003d0e0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af4cb5d8-4d00-4395-8f50-81f4a5b63beb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0cb6b74-31de-4d29-b738-1a7ef6bce34e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7040653d-00c5-4ad2-8268-e16412b69adb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0728ea6-a0fd-477e-860f-88dc2618a159",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec05c89d-1b2e-4737-9817-dee29e363221",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e2645c4-dcba-4adc-bf30-c31c910846fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "647d104b-b3e2-468b-b2e4-a08aabd9fa20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a36a16c-a6ba-4136-9979-d2342c6e030b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b5738c9-1cab-459f-913b-e33fe084cd3b",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3f41e1e-44e9-4dae-8f6e-01be8d73f971",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76eb3f89-a79b-4a88-b716-98d6572d4bdc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1251c983-a8e9-44f5-8390-017bc1960b90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4681f25-4eb6-4269-a645-5a318816dfa3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f7f00f6-2503-4463-bcb0-49b93517c03e",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9128e8be-d142-4fbb-aaa9-5f3519962b67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f945d879-e78d-4b6e-a699-ec43f92aa92e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fd0cdc1-31d9-412d-b66d-171ba32efc76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9a9a375-cab6-4a90-b778-226ab64c7356"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d2b6cf2-00c6-4690-af72-18d9e873628f",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61cdf490-7474-4689-8156-522915076754",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcbc252b-1be2-49fe-bec8-94d21a5d5113"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0d5aed6-d1fb-4346-8996-fe5b27ea0c59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "760c0f10-009a-467b-9f25-9e54a4ab8dc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2550428d-11b4-4584-b0ee-883dcc076c4c",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04625537-2ec2-41ec-9985-4a2a2b331c99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fd26bab-c837-4aa0-ac37-75d322a18239"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3aa3c76b-0062-40ca-a527-3ba8226c38bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1405821d-7bb3-4932-86c8-1203248502cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bece769f-33b0-4276-85c0-eff5edd47201",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "156f2cf4-64b2-431c-bc45-6d8f9739e10c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d289258-7a77-4954-bf66-70fddaffef1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6a79c06-dc78-4918-8e07-278a01356f88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "197a27e7-0907-47ec-b4d4-c20b80d997e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "147ca7da-a363-4e84-b243-7cb933c709aa",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1512fe2-1fc3-4037-9c63-faaba7284e52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d7d3f09-efb8-4721-a6a5-10416971646e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc4e4220-3243-4a0c-9d0a-9b358f3638f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17a2bc31-2d28-4c42-898a-df59b19e6f89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "193fcd04-893e-4826-9274-cd8b28c0151f",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5376bce-a9b4-4da7-b71c-4b09eaae3b20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "618e3cfb-e4c7-49c0-a19e-c128e5158063"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b9de3b9-ee88-49c4-8ea0-efcdcc60301e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a436580-6837-4a26-8f70-cb384a4f3ee3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a3a5c22-04d3-42b7-822d-a9f4017c0fdc",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f96f233-638a-408c-8e1e-af3e590b722a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58d566f4-50c2-4e08-8b3d-b1f89df14bc1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05f86e07-60e3-43af-8443-88059904f394",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa027635-5a99-4a9c-84cf-8e7b114e29ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2017726-99cb-4f8f-b25a-5c871c11b7ed",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff42e1d0-2a76-453a-af95-e7b09100774a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "289ff0f2-4746-4937-be92-5d200519574d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0d4df58-da5d-472d-a449-04357b40545c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0becf989-b7a9-4a2f-b6fd-58a6aa75e28a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d76a44d1-4ea1-4700-bee5-214b8eeff36b",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5775b37-e352-4582-9730-d273d8c33ff0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "604b7564-24fd-42c8-84c6-917420c935d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68749ae4-60a5-408d-84b3-ccedd7229625",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84b5171a-fd7a-4c7e-a98a-6f58860437dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d8a75ce-20dd-4934-bfa0-d583be8af68b",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "233e2c07-956e-47d9-aa2b-192f8da5bd3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "237bc930-8f52-45b1-bdda-1a95d7a851a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36739164-b2bd-43b7-bbfc-3aab51cd5458",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ed68e69-0759-4994-826b-a18d270c3e24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e09af743-1d50-487d-92d0-a18014bcee1c",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89cd2470-ee9e-44d2-9d90-f4a0b0148578",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bc78250-6e24-4978-b6c8-352dcee2caff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a6d83db-908e-4f71-9566-17c52fa86ef5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc28af42-5f5a-4fe9-aa35-6a75a68d7241"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c7492e3-0334-40a7-b457-6f25c7e542b4",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09820f2b-bafc-4fcb-be38-ece7e952b880",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8770d14d-5113-4397-89c7-4d78690cfa72"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bffe645e-23fe-46bc-a40a-23840c19c4f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c91c077-5b0f-4fba-bf43-611651df6517"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d34eb51b-8920-47a9-ac4a-026861c10607",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19b82f3b-6301-464d-93a2-56cd4933eba0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbe2971c-1fe2-413a-93c8-aacbfee86b95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c559bf38-766f-4fb6-b55c-8a3c3196e744",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a24762c4-4195-4f04-ae4e-5a1954e079a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64dc3665-2da2-4d28-b18d-292a9fd80db5",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "363499cc-0309-41ee-8d42-dabdeb9f6217",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ede07888-7996-4314-84e1-8911fcbc350a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c6a9624-ad63-4f98-8a17-101724b0b32d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7bcdbdb-3f99-44db-9db9-cb2d98dca0c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1909eea-2bd4-43fb-a0a0-4fd1a9b66861",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cbf18be-b21f-495a-a14f-9f7b8857d4c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a233e4e-b17c-4020-9dab-bb535fc48969"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9743aa3d-7eb1-4f87-998a-dc77630c4425",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1f0c0f1-5f78-4268-bb2c-a1ce1be38b0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0874b4f3-c431-49df-9d2b-637d17bac789",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1649ee01-bb63-4c9b-9de6-a0fa9f84cb17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45953b71-21d7-4a1a-aad4-e9d0906f8d90"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52edacb6-a790-4f9f-bfd9-1949c31ccdaa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42e086cf-06b1-4da1-94df-5d499ad461a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6e8adac-4373-44c9-a1d3-71d06e8ecb57",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04d86dae-5bad-433b-8116-955b92e137f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e88558e-98ca-461d-b212-c12c58ef3a51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "123a3114-b723-4207-8f1b-1d5a5c1e608e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9129bc8-aba1-49c2-acbf-4f229f8b8d21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "105c7b8b-0d4c-4555-b060-470472648e5b",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "246c0822-c93d-43e9-afc2-073f35fe8666",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c376eaa8-69e1-4b99-8206-009e97cff9f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0547888c-9463-47ab-a0c6-a01b95202cf7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6a4e906-de24-4068-aca2-f95cfa588e95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65ce622a-9102-4051-973a-0f8d64a99cfb",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c313005-f914-4f39-9761-b0f16beb1c8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de3faac8-5ed4-46bb-b71d-2b3c336b022a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e330963-c692-41ed-b14e-2f83b2ed11d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b13a560b-5026-46e1-bea9-07b78228910b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d999b676-1ea0-4ebd-943b-42bae727fecd",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06083f3f-6135-42c7-a7d3-0dd8f8e0433c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f15cc583-4633-4f65-af27-ad765f33a977"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e37c71b-9634-4116-b5ef-bf277b20fc27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fcecbc28-3979-4fbd-8edf-9f38cdb51a07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02134191-df5a-4ed8-81be-52de0bff0987",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a5f55c0-7b8b-4a4c-8dcb-66a187cbd1e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eed051e8-561c-4a2f-80b3-7c48cc8a0dbf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c736f4f0-2042-40df-8050-4c8d777da604",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32f4a011-95a9-4c24-9a8c-43da77282280"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba6081b8-445a-4b29-bf32-b081462b4f94",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b27160e-c2a0-425d-b8bb-c2e4c1a518f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5c30343-eac1-443a-bc1b-a756b24a10d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0aff8ff6-a886-44f9-9eb5-b729b2cf9c11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3eded8fb-0ec0-4ad7-a8af-7e6b23c029f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e783876-2c61-4002-86a1-b4cfb03c0b6c",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4e8abdf-345c-4951-821d-786bbfe02077",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb7eefc4-5362-486a-9062-32627f7242d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9eb2ab0-8e2b-4801-a357-91d7eb94c4c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e11b070b-b5b6-4e92-b2d5-825259e906b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fc994b1-1253-4519-ba53-e5e66ee0f65f",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "976253bf-c051-45e3-9132-2b3c448639e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a213846d-cfa1-4dc2-ab91-9841540e0f12"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "583b8ea5-8340-41cc-bc3b-6a46f476d14b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "037f8a0a-4529-4583-a8e5-f45d5f633b06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "242f1f38-5d9f-430c-8317-85c293f25fba",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f49d0e3-c610-4b03-b752-a5b33dc1d2ab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "99770125-31cc-4cc9-86f6-a22248e1a488"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "650c4704-81a6-455e-9cab-92324ffde400",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "834f0b9a-c2ce-4732-aa78-416f83c8bbfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fef79a1-5cf3-41d3-99f9-cacad1c0ac34",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c7ff84b-9cd0-4ffc-a907-9f073760bfb8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ca8098fe-d2a3-4200-a40b-2a2b7d8d4f92"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e89f032c-adfd-4a03-a092-0e9818b7f306",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85e58bd8-fbac-44c2-a7a4-f364e5d4982e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28ae9569-ea6f-4b28-b5af-a60906e497d9",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72da8b75-e229-4fef-bc14-d0cb7424b880",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9c1d7a73-2513-4968-bcc5-0ee6b4be8581"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a8436d1-1842-46b6-88da-659b4a3c8cb5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49aaeefc-a415-40c9-a39f-68852561c6f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d08ff475-a4d1-432b-9e64-4202fc817f8d",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f755f10d-2712-40bb-9e5b-858f1f386e98",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "22f2b99f-e663-43c5-be6a-7cb55a88aa21"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7eaaf70e-2254-472d-afd7-1b39169738c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f63d6fa2-ef6c-4e4e-a8d0-d19f3410ae68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aacf9448-07b4-4f15-aca7-7dc72e9a7d6a",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4c6c7e1-3ef3-4857-8938-112e16ca284c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0bc1eea7-cb1a-4c36-bb5a-80522f9abc28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "abced483-62ac-4eb3-b627-166b5f30cde3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca49f686-1362-4040-83e4-31eb9d0e716c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bc1046c-b30a-4f1c-a5d0-683786e2840a",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a13ae8a6-c840-4687-b73e-5f4fa3db9af1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5e4b5135-a7fd-4bb3-983b-2d0bd2c49f32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a99c854-25ee-4397-a10a-6b44173d338e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5707b02e-983e-4d54-ab91-6a9b09127489"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4be18cbd-a01f-49af-94b9-e7ca40c60aa2",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9e9ebd0-270e-4257-a6dd-4db9e9d9e0d2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "57d7f8f5-96f0-4f83-8872-af2105aa2db6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72072ea0-fd03-4408-ad1f-fb7af366e9ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c186a629-e9d9-4b9e-a831-116dd1eea8d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "901847c8-140a-4c5a-a151-f13676be5240",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09e20734-3388-44b1-91f9-84484d2fd4d7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ee361d53-997e-4480-a923-818211450e13"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "596faf78-4a48-4290-a9f9-17eec10c048c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f876faae-ef8a-435c-8f86-328f6adc9966"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9a57b42-2580-4ded-b8f0-6b5c35f9f87f",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1f51d2c-0559-4d60-956c-9db52945f179",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "17c905c5-cf4d-42d8-a344-1e35219a7a17"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5964c5fe-8497-408d-986b-2c3a5e07463d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58752dc2-9eb5-40b4-94a4-6e1bf7848d18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1971e031-a4cc-48b6-a0a6-f40eaafa3828",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3767cb5-4dcc-45df-8807-be5ce8f1c51c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "370ed7f9-003d-4a19-ac90-23f1c2772f70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "747bc689-c5fc-41d0-a171-28fe18411714",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1dfff4f6-2623-43af-9294-91525ef1a394"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b2f2ea9-cc40-4749-a118-e9fc113aa9e8",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82f3f477-6365-4b7d-9514-c07e3523f665",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7c9e869c-68ac-49dc-a904-b767993479f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "397ced01-172e-4a36-b4c1-169463ac0dce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3b27b29-1b7a-429f-a0eb-74418d98a6cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03c6d33e-4f6e-49ea-9966-9e5e147cbdf6",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ee2ac96-49ff-4a52-936c-e8f22d03a189",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f64cdf8d-2bbc-4601-b3e8-ec52b9386bcb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22832b7a-f461-4409-95f9-7f98353c7758",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3b19465-5cb6-4011-892e-8d09e813feff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfe20c2b-8df3-43fc-a7eb-42bf1f3af4a7",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11f193dc-7199-49e9-8482-34aaad9b827d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9a1a5c8-88cf-48a7-82b5-d82c143d659e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "752c1bdf-9b2e-4318-a9ad-81926fe61721",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d66ee7f0-4173-4e3e-9c97-0624b2b8caec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29a5dfc3-cb40-49a1-81cc-fa65b6f06c4d",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7a33ae1-ab9c-4297-87d0-ab715739f59d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "862ef93e-b155-40a4-a81d-948f2625b11f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9635c9ae-df54-4c3e-835c-2a66a9dab6e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "794cbc24-655b-460f-88d2-383ff1f2a6e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78bc628f-7f9e-43e3-8505-810bfc8ad0bc",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64df7c79-b6bd-4e10-a9dc-c37b79c40720",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "64f30cb0-cd46-4c38-b1c5-97c82fd99e09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b61d5b0f-47c7-4781-8daf-f9318698ac13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4de5723f-d0d6-4387-be82-b1af295c6cf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb4a6070-2ccf-406f-936c-a1f68883f321",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c6cf2e5-cd16-4217-bc26-cea2f9ec508c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "132125ff-6dc6-4b3f-8819-d9fb24093811"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e411b0e9-c369-41f8-a119-c36355d82787",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c680381c-8490-4c8e-85b6-9db767ba3fba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1852f27-d845-4575-9c4e-60d5cabd06d1",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d69941e-4e37-4298-8115-3bacf4152139",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "12c8c6d7-3a7b-48f7-923c-e3fca84dd5c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c2f6c61-fbea-4f83-84cb-cb2a6a666d6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d85931e-84bf-40dd-a6bb-d5157488bcb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d4e06ee-cad8-4a2e-900e-d926405381fc",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9ca1ebf-a8b5-446a-90d6-05fe9d68805d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bf4f3158-b637-4de5-bee4-9a49d434f7ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cd8f965-b18c-4d08-8588-23c9ae33fb7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f36729a4-9e46-4bfe-8c38-7ec3e7f1aa86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "449db66a-8e62-4ab5-b6d5-33b77fc4a12c",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "307a0423-58db-450b-8cfd-3c5e5a7b9939",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "43d64f54-1eb7-4e65-95b4-54f0a544efe6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "474dc2d1-2fd3-47b1-8703-221ae2a19b1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33ade2da-4ec2-43a1-846c-26a32dddf505"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0aebae74-c59f-48ea-bc5c-9cf1a0b71703",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8123cab-c566-4b50-ac87-52ed2b2f7ad0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2141400c-de3b-4d63-a49d-170ef295b7e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18026141-0b36-42fe-aaa5-941e8637f57b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "070c5bd5-d826-4638-b631-afc0969180c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d41a02f8-963e-4e1b-888e-d6c2f861ec99",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c96a55d3-68f5-4a07-92b9-808eba09ca28",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4fa8e18d-8ece-43e4-9895-88801946b4b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "931b51ab-548e-4804-8828-170c65ccd5a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a74cc36-7e17-4ae4-92c9-8e7e172b91dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33be5dd6-b00c-4f9c-abdc-d72b596e5090",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88484593-e1bf-47f3-9a69-5bec70ac66b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "92a5ee72-8004-4748-b8b2-17295f9e811e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dfdfa03-9624-4794-a1a0-157647d73931",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02272c30-4f80-4023-9f25-d4753cf4dd7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b62473d2-3556-491c-8127-d9ab60d5d51c",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "052f4432-7df6-45eb-94cc-37a45dc34754",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "62088944-ca82-4e2f-8e91-e7ba2cd22278"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c933af5-d4be-4fed-8651-37fc957f7b3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19a0ad97-94c7-42f2-a7af-5744d0324df8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b495728-8799-4b99-a308-964a18ad098e",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b42976c-ed23-457d-a82e-81b7ad666029",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a4f227f8-cbfa-4e84-99c7-a5c5fead57c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f126cd1c-6851-4345-ac94-15166c75534b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6066525a-2c34-4c28-af3f-ed46b3902360"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6a01726-2710-4547-940a-f5f13aba2794",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2deb775-cbb3-4150-bf21-6c0e19f44958",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e9e599f9-b7c5-4513-96c2-b51a41fd2222"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "198f4f97-a2ba-48cf-b0f5-b64885f8e10b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf8ab759-58e1-4a68-9107-0f36c8f7da69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eed7aade-944b-4076-8ba5-7987dbb4d08e",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edd33bb8-ced7-4de3-bf4e-fc9937c128ab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "49309d44-7a06-4887-899d-a52402dcaed4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2689bde4-d315-4f32-89c1-692dfcb8124d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e935142-92fa-4872-8af9-89e0668e532e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6401ebe9-8713-45bf-bff5-864d3507647b",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86f8b97b-7b52-4a34-a1d1-3bb995266402",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2cfd1bee-6cc4-4b18-89d3-760e285c7225"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c46fdf73-62d4-48d0-bd0b-5f6c91d07329",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f257164e-5710-4b9d-a7ba-824065e7d195"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3319c538-b964-4f48-9352-7439bff39357",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d7a4a49-cdbd-43e3-83db-dd4010cfa076",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a98a8c8-b390-471c-82d0-fb47cbc52f8c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7555a51c-56ca-470d-81e9-cfdcd6201a70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "beeffef7-f810-45f2-ae9b-f0945da22a46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d826d20-6494-418e-9693-39f2847d26e2",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d326c3d-0f30-41a0-a486-6acc76f4c789",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a60f3294-9db0-42ec-a136-2ed9b32b8f99"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6f1119b-555f-4ddb-921c-b9703912b1f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0016971-f85b-4bfd-bf53-e2ca8b7e44c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af713ff6-47c8-425a-ac5a-976b5681dd0e",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d50c0f16-5960-4c72-84b2-28e27f7af8a3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3eb21cac-1747-4df0-9ca6-9e7a16c130e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ed0b868-de50-439b-b1a7-bdfcfde3393b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a20c9382-f059-4daf-a49d-8a6caaa02e53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e2e1c11-e767-4c7f-ba5d-148262e821fe",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c87be510-5e6d-4222-b83c-c008a26084f3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a91c4e8b-c9ac-4162-87e9-a65dfea1ce59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a446018e-107d-48b2-a850-963411f84aa5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9a084f2-4c02-4598-b01d-e55b2b7eca69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69affcf7-ba0c-4544-9705-6597ce467606",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21630836-6ea9-48af-ae32-aec7ff5df789",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d2ee6916-1ea9-4a7a-85a5-39222c460c6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37bdf4ce-3b63-4269-935b-52daf2937a10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f36585ad-e228-4b1b-93ab-2bce5f92245a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07891954-ffd1-4505-91bc-2a9bd3883055",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa90c2f0-34d4-48f0-bb6c-318c53fb1a98",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6ea56855-7d6c-426e-8dbe-da0897732458"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a006506-b5c3-4216-9fd5-f2802a952d52",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2442aee9-1a49-42f7-a938-4a848624d8ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "952b309c-a21d-493d-962c-9080dfab01b7",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a885dd51-9739-4790-8ff8-a4b8fc57bc8e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "165a3b86-d93f-4946-933f-3be786b9baae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db0cb050-b5f9-48c2-b6b8-99d4c178b618",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e14d53ea-2ae4-4a14-84d1-82b9ad9251c0"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2af993fd-35f4-4d24-b2bb-2df782678c92",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e2679a05-e457-4767-8c9e-5f2e284dd778"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6ebbcdb6-7ba4-41de-9bf5-ce4d46dff5dc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5978ca34-b8f1-4c19-9a51-0aaa9ccaa89d"
                    }
                  }
                ]
              },
              {
                "id": "78234f3c-83b3-4271-954a-908502f05b65",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b54a1829-1fe5-44c7-a040-757c27f58226",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fccbe51f-6ec9-4a11-aaab-a56f1e55e0dc",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "9c941530-6a53-4a80-97f1-e53cda6808c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "057faadd-b7e2-4f63-b742-2b74b2b81152",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "edff9b32-6060-4963-8397-a539746e49d6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7022821e-8bc9-4c06-ba7e-d0b5f62055dc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ba597dd9-ff53-4938-bd07-87955d8f14d1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b81d51a4-80e0-4e77-b715-4b279b3fe9e7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cac315d1-90d4-4ce1-b488-1223e9f99962"
                    }
                  }
                ]
              },
              {
                "id": "6f0475a0-d98c-409c-9d00-c5c2401093ef",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "1eb36bf9-c056-48ea-90e9-08225bcd9043",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b41782c-7aa4-45a5-bfab-1f361e8ba0e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "5fe02746-a692-494b-ab71-9a19295489ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7472fc7-b374-4033-9c44-6f6c8ea4f485",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "742d0631-e06f-4e64-ac8a-5f04534fbc08"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "e9612ded-4dbd-4639-9ca2-7d3435683bff",
            "name": "Positive Testing",
            "item": [
              {
                "id": "51c12d06-ac11-41e2-8794-a5ec2de5ffa2",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "27d82dfd-7273-4e1b-82b4-6e67747828c6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "21f1285b-b7a2-4509-a69e-c1a27d73c1d3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3aed7f1e-ae33-42fd-9a4b-c82adbde783f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9f4b7e9d-1016-44ab-8c4f-b9f5417aabca"
                    }
                  }
                ]
              },
              {
                "id": "a35f9034-e643-4ba8-98c5-5c0469a7964a",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8194dfd7-a74d-4258-ab52-98c271698d17",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "70e0766a-fccb-4b4e-99e3-3c23f31c14b0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "060727c1-893f-48da-af62-cd342ed68b68",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c1a91fde-39d8-4e01-8922-c0c8bac00f1c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d68afe99-bc29-47d9-9efc-b1cc3540fa12",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "10d20340-faf1-4d7e-ae88-ac85c3760d80"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8a014b16-c096-4f45-9296-1913a4afb173",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "edf7727a-1b81-4dab-8d1d-14a1c0700852"
            }
          }
        ]
      },
      {
        "id": "2c6a3b2d-18dd-43ac-a14d-abdffcfb4057",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "a7d6f6ea-6123-477f-84c7-10a2c6e5f126",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1284cbcf-5061-434b-b92f-285a15a87596",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "eef07fae-9f92-415c-ab7a-cb6876ab97e8",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a161d8cd-f366-470d-97da-ea824f03170e",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "62deae7e-4cde-426f-bfd1-e6b98bc17e96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2cda4fd-fc25-449d-bad6-888e82ccb88c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0b605e0c-6036-4bbc-975d-5431d7288d3d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "864a4a55-ca45-4d84-9364-b97b11b4342a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1da8c414-1f1a-42e9-855c-0424672f1a19"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ae365739-11e8-4f7d-8bce-abfe801994dd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ad352427-3c4b-4504-9f6d-be2914025593"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8e8f75d8-e839-4313-9027-f00db97b9a5d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "83a24745-8b2f-4ef7-abce-2ce3d1451720"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "80c9aacd-f47f-4b02-b207-f4e0fbf8e860",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "07562834-980d-443d-88cb-19ed1a1a4509"
            }
          }
        ]
      },
      {
        "id": "09ae01d5-8add-45b9-a75d-5320ad73ce7c",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "7d5dd4e9-6def-4f64-9e65-590d8afdd22f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e45f60e0-0dd9-4dae-998d-27ef89a21bd1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "915ca03b-7914-433f-addc-5b08f4809aec",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cb8c29a-30ea-4ef0-ab57-17c491c3f193",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ad071f02-7ff0-4372-a83e-f9d405c57a50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a738ac7-f6ce-440e-8892-22c2f0426a37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9fa51a83-877c-4adf-95ab-eae5a34ba6f5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7d7958d8-5274-4b79-ae3d-960fd43bc1a2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7a2f73a2-6431-41f6-bffa-efe6d63752a3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f3513349-907c-4bbf-b361-880164993f0d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "13585df0-a9d0-4c05-92db-bff63a06696f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e955d97c-535d-4404-ba94-3fd14dc85dd5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "7b460019-9364-4ad9-a175-4e7a3ca8b07c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6a2801b2-8929-4bb4-9d40-55932f3fe583",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8c27497c-c55e-4021-8de1-83b26fcc9d91"
            }
          }
        ]
      },
      {
        "id": "d654d213-9480-4097-8171-471a33e55402",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "d7eed75e-2e79-4cfb-b0bf-ff3951481304",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7b5b9b73-b982-4673-a17d-076bcb8ed9d3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "45ca6fa2-81a4-459f-a6bf-dc02499f85e0",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e473faab-5d6d-4137-8cab-c73c25b61ed7",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "aa92b857-9793-471f-8bd7-2514c65cc5ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8915bdc2-cd98-4880-bd5d-67c00a29a7a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9d89dbfd-bd87-4fe3-a364-205bfc244aad"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "06b02eff-c4b0-4f9c-b660-e0e6866f4f6e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "657f49e7-3414-4287-8a6a-fffe93d7e858"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8e4100d0-b148-4be3-901a-813ebfe8c79e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fcad88a1-e4f3-46ba-80eb-9e6aba25d02f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "01aec5c5-5601-47e1-a545-cf0bfba2cbf0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "81a27217-7686-41d8-8cc4-77e5b750f981"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b2644828-a38b-4137-ba4f-07d63c6458a1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a2771a87-bef2-483e-8bbf-9321ca1dc764"
            }
          }
        ]
      },
      {
        "id": "0376742b-188a-4119-8af8-d70169bd215b",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2b497eb9-0dad-4169-8fce-8a91ddb9fc19",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9a6395f3-6411-4241-9708-c827b43de585",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "9c1c921b-5122-4bb7-8863-78562df26431",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ff8dc0a7-69f1-41fc-8204-b4439875cd95",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c4eabcdf-614d-431e-969c-f71f0a7026f5",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 69
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 69.6175438596491,
      "responseMin": 6,
      "responseMax": 554,
      "responseSd": 70.47217473238095,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1703809724822,
      "completed": 1703809754001
    },
    "executions": [
      {
        "id": "5bf9fc17-e69b-4cd6-988d-4fdaa746ac33",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "a39ede60-0ef1-49ab-8257-a538c48ea783",
          "httpRequestId": "2595a59b-2c57-49b7-9670-080675b7b8d3"
        },
        "item": {
          "id": "5bf9fc17-e69b-4cd6-988d-4fdaa746ac33",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "8fbf2497-3cf6-49f5-b315-70108e69d42e",
          "status": "OK",
          "code": 200,
          "responseTime": 60,
          "responseSize": 0
        }
      },
      {
        "id": "1b35a7f7-75ad-4658-92d2-44a1f1c2e1d9",
        "cursor": {
          "ref": "12a30727-1ccf-4f0d-9d22-9b527fd9d6e6",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "f7db75ee-8215-4728-82f2-39d5c5c91c30"
        },
        "item": {
          "id": "1b35a7f7-75ad-4658-92d2-44a1f1c2e1d9",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "8c4c6406-ef78-422c-b9c9-272186015922",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "5509606c-d31e-4c04-a07e-bff1cb94cec7",
        "cursor": {
          "ref": "c66bb773-6b66-4395-aacf-0d70e3872292",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "68adc1dc-9e72-4a9c-970a-eaf52e511d10"
        },
        "item": {
          "id": "5509606c-d31e-4c04-a07e-bff1cb94cec7",
          "name": "did_json"
        },
        "response": {
          "id": "546185fa-581e-4c68-85f1-62da44ed8082",
          "status": "OK",
          "code": 200,
          "responseTime": 271,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "166928f8-f129-4ebd-95c1-40c171603e4a",
        "cursor": {
          "ref": "e4fd4512-d361-4040-b6c5-00cb2bf13733",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "880127a5-2721-46da-ae10-5581690ace2c"
        },
        "item": {
          "id": "166928f8-f129-4ebd-95c1-40c171603e4a",
          "name": "did:invalid"
        },
        "response": {
          "id": "144c66df-7d2f-4367-ab1c-26c27212e02e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "166928f8-f129-4ebd-95c1-40c171603e4a",
        "cursor": {
          "ref": "e4fd4512-d361-4040-b6c5-00cb2bf13733",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "880127a5-2721-46da-ae10-5581690ace2c"
        },
        "item": {
          "id": "166928f8-f129-4ebd-95c1-40c171603e4a",
          "name": "did:invalid"
        },
        "response": {
          "id": "144c66df-7d2f-4367-ab1c-26c27212e02e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8458de15-d848-4910-9602-8e0a73f483dd",
        "cursor": {
          "ref": "7931f1c8-b6b4-4d9a-80d8-341a7a13798d",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "342d44dc-b2a0-46be-b356-2219a0ca9d41"
        },
        "item": {
          "id": "8458de15-d848-4910-9602-8e0a73f483dd",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "068b1844-4d22-48f7-9423-f558371738c1",
          "status": "Not Found",
          "code": 404,
          "responseTime": 96,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7da183b-d05e-4faa-8dba-96e8ec027ece",
        "cursor": {
          "ref": "4d4f5fe4-235e-41be-8fd2-1d2b1d80db79",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "39e3c11a-c6e2-4ed6-8c37-3adf568987f4"
        },
        "item": {
          "id": "d7da183b-d05e-4faa-8dba-96e8ec027ece",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "89810d85-9b77-4052-9446-ff8239115216",
          "status": "Not Found",
          "code": 404,
          "responseTime": 43,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a04af37c-e0fd-4b8f-9515-f6f6ba5be019",
        "cursor": {
          "ref": "52923955-0594-42fa-8b28-4e6898cba81a",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "17eda1d2-90b8-4f1c-be00-6070ad8d685c"
        },
        "item": {
          "id": "a04af37c-e0fd-4b8f-9515-f6f6ba5be019",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "99724fa8-4184-4379-a7ae-bb9d689e431f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4674e569-af0a-458c-8966-750d8bbcb3d5",
        "cursor": {
          "ref": "bb93157c-a212-4001-be56-477afbe58952",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "11e251fc-5904-4644-b15b-f196790c9731"
        },
        "item": {
          "id": "4674e569-af0a-458c-8966-750d8bbcb3d5",
          "name": "identifiers"
        },
        "response": {
          "id": "12d6b6a1-4748-4c39-a9b5-bbd350888dda",
          "status": "OK",
          "code": 200,
          "responseTime": 76,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7201a61-89ea-4fa4-a336-8fe48f1c5d57",
        "cursor": {
          "ref": "e16bcbef-d9ee-422e-8c87-13b438467e65",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "5ba16bde-7713-4c29-9f4a-09dcd85b78e3"
        },
        "item": {
          "id": "c7201a61-89ea-4fa4-a336-8fe48f1c5d57",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "22ea9b9f-d57a-4439-9a00-ef736a7aa830",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5dc9c287-9915-4089-a705-79f7f984c1eb",
        "cursor": {
          "ref": "a84ec1ad-5724-4485-aae3-9e0783f2ff3c",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "4285c0c5-ff1f-4074-ace9-ae14d7e06878"
        },
        "item": {
          "id": "5dc9c287-9915-4089-a705-79f7f984c1eb",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "1862f24d-1e00-49d3-ab6f-d5d415a452ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a651496-38ff-4528-99b6-d016ace33178",
        "cursor": {
          "ref": "94e5317e-2328-4343-b834-2e955a375688",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "5d8ba3b6-b41a-439b-b067-7ae3e3ad8574"
        },
        "item": {
          "id": "1a651496-38ff-4528-99b6-d016ace33178",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "47bca225-e2b1-4e9d-9c7b-6240eb51adc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9194b135-ba16-48f6-9c05-91fb66af6e86",
        "cursor": {
          "ref": "5617e2b3-20aa-448a-976a-fd2a90717be0",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "8d15c7c5-b5e3-47c3-b68a-0f413c8ac983"
        },
        "item": {
          "id": "9194b135-ba16-48f6-9c05-91fb66af6e86",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "118e670f-7bab-4b2a-a284-f749025b1a50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bea683c3-38b3-4c90-a56f-acd691f04f08",
        "cursor": {
          "ref": "a3678041-f1e0-488c-b6c5-638635a06957",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "4e493128-a5fe-4e4b-89f5-78cbfb066855"
        },
        "item": {
          "id": "bea683c3-38b3-4c90-a56f-acd691f04f08",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "89ee5f43-1209-440e-a125-f658ea69f533",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c16c5979-26ed-49ef-8e6b-f4a8f09c9e76",
        "cursor": {
          "ref": "0b54906c-b27b-496d-a3b5-10eed8c6f884",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "ffd52936-58c3-4606-8bcf-9c6cf1a3eed4"
        },
        "item": {
          "id": "c16c5979-26ed-49ef-8e6b-f4a8f09c9e76",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "79ed1086-3b98-40a1-9b30-21bcbfe1c716",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0da34a2a-a2ef-42ac-819e-c145f935c094",
        "cursor": {
          "ref": "925e3bcc-641a-4641-b224-a94b236b76dc",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "b333dc60-75d8-4a3b-a495-5386da904902"
        },
        "item": {
          "id": "0da34a2a-a2ef-42ac-819e-c145f935c094",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "252aee2e-4ce7-4e85-92d6-b91dcc027b3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bc19880-8e01-454a-9472-fcbbcc2498f3",
        "cursor": {
          "ref": "1c35d3f9-5685-4247-b2e8-f9e2a22b831e",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "33286ca5-2e92-48a5-9713-f7fd8b8fb1b5"
        },
        "item": {
          "id": "4bc19880-8e01-454a-9472-fcbbcc2498f3",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "fac20be2-02c1-4dec-98ce-aa990efac2d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cae81ccc-6d15-4c61-87e3-2ac3bcd9c445",
        "cursor": {
          "ref": "9ccf200b-3e68-4c44-8e2e-89c802f6d03f",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "85b32a79-bea1-4b7a-85ab-bf3af30638d1"
        },
        "item": {
          "id": "cae81ccc-6d15-4c61-87e3-2ac3bcd9c445",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "157a0b96-3f06-4e4a-b3c0-5c8f91b5005b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9d34ffd-18c1-4be4-bc1d-d4d33c27100d",
        "cursor": {
          "ref": "ece42ee9-ca7e-459c-b552-3009b6eac848",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "823598db-eae2-4ead-bd7e-5de36abf2d3b"
        },
        "item": {
          "id": "f9d34ffd-18c1-4be4-bc1d-d4d33c27100d",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "04c2ad42-da11-4311-aeac-edaa67942e65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "683365b8-7247-4412-a20a-351ce5ad6ebc",
        "cursor": {
          "ref": "5cbe67ce-466e-443d-961f-3bda42cb76cc",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "65cda7a7-a47d-4b3e-a395-3f5968ba87d9"
        },
        "item": {
          "id": "683365b8-7247-4412-a20a-351ce5ad6ebc",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "91d9461c-d49c-4947-b993-dc9c7bbc2d5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce9e5634-c7df-4c9f-a60f-8a468220aef9",
        "cursor": {
          "ref": "3d8a2599-bf30-45e3-8e25-2df523b11e00",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "379e5c83-8c6c-4b76-a1f6-cb378cc4e6df"
        },
        "item": {
          "id": "ce9e5634-c7df-4c9f-a60f-8a468220aef9",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "cb6e017c-029f-48d3-bd5f-8383c7ab5622",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34718d26-a360-468d-a034-9220d52bd026",
        "cursor": {
          "ref": "fbe3784c-f545-4f29-a0ff-ea1fe5478a1f",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "ddd8151a-2eac-4625-b85c-1fd99efff0ad"
        },
        "item": {
          "id": "34718d26-a360-468d-a034-9220d52bd026",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "5fb1c15a-6f2a-4e9a-85c0-32baa3434fa5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f720cf06-e8f9-4f52-b202-68984c942d81",
        "cursor": {
          "ref": "72f7ae16-da2c-4587-9651-acb23be247be",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "f86f1033-c4c9-458d-acc9-f1b470aaf307"
        },
        "item": {
          "id": "f720cf06-e8f9-4f52-b202-68984c942d81",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "c0625212-4c84-4109-a390-1425f981b3c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6af6c26d-66fa-4cc0-8635-451a2e8d9fe5",
        "cursor": {
          "ref": "940827d9-714a-4387-9cd0-d0c9e81be036",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "cad6c5fa-10bf-4ebe-8d20-2a13f6285566"
        },
        "item": {
          "id": "6af6c26d-66fa-4cc0-8635-451a2e8d9fe5",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "debd76e4-ea32-4cd5-9a19-2dfffd885cc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d1f2567-2d60-4a29-a034-29a6a260710e",
        "cursor": {
          "ref": "4d02469a-e2a3-4412-8361-80e88f7f66bd",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "f9427dd7-8d8f-4060-bddc-e40c532769cb"
        },
        "item": {
          "id": "8d1f2567-2d60-4a29-a034-29a6a260710e",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "2f19911c-33ec-46ce-8126-be373dd25e3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2a1ffcb-077d-485a-90f2-8fcc2dbd5916",
        "cursor": {
          "ref": "4fcff987-1f60-4112-969b-132850d7bfc3",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "3858f69a-1f6d-4ce5-b21d-fdac7196fd2e"
        },
        "item": {
          "id": "e2a1ffcb-077d-485a-90f2-8fcc2dbd5916",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "ffa85635-1696-42be-95ec-443c3ba885a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "832aa889-7f3f-428e-998c-8e175ac8288a",
        "cursor": {
          "ref": "e1493c47-bf3b-4102-954c-6e4f2701b484",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "e6a8b02f-6a47-4488-86f3-42c05831cddd"
        },
        "item": {
          "id": "832aa889-7f3f-428e-998c-8e175ac8288a",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "cd1fd48a-d596-44b7-ac87-821056631c37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9de01783-2732-4311-abca-f2a07f98261e",
        "cursor": {
          "ref": "8e901901-3ef3-4284-8fc8-37fac154e59c",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "98a53ab9-b2d0-40ce-b7d3-ef9c02bf5dce"
        },
        "item": {
          "id": "9de01783-2732-4311-abca-f2a07f98261e",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "a5e81d7b-8a48-4d64-90e9-37b525c9b0dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0abb9b1f-20ec-4f68-8fe6-8305529ce848",
        "cursor": {
          "ref": "5267d6d7-c1ca-4260-a3ca-d5d79fae1fc6",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "65b56d99-d364-4839-861d-7ac8c077b27a"
        },
        "item": {
          "id": "0abb9b1f-20ec-4f68-8fe6-8305529ce848",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "8b09726d-fce6-4cac-9b9d-dc072dd5a419",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "486e5e60-ed0a-4a88-89c9-8065842ca7b1",
        "cursor": {
          "ref": "135d8c16-c066-4ced-9cab-afbbc9b2a04b",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "e5a03037-acfd-4d14-bd0d-7f6dd0920589"
        },
        "item": {
          "id": "486e5e60-ed0a-4a88-89c9-8065842ca7b1",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "afe6dcb4-26d2-4a49-8900-e2dd39f4bed1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ddd7740-e6d9-43c9-a50e-0890ab34a343",
        "cursor": {
          "ref": "2c3d97b0-5ab4-4447-abad-d51be316840b",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "e1afeacf-d14e-4e35-b191-edeaef37056e"
        },
        "item": {
          "id": "8ddd7740-e6d9-43c9-a50e-0890ab34a343",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "27c83594-5234-4482-8093-9d2f4a405249",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8da2d115-9c46-4be9-a9fc-96a6a99e1ae9",
        "cursor": {
          "ref": "9b60ca55-e06b-4f57-806c-57ef86c68a9f",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "2643291e-5a5a-46f6-9ada-6295ddc1be02"
        },
        "item": {
          "id": "8da2d115-9c46-4be9-a9fc-96a6a99e1ae9",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "f53036d1-614a-4f26-be64-a55c5464c53c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cc9af6e-96b8-412d-92fe-4b5a5fc5a52a",
        "cursor": {
          "ref": "55cdccee-4e26-4e93-a20e-b9d1c44c7567",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "97408cef-3bef-4328-9da6-6c026943846a"
        },
        "item": {
          "id": "0cc9af6e-96b8-412d-92fe-4b5a5fc5a52a",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "ef42a9c4-3ae0-4fcc-b50a-67ecf551f8b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "638e5f03-9448-4bff-b5fb-d6577cceb13a",
        "cursor": {
          "ref": "a74958c4-85ee-4462-8462-56a8706e76c0",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "92cbc66a-8966-43bb-9e37-ad2d37e39fc7"
        },
        "item": {
          "id": "638e5f03-9448-4bff-b5fb-d6577cceb13a",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "2e9714a2-e50f-4083-89d6-bfb750011e6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a74360d-7aaa-4ea4-825a-01c46ec79fa4",
        "cursor": {
          "ref": "0c0285d6-8d1e-4b90-b7ca-87b58bd89de6",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "980a7342-b20b-4cad-9bf1-953fc9fd68b8"
        },
        "item": {
          "id": "7a74360d-7aaa-4ea4-825a-01c46ec79fa4",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "18f79104-7f80-409d-ad70-a574722942c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7b0e5fe-ee68-4aec-8525-e5f11ceb4cd5",
        "cursor": {
          "ref": "f8a4da19-a7be-4ea0-92f1-09ee0306fbb5",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "4b083c94-54be-4df8-b9a0-006e3732f4a4"
        },
        "item": {
          "id": "f7b0e5fe-ee68-4aec-8525-e5f11ceb4cd5",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "69cd504c-d09d-4d8b-a94e-2fe032cfc0b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f44a9e8d-7462-4b51-b156-16524f153a2c",
        "cursor": {
          "ref": "801b76df-ea55-4bbd-92a0-4a995d22f096",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "1d2ebf93-2672-4341-8013-3175861d6126"
        },
        "item": {
          "id": "f44a9e8d-7462-4b51-b156-16524f153a2c",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "fb6234cf-6e3b-4b6c-9829-47a11a1cc9c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19848b41-0e97-4dbd-96e8-c20e6f428be9",
        "cursor": {
          "ref": "e2bf3ba5-103d-433d-b72c-726cd7d8284a",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "a563903a-3d0e-4016-841b-2cdec8a7b91e"
        },
        "item": {
          "id": "19848b41-0e97-4dbd-96e8-c20e6f428be9",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "803d4939-d118-4624-9512-ce7d9f898d21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9adba37-0424-449f-92e4-2e9297078304",
        "cursor": {
          "ref": "69758c82-9593-450c-a448-792dd5922d67",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "27db359a-1c47-4a0a-a690-1f58e88157d1"
        },
        "item": {
          "id": "b9adba37-0424-449f-92e4-2e9297078304",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "8accc685-2bf6-4bbc-ab94-2532364644bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b181eaf-fc3c-4d87-a6b9-09f77e215225",
        "cursor": {
          "ref": "0e009495-0ac8-45e5-ac8a-9c3194df0aba",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "76843661-ec59-419d-a824-24366b571627"
        },
        "item": {
          "id": "5b181eaf-fc3c-4d87-a6b9-09f77e215225",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "7f25b5a3-eb09-4d35-b988-a587341e23db",
          "status": "Created",
          "code": 201,
          "responseTime": 554,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "895f9212-b85b-4ba6-b3da-b68726660419",
        "cursor": {
          "ref": "a7dfe577-dc9a-47a2-a975-747cdf87c228",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "0b161bca-8fd9-4b3a-af59-8fac2d1555f1"
        },
        "item": {
          "id": "895f9212-b85b-4ba6-b3da-b68726660419",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "ef21f53d-6378-4620-b83b-487ce8d0efd6",
          "status": "Created",
          "code": 201,
          "responseTime": 258,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "fe508527-f9ed-45fc-a1fd-608cf11bcd46",
        "cursor": {
          "ref": "f431fdc1-e962-4697-b407-e5e8ddf31ddf",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "c0133ab1-bede-4a91-87b0-9c3a8b9a3e38"
        },
        "item": {
          "id": "fe508527-f9ed-45fc-a1fd-608cf11bcd46",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "285e76fd-2e0d-453e-81ce-156dbee8951e",
          "status": "Created",
          "code": 201,
          "responseTime": 264,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "144326bc-f21e-4d55-9a11-acc3abce6dc6",
        "cursor": {
          "ref": "5eeeb2fc-8904-4563-aea4-e8ec32fe276e",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "56738793-0e6b-4d62-9fe7-a2e52d7eb85f"
        },
        "item": {
          "id": "144326bc-f21e-4d55-9a11-acc3abce6dc6",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "86645ba5-4705-408b-9453-ae0c7517d8f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e5e0c0a-0ceb-47f1-a27b-28f76e7a3e5e",
        "cursor": {
          "ref": "c13f26a7-a8c1-44a8-b992-9ffcca31391e",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "a4fff9a1-7f06-415a-81e8-b369f93a5e38"
        },
        "item": {
          "id": "9e5e0c0a-0ceb-47f1-a27b-28f76e7a3e5e",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "03c6e238-109c-489e-a3ae-7da30991ff11",
          "status": "Created",
          "code": 201,
          "responseTime": 261,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "27bf5d4d-8012-4a32-9287-9e27e478e7dc",
        "cursor": {
          "ref": "9bfd0ddd-d1d0-449f-bcbd-a860fa68a57b",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "0cbefb88-d1c8-4aad-b8e5-dba58875f6a5"
        },
        "item": {
          "id": "27bf5d4d-8012-4a32-9287-9e27e478e7dc",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "34158bd8-ea1c-49c4-9110-99d7ef63506d",
          "status": "Created",
          "code": 201,
          "responseTime": 257,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "31fc09a5-6458-4651-86e8-4ec146007b56",
        "cursor": {
          "ref": "594cfedd-cc1d-4be8-b64c-ebbe48aa23be",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "7b1c38dd-3c7d-491b-8c69-127d37c7b0a7"
        },
        "item": {
          "id": "31fc09a5-6458-4651-86e8-4ec146007b56",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "81fe9cb4-4d3b-4f44-9a14-529a4e69567e",
          "status": "Created",
          "code": 201,
          "responseTime": 242,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "1cfb2e44-30df-44c0-8f1c-4291344907df",
        "cursor": {
          "ref": "a9e7cefc-0f73-4f0d-9941-9777106cf4dd",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "2c7b507e-6ea9-4fc6-96bc-8909b0ea4d4c"
        },
        "item": {
          "id": "1cfb2e44-30df-44c0-8f1c-4291344907df",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "9ba26ad6-57d7-4246-81fa-90ce7e9ea3d1",
          "status": "Created",
          "code": 201,
          "responseTime": 282,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "011720fc-37d5-475f-86a2-48f75fea94c2",
        "cursor": {
          "ref": "11900ad7-71c8-4d67-bf4f-fc12462a4e70",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "f20d15d9-0578-4bd1-ba4a-fcaf1c69e1cd"
        },
        "item": {
          "id": "011720fc-37d5-475f-86a2-48f75fea94c2",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "3561c740-0e27-4976-81d0-49ddd6758b54",
          "status": "Created",
          "code": 201,
          "responseTime": 244,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "3fb52663-b544-4d29-b496-0798a2f33ba2",
        "cursor": {
          "ref": "b1e10099-749f-4e2e-811a-a03abe788209",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "1de9bfc1-a07d-43e3-bdff-6b4b46219120"
        },
        "item": {
          "id": "3fb52663-b544-4d29-b496-0798a2f33ba2",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "ce12ae68-57e2-4493-94bc-7ea3d4beb2bf",
          "status": "Created",
          "code": 201,
          "responseTime": 257,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "f5618b21-1e19-4d25-b782-cf8e44d58ca0",
        "cursor": {
          "ref": "0ba5e9ab-dccc-4494-8247-4a395c31444e",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "708bc60e-9009-4b4b-a773-1849c928a5ee"
        },
        "item": {
          "id": "f5618b21-1e19-4d25-b782-cf8e44d58ca0",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "415a2716-1c89-4da9-9e63-bba36c37d100",
          "status": "Created",
          "code": 201,
          "responseTime": 246,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "117002af-164a-44f3-9d9f-6239a1780641",
        "cursor": {
          "ref": "19a9c49c-ba6b-42a6-9114-bc3fcdf08e49",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "019522ff-0afd-4a68-aace-0e942e87e70f"
        },
        "item": {
          "id": "117002af-164a-44f3-9d9f-6239a1780641",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "55566f9c-c98c-463b-94e7-4469e07390e9",
          "status": "Created",
          "code": 201,
          "responseTime": 253,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "4027fe64-5bac-4c20-ace9-95d881de4ee6",
        "cursor": {
          "ref": "859551b5-e774-43de-ac8e-37e7a714ea80",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "c030d123-e77a-4fe7-8315-30e6eb302b39"
        },
        "item": {
          "id": "4027fe64-5bac-4c20-ace9-95d881de4ee6",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "4940f76a-967d-45dc-b799-c70b7e038df2",
          "status": "Created",
          "code": 201,
          "responseTime": 276,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "6f55fca9-4f0a-407e-8029-a1fae6a7b5bc",
        "cursor": {
          "ref": "a0dbccf6-1912-4c0f-adc2-cab8c6002a96",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "d0efa056-8276-4182-8a97-0d6a65dad244"
        },
        "item": {
          "id": "6f55fca9-4f0a-407e-8029-a1fae6a7b5bc",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "5e2d56e7-bbbd-4551-9047-c87e27fc3b1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed542a84-9159-42d3-a02b-2cb0139a5a67",
        "cursor": {
          "ref": "7aea9ec6-3c36-4cd9-95b6-162b5de71f9f",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "4799d6ff-a16d-4567-a646-c38982d7da1e"
        },
        "item": {
          "id": "ed542a84-9159-42d3-a02b-2cb0139a5a67",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "0df15aa1-aee7-4c0a-a772-38c2c04290ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c297f663-8e6a-4f8a-9d14-966c10e597a8",
        "cursor": {
          "ref": "1cd6c01a-a69c-42db-8a51-bdd4c0a2e452",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "a2986e36-6916-4c4f-b899-cf4932133972"
        },
        "item": {
          "id": "c297f663-8e6a-4f8a-9d14-966c10e597a8",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "3ee64b3d-b6d8-4a11-b907-8393cdf5f63b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71030164-34eb-4777-aca4-b62248ab5960",
        "cursor": {
          "ref": "d417da3d-c0ee-40e2-b1a4-6d81e7cc7c4e",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "6a368129-ee17-43de-85e3-11ee9f33ad39"
        },
        "item": {
          "id": "71030164-34eb-4777-aca4-b62248ab5960",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "ead80436-260e-4d6f-a869-2234e3a24f99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7bfb359-8f57-4094-b015-b9c65335e265",
        "cursor": {
          "ref": "66874a77-0f2b-45ad-aff5-73102b2bd53a",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "536786bb-aa29-4bcf-83f6-8cb946558740"
        },
        "item": {
          "id": "a7bfb359-8f57-4094-b015-b9c65335e265",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "b6b41b6a-3375-42ec-8a97-32a6cd5df818",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b6d6ae7-6df6-4a58-bff6-99083a3324a8",
        "cursor": {
          "ref": "2f9c2265-f78a-46ac-b1f6-548777aff626",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "ff03fd70-209a-44ec-b8b7-31fc19a916df"
        },
        "item": {
          "id": "9b6d6ae7-6df6-4a58-bff6-99083a3324a8",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "f4a5eef1-4e43-4297-9851-6cc4179eb00e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16a60264-32b0-4fa6-9d00-6eb4b4cd593e",
        "cursor": {
          "ref": "d48a2626-f4b6-4cba-9e5e-80338ede7e03",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "7a68bc89-4cfe-4852-a4af-ec87aef39fba"
        },
        "item": {
          "id": "16a60264-32b0-4fa6-9d00-6eb4b4cd593e",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "9b152dfc-c596-4838-bd6b-179c6e0a8b83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "287d239c-dcab-4adb-8aea-692be4a43c39",
        "cursor": {
          "ref": "3a1e1c9a-b6fc-41b2-97ba-b9af23ac9505",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "9cafb779-6ddd-45e3-aa74-d62642120b21"
        },
        "item": {
          "id": "287d239c-dcab-4adb-8aea-692be4a43c39",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "7b5fd573-858b-4b68-a756-5cd1d8b436b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 116,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08d9d5c5-29fc-408a-a8cf-49110dd21767",
        "cursor": {
          "ref": "1bb504a2-448c-419a-ac6b-e561a8b1cbfe",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "4c69d26b-14ab-45df-891e-15838869dd6e"
        },
        "item": {
          "id": "08d9d5c5-29fc-408a-a8cf-49110dd21767",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "bace5c0a-e482-4a9f-b986-7fc61df04cc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f40b8e1-d480-424f-94bb-0e757375952e",
        "cursor": {
          "ref": "b7524902-c537-4bf2-adc3-4297f37026c7",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "93402ec1-7a8c-46d2-a4a0-aaa2b7731954"
        },
        "item": {
          "id": "5f40b8e1-d480-424f-94bb-0e757375952e",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "4548fa48-0216-408c-bbc0-49043da4322f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d60d481-6f51-44eb-84fd-1799e81e72f8",
        "cursor": {
          "ref": "6d3bf6a1-a871-4301-91d2-3f98983b75d9",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "06daa7e5-4d9a-46db-a4b3-5bd289816c15"
        },
        "item": {
          "id": "4d60d481-6f51-44eb-84fd-1799e81e72f8",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "bc414c03-72c1-4721-a513-e8a1f7ace03f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b58f653-1c74-4ffb-a798-648c42d7de58",
        "cursor": {
          "ref": "99188fe8-8e31-4308-a081-3431b5d6b092",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "e2de3b09-d3d8-4421-ae9a-3424c3ced233"
        },
        "item": {
          "id": "9b58f653-1c74-4ffb-a798-648c42d7de58",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "55548ca0-9c8d-4025-8a46-37f4e803390b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5382caba-0a58-4469-a08d-c11c7a85048c",
        "cursor": {
          "ref": "9d029dcb-9590-48dd-ab38-72997fbf1c58",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "78028a60-d9a2-43b2-8645-793878d6b114"
        },
        "item": {
          "id": "5382caba-0a58-4469-a08d-c11c7a85048c",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "6bd7a5ac-70e4-454d-86a9-41ca77d13d02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32e98551-08d5-4cbd-bcd9-adf5b007c951",
        "cursor": {
          "ref": "8bf2a8fd-7da5-4a1a-b127-5d94d1abc9ab",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "7e586f1d-2f75-4fb1-b9e8-35e8086e6470"
        },
        "item": {
          "id": "32e98551-08d5-4cbd-bcd9-adf5b007c951",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "53e9a484-ecc0-47d4-ac80-d61484830c15",
          "status": "Created",
          "code": 201,
          "responseTime": 256,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "9398641f-6bac-49f6-84e9-6a94e6ac94fd",
        "cursor": {
          "ref": "7c608d6c-2eff-45f6-9f71-2f68d2b218cc",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "3129c4e2-f497-425b-bea2-e0c8c3592d95"
        },
        "item": {
          "id": "9398641f-6bac-49f6-84e9-6a94e6ac94fd",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "3da1d13a-4222-4b81-b05d-6d59dbe8ae3f",
          "status": "Created",
          "code": 201,
          "responseTime": 283,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "5b98fc0e-dfed-49b9-a1f9-e370881bc2a8",
        "cursor": {
          "ref": "0df060e2-5192-4d61-86a6-edd5fa8f211d",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "63705802-8ec4-4068-951b-2f81f056f008"
        },
        "item": {
          "id": "5b98fc0e-dfed-49b9-a1f9-e370881bc2a8",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "c79ed77b-f76a-43ac-bcf8-b382e98d7f1d",
          "status": "Created",
          "code": 201,
          "responseTime": 261,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "ce37a822-38c4-4cc2-96d6-8c4949e23a56",
        "cursor": {
          "ref": "676035e3-8cea-4bc9-b27d-b2d218721147",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "98e70eef-2caf-425a-ac4a-13f849a87675"
        },
        "item": {
          "id": "ce37a822-38c4-4cc2-96d6-8c4949e23a56",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "762efdf5-73db-4b83-a053-24e9a7f76b5b",
          "status": "Created",
          "code": 201,
          "responseTime": 264,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "92796734-86bf-4038-a9fa-a6811a271fed",
        "cursor": {
          "ref": "34430fb6-b865-4c20-a3fa-da3f6079d4e2",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "001d1870-cbf9-40fa-a76a-a83f2a8661e4"
        },
        "item": {
          "id": "92796734-86bf-4038-a9fa-a6811a271fed",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "c968add9-997f-4e3e-8104-ecde08c8e331",
          "status": "Created",
          "code": 201,
          "responseTime": 264,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "0df1c8b1-1439-4ff2-83d7-d53698574bfe",
        "cursor": {
          "ref": "0db8a0ba-3580-48c6-b17f-c5a1dd625393",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "a987d4f8-ab8b-4dd0-a1fe-d31f0cf1b1d1"
        },
        "item": {
          "id": "0df1c8b1-1439-4ff2-83d7-d53698574bfe",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "83add78c-feba-439f-98e3-6e8f8ef71ebe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "425b0ead-e586-4115-a50d-fc91f32ad35a",
        "cursor": {
          "ref": "557429e0-b76a-4bfa-ab71-f88c34edfd27",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "e3f0aa07-24c4-479d-b2df-c6827e3cd465"
        },
        "item": {
          "id": "425b0ead-e586-4115-a50d-fc91f32ad35a",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "2774a13d-34d4-4d3f-a8d5-b6914d3a8d98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f919897-fe94-4335-9798-69b13ae5d9ea",
        "cursor": {
          "ref": "b230610a-85cd-4fd1-896a-f0af3cbb205d",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "723d9508-e3af-45a8-aed6-dff3adfd8cee"
        },
        "item": {
          "id": "0f919897-fe94-4335-9798-69b13ae5d9ea",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "12e133fb-b5af-4cce-9ac9-0b346cf531b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48eae2fe-60dd-4ebd-b8cf-e8a80155273c",
        "cursor": {
          "ref": "d406d419-6566-44ef-8238-f8e98c9e457a",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "0b8610b5-65ab-47de-824e-fab7bb125bcf"
        },
        "item": {
          "id": "48eae2fe-60dd-4ebd-b8cf-e8a80155273c",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "8f470e46-0e13-4a2a-9496-03de2c8c774a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12098291-83f3-453a-a714-976969686054",
        "cursor": {
          "ref": "fed0e8cf-a427-44a4-a697-ffd69fd59b1d",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "572fe11f-041c-4079-b9ef-19944161250e"
        },
        "item": {
          "id": "12098291-83f3-453a-a714-976969686054",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "7b9c968a-9f32-46fe-84db-8a68b9b1d51c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2caea496-cf5a-4b2a-ac19-b8d09f9725e1",
        "cursor": {
          "ref": "7337bbda-036c-4835-b31e-89b808318e17",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "ee8d011d-0dde-4c36-8b0a-e7891b0e7b19"
        },
        "item": {
          "id": "2caea496-cf5a-4b2a-ac19-b8d09f9725e1",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "6ab70a32-b3e1-4aa6-bc33-3cfc6864ee2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6485add-04a1-426f-b02d-b09e7176e619",
        "cursor": {
          "ref": "fc0ef9fe-7c92-4bae-b2f2-35d60ee80375",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "b19c557e-be4d-4d9c-8e01-836b19316f87"
        },
        "item": {
          "id": "a6485add-04a1-426f-b02d-b09e7176e619",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "d8e8cad2-bba0-4b84-84fa-6b08922e3d3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f25205d3-d5ba-4f61-95f9-17d26cc6e9f2",
        "cursor": {
          "ref": "6e6079aa-4de2-46dc-8295-1b809ecbc295",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "b494c49d-17d7-4c3f-9563-663d5d59149d"
        },
        "item": {
          "id": "f25205d3-d5ba-4f61-95f9-17d26cc6e9f2",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "957d7dc1-fdcf-4794-bc44-4f5d93f29077",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14dd4039-7f18-41c8-a3cc-2fb00fe408e2",
        "cursor": {
          "ref": "50a32d51-c0d1-4fc8-ad9f-b7b19de27990",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "4dd8b51c-3781-4a9c-9495-640332a4e602"
        },
        "item": {
          "id": "14dd4039-7f18-41c8-a3cc-2fb00fe408e2",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "4a4729fe-358a-4561-8612-219730def595",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e80c8d4-0e59-458f-827d-ec3a9f216521",
        "cursor": {
          "ref": "df7ba7c0-d1cb-49a1-9cc4-0fb979eb3595",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "151f47d8-9a8c-4e23-b796-805ab22bc513"
        },
        "item": {
          "id": "3e80c8d4-0e59-458f-827d-ec3a9f216521",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "e153cbae-26db-41e1-bcef-58eb211d6f7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d8da623-d5a4-4a09-82c9-d82bd5a11aee",
        "cursor": {
          "ref": "0d074888-42b7-408f-b98d-3546a9f45583",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "20ea4ba9-9d62-4474-9800-33aa14d4aa36"
        },
        "item": {
          "id": "6d8da623-d5a4-4a09-82c9-d82bd5a11aee",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "580f96cc-e78d-4d8f-80f8-c97a608b988f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "becc1788-f1ac-48e0-9665-2896b5b9925f",
        "cursor": {
          "ref": "b4b056b3-0163-4108-af09-c404f86a600d",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "a4c927ee-bcd0-443d-b5ec-fc9a6b44d6bd"
        },
        "item": {
          "id": "becc1788-f1ac-48e0-9665-2896b5b9925f",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "8e9fd7f2-b879-43e6-b51c-3c82d6dc3b0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ced0a05-faf7-4300-99e3-1a0870344209",
        "cursor": {
          "ref": "d0195bd3-325d-485c-bce8-a288f9d39ffb",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "7f6a5310-23ec-4bad-89c8-545c3713a6a3"
        },
        "item": {
          "id": "4ced0a05-faf7-4300-99e3-1a0870344209",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "4faa2a20-9f94-4926-bc51-1dc35e8abfac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "315a903f-3595-479c-94b2-e5769a8cd578",
        "cursor": {
          "ref": "091ff463-41d5-4568-b8d0-88a608ea8fb9",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "d7aa7651-c22e-43ec-909b-eb7a2829a3d3"
        },
        "item": {
          "id": "315a903f-3595-479c-94b2-e5769a8cd578",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "425ac56e-a567-4e1c-a351-4976b7763693",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63dd00aa-de8f-4135-846c-09dd2685c9b3",
        "cursor": {
          "ref": "6f0154f3-9d1c-4493-aa72-a049da1c01bb",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "4cd47bf1-7a11-4965-94de-ff6e279aa536"
        },
        "item": {
          "id": "63dd00aa-de8f-4135-846c-09dd2685c9b3",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "6afa03da-e643-4f79-9cf5-2125b4874fac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "936d230c-3370-4da5-82aa-fa314a05a4eb",
        "cursor": {
          "ref": "9c40a885-1f5d-4b96-9bcd-d2d4db592ce1",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "2d5f11c1-a509-4689-9869-0a7b2e1ae9cf"
        },
        "item": {
          "id": "936d230c-3370-4da5-82aa-fa314a05a4eb",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "b1ec01d6-9b27-4e91-a4f1-b5229d8738da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dc04b8d-e140-461c-9672-44dcdaf355be",
        "cursor": {
          "ref": "586288b6-e894-476f-b76d-2e03542abfca",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "a46183d0-8cd4-4e04-b16d-3d284b12bcdb"
        },
        "item": {
          "id": "6dc04b8d-e140-461c-9672-44dcdaf355be",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "e66bf420-bf1d-4e3b-b1ab-d9f1a7b5bdd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9202f81e-8b74-40aa-998f-81eaaeb1be2b",
        "cursor": {
          "ref": "7ca7f0a8-9580-4ce4-89fb-1e9bf0e3c9eb",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "02d98043-c09d-4df4-b99a-b22b9d7aec27"
        },
        "item": {
          "id": "9202f81e-8b74-40aa-998f-81eaaeb1be2b",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "3162c11f-f391-4af4-9b60-d38aae37c0f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91934bd7-b3b1-475c-a658-e101e35eb826",
        "cursor": {
          "ref": "440990b6-20e4-4076-bd1a-6b7e31fc3658",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "722519c9-e5db-4fd7-b59d-c7f58ff7f8bf"
        },
        "item": {
          "id": "91934bd7-b3b1-475c-a658-e101e35eb826",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "db777b88-ef52-4cf8-adab-cdef939dbdbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9ddf05d-d367-4fdd-9bc2-4cd5585db3a5",
        "cursor": {
          "ref": "87898083-1434-4b87-b4c1-aa8c13e49d6d",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "80e79c0f-4610-4617-8645-68bc864f13ed"
        },
        "item": {
          "id": "f9ddf05d-d367-4fdd-9bc2-4cd5585db3a5",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "9ea43514-1d50-4522-9998-9b8fdb3a2af8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "592d471c-c5a2-4d58-9692-db75f41aee8a",
        "cursor": {
          "ref": "55f023fb-7e42-4023-860b-d8a7d1c61dfd",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "43b91ffe-3c11-464c-bf1a-00215354934e"
        },
        "item": {
          "id": "592d471c-c5a2-4d58-9692-db75f41aee8a",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "3ae16357-f320-4e55-8884-5105e4721809",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fae824f-b10b-4c76-8dd7-e2b15abce643",
        "cursor": {
          "ref": "aebfb5a5-f292-423c-adca-556e43a082a3",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "106acc35-3c3a-4b78-8d2d-b7606a82a8e6"
        },
        "item": {
          "id": "7fae824f-b10b-4c76-8dd7-e2b15abce643",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "5fa213b3-c889-40fd-b68f-f67d4eab052b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de7c2466-5ce7-4b63-8792-93dffa81e976",
        "cursor": {
          "ref": "b1fd5459-55c2-43e0-b2fd-1f6ac08c8b85",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "0e6fff17-f54f-4485-99c5-d74ad978b8d8"
        },
        "item": {
          "id": "de7c2466-5ce7-4b63-8792-93dffa81e976",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "4d82bcf6-9643-4ccf-a42a-a88dea623ed0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8178edb0-968e-4760-927b-4ae8c1597062",
        "cursor": {
          "ref": "278f363c-8be4-4619-9826-450b56ccbd06",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "c3abf015-7585-43ea-a7a2-4272883cc7de"
        },
        "item": {
          "id": "8178edb0-968e-4760-927b-4ae8c1597062",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "e406e4cb-eaa0-4f89-ac16-9f0b290d1388",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ca5238c-fd35-4b1c-b3ce-e5373ce1cfda",
        "cursor": {
          "ref": "a26e8d3f-c389-4131-9b8d-aa0fcbae2506",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "b5ad846e-452e-455c-b5f3-f1c799cce512"
        },
        "item": {
          "id": "2ca5238c-fd35-4b1c-b3ce-e5373ce1cfda",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "0855ebb1-44f7-4912-a73d-3747451939ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "650d2299-2957-4b5f-8398-bad6313f00d3",
        "cursor": {
          "ref": "da6bf527-d668-4362-a439-9ce29d1ea513",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "8a67e13f-3a9e-47f6-a4d5-e0b680d36cdf"
        },
        "item": {
          "id": "650d2299-2957-4b5f-8398-bad6313f00d3",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "9f3dcb6c-4424-46a3-84ca-6b1eb55153a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e86ec9de-10ea-4c1b-b378-853f22dd8297",
        "cursor": {
          "ref": "c35fcc20-4529-451d-9935-bbdc9d4772c8",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "75754631-d8fc-45c6-9256-c8d1e7d21f59"
        },
        "item": {
          "id": "e86ec9de-10ea-4c1b-b378-853f22dd8297",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "d9989882-457c-4e6c-b6e9-8ac1d3da92e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e70ae88-3473-4a16-bb84-b3c1cffa2f55",
        "cursor": {
          "ref": "6d36a58a-176f-4d58-b4d0-2e213a72095c",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "80319db7-4519-4390-b868-286c280dec94"
        },
        "item": {
          "id": "0e70ae88-3473-4a16-bb84-b3c1cffa2f55",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "b79dd57a-5671-44f6-bdc3-5d9ee5253983",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a096a24c-00ec-473a-bb1a-4e25c7546b71",
        "cursor": {
          "ref": "4877ee0f-fffd-42c0-a912-880e7a2c63f6",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "869c9039-7e88-4a13-b259-8d64c413e8ce"
        },
        "item": {
          "id": "a096a24c-00ec-473a-bb1a-4e25c7546b71",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "710007d0-2aca-41bb-9820-45b492dbeeee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "104faef9-343c-4870-b2fd-564e1b84200c",
        "cursor": {
          "ref": "0a4a4299-ade8-4bcd-9052-462a4ad7adda",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "e0011bb3-733d-4a20-9698-80131996403e"
        },
        "item": {
          "id": "104faef9-343c-4870-b2fd-564e1b84200c",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "04632841-0cb4-4421-a4a9-8a16a541e870",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "913017a9-59e5-4fdc-9e1f-a119e8aadd96",
        "cursor": {
          "ref": "c58b03ac-b6b5-4560-b718-b6f576bf054f",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "6b8450bb-4331-412d-9400-0d0325f87a35"
        },
        "item": {
          "id": "913017a9-59e5-4fdc-9e1f-a119e8aadd96",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "1152b49f-55d5-48e5-a62d-5d48d3f89d35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62396a76-e592-4ea8-bfe8-609dc009e446",
        "cursor": {
          "ref": "531f9773-edff-40f6-ac9a-ef661dd6731a",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "b8351e70-9b87-4d2b-9581-cb531e1e2c22"
        },
        "item": {
          "id": "62396a76-e592-4ea8-bfe8-609dc009e446",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "115e2102-16d0-4eba-be4d-5eb19e85e8e6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 27,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b092236d-562a-4593-a687-619e01d8b83a",
        "cursor": {
          "ref": "0d832c80-884e-40bc-8f5a-83323dcfeac9",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "db099c6b-6c9b-4390-96c0-1d2c1dccb12c"
        },
        "item": {
          "id": "b092236d-562a-4593-a687-619e01d8b83a",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "8bba2267-c3cb-431a-ab2b-7a98cf599816",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "a33a0eb0-64b8-4923-a4c0-7a9e534cd484",
        "cursor": {
          "ref": "01198abe-3a48-4d0a-8384-782203ae413d",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "4e537bd3-5f0b-4aff-be3c-2110568128fe"
        },
        "item": {
          "id": "a33a0eb0-64b8-4923-a4c0-7a9e534cd484",
          "name": "credentials_issue"
        },
        "response": {
          "id": "478edf55-b677-4c03-a288-9ae9a48a81e4",
          "status": "Created",
          "code": 201,
          "responseTime": 257,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f1a8fcd-2ee8-4276-bc3a-f7b5b8a6f5f2",
        "cursor": {
          "ref": "11ff400d-ff05-402f-8f20-366a48819363",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "177e7563-ee82-4091-80eb-dc111ea4c3e0"
        },
        "item": {
          "id": "9f1a8fcd-2ee8-4276-bc3a-f7b5b8a6f5f2",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "045fae7a-a98e-4000-b692-3ef3cf2b4797",
          "status": "Created",
          "code": 201,
          "responseTime": 265,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "a897eeba-3abf-490d-a152-2d7e9fcc4311",
        "cursor": {
          "ref": "ee8b29e4-4b1c-4d2a-baa6-ad000fe5f51d",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "04d524c4-aef6-45f6-bf4a-9639c6ab18d4"
        },
        "item": {
          "id": "a897eeba-3abf-490d-a152-2d7e9fcc4311",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "b763bd17-1675-404f-8e4b-f08825d5e588",
          "status": "Created",
          "code": 201,
          "responseTime": 262,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b0290e4-b312-43ec-92e4-ed4f8172bee2",
        "cursor": {
          "ref": "e815b9be-b9c8-4fd6-b810-98ccefd630f1",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "aa3a3b1c-184d-4e39-8853-02890fde281d"
        },
        "item": {
          "id": "9b0290e4-b312-43ec-92e4-ed4f8172bee2",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "344a042a-0644-40e6-89b9-96c8804fb6d1",
          "status": "Created",
          "code": 201,
          "responseTime": 271,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "eee53ac9-d84b-4dc7-820a-e0d973128011",
        "cursor": {
          "ref": "0f1968e7-7d9c-422a-aa5f-aedb24f558a8",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "54312f84-beb5-4aab-9c8b-7745af47b7a3"
        },
        "item": {
          "id": "eee53ac9-d84b-4dc7-820a-e0d973128011",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "09110a11-295a-4260-9b4f-ec62217c8f66",
          "status": "Created",
          "code": 201,
          "responseTime": 245,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-12-29T00:28:58.863Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-12-29T00:28:58.863Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "d9b46afb-96db-4146-b132-cf02033a3c02",
        "cursor": {
          "ref": "f5b98232-6006-4ee5-a69a-c2564276d90a",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "c268fdbe-161e-454a-b3e1-e2511360165b"
        },
        "item": {
          "id": "d9b46afb-96db-4146-b132-cf02033a3c02",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "896db301-1315-405e-a909-b91232d27c3f",
          "status": "Created",
          "code": 201,
          "responseTime": 390,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e2cac54-8e57-43d0-912f-a307594f4ee3",
        "cursor": {
          "ref": "04cb800e-49b9-427b-8c7b-2dd332c219a5",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "0bde9ad3-6402-4d6d-9df8-7e17299c2488"
        },
        "item": {
          "id": "6e2cac54-8e57-43d0-912f-a307594f4ee3",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "bd6897fa-5d20-45d0-8339-527786cd1b6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "308d3d66-b429-4b51-a685-261da011b258",
        "cursor": {
          "ref": "9606c2ce-21a0-42e4-b65a-b0037c09405c",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "92c008e7-65eb-46ca-8685-dc0b829674a1"
        },
        "item": {
          "id": "308d3d66-b429-4b51-a685-261da011b258",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "7d3b6ef8-536c-4c4e-aa07-930b5d517a07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3be1fa14-97af-4a10-af02-614b22c836fd",
        "cursor": {
          "ref": "e6058d63-836e-49de-bf00-88125992443f",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "1cbdb48f-aa0d-4d99-bd71-6abe1a25600d"
        },
        "item": {
          "id": "3be1fa14-97af-4a10-af02-614b22c836fd",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "5aa724ad-6d7d-4911-9538-38c0a46ec8d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10a7b72d-6b55-4577-88cd-c3ed426a0a57",
        "cursor": {
          "ref": "befe6196-a0f6-48b5-9f43-16a3baf1fc98",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "8aa0b123-67c1-4c89-9bb7-7884442700ee"
        },
        "item": {
          "id": "10a7b72d-6b55-4577-88cd-c3ed426a0a57",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "86a0b359-8a05-46a2-a10c-b3ffe9ebc7e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2db2dcb8-9989-4a9f-a0fa-ba0c125db7d4",
        "cursor": {
          "ref": "f474a47d-22c0-49ed-9ac9-050b61075979",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "fd3a8596-26f4-4311-86ab-9de9ba2cc62d"
        },
        "item": {
          "id": "2db2dcb8-9989-4a9f-a0fa-ba0c125db7d4",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "8a05bdf2-9e39-4cb0-bba5-49fb53638e47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f299e95-f756-4d2f-ad32-2571eb8ae084",
        "cursor": {
          "ref": "cd766153-b9d4-4a33-86cf-710e3097effa",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "4b7ecf6d-e205-4949-a73e-4d03b0f46622"
        },
        "item": {
          "id": "4f299e95-f756-4d2f-ad32-2571eb8ae084",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "ee0fb2a9-5fc6-46a2-8066-3a02c97b7bc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bab18708-6d2e-480c-b5e0-63829f4646d5",
        "cursor": {
          "ref": "cdca030e-7cf1-4aec-97fd-bf7268053a18",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "776f552d-9650-42b6-8cfc-0c31eeff0a3f"
        },
        "item": {
          "id": "bab18708-6d2e-480c-b5e0-63829f4646d5",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "81a2e360-05a9-4510-82a5-30239b0fef6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "653e5042-e0e2-4003-b6dd-070d6493db31",
        "cursor": {
          "ref": "4cdc316a-850b-4d32-8fff-a80a1bb720fd",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "6a3ff942-df7b-4beb-9278-7f0d3aa695f5"
        },
        "item": {
          "id": "653e5042-e0e2-4003-b6dd-070d6493db31",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "27c008c6-e9db-40e1-b25e-7646f3d23f0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcc972a1-f8d0-4d1f-bddc-d9b182f9a14b",
        "cursor": {
          "ref": "8defae5b-b3e1-42f0-98a5-8dd4adc39f4f",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "728d7ed2-ab9c-4dbb-a422-6580207a4b66"
        },
        "item": {
          "id": "bcc972a1-f8d0-4d1f-bddc-d9b182f9a14b",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "3632290f-50a5-4320-ac3c-6bf2fa5b6709",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be238e12-501d-4109-b01b-f5fd1d617978",
        "cursor": {
          "ref": "95766a68-2841-48b9-82ef-bce5d9977b3e",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "3bdd0f95-d4ef-45bd-bcb5-fd5fb6f3d308"
        },
        "item": {
          "id": "be238e12-501d-4109-b01b-f5fd1d617978",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "60b3ac11-8020-4e72-8f61-cb4cd7a26980",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9887d53-a72d-474a-9fcd-446cc3966929",
        "cursor": {
          "ref": "d7e780a8-1049-4111-bcca-9273c13ffc06",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "13bba3ad-b23a-4171-af42-7ba9ae261bfb"
        },
        "item": {
          "id": "d9887d53-a72d-474a-9fcd-446cc3966929",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "ff8458f4-18c4-4c45-b574-25470659a4aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a3cba2f-df61-46f6-955c-31560cc69942",
        "cursor": {
          "ref": "dd6135ec-6dd6-4cbd-b1ac-e69802ea80cb",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "ba7f7bb3-fb79-4a73-b16e-799d6668b973"
        },
        "item": {
          "id": "7a3cba2f-df61-46f6-955c-31560cc69942",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "360557bf-730e-44ab-803f-41285b3a673b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4996d759-b7f7-43e9-b751-a2763e045035",
        "cursor": {
          "ref": "6239ebf9-b209-4bb3-9414-c3bc1f15c3d1",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "9d6cdacc-9af8-40fb-996b-310da3e0d1ba"
        },
        "item": {
          "id": "4996d759-b7f7-43e9-b751-a2763e045035",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "a06f1257-b7ea-468d-8338-6d1dae282fef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8447b32-6104-49e1-8d92-45ab9325d706",
        "cursor": {
          "ref": "395247ea-67ee-4266-b01c-ed0c6ac5f18f",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "46f8f3fc-1374-405a-ba76-5e4bf61e8296"
        },
        "item": {
          "id": "b8447b32-6104-49e1-8d92-45ab9325d706",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "809d0180-a661-4392-9ac9-f483a9a76ce7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22b42b12-7268-4996-a77b-13795c0fc550",
        "cursor": {
          "ref": "f587f6db-8b8d-4233-9dfa-7747d185f560",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "43dd4a6b-00e9-427b-a1e0-f26a41643ee1"
        },
        "item": {
          "id": "22b42b12-7268-4996-a77b-13795c0fc550",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "730a63a0-288c-4cc0-8738-886ab9d868f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f0a7501-5dfc-4f0f-ae36-afb8eeb3d965",
        "cursor": {
          "ref": "564a4e6f-930b-496b-affe-3792aa69303c",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "2f87b903-aa24-43ba-9e9e-c5440aae8818"
        },
        "item": {
          "id": "3f0a7501-5dfc-4f0f-ae36-afb8eeb3d965",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "c876fc3a-0ebf-43dc-ae56-22d6c0a03142",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2df37ef-8c81-479f-94a9-bee15bfeb8ca",
        "cursor": {
          "ref": "f2d8441a-5f60-455a-82cc-1598d1e102e1",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "da7418d4-1ca8-470e-badb-1c809a55d9f4"
        },
        "item": {
          "id": "c2df37ef-8c81-479f-94a9-bee15bfeb8ca",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "89008e33-80ce-4817-a7a0-0ef55629e4dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dff29ca4-6f9c-463b-a779-191b3104ab69",
        "cursor": {
          "ref": "edb335ae-9748-4be7-b412-3787019c1f73",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "7e528511-0029-4894-bbe3-bc0d93084cbd"
        },
        "item": {
          "id": "dff29ca4-6f9c-463b-a779-191b3104ab69",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "4610755b-5abc-4556-971b-27d260179527",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed1f111c-9fe4-4e4f-ac92-058128a6b550",
        "cursor": {
          "ref": "f566009f-2aa4-40ce-9cc7-8a668d19e8b4",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "3eb7685c-1255-48d9-b0d4-d141f12c4e22"
        },
        "item": {
          "id": "ed1f111c-9fe4-4e4f-ac92-058128a6b550",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "fcdd0f16-f7b2-4398-b243-de09e0e666c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ece29a79-a7d8-4c40-b118-89fc7d9d1731",
        "cursor": {
          "ref": "ccdf8f3d-17e6-4f66-af6b-894fa5adc9f6",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "159daa2c-cfe6-4029-ae53-449805138004"
        },
        "item": {
          "id": "ece29a79-a7d8-4c40-b118-89fc7d9d1731",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "2fbef34f-04f3-426c-ba2a-884e84d9b3bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccee451f-b996-4418-9c17-81059f6a85f7",
        "cursor": {
          "ref": "1641cdce-b35d-4216-a5e9-e8c9a42b1366",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "89175a98-ffa8-4a68-8b67-fd056573fc6c"
        },
        "item": {
          "id": "ccee451f-b996-4418-9c17-81059f6a85f7",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "22c36b73-6399-4dc6-82b0-01dc0311e77c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92f086a7-a4fb-4cc1-a800-00ab44cfc7ee",
        "cursor": {
          "ref": "51924397-e1a2-4c81-9eda-d2d55b0dc948",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "68a5dee8-8dd0-4a8b-9ee4-469eeea3325d"
        },
        "item": {
          "id": "92f086a7-a4fb-4cc1-a800-00ab44cfc7ee",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "62c43392-63b4-45dd-bf9c-7a084edcf0bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bd49cbd-a449-4d03-80b4-41e297036b6f",
        "cursor": {
          "ref": "d7255f2a-4514-40eb-ae24-395541c76b3b",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "ae42849d-ec55-46a0-8a37-34b420a82e82"
        },
        "item": {
          "id": "1bd49cbd-a449-4d03-80b4-41e297036b6f",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "ff7a879b-0aab-47ea-88d2-e5993f6d2ead",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63c95187-51fc-47fd-aa8c-693b75a91d79",
        "cursor": {
          "ref": "3f6c0526-8d85-4da9-aad6-e5ed9dcd5ee1",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "93868c89-c36a-4f41-8116-f3be9995b219"
        },
        "item": {
          "id": "63c95187-51fc-47fd-aa8c-693b75a91d79",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "b936d74d-a0cf-4c2e-8545-983fe6f42e5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "273f2c9e-67e3-48db-99fa-b2025a4337ab",
        "cursor": {
          "ref": "49a01078-c575-48e9-b4e7-aaf93d3cf32f",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "bfbe321c-4301-4737-80a2-1da09d4d7408"
        },
        "item": {
          "id": "273f2c9e-67e3-48db-99fa-b2025a4337ab",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "3769fa84-48f6-4626-9e49-b87cddc33aa2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f74471e1-a13a-4a04-8e5f-febffefd57b3",
        "cursor": {
          "ref": "82f9a27c-5af7-4f52-8ca6-d057ce688e5e",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "81f273ba-103f-44ea-a342-1f76ae0b321b"
        },
        "item": {
          "id": "f74471e1-a13a-4a04-8e5f-febffefd57b3",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "8bc5eb57-434f-409d-93a9-3b3a1599bd56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cf4ce16-9cf1-4481-a347-2c4b32803853",
        "cursor": {
          "ref": "7ed0af11-6e7a-4379-a0ae-3b5b25a2379a",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "1381f446-7fd8-4e84-b70a-8efff70b73aa"
        },
        "item": {
          "id": "7cf4ce16-9cf1-4481-a347-2c4b32803853",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "f0bc505d-643e-4513-a6ca-9994a57ac375",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fe1c302-26fa-45c9-bb1d-49fc65da6f7c",
        "cursor": {
          "ref": "3b06607f-0c2d-4ab0-8918-755e4cd86a6c",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "404cf9c0-770d-4f55-84be-5243b9df9da5"
        },
        "item": {
          "id": "9fe1c302-26fa-45c9-bb1d-49fc65da6f7c",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "739db02e-9ccd-4712-817e-ae0b44713f09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0eda56d0-d706-4e69-aa3c-3b47e82114f5",
        "cursor": {
          "ref": "82df0204-fe30-46c0-8db4-c242d87253a5",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "2eef2ee4-0f9c-488a-ab69-3c278afa6f64"
        },
        "item": {
          "id": "0eda56d0-d706-4e69-aa3c-3b47e82114f5",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "6ea5eee6-fc30-4a5d-8548-1f331ac88647",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3854ae96-5c81-4a50-919d-9bf7e1c3ed05",
        "cursor": {
          "ref": "179cf10d-808e-440f-a245-41e7328866d4",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "37e47627-15c1-41d1-b24f-86495f5939e3"
        },
        "item": {
          "id": "3854ae96-5c81-4a50-919d-9bf7e1c3ed05",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "dfb1295d-b045-421b-a6b8-1d1e66f5b824",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0943249e-81b7-420d-82e3-617b03c5be60",
        "cursor": {
          "ref": "2960058a-2ef0-4a30-8965-618461d3101f",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "b136aa7f-a52f-4ff3-979b-c0a6b599f95a"
        },
        "item": {
          "id": "0943249e-81b7-420d-82e3-617b03c5be60",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "326d3d8d-5b5b-405f-8c90-2a14faea0b0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54271cbf-1f9f-4233-b58f-3b31b1349d0d",
        "cursor": {
          "ref": "a99c192e-6224-464e-9b7f-ea7e0528f4c1",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "33ea2a36-67c5-44fa-9f10-b51019ba2fc9"
        },
        "item": {
          "id": "54271cbf-1f9f-4233-b58f-3b31b1349d0d",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "bf4b89ff-2d86-48a4-8307-38c65acc5793",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "704ab838-cda9-4b02-9038-26a2f1b29446",
        "cursor": {
          "ref": "041519d8-118b-428e-8b9d-324c925fb0db",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "4df39ad0-4d88-4e42-a48a-1b027083b62c"
        },
        "item": {
          "id": "704ab838-cda9-4b02-9038-26a2f1b29446",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "5c13f023-2a41-4948-a87f-99682043a25d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 27,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "711cbac9-743c-4987-b8d2-234f88f0f292",
        "cursor": {
          "ref": "9cc59731-6297-4829-ac8f-63c2e3806ec8",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "ab536b72-4032-4eba-831e-7ba1af176edc"
        },
        "item": {
          "id": "711cbac9-743c-4987-b8d2-234f88f0f292",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "1273be5c-ce66-4e07-b631-ecc539d847c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "becf7621-69eb-45ac-afa7-a6d788971100",
        "cursor": {
          "ref": "a5b3f2d7-6a64-4459-9368-29bd2fdabcf7",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "3e2343a7-63c8-4786-bed2-766f155f2e5a"
        },
        "item": {
          "id": "becf7621-69eb-45ac-afa7-a6d788971100",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "5c5f845b-4569-458c-814c-9af25b6b0d9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a02a9caf-b06b-4535-aeaa-99428c08fc7d",
        "cursor": {
          "ref": "72058120-14cf-49ca-a7a8-077ddb153631",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "deb99fed-7960-4bf8-ab65-d00ea39243a9"
        },
        "item": {
          "id": "a02a9caf-b06b-4535-aeaa-99428c08fc7d",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "2eb64da0-df3c-43de-8e85-97adcc35040c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95c65c26-7b7e-441f-af70-be0a26540608",
        "cursor": {
          "ref": "aed5e7ae-ecaa-41a7-9255-2bb072f04fd3",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "887e03e2-3f68-44e6-a23c-2dc6c7a89fcb"
        },
        "item": {
          "id": "95c65c26-7b7e-441f-af70-be0a26540608",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "602fb20b-9d83-4e1c-a2d2-7bfe73f09681",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdbf2fd4-5456-45a7-93ef-907c986760fe",
        "cursor": {
          "ref": "1c4d8bfa-5f17-4012-81b0-03a2d6faa1d5",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "1b27f0dc-4170-487b-bf3d-2f3a64a3e321"
        },
        "item": {
          "id": "cdbf2fd4-5456-45a7-93ef-907c986760fe",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "edf52651-de2a-4b13-924e-7cc2e221ec87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "083ce523-3a84-458d-874b-4a5bdf4a2c8e",
        "cursor": {
          "ref": "cdac533e-2838-48b8-8529-c1be34e204fa",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "b44c6aeb-6d86-462c-99d7-e27c0c1b440a"
        },
        "item": {
          "id": "083ce523-3a84-458d-874b-4a5bdf4a2c8e",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "ee953bf4-8923-4aba-858e-36284331f0bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "401e43fc-a945-4c2e-add0-45a8984664b5",
        "cursor": {
          "ref": "1798b9cf-3c27-45c6-80f8-e2093d50c444",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "4aa4ff6f-6eba-49ba-9778-db56c744ce23"
        },
        "item": {
          "id": "401e43fc-a945-4c2e-add0-45a8984664b5",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "ea21c3d2-522c-48f2-a4ec-e6d2e9685beb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66da4c4a-cb6e-4627-b533-1723a2503e0a",
        "cursor": {
          "ref": "7459ce2c-6149-4b2c-b2ad-3f683e2b6f29",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "dd86e7e6-0482-4f38-a2f3-a1939ce82e32"
        },
        "item": {
          "id": "66da4c4a-cb6e-4627-b533-1723a2503e0a",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "9bc2edd2-8a9b-40e0-b24d-8e436b765ef9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f4f26eb-9f86-42a8-b333-df1abc3327d0",
        "cursor": {
          "ref": "afc8e25e-f783-4875-8ce6-c20ec8ec0346",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "ff033f99-a726-499c-b63c-b8a9b412ca8d"
        },
        "item": {
          "id": "9f4f26eb-9f86-42a8-b333-df1abc3327d0",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "e0aa9710-d26e-422b-9539-f008298d649e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bde374cc-9ca2-4009-bc67-65c632c8617d",
        "cursor": {
          "ref": "b8dc8247-5a1d-478e-8f5b-4c95ac4d67ce",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "d9ebb118-edeb-4368-bc4f-3e09f8144b64"
        },
        "item": {
          "id": "bde374cc-9ca2-4009-bc67-65c632c8617d",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "6e2f91af-0639-4c70-8447-b182c4f73760",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "758057da-933e-4009-8524-2c516bb9853f",
        "cursor": {
          "ref": "b9a53322-1cbc-4456-9201-55734ecf2df9",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "a071a95d-f5da-42aa-b9d3-30bdce491877"
        },
        "item": {
          "id": "758057da-933e-4009-8524-2c516bb9853f",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "da8f72c6-e422-4b1f-a467-f2b5e7f2f440",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cf8a777-1ba4-4260-9267-bb0b61992483",
        "cursor": {
          "ref": "6f33d81b-5a01-4c66-aa0a-8fbb4e86d7b6",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "0eecba8b-5635-4766-8067-825cbac6039b"
        },
        "item": {
          "id": "3cf8a777-1ba4-4260-9267-bb0b61992483",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "19d0a512-df59-4988-9fe4-b401586c64e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf9a95c5-fdd2-4616-85fb-e495c42a0439",
        "cursor": {
          "ref": "b79cd36d-ec89-4b19-b6fa-db45f3aa24a3",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "d3af5e78-2c91-4ce8-aca5-de38c079797d"
        },
        "item": {
          "id": "cf9a95c5-fdd2-4616-85fb-e495c42a0439",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "ef5b2ca1-6e7d-4045-b191-c4befe864dd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e496f1c6-bb3b-4485-804d-b4d7d85846ca",
        "cursor": {
          "ref": "dbfa57ec-c64d-4a78-9983-2186f4cf64ec",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "1f3b0b8b-0fa7-4edc-a0aa-eb852d0a8e03"
        },
        "item": {
          "id": "e496f1c6-bb3b-4485-804d-b4d7d85846ca",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "d16a70ae-94e0-4c75-a10e-0c08040f9724",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1716095e-0a0c-48fe-a49c-f2b917ed38be",
        "cursor": {
          "ref": "46524258-001d-40d4-8791-bcfba2d665c1",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "7978eaaa-85cf-4d33-8af9-7a792cb17fb2"
        },
        "item": {
          "id": "1716095e-0a0c-48fe-a49c-f2b917ed38be",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "80d99c20-941c-44fd-b654-99c8b96be9d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eed46d14-0dab-46d4-aa20-c5f42662fc37",
        "cursor": {
          "ref": "8bf5c8e2-97a7-4b2b-8b8e-a137dbb1d3ef",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "fb0c2ed7-279a-4ef6-a163-79cb21a9b1bd"
        },
        "item": {
          "id": "eed46d14-0dab-46d4-aa20-c5f42662fc37",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "b6ef5bc4-4e31-41e4-922b-8786ebaa8016",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9054804e-0fe9-478e-ab3d-154a3cd55c20",
        "cursor": {
          "ref": "052eb20b-3bb6-48ca-8d13-c60b8e2061fb",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "170f37c7-9e27-4ce5-9f9e-68d050a5c40d"
        },
        "item": {
          "id": "9054804e-0fe9-478e-ab3d-154a3cd55c20",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "ba4af432-203d-4137-b82d-3939abd61786",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60ac7af0-08ba-4ce9-a8d0-b24aa40d0d9e",
        "cursor": {
          "ref": "a24acb1b-14d9-4cd5-bfbb-52e8ecdf70f6",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "ae7ec98e-d461-43c4-97df-c57873c27394"
        },
        "item": {
          "id": "60ac7af0-08ba-4ce9-a8d0-b24aa40d0d9e",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "6978e01b-4ade-43e1-9793-815c8de8dbf6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24e7f455-b828-4435-97ba-6025b69feb31",
        "cursor": {
          "ref": "f6a7d722-e329-46d4-a1e6-13183e5f7d84",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "166a93ef-4734-4ff4-8e2d-4c09808c3477"
        },
        "item": {
          "id": "24e7f455-b828-4435-97ba-6025b69feb31",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "d880d166-86b4-414e-9e55-5dd46b08fe88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afb36487-8edc-48bc-b1aa-1ef73fa8651d",
        "cursor": {
          "ref": "37b39848-7dad-45a9-ad60-cfc368d00e40",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "fadd0c67-cfbb-4521-bae6-c91b6c3247fa"
        },
        "item": {
          "id": "afb36487-8edc-48bc-b1aa-1ef73fa8651d",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "9c4c4019-bbc0-4d33-b922-a8fd5053f5d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa67138c-fda7-42e0-b940-57c5874f6766",
        "cursor": {
          "ref": "3605590c-7188-460b-9fbb-9f62de8adbb2",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "7957d471-063d-44f1-82a9-659865aa6147"
        },
        "item": {
          "id": "fa67138c-fda7-42e0-b940-57c5874f6766",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "221b24f7-e8b0-4af0-b75a-3e90622c4d27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c35e1c7f-17e2-40e0-883c-b031e0f06281",
        "cursor": {
          "ref": "38ceb583-4416-4e9e-a6f2-fa14adb426b9",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "1e3be9a8-b009-4464-8926-e3f2e8c5243e"
        },
        "item": {
          "id": "c35e1c7f-17e2-40e0-883c-b031e0f06281",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "ccb6467f-227a-4500-a1a1-025f36a3e82a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "934ca438-6eeb-49ce-8622-bb722ad73dda",
        "cursor": {
          "ref": "2429e584-3764-4b46-861c-c2b685a9a9ff",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "13caafd2-9b9e-411f-8637-cda707219ed1"
        },
        "item": {
          "id": "934ca438-6eeb-49ce-8622-bb722ad73dda",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "a8c3e2c4-9f31-448f-897f-497447bf88a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a185ffc-2120-4ea6-8bd8-6a8f623418a8",
        "cursor": {
          "ref": "f19b39c6-cfef-4e78-a4ac-e7d32108eeaa",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "5bf9d337-def9-4ffe-be01-004afb1bf53c"
        },
        "item": {
          "id": "9a185ffc-2120-4ea6-8bd8-6a8f623418a8",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "90fb2c93-5ef5-4811-a542-1126b7051709",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0e00eb0-0380-49c4-8bfe-f308f8169da6",
        "cursor": {
          "ref": "c734e9cf-fd77-476e-92ec-0ab730663394",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "662a9ee2-749c-4d0b-a048-9e4cd6a8998a"
        },
        "item": {
          "id": "e0e00eb0-0380-49c4-8bfe-f308f8169da6",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "9215e6df-dca2-49d0-b99b-440b965da46e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99015876-abd6-4238-b75d-03de9da34363",
        "cursor": {
          "ref": "a44c17c4-5890-401c-a0da-151c381866ac",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "7017c00c-6487-467a-b4ee-11c6fc6661e3"
        },
        "item": {
          "id": "99015876-abd6-4238-b75d-03de9da34363",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "e2d83833-049f-4d93-a223-a8de189801fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2902bd11-dc57-4bc2-9f87-78de7e4a9c1f",
        "cursor": {
          "ref": "0852fd5e-ccfd-49b5-ba50-67460a1196d4",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "d4a13405-62ea-4290-880d-7a99103dd5e4"
        },
        "item": {
          "id": "2902bd11-dc57-4bc2-9f87-78de7e4a9c1f",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "9a68b637-95ec-47f4-90f4-255aff83d78d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94e0d9db-9d45-40c7-ab1f-1b4ca603ea16",
        "cursor": {
          "ref": "20b6d44b-27a7-4e08-9c4c-640ea0c9d10e",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "faf64da9-250f-4eed-89c2-78da6c8eb6cf"
        },
        "item": {
          "id": "94e0d9db-9d45-40c7-ab1f-1b4ca603ea16",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "f961a28d-c680-443e-b729-86f365ed34e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44aa906b-27fc-4f5f-b243-3e8e8554eee8",
        "cursor": {
          "ref": "2143a413-bfb6-45d8-b1db-88cc4f62e1b8",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "ad1e2711-89b9-47ff-b226-70a3d8114cab"
        },
        "item": {
          "id": "44aa906b-27fc-4f5f-b243-3e8e8554eee8",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "9812c59b-ff86-49f4-9b24-9d1975694774",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec601be0-71d2-46f2-b24f-bd9eb5f3591d",
        "cursor": {
          "ref": "f6248a36-a8aa-4353-9b6d-9888dbc1345b",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "b95a8cd5-9733-4c48-926d-424de5816b74"
        },
        "item": {
          "id": "ec601be0-71d2-46f2-b24f-bd9eb5f3591d",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "27bf4252-64f7-4794-afd5-fb0741a4e44f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fe54bb3-4f95-427d-a63b-1a5f36dd8f17",
        "cursor": {
          "ref": "3990241a-f8df-49c7-b3f4-4e7124828fd1",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "cd94f489-4303-4a37-b0c5-24824c41d2d5"
        },
        "item": {
          "id": "7fe54bb3-4f95-427d-a63b-1a5f36dd8f17",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "553d4525-99ac-4886-aee0-26ebf896a4ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d8d9507-899a-4bdb-8aaa-682db01817bc",
        "cursor": {
          "ref": "f97702cf-a3f2-4823-a551-da36b2eefe5a",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "873c71c0-a7f5-4a1a-9d63-0e62e75c8a53"
        },
        "item": {
          "id": "3d8d9507-899a-4bdb-8aaa-682db01817bc",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "739674e5-9ce8-433e-9f30-1a39c070eb66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f56890d4-97ed-4aa6-99e3-55438b128d0a",
        "cursor": {
          "ref": "22978636-7fdd-49b2-a25c-898753ad087e",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "7f37a8c0-bf28-4c04-ba2c-e86292edc5d3"
        },
        "item": {
          "id": "f56890d4-97ed-4aa6-99e3-55438b128d0a",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "ea6883ea-507c-4490-85ea-9a5408a575ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5fa76cf-f843-4b06-8979-f2dc232d8d93",
        "cursor": {
          "ref": "dcc70784-4604-4386-a99e-f59bc6ba59dc",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "1145d0e8-48ac-4421-b49b-c3223cb80b69"
        },
        "item": {
          "id": "b5fa76cf-f843-4b06-8979-f2dc232d8d93",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "199bead1-c53f-4823-9d1d-dfdf3d050216",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f50f7b92-a3ce-4b66-abb1-9a56cf1ee9e8",
        "cursor": {
          "ref": "5460513c-cc42-4363-84c5-e103f14039fe",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "1ed7c761-6966-44f5-98a7-1d6f5c297351"
        },
        "item": {
          "id": "f50f7b92-a3ce-4b66-abb1-9a56cf1ee9e8",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "fafeb661-f29b-472a-bee8-84b238fb3db0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bd9968f-0d18-4103-88d3-b4621f99e61d",
        "cursor": {
          "ref": "569c6288-faff-4564-ab7a-e5fcdfde2a51",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "1c2774cb-cdc5-444d-a599-f42eba2dc478"
        },
        "item": {
          "id": "3bd9968f-0d18-4103-88d3-b4621f99e61d",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "53ecc1bb-b599-44fb-95b6-cfb8ade8ca94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "deb38b43-f502-44b9-a8b1-7b575b01045e",
        "cursor": {
          "ref": "b4f9b702-1dc1-4613-a895-defa2a5f569b",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "7ec1cd6b-7d49-4e31-9e26-7f5dd39b9c35"
        },
        "item": {
          "id": "deb38b43-f502-44b9-a8b1-7b575b01045e",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "4bc020b3-1c47-4f1a-8a16-e82c54e159b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa40e868-a13f-428b-9265-8e50a5d2b8cc",
        "cursor": {
          "ref": "9cb4eb0b-70ee-4df9-9723-0d4af3b7d860",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "7555a82a-c7fb-44e5-9532-6e0efb31af4a"
        },
        "item": {
          "id": "fa40e868-a13f-428b-9265-8e50a5d2b8cc",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "987cdba4-33ad-4ad8-89dd-b3a9adfa6304",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 26,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff41eacc-9e0d-4095-a9cf-a7a1128b1cff",
        "cursor": {
          "ref": "41edebc5-890f-4975-ae2f-9f10b0e0c674",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "a8cba175-ae2c-4647-b448-96088512dbd0"
        },
        "item": {
          "id": "ff41eacc-9e0d-4095-a9cf-a7a1128b1cff",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "686ae71e-b935-43b6-b4eb-5fa28baf8725",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9ea6599-a469-417b-bf55-8f4d435e7b68",
        "cursor": {
          "ref": "b125aeac-614b-4371-91a3-77f568fa9a89",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "7cf17b35-4294-43c8-b6c5-66f6d026c2e6"
        },
        "item": {
          "id": "c9ea6599-a469-417b-bf55-8f4d435e7b68",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "754c48cd-acc1-403d-bab6-668e1fdb8d04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "560f65f5-b9e2-4f90-81b5-d0003d1b6d6b",
        "cursor": {
          "ref": "a51c459a-0671-4cfa-92a6-b5594c7adc1c",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "a07c46a5-22b0-489d-9213-63b46c0401de"
        },
        "item": {
          "id": "560f65f5-b9e2-4f90-81b5-d0003d1b6d6b",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "6aaa2e32-b063-4d6f-84c9-4f6cef8b908e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 136,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "821902db-c5e2-4c26-a9f8-13ef640c12cf",
        "cursor": {
          "ref": "76c8798b-df1d-48b3-b8b1-47d3f5bf1220",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "06bf54ec-0d36-48de-84a6-61e86c312917"
        },
        "item": {
          "id": "821902db-c5e2-4c26-a9f8-13ef640c12cf",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "b838790e-f7f8-4471-8ed3-980f15be6a42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69a57e1a-aa25-4657-9247-fa07d8719938",
        "cursor": {
          "ref": "15c1373e-2a8d-4f48-bf26-02e081e42b6d",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "fe75a3f4-a26f-4428-a6e2-c80e848bddf1"
        },
        "item": {
          "id": "69a57e1a-aa25-4657-9247-fa07d8719938",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "6cf88570-9b74-4d16-86a3-3233867cd651",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "658cd30c-cca0-422b-9f6a-e49111662f48",
        "cursor": {
          "ref": "1dadbff5-8dac-4abe-8260-23b247fa8068",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "5a07be53-97b6-4f6b-a70f-7fe3afb5bbfc"
        },
        "item": {
          "id": "658cd30c-cca0-422b-9f6a-e49111662f48",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "08157dec-8b1c-449c-9f19-6ee28498520c",
          "status": "OK",
          "code": 200,
          "responseTime": 149,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "26f98885-3092-432d-8942-4688d10e404f",
        "cursor": {
          "ref": "89b52222-845a-45b7-aed4-f51cce9c86d5",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "e5e2617d-9f10-4594-a549-7a3cd7556035"
        },
        "item": {
          "id": "26f98885-3092-432d-8942-4688d10e404f",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "8e17f869-0ca0-400b-a3ff-9fdc604fb119",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96ca82e5-e35f-4e6c-9107-c663bf29b549",
        "cursor": {
          "ref": "ab03e96f-663b-4456-abaf-e3ccbf17a848",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "60825834-1d9f-4aa9-8aa0-d0d6103a7840"
        },
        "item": {
          "id": "96ca82e5-e35f-4e6c-9107-c663bf29b549",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "f7f7f93d-9085-4c08-98c8-d7961aaf8db8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "425cfd9e-381f-4abe-90ff-ac9bf717e1f2",
        "cursor": {
          "ref": "92203255-ddaf-4807-a6d7-cfce5cc17d2f",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "718b790b-6a2b-43b9-b122-13aebd2d8763"
        },
        "item": {
          "id": "425cfd9e-381f-4abe-90ff-ac9bf717e1f2",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "043bac4b-6107-4448-bd39-7b5bc0e78562",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62e1f12b-9041-4634-95ac-0bdbff0ec1a5",
        "cursor": {
          "ref": "9f27c2ff-b56d-47d2-bdcf-f187448e2c47",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "8a0d2157-476e-42ef-8552-c3dedcdf5f4f"
        },
        "item": {
          "id": "62e1f12b-9041-4634-95ac-0bdbff0ec1a5",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "9c116034-28d5-4648-8eb4-46084f89c9d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0682bf23-7e24-43a6-bce6-ef04c1e49413",
        "cursor": {
          "ref": "1d683b01-12e7-47ee-9b67-ceac09c15f08",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "bacee4e7-ad55-4933-a356-8f8176aa5e99"
        },
        "item": {
          "id": "0682bf23-7e24-43a6-bce6-ef04c1e49413",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "94e0f762-9939-4841-916d-cfc7b63549e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b24b9156-65f4-4f0b-8268-58df3a5cd35a",
        "cursor": {
          "ref": "95e5d2ce-b6de-4fdd-b972-f808bd227168",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "f95d8398-773a-442f-95a1-a1bf99d6d10c"
        },
        "item": {
          "id": "b24b9156-65f4-4f0b-8268-58df3a5cd35a",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "459b55ab-877a-42b8-8d65-ca1f4d015c06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee8491d3-2029-4638-b794-ea14658cc9f7",
        "cursor": {
          "ref": "fffb4b3c-c640-4714-88d5-1e12b5090945",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "ef9c9308-0230-4ad3-b591-50b1f988d051"
        },
        "item": {
          "id": "ee8491d3-2029-4638-b794-ea14658cc9f7",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "46bb6ece-932a-4fbc-9ef0-0cc23fb275f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b75ed7d-9ba8-44c6-b6f2-b29d44cdcdcc",
        "cursor": {
          "ref": "e80b07f5-51d9-474d-8ed1-77c91be457a5",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "a840d76a-c4f7-4f66-9770-900877512b8f"
        },
        "item": {
          "id": "9b75ed7d-9ba8-44c6-b6f2-b29d44cdcdcc",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "9e7c9cda-1615-4f88-8861-6d10f71ceff2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "baa34c59-410b-47cd-9241-7dfb8f933829",
        "cursor": {
          "ref": "3afc8fa8-f655-4f95-b441-1afcc8350605",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "53bc0dbb-1731-4946-bc94-d678407726ed"
        },
        "item": {
          "id": "baa34c59-410b-47cd-9241-7dfb8f933829",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "f9778317-6041-4bd0-828b-3f979f802bc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e554f5d2-fd2c-4b22-8a8e-2365eea0143a",
        "cursor": {
          "ref": "3503db92-0bcb-4a33-ab10-d0404c492b4d",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "444551f0-6745-44c8-93a1-229b34d93e7a"
        },
        "item": {
          "id": "e554f5d2-fd2c-4b22-8a8e-2365eea0143a",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "bdeedd57-e12a-4c15-b5e4-4e3db1a24269",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1214f1d-c1c6-4527-9dc8-5d51a199036f",
        "cursor": {
          "ref": "4da1f04d-5b76-40a2-87ee-d7d416edc410",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "4b6fd3f2-67de-4531-8e44-a535c38af6f6"
        },
        "item": {
          "id": "e1214f1d-c1c6-4527-9dc8-5d51a199036f",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "7aa63719-0def-4826-9a01-7e058011fd70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f935590-f96d-47ed-8c5d-5c1c989bb8b5",
        "cursor": {
          "ref": "ce45e687-1f42-4f6a-b61a-922103ff9e07",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "68a02e57-04a3-4897-bc06-69b76bf9d725"
        },
        "item": {
          "id": "7f935590-f96d-47ed-8c5d-5c1c989bb8b5",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "7dbe57d6-4e09-400d-bf00-65c2094d4d7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "606207a8-d99a-4827-b46a-84ab46364a2e",
        "cursor": {
          "ref": "fdce3aaa-1224-463a-b82a-b175e70afd7c",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "ecdb1c9d-06b0-40ee-8d31-df1e76aee27b"
        },
        "item": {
          "id": "606207a8-d99a-4827-b46a-84ab46364a2e",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "6ad7fdb9-7134-4cfa-b924-19d4038e85da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0978e37a-6a11-4521-a6b4-0dc93ae28b9e",
        "cursor": {
          "ref": "8d5aff8c-4e43-4334-878a-665af88615ed",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "d96a0b7e-94dc-444a-912d-8b2dbb4b1d86"
        },
        "item": {
          "id": "0978e37a-6a11-4521-a6b4-0dc93ae28b9e",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "01533bb4-92bc-4129-ae93-9f146abae856",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64c6e219-b9e1-400d-963a-30c9fbdc17e5",
        "cursor": {
          "ref": "80ca4ef2-2914-4014-a977-fa9b094e11e1",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "0cda9ce2-a1b9-4dce-95e9-af87b00670c9"
        },
        "item": {
          "id": "64c6e219-b9e1-400d-963a-30c9fbdc17e5",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "715f01b1-936a-41ab-b001-b89866bedb20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fefbeff-2307-40be-94a6-405695149818",
        "cursor": {
          "ref": "94ce3462-a88e-4051-b4c6-09d7735dc771",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "b066c42a-dc52-4390-8ca4-299e93e8be03"
        },
        "item": {
          "id": "7fefbeff-2307-40be-94a6-405695149818",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "55fce256-e8a3-4e19-99d9-ca1eca86efee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90461336-ad33-4c6b-9dcf-51945888d84b",
        "cursor": {
          "ref": "97d914e3-41f7-4126-8f97-711f89319abe",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "cdfe112a-7f77-46fb-93c4-edb2062dbe0d"
        },
        "item": {
          "id": "90461336-ad33-4c6b-9dcf-51945888d84b",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "ab6fe658-7d21-49b0-9417-c4c1b1fde82f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "572b5274-3e00-4fd2-8a2e-39de6d9739d6",
        "cursor": {
          "ref": "38a45a48-ebe7-455d-8d76-ebce52c49d9d",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "6c749c21-214e-4b99-9867-5e49541e8a34"
        },
        "item": {
          "id": "572b5274-3e00-4fd2-8a2e-39de6d9739d6",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "871c9611-defd-420b-9ef4-24d040ddb464",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46073add-2314-439c-a23e-fac6aa6d1bee",
        "cursor": {
          "ref": "001b007b-c347-4ad6-a7e4-8c8f9c5991eb",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "5a549475-e7f9-486b-9ff6-9fa4974c94a2"
        },
        "item": {
          "id": "46073add-2314-439c-a23e-fac6aa6d1bee",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "e859d6c6-46c6-4679-8e16-cfc3af0397be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d733db05-9835-4e50-9fda-c41c1aafba28",
        "cursor": {
          "ref": "682ea134-c8a1-4e6f-b5c1-25e7d2b69e97",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "688bb796-effe-45ee-84c0-07c57a7506cb"
        },
        "item": {
          "id": "d733db05-9835-4e50-9fda-c41c1aafba28",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "9c8062b7-b149-46d1-886c-4de4097d9d30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f302bc3f-b986-477c-969e-8f0a69adae34",
        "cursor": {
          "ref": "dd0c6168-9f91-43df-99cd-9182c3e2febd",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "1bd8f472-fc29-496d-a8e1-7b6ec6798bdc"
        },
        "item": {
          "id": "f302bc3f-b986-477c-969e-8f0a69adae34",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "60acd038-ef3f-4921-9c55-76f7a3c28a6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68858024-845f-4e03-a8cb-e790768d8253",
        "cursor": {
          "ref": "5cca3410-2bb9-47fc-9863-e98eb195a910",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "394a5e2b-e17d-4aa0-9d59-2031831d563e"
        },
        "item": {
          "id": "68858024-845f-4e03-a8cb-e790768d8253",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "1f81b834-7e14-4e6d-b860-3f0cf462d838",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72e57356-7b35-4918-abd0-f8e1ee0a660e",
        "cursor": {
          "ref": "22fe7edc-c5d2-4db5-bc2f-dab465dc29d9",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "7b4bd32e-0825-4763-a469-55da3e29358b"
        },
        "item": {
          "id": "72e57356-7b35-4918-abd0-f8e1ee0a660e",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "ffe3edb6-3918-42b2-91b1-bb4e4b413bac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4bb8c6c-f0d1-4f83-984d-5900f3f6cd52",
        "cursor": {
          "ref": "e8b9bbd5-3293-4e86-a722-e7279d42b165",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "d155b167-5825-4d86-bdfa-7b39ba764602"
        },
        "item": {
          "id": "c4bb8c6c-f0d1-4f83-984d-5900f3f6cd52",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "3a5f1612-2fd2-4477-a590-ec10bdc09d12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "022b140b-9990-4fd7-be74-2e731d4e691e",
        "cursor": {
          "ref": "c3f71900-596c-4652-abd3-0adc091d068c",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "29999060-15de-45d5-bee3-7c87e11aba52"
        },
        "item": {
          "id": "022b140b-9990-4fd7-be74-2e731d4e691e",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "036eada5-b687-4a52-8ac3-575c4972653c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99463c93-808c-48f2-9b36-7358ba23f7b4",
        "cursor": {
          "ref": "74492bc6-e595-44dc-b77e-4dac39c9663c",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "351d9d0c-8c4a-4ae3-be81-a1a8711cfdda"
        },
        "item": {
          "id": "99463c93-808c-48f2-9b36-7358ba23f7b4",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "800b37f5-6351-4e15-89aa-0a8524bff141",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "385d4d3f-5325-4a2b-89d1-8325a2599995",
        "cursor": {
          "ref": "122d16db-7785-4e9a-8436-13409c44ce63",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "56dd2567-bbc3-4403-ba02-c0976f555a50"
        },
        "item": {
          "id": "385d4d3f-5325-4a2b-89d1-8325a2599995",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "3eb72309-f0c7-46f8-abce-48e59d696fe9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f08c7fd-7a61-436c-bcb4-651daa0a55a9",
        "cursor": {
          "ref": "203177c0-67f5-4aa2-85b5-481ca2a38dba",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "8803c8bb-caa9-4060-b87d-01b8989a6b4e"
        },
        "item": {
          "id": "4f08c7fd-7a61-436c-bcb4-651daa0a55a9",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "6fbebeeb-a7de-4134-8aeb-767b75e22001",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73d8e8df-23bb-4b0b-ae10-7fca1cb55868",
        "cursor": {
          "ref": "f607e944-550e-40d5-87c1-072d16511bbe",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "20eb0941-2312-493b-a102-0c0768c41d13"
        },
        "item": {
          "id": "73d8e8df-23bb-4b0b-ae10-7fca1cb55868",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "45bab9ba-d588-44c7-837f-7b247c46489f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7271e61b-96dc-453c-8f1e-11273e06212c",
        "cursor": {
          "ref": "2d8cec55-7420-4ece-9cd2-22c44edcc09a",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "f52bb333-087a-4d7d-86c1-56cffea341ae"
        },
        "item": {
          "id": "7271e61b-96dc-453c-8f1e-11273e06212c",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "727b4ff7-c385-4a9c-a7ca-54a055cb4eb4",
          "status": "OK",
          "code": 200,
          "responseTime": 141,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "440f3d49-609e-4ef0-8190-7928e26db370",
        "cursor": {
          "ref": "d55e2378-548a-41bc-ac9e-945ebc7c8cd0",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "0fbd01c4-7c6f-42d9-9429-9688ce03ca19"
        },
        "item": {
          "id": "440f3d49-609e-4ef0-8190-7928e26db370",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "12a5c28c-f591-475d-a92e-1a5bdbaa7107",
          "status": "OK",
          "code": 200,
          "responseTime": 124,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "c0728ea6-a0fd-477e-860f-88dc2618a159",
        "cursor": {
          "ref": "7331a51e-ce3e-44e2-a929-124f87cd6e53",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "f63dc05f-7fb6-4e7f-b255-bfe1fe6e9308"
        },
        "item": {
          "id": "c0728ea6-a0fd-477e-860f-88dc2618a159",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "abed5fdc-7ad0-4676-b37f-ed42c2d77584",
          "status": "OK",
          "code": 200,
          "responseTime": 119,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "6b5738c9-1cab-459f-913b-e33fe084cd3b",
        "cursor": {
          "ref": "e39ea4d2-ad3d-4873-8d43-8f1045935fbc",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "a566e6f0-8d0d-4b09-b87b-a9349f4f82df"
        },
        "item": {
          "id": "6b5738c9-1cab-459f-913b-e33fe084cd3b",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "aadbd2f3-056d-45f7-a247-68be7d58fc06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f7f00f6-2503-4463-bcb0-49b93517c03e",
        "cursor": {
          "ref": "f14d9ee9-e792-40de-b488-20849fc88896",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "21675215-05dc-4cad-b2c3-3ca8a71c4187"
        },
        "item": {
          "id": "4f7f00f6-2503-4463-bcb0-49b93517c03e",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "7b8f20b2-daaa-4143-93e9-028e57395f6a",
          "status": "OK",
          "code": 200,
          "responseTime": 120,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "4d2b6cf2-00c6-4690-af72-18d9e873628f",
        "cursor": {
          "ref": "1b816e4a-b43a-419a-b8d6-03cf88d0ea77",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "56ba32e4-d7db-4777-b5a2-c3f6d0c4cc8e"
        },
        "item": {
          "id": "4d2b6cf2-00c6-4690-af72-18d9e873628f",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "89fa2832-4049-477a-b2b4-9ae582c5ba7c",
          "status": "OK",
          "code": 200,
          "responseTime": 121,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "2550428d-11b4-4584-b0ee-883dcc076c4c",
        "cursor": {
          "ref": "f8d0a5e1-56ff-4c1b-bb62-a7c23d04a4bb",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "f64d58db-030c-47f6-903b-03bb1987f67f"
        },
        "item": {
          "id": "2550428d-11b4-4584-b0ee-883dcc076c4c",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "5d4fa422-91e0-442b-b353-f82929622e80",
          "status": "OK",
          "code": 200,
          "responseTime": 122,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "bece769f-33b0-4276-85c0-eff5edd47201",
        "cursor": {
          "ref": "cd447c9f-ed62-43a2-87f1-0be4b792d252",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "d9ffa6ad-e068-48a6-993e-137093173a74"
        },
        "item": {
          "id": "bece769f-33b0-4276-85c0-eff5edd47201",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "9943fec8-5b46-496c-92b0-c4e23a1c526e",
          "status": "OK",
          "code": 200,
          "responseTime": 122,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "147ca7da-a363-4e84-b243-7cb933c709aa",
        "cursor": {
          "ref": "371ca818-c13a-435a-9016-0cadac666c64",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "9d7082e6-6c26-44c1-906b-7fd226d7e4ca"
        },
        "item": {
          "id": "147ca7da-a363-4e84-b243-7cb933c709aa",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "db9b5fe3-259c-46ec-8b4f-9288e740c728",
          "status": "OK",
          "code": 200,
          "responseTime": 116,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "193fcd04-893e-4826-9274-cd8b28c0151f",
        "cursor": {
          "ref": "43ba9c3d-ed1a-4087-90b7-ba74bb713bb1",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "6e26e9d5-0d97-4877-82c9-6650d86df910"
        },
        "item": {
          "id": "193fcd04-893e-4826-9274-cd8b28c0151f",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "ce528c8b-9570-47ec-8a76-26c6912fa91b",
          "status": "OK",
          "code": 200,
          "responseTime": 123,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "2a3a5c22-04d3-42b7-822d-a9f4017c0fdc",
        "cursor": {
          "ref": "651ded2c-75ac-4020-a8cd-38c744e5492b",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "b18b600d-2523-4af2-91c4-6c36b72cadbd"
        },
        "item": {
          "id": "2a3a5c22-04d3-42b7-822d-a9f4017c0fdc",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "7698aa13-8675-480b-8fdb-fd50d85b8101",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2017726-99cb-4f8f-b25a-5c871c11b7ed",
        "cursor": {
          "ref": "79fd382d-30c0-4616-b154-bd7875906594",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "10c3a0d4-62a2-4686-b0b0-16b90cfd51b3"
        },
        "item": {
          "id": "f2017726-99cb-4f8f-b25a-5c871c11b7ed",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "81841282-8940-448f-b231-6773cb65ab0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d76a44d1-4ea1-4700-bee5-214b8eeff36b",
        "cursor": {
          "ref": "96195116-fed4-4ccb-a1f4-a7ffdc653643",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "3dc80e64-6d63-4168-9158-335be89046a9"
        },
        "item": {
          "id": "d76a44d1-4ea1-4700-bee5-214b8eeff36b",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "e6565877-d786-4265-8a80-5cc2195b3c03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d8a75ce-20dd-4934-bfa0-d583be8af68b",
        "cursor": {
          "ref": "9885bac9-3686-4498-963b-f6978fe41005",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "39e144ef-491d-4779-a90d-c17a68c3b873"
        },
        "item": {
          "id": "4d8a75ce-20dd-4934-bfa0-d583be8af68b",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "870802f2-1e15-4c0c-9a46-0d4d200096be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e09af743-1d50-487d-92d0-a18014bcee1c",
        "cursor": {
          "ref": "4cf9a79d-791b-4d29-802f-01fa5d0f8160",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "4ffa1cb5-d561-4646-b615-3438907e2d15"
        },
        "item": {
          "id": "e09af743-1d50-487d-92d0-a18014bcee1c",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "9d228989-3fd9-4e65-adac-92ca2a5eff21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c7492e3-0334-40a7-b457-6f25c7e542b4",
        "cursor": {
          "ref": "292e547a-3840-4e2d-b185-4322a4f520da",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "d4af1358-fe43-481c-8b0f-90116a4859f3"
        },
        "item": {
          "id": "8c7492e3-0334-40a7-b457-6f25c7e542b4",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "3a80b00a-5da3-4c04-8ac7-7d4dcf56267c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d34eb51b-8920-47a9-ac4a-026861c10607",
        "cursor": {
          "ref": "5e7f5973-15c9-4303-a5f7-dcd6b371dfc0",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "4dc41dc6-fb9a-4391-81e0-6f08f3f86cf7"
        },
        "item": {
          "id": "d34eb51b-8920-47a9-ac4a-026861c10607",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "784a6f24-edb8-447e-b1a7-141a7a528a81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64dc3665-2da2-4d28-b18d-292a9fd80db5",
        "cursor": {
          "ref": "fc2e96ab-827b-4ce0-a7ab-3163fcd3cf88",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "6eda2d8a-ad36-4dd9-b678-8204344bd31a"
        },
        "item": {
          "id": "64dc3665-2da2-4d28-b18d-292a9fd80db5",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "93fc1859-7d51-406c-b36c-7dc4692e8f98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1909eea-2bd4-43fb-a0a0-4fd1a9b66861",
        "cursor": {
          "ref": "0144e11d-37f2-4252-9971-1b9513b920c3",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "b2518dd2-9364-4e7c-a6b6-039ee38ebf3a"
        },
        "item": {
          "id": "f1909eea-2bd4-43fb-a0a0-4fd1a9b66861",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "4bd631d0-e43a-4254-b154-20181dab0a17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0874b4f3-c431-49df-9d2b-637d17bac789",
        "cursor": {
          "ref": "7ef75683-f6c4-4836-b727-3a1149f18370",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "e3422d65-a29b-43dc-bee9-3a427d3b3c09"
        },
        "item": {
          "id": "0874b4f3-c431-49df-9d2b-637d17bac789",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "7fa37659-cfa2-4455-9345-82e345674a46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6e8adac-4373-44c9-a1d3-71d06e8ecb57",
        "cursor": {
          "ref": "ef4414f3-5856-47d1-84cf-51cf1ce3fac9",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "f2663ad9-e9c8-4c14-9ec1-621732b5c2e4"
        },
        "item": {
          "id": "e6e8adac-4373-44c9-a1d3-71d06e8ecb57",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "a4b83ae1-e01a-4c42-bf57-5b0b3607add9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "105c7b8b-0d4c-4555-b060-470472648e5b",
        "cursor": {
          "ref": "1e7469c2-826e-4791-9679-2ceb3ca606be",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "ea2bc71c-26f2-468e-91f4-843c1e85ccf1"
        },
        "item": {
          "id": "105c7b8b-0d4c-4555-b060-470472648e5b",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "f8cd6460-af2a-4edf-9ab4-98842f239fd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65ce622a-9102-4051-973a-0f8d64a99cfb",
        "cursor": {
          "ref": "e025f5cc-10cb-4247-adf1-205498132348",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "2d08a200-d3dd-46e7-9049-3584c5cac1a2"
        },
        "item": {
          "id": "65ce622a-9102-4051-973a-0f8d64a99cfb",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "8f165a47-7cf1-49a2-8546-b79c3d599d9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d999b676-1ea0-4ebd-943b-42bae727fecd",
        "cursor": {
          "ref": "87cef94e-78d7-44fb-8581-0097f260a643",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "a971aab6-2fef-430a-9252-baa3e4c61e91"
        },
        "item": {
          "id": "d999b676-1ea0-4ebd-943b-42bae727fecd",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "23333fed-a76c-4ace-849e-88b30509a4a0",
          "status": "OK",
          "code": 200,
          "responseTime": 133,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "02134191-df5a-4ed8-81be-52de0bff0987",
        "cursor": {
          "ref": "49945f5e-d924-493e-848f-65a2b8d67e17",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "e1443164-de30-49ca-a12e-44b6501b99d6"
        },
        "item": {
          "id": "02134191-df5a-4ed8-81be-52de0bff0987",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "ee680613-a83c-4176-872d-db2027c365ef",
          "status": "OK",
          "code": 200,
          "responseTime": 121,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "ba6081b8-445a-4b29-bf32-b081462b4f94",
        "cursor": {
          "ref": "ccb33cb0-6573-415b-909e-86ce4b79d067",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "cbb178c1-60be-4771-9a0b-03859597fe44"
        },
        "item": {
          "id": "ba6081b8-445a-4b29-bf32-b081462b4f94",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "028dbed7-47be-4101-8d7e-3b397ee4c244",
          "status": "OK",
          "code": 200,
          "responseTime": 122,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "2e783876-2c61-4002-86a1-b4cfb03c0b6c",
        "cursor": {
          "ref": "1f081eda-98bf-4987-82f5-0eec6a8b6821",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "d833977f-bcf8-4e43-9ef3-8d34c04712d4"
        },
        "item": {
          "id": "2e783876-2c61-4002-86a1-b4cfb03c0b6c",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "fea55449-f445-4fc6-90a9-63c6ed4fa82d",
          "status": "OK",
          "code": 200,
          "responseTime": 123,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "6fc994b1-1253-4519-ba53-e5e66ee0f65f",
        "cursor": {
          "ref": "9fac0e57-e587-4c8d-913f-b6e983e97d86",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "0633d938-da38-4e98-9460-429d54833c3b"
        },
        "item": {
          "id": "6fc994b1-1253-4519-ba53-e5e66ee0f65f",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "01e1a6c1-a674-47e8-9c09-fac6fde7c220",
          "status": "OK",
          "code": 200,
          "responseTime": 126,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "242f1f38-5d9f-430c-8317-85c293f25fba",
        "cursor": {
          "ref": "eeba681e-40e6-4b66-8c6b-91aeb52baf38",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "2e9f21b2-4a3e-4a40-9be0-cc86ae8d0f59"
        },
        "item": {
          "id": "242f1f38-5d9f-430c-8317-85c293f25fba",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "1bef0aa8-155b-473f-a8e5-105829c82fd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fef79a1-5cf3-41d3-99f9-cacad1c0ac34",
        "cursor": {
          "ref": "c70cc6c1-2b8a-4bf7-a6c4-47f2204e20d4",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "82280789-5080-489a-ad67-a366680976ee"
        },
        "item": {
          "id": "4fef79a1-5cf3-41d3-99f9-cacad1c0ac34",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "21c21855-4c03-4731-8b83-60277e91bcd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28ae9569-ea6f-4b28-b5af-a60906e497d9",
        "cursor": {
          "ref": "a9cf610c-aea8-4ede-b2ec-ef62f15c9d43",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "3e82448d-519a-40fb-a93b-5d7557aba2e9"
        },
        "item": {
          "id": "28ae9569-ea6f-4b28-b5af-a60906e497d9",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "e4f569f6-f81f-4aba-a991-8b9a42d442aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 130,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d08ff475-a4d1-432b-9e64-4202fc817f8d",
        "cursor": {
          "ref": "128e6b59-9119-47ae-bd6d-8b650496cb61",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "6075f2d5-c1b0-4115-9830-2d29715c3a2d"
        },
        "item": {
          "id": "d08ff475-a4d1-432b-9e64-4202fc817f8d",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "df23e2a5-6d03-48a4-8e0d-18ebcd0a8044",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aacf9448-07b4-4f15-aca7-7dc72e9a7d6a",
        "cursor": {
          "ref": "51d99426-e13b-4cc5-9f88-b5813d44e776",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "f6dfdef5-48bb-4fc3-900a-a1a56bf6c4fe"
        },
        "item": {
          "id": "aacf9448-07b4-4f15-aca7-7dc72e9a7d6a",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "b0ccc2bf-6421-476c-b3ce-30607e20dbb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bc1046c-b30a-4f1c-a5d0-683786e2840a",
        "cursor": {
          "ref": "136a640c-cba9-4315-8160-fb296fb77809",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "710441e5-d965-4582-b681-65951c9f4cf5"
        },
        "item": {
          "id": "4bc1046c-b30a-4f1c-a5d0-683786e2840a",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "6c4cafdc-08a4-49e6-8bac-1a9bd730b291",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4be18cbd-a01f-49af-94b9-e7ca40c60aa2",
        "cursor": {
          "ref": "e407463b-afc3-427c-9781-17cdf256c042",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "87805210-46d5-46bc-be56-9bd9c3855617"
        },
        "item": {
          "id": "4be18cbd-a01f-49af-94b9-e7ca40c60aa2",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "1ce46972-eb96-4325-9ea0-3e9f69deaa3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "901847c8-140a-4c5a-a151-f13676be5240",
        "cursor": {
          "ref": "6aed7975-1b19-4cc8-acca-90badd143773",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "90eac59d-feed-48e7-87ce-1cac76c135d3"
        },
        "item": {
          "id": "901847c8-140a-4c5a-a151-f13676be5240",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "e48a22a0-02e6-488a-b62c-62a18b7b5fbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9a57b42-2580-4ded-b8f0-6b5c35f9f87f",
        "cursor": {
          "ref": "c31ffe1d-ae61-46a6-8d15-2774511bb5e0",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "d2eb1c59-a66b-4040-ab9f-e310f20a8905"
        },
        "item": {
          "id": "c9a57b42-2580-4ded-b8f0-6b5c35f9f87f",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "cea529ba-c3fd-4dd7-9ad5-87ee659d9863",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1971e031-a4cc-48b6-a0a6-f40eaafa3828",
        "cursor": {
          "ref": "bde9418f-3b1f-4450-819a-b11da5e828fe",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "8d03a642-e3f5-41dc-af86-fb96734ccc32"
        },
        "item": {
          "id": "1971e031-a4cc-48b6-a0a6-f40eaafa3828",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "7e967617-ee8e-4874-9f23-fd4fa159d333",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b2f2ea9-cc40-4749-a118-e9fc113aa9e8",
        "cursor": {
          "ref": "b74c51d0-8581-4455-be31-757c87009655",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "d7547b82-704f-438c-bf8f-94bbb5c1dac3"
        },
        "item": {
          "id": "8b2f2ea9-cc40-4749-a118-e9fc113aa9e8",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "312e3d71-9ecb-4f51-ab3b-20f555457c8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03c6d33e-4f6e-49ea-9966-9e5e147cbdf6",
        "cursor": {
          "ref": "4f392591-a342-4bf7-824c-e9e2313545d0",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "e308b918-dbfc-4f76-882d-6afe91f3fcc3"
        },
        "item": {
          "id": "03c6d33e-4f6e-49ea-9966-9e5e147cbdf6",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "c06cabe2-abdf-469f-9ac8-887b003859be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfe20c2b-8df3-43fc-a7eb-42bf1f3af4a7",
        "cursor": {
          "ref": "0d3fc1c0-52a1-400a-953c-0f9bdf8b9075",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "e0c67e51-1de7-451d-8e67-5d85b60b7839"
        },
        "item": {
          "id": "bfe20c2b-8df3-43fc-a7eb-42bf1f3af4a7",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "2c142f24-ac1a-43fd-8c5c-d416aba3e43b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29a5dfc3-cb40-49a1-81cc-fa65b6f06c4d",
        "cursor": {
          "ref": "21364cac-3a09-4aeb-8bfa-c3fe1287a09b",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "e4265570-1d0f-4e5a-9556-5014d6f37a06"
        },
        "item": {
          "id": "29a5dfc3-cb40-49a1-81cc-fa65b6f06c4d",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "f3dc776e-872e-407e-beee-4aff94bab387",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78bc628f-7f9e-43e3-8505-810bfc8ad0bc",
        "cursor": {
          "ref": "8d69bdc2-04a1-4ec0-bcae-824291aa91cb",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "8a74bb5e-04e0-4049-a9a2-2e42b3203a00"
        },
        "item": {
          "id": "78bc628f-7f9e-43e3-8505-810bfc8ad0bc",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "6262baee-0468-4a03-881e-1d23233b0141",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb4a6070-2ccf-406f-936c-a1f68883f321",
        "cursor": {
          "ref": "721cc2e3-0d02-4b4a-b6a9-47f732b6c40e",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "4ee26a3b-491e-4993-8d06-53cd88f49adc"
        },
        "item": {
          "id": "cb4a6070-2ccf-406f-936c-a1f68883f321",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "c1629987-599d-4e77-b2e4-c7da38810875",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1852f27-d845-4575-9c4e-60d5cabd06d1",
        "cursor": {
          "ref": "f656bbb5-b43d-4e17-8f63-34a259f952f0",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "ee7b06bc-290f-46aa-8263-44cc248426fe"
        },
        "item": {
          "id": "d1852f27-d845-4575-9c4e-60d5cabd06d1",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "d588b5ec-3e3e-47b6-ab74-e964edb24bd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d4e06ee-cad8-4a2e-900e-d926405381fc",
        "cursor": {
          "ref": "212e3c11-34bf-4eee-9207-1b783220a1c1",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "a8da899d-9fbc-4e67-b2f5-ef0bd447524f"
        },
        "item": {
          "id": "3d4e06ee-cad8-4a2e-900e-d926405381fc",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "1d621726-5704-49cd-af78-3f1a9fe33c81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "449db66a-8e62-4ab5-b6d5-33b77fc4a12c",
        "cursor": {
          "ref": "b49e3c2a-db71-4ca2-9624-d6eda424ae86",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "8ed0ba55-a37f-4a2b-a629-26319a52b660"
        },
        "item": {
          "id": "449db66a-8e62-4ab5-b6d5-33b77fc4a12c",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "dc6722ca-99a7-4be1-8525-970be35b76db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0aebae74-c59f-48ea-bc5c-9cf1a0b71703",
        "cursor": {
          "ref": "beece0df-dd02-4fda-b9b8-8ca1cbdb34e3",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "5e2443b0-d54b-4bdf-be95-ae7569aeadd1"
        },
        "item": {
          "id": "0aebae74-c59f-48ea-bc5c-9cf1a0b71703",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "f3291d10-1275-4062-b1d4-219ff76d9e4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d41a02f8-963e-4e1b-888e-d6c2f861ec99",
        "cursor": {
          "ref": "dc8b8a94-3af8-4e2d-bcd3-6f56c54715d3",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "b384ca69-47b9-457b-a0d6-e768a3f2cde2"
        },
        "item": {
          "id": "d41a02f8-963e-4e1b-888e-d6c2f861ec99",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "863deefa-8cbb-4421-a103-578b8dd6c40d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33be5dd6-b00c-4f9c-abdc-d72b596e5090",
        "cursor": {
          "ref": "95d16ecb-7656-4dde-b0d3-e60d5badd90b",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "12d54451-df4a-416f-9cd5-2479969b51d4"
        },
        "item": {
          "id": "33be5dd6-b00c-4f9c-abdc-d72b596e5090",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "53c64b6e-2e7b-4eb1-8291-9872a9013fa8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b62473d2-3556-491c-8127-d9ab60d5d51c",
        "cursor": {
          "ref": "7c55f582-f92b-48ad-b3a9-8a4c4f57ad5a",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "257d0912-b17b-4be9-973d-9fa2418ca3dd"
        },
        "item": {
          "id": "b62473d2-3556-491c-8127-d9ab60d5d51c",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "f49ce205-f998-46f4-933f-732edefcfee1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b495728-8799-4b99-a308-964a18ad098e",
        "cursor": {
          "ref": "ee1b3e64-1360-4940-a74e-c7239cc6851a",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "3e4f8e0c-b9ad-4856-9dcb-e0e6cce04102"
        },
        "item": {
          "id": "4b495728-8799-4b99-a308-964a18ad098e",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "6841fac0-45df-4303-af8a-adb5b1cf9e51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6a01726-2710-4547-940a-f5f13aba2794",
        "cursor": {
          "ref": "927fd25d-b90d-4d0b-a5b2-ae801c2c907f",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "7e35162a-060a-4068-a11e-247d2a73cf6d"
        },
        "item": {
          "id": "c6a01726-2710-4547-940a-f5f13aba2794",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "7b838abe-c605-4d83-8966-f2f58c226451",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eed7aade-944b-4076-8ba5-7987dbb4d08e",
        "cursor": {
          "ref": "e06c021f-e744-4791-8fbf-4485751d91fa",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "1f3b5cd1-1b63-4814-bbbd-3a8589a18e0f"
        },
        "item": {
          "id": "eed7aade-944b-4076-8ba5-7987dbb4d08e",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "e4256c9b-bd41-4eb9-a6e9-e54f8abdf3ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6401ebe9-8713-45bf-bff5-864d3507647b",
        "cursor": {
          "ref": "ce90aaf5-5230-4639-b145-b7c1dc7bb9b7",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "04d5fdcd-cdb0-488a-8714-cbcda525e3df"
        },
        "item": {
          "id": "6401ebe9-8713-45bf-bff5-864d3507647b",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "a6b63752-93db-41bf-9ff8-ff14b40867c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3319c538-b964-4f48-9352-7439bff39357",
        "cursor": {
          "ref": "fe04c584-1300-4ab2-8f10-c1dc9f85a30f",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "0b7b7c2b-e04c-4686-9073-f64910753ebe"
        },
        "item": {
          "id": "3319c538-b964-4f48-9352-7439bff39357",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "58bb95b9-c803-48f7-9ab5-03406edd50ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d826d20-6494-418e-9693-39f2847d26e2",
        "cursor": {
          "ref": "2ce310a9-46b0-468c-88b2-25ff3f5ad5aa",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "a265d10e-7f57-4b57-ab51-a1e8c558b5a8"
        },
        "item": {
          "id": "0d826d20-6494-418e-9693-39f2847d26e2",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "833bc8d0-7952-44e8-98a5-8ca6c194f2a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af713ff6-47c8-425a-ac5a-976b5681dd0e",
        "cursor": {
          "ref": "cfec004a-d4db-45da-bedd-d373e58ec5fb",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "325e7ced-012b-44cb-a839-97638bed9226"
        },
        "item": {
          "id": "af713ff6-47c8-425a-ac5a-976b5681dd0e",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "5aa9fd74-1613-4313-bc5b-ff462236091a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e2e1c11-e767-4c7f-ba5d-148262e821fe",
        "cursor": {
          "ref": "9b9f0a0c-efe7-47ec-86df-20d2bc29a1b2",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "75724e71-e712-4f58-bc2b-bb04392e5c48"
        },
        "item": {
          "id": "5e2e1c11-e767-4c7f-ba5d-148262e821fe",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "b9f2d1d5-3d33-4f71-9ce4-3f5d88a4d3ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69affcf7-ba0c-4544-9705-6597ce467606",
        "cursor": {
          "ref": "b3335a8a-b821-4f77-9f3d-ef22387c5aa2",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "d7370ba0-61af-4cc2-af85-54a790f914b8"
        },
        "item": {
          "id": "69affcf7-ba0c-4544-9705-6597ce467606",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "9c539f80-5b94-43ce-aa21-213814845990",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07891954-ffd1-4505-91bc-2a9bd3883055",
        "cursor": {
          "ref": "ce9a0ab3-dbc0-4314-b16f-149e8a4002c1",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "cb263cd2-2183-4038-8d58-81488e8d5260"
        },
        "item": {
          "id": "07891954-ffd1-4505-91bc-2a9bd3883055",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "d74f7cc8-c88b-465b-864a-19fd8349e4e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "952b309c-a21d-493d-962c-9080dfab01b7",
        "cursor": {
          "ref": "835f7810-4035-44fc-9f4a-f4a22b1491bc",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "ffd9ab4b-8337-4b92-89fa-3dbde3c4ea4d"
        },
        "item": {
          "id": "952b309c-a21d-493d-962c-9080dfab01b7",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "f80cec75-de4b-46da-90d5-836b3efa10da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b54a1829-1fe5-44c7-a040-757c27f58226",
        "cursor": {
          "ref": "322626ae-e1de-46e7-9435-98af6a1e93fb",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "09f39c0e-28f5-441d-a125-996a62171feb"
        },
        "item": {
          "id": "b54a1829-1fe5-44c7-a040-757c27f58226",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "c228a295-f444-43c7-b302-9c79add03450",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 26,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1eb36bf9-c056-48ea-90e9-08225bcd9043",
        "cursor": {
          "ref": "52591cde-d863-4fbb-b275-b1baa62abd58",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "16881fce-14dd-4762-9b8b-c79d3abfdba3"
        },
        "item": {
          "id": "1eb36bf9-c056-48ea-90e9-08225bcd9043",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "fa8a66d4-d45a-4f39-8825-ef0bccb40c20",
          "status": "OK",
          "code": 200,
          "responseTime": 128,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "51c12d06-ac11-41e2-8794-a5ec2de5ffa2",
        "cursor": {
          "ref": "10b581d1-3c13-419a-876e-a0002da85fb6",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "7d5cb6f2-742c-40e6-afb3-dc5e53ad0a95"
        },
        "item": {
          "id": "51c12d06-ac11-41e2-8794-a5ec2de5ffa2",
          "name": "credentials_verify"
        },
        "response": {
          "id": "be6c6d0a-dd12-415b-8a1f-cc5a4f4186c7",
          "status": "OK",
          "code": 200,
          "responseTime": 117,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "a35f9034-e643-4ba8-98c5-5c0469a7964a",
        "cursor": {
          "ref": "b8af62e0-2599-4683-845f-636c8254e504",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "29f874f1-d1f1-47a3-b445-da85f400e022"
        },
        "item": {
          "id": "a35f9034-e643-4ba8-98c5-5c0469a7964a",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "d6d81ac8-48ff-497a-a962-0da3a203a54c",
          "status": "OK",
          "code": 200,
          "responseTime": 169,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "eef07fae-9f92-415c-ab7a-cb6876ab97e8",
        "cursor": {
          "ref": "2610f0a3-de5d-4e5a-916d-a713cde9ebf5",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "32d9317a-4fed-4cd3-964b-9fe9737b9700"
        },
        "item": {
          "id": "eef07fae-9f92-415c-ab7a-cb6876ab97e8",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "625e2c2d-8a8e-45bf-9606-ea1c34c84a49",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 26,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eef07fae-9f92-415c-ab7a-cb6876ab97e8",
        "cursor": {
          "ref": "2610f0a3-de5d-4e5a-916d-a713cde9ebf5",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "32d9317a-4fed-4cd3-964b-9fe9737b9700"
        },
        "item": {
          "id": "eef07fae-9f92-415c-ab7a-cb6876ab97e8",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "625e2c2d-8a8e-45bf-9606-ea1c34c84a49",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 26,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "915ca03b-7914-433f-addc-5b08f4809aec",
        "cursor": {
          "ref": "006c18f6-7877-4840-bee7-06609c01572d",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "21893fea-9cab-440c-83ac-2ab576110961"
        },
        "item": {
          "id": "915ca03b-7914-433f-addc-5b08f4809aec",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "4cc5518a-517e-4d9b-808b-68bb0a843cd9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 26,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45ca6fa2-81a4-459f-a6bf-dc02499f85e0",
        "cursor": {
          "ref": "40367592-3d4f-4078-9939-ee6eeceb2a39",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "b5c7f4aa-b9b1-4cad-a95e-091f40550408"
        },
        "item": {
          "id": "45ca6fa2-81a4-459f-a6bf-dc02499f85e0",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "e682ab52-aac7-4bef-8a4e-93d23bf69b50",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 26,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}