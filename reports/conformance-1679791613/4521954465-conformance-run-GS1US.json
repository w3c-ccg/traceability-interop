{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "4274ec6a-7452-4693-9d3d-1750bd0b1027",
        "name": "Clear Cache",
        "item": [
          {
            "id": "8c483d98-a88b-4a60-82f6-8aefc0b52489",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "92431c7b-61eb-49ca-bcc9-08839ed6ee06",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "24d27131-2e79-4d60-9811-1425f043ae9a"
                }
              }
            ]
          },
          {
            "id": "ffc8dca9-d516-4117-878b-d603a0dc6a3a",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f0308095-c6d6-4e98-a2b5-e9b4e27838d0",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "6334b58c-c3b4-4a23-a568-c76ddd8ada18"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "acd1086c-ded0-4660-a0f7-2e46f7b38538",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "5d510c1d-ef66-499d-86e9-0b850da2a536",
            "name": "Positive Testing",
            "item": [
              {
                "id": "816fd254-5b0b-4a7d-b969-e3affbc4412f",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f616f4ab-3b0f-4fc7-9d8d-5deab1e56575",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c43bd24e-5037-40aa-8014-31d4cddb8da7"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c8a7f60f-49cc-46f7-afbd-bc5f2d982a76",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "df7c383f-f9d7-4e3a-b7a3-885bef5c5959"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "b815860a-cc93-4ee1-932a-8745a3cc2d19",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3d7cd363-a748-4dae-88bb-d2b7b27646f6"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "def323be-3c91-4513-80cd-7c0fda7b8b1f",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "38ca6c23-c6b1-4334-8522-dabe70624f43"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cecb60a5-355d-4942-9cdb-500ff67bc713",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "376907a6-25d8-4034-9a6c-8e7d6ecaaae2"
            }
          }
        ]
      },
      {
        "id": "d65de829-7e1c-47ec-8e41-ae4aa3e6312c",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "3456f93b-3b46-4029-96f6-7de8ee8d0e12",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4ee2c07e-30b9-4de3-bbb9-b7e15372c386",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "588e48da-1994-4f01-8500-63aab6297e65",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdcc58fa-12b6-437c-854e-f15162f3c234",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "453f0dfe-2c83-4f4c-b5dd-777fe7942638"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e02b508-15c3-4a6d-b714-b9b4e3e37b4a",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb762469-99a0-407e-981d-ba2d11b69a8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "334e7764-548b-44f3-8a2b-5d29ebb0780d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43a9e6ec-065e-4c13-a102-bea85b67869e",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2a1c107-3a01-46e5-b7e1-cd42d2adb109",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "795383b8-e8ef-440e-bf16-09aadee1fe56"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "3c50986f-d5e2-4529-aaa3-50cb09ea0ccd",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c5265a66-6624-4441-9bc1-c2996f8be5a1",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "add1f6b3-08dc-4764-9a66-81894a320294",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ecfd6af6-fcb3-4742-87bb-800d4e15aa50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a5a6850-4a83-48a9-9ce4-0cdbe932aff3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7dc678db-1deb-44fb-bf0a-c737f0b4f32d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "347badf0-6b3b-4df7-b5af-10e42b07e7e7",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5818ce2-a9d1-4485-8852-bed8f6780ae7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8d8e9590-8ebf-4e90-946c-f6606871322f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56c9e5c2-f9bb-4b9b-afc3-5338cd03bbb6",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "e887a42d-f85a-4272-9288-535f3de181bd"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "92d9e767-4430-4bc7-9872-68e6e228e157",
            "name": "Positive Testing",
            "item": [
              {
                "id": "02f67189-a0dc-45fa-b457-812bd163bcbf",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f6e769f4-3dd8-4486-9a11-12037cb373b1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "436df77e-0478-4a61-bd0c-7e64c6fb1d0f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b24e431d-8d38-42ba-acb1-44eb5ec829e1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "d84fb323-a6a5-4cef-b125-6a6792905599"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "59142096-c909-40b0-a1f4-68a8113bf82c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "77a36478-0c76-40c5-a7b6-7ea5b20d2362"
            }
          }
        ]
      },
      {
        "id": "86463ae0-cda8-4152-a794-397f387025c7",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "d78172a2-0585-4d36-ae71-850f8438fc0f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1b55d639-5db9-44fd-bc99-aeb7db558a52",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "31e81d1f-dc44-4f22-8c59-4687247cc75b",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "352ba286-ac42-4687-85ce-ebea065d037d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5956d2f-cfe0-4f9e-b383-808874d091fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6399e533-2d34-493f-9cbf-aefd54ba1199",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0f1520b7-2a97-4165-9bde-b518cefd46b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b89079c3-fcb4-4b38-b0be-f0b2d7bb542f",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a3590db-81e6-45f7-8412-d1b63ce4eedf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36860072-cb2d-45ef-81ce-89ba101869d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f79ee90-0d40-4eb5-8bb2-2bf76ef5f3ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cbb112c6-7ac5-4488-a79d-e085e10dd7b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a817bbf-1b22-4457-81db-20ac92cbe94d",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a448323-959e-411f-8007-70f396eef142",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48fe01b2-e0cf-4830-9fc9-a6c7fcd8e54d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84dba0f5-b41a-4e8a-9120-a8a9b6362a11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a5378cae-1f88-4de5-993f-a627cb710a53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9efb75a0-4782-41dd-a92a-93386f58f619",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f8eba31-5265-48ec-bc3e-2564a2b1e657",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab664958-3eb4-42d7-b873-d28e6e63b3da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc6ed89a-3ceb-428a-a536-4e4f833c2e58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c7155ade-0928-4ad0-9d78-bdde14c786ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2326457-bc4c-4ed7-af52-e036346aa7bc",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3947b644-0a5f-42a5-8f9a-bea9c611565c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "420e9064-e104-4ede-a801-129caa573dc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fabff78d-7172-495a-af18-8ca09e067445",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "35d42405-70dd-4dee-817f-ff1a15e023b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa67ab4a-788a-433a-b38c-ed4fb2b24f2b",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4112c29-1e40-422f-83a2-2c6b3f8c4baa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f6021bf-f1e1-47d2-b2da-fd5de197c951"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4352b1e0-310f-471d-b648-0db9bf2e2f26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4916dc08-a854-4805-9944-ada5f5aa210b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "165009c6-35b0-439f-a729-4e5803059453",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "065b0b8f-806a-4080-a6a1-6ebb2ccf9413",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9316d3a6-8518-4bdb-89f8-f8a528322d85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99dd2fca-5035-4cc3-a5f5-9057dfb9e324",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "88295d01-46e4-4531-9b0e-f83ba332f860"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1b1fd64-32d9-43ea-ad86-89abc478ee56",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbed94cb-82b7-4d96-ace3-8d864431def0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c9bd810-ab99-4864-89cd-518c286066a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21c62b9c-58b6-4085-bab9-72dcefd5a99c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "796920a6-71af-4cfd-8eff-d3727e9653c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6ce7269-7f58-4b4f-be98-44a3d8e1c124",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0db8410-c693-4c1f-9987-d4588a4b8b57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0dfd1408-04cb-4ded-ad96-e2e6abcb495d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5a2be01-ab1f-4b6f-9dff-1214ad095644",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "169d39d7-8cc4-44cf-a74b-f04cdd3ebaf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6decddf7-2be8-4078-acdb-4bee246e096b",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c2daef8-a373-4843-8a3d-f67054aaaa6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4cbc236e-7773-4206-bdb9-f953f15e4e20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af86286a-a28a-41df-9dcf-cff71b7120d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5b1dbe03-b10c-4f27-b56b-1c0d4480dd6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "374a824c-41eb-4791-a068-53c40f333f9e",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d4e7aea-e2ae-4d52-93cb-cc9598a88b45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09004881-e5ab-4ba7-846c-59f62939a9f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40546e78-99fc-4a00-8671-d3858c1c571e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "68b7d535-de06-4549-adc5-351ec7c292ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cb5f8bd-1af3-4fbb-beb7-2cd206969970",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a0c45a4-7218-4231-865b-69137b0b639a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37d77dee-63fb-49c0-bd7e-5b67945d03fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd1657c4-f736-4bd0-84fd-82d70b7e18cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b381fe4b-f8f7-466c-af7d-e3b610072acc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cbdc6f4-20fa-4e1c-9c26-510f3c77c95d",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea66d9ce-99bc-4352-9fc8-14dc7c1e0f40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ff4c82b-d8a1-44d0-89d4-dc498f1ed568"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0eae1979-1f4a-4416-a55c-6e2969698bbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0658fa81-9890-4925-ac91-5738601d57b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bc1433d-bd44-4740-8d08-125565a462d8",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6b1104d-a4d6-4a6b-853d-9c5bb4ac99a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1f38ce4-03ce-443d-82a9-8712e9f8ddb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "446f689f-27f5-4453-ba33-0ffc9defadc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "26e54a79-3301-4521-a599-62654ba8a394"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dcb4315-d501-4775-b292-bd885aeba900",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c15fd31-7be0-4513-bd3a-e37fecd6c13e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ace7ee7e-22c6-4fdf-ba43-bb2ba429867f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6b8402a-0b97-4061-bf7b-6b6e8e1939c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ed9373c1-6f42-4ec1-ada5-65e462a030a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "929cca8e-4e7e-484a-a4b0-095be03ca262",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af4b5270-0de3-413a-855c-e541c9afa467",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0fb8420-f897-41a2-bad6-b0c293f97504"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bd847a3-ddc7-4daf-bd9f-b9a008313b05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "694fb060-9ff6-4a5c-883b-272ecf984f24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2fbecb3-a271-4eb3-a928-41655e2abae0",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f63ac6ec-b385-4f7e-916d-dbddd7cf8940",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a78aada3-6231-4be3-9b46-1c6f248072bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a75248b-2198-468e-bdcf-6502a4bfb15b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5e96a7fb-e431-4b58-8bd6-39826a91ee42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f12b3a5f-539c-4512-966a-98a2535cf31d",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00f39bb9-c0e7-41ad-a36a-f914f6b68275",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21f7cc23-0ed7-4676-b851-9c47128d7748"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "936b4264-9000-46fd-a5f2-0d0a19fbaa07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "0c09beed-3dce-43f0-b71d-3d41add955ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34e4d60f-fee6-44c1-9c11-c2ed42fc1260",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d78cdbc8-16a0-491d-8d7b-32b0d6a27fb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78b70bdd-d47d-4398-bdc1-3db70bd8d692"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb521994-fe2b-46c6-896c-62117dd61f8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d6b1cf34-f326-41d6-a750-b285bde2d2b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "140e95ae-6444-4369-8c77-5f1892b07791",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "622904bf-79c6-4ea4-859a-f356a7f82d74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "292b64c8-d11e-414d-aee6-ccebd5fb99b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdf0695b-b00e-4ac1-ad59-f19b0a010761",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "09772bcb-1e92-4ee8-90af-b616b54eb736"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d597e29-3497-4814-ba0d-2b329cd14820",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22259c2c-93de-48c9-a640-3b725de79ed5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48236ee4-e6ef-4a20-ae18-b5d7d58c75c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8345eae9-6122-4445-8cab-34f95834aca8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cfe5d06c-77b3-4e21-8143-9bcda73fefd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "791e0240-d151-4cc6-be5e-b89348867059",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b98e4fc0-c426-4829-ab9f-329f7a567421",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2ad984d-b514-47bd-bf0d-d648594c0587"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92b0b627-f3ec-496b-8448-679216c2ecfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4d8814ad-445b-473a-992c-1872427d6f72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "939358a9-2526-4a81-960b-2f9c2f49a821",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca182765-14d9-4431-a6ea-ccb89a778897",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebd10fea-5745-4cd3-a1bf-085c9eb7eb0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa9e261d-2001-4277-9a03-17ef0ab7cf03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "72a7c700-b697-44f3-921f-1ad62ad4edc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "109ce909-1725-4b6c-b6e6-ebf85e53bd86",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "031ffe6e-49db-4b84-b9c7-ffeb1eb8db3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a9a90db-1cfd-4d0f-b885-912c4e1a2790"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dd09f03-2be7-465c-b1bc-af956b28ff8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "3709266c-e683-4925-b00a-63f6bcab1c07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0678da5-b18a-4237-ad09-e2380c8806ad",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be804082-6d34-477f-97c5-265cbb5f0e99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c406f1e-3f6c-4fe6-9a04-e6b95f2cde7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e0c3978-f39e-4b99-bd1a-009bacc42e03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0f478dc9-379a-42dc-839b-4606e8b748cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06307375-3fb5-415f-9c5a-03c92821400a",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa4f3dcd-1b01-4af5-9529-570475d5e62c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1e1de85-f117-4570-9f49-fb9c12b53fbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac257088-6fff-43c4-b0f1-078f43df5d65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "fcb562ea-0904-4da4-a760-14e9439fcec1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93b85768-7779-4cf3-bce1-ffb7c28da5d8",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "846f1933-90d8-4192-8667-444686e54e9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b67127ab-26eb-453e-995d-3a9d10dac07c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "291715ed-fb0b-486c-80f6-d79a98ec4c2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8d0eda77-6099-421f-8239-e3e89ca9afc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "174970c4-0866-4f0d-b7c8-b3ab3d975901",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3def8602-0020-42b8-92b4-6a26e5143101",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f429de83-aa1c-45c5-bc8e-e3cbbdc7d9c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "432b5b25-1e3f-4d30-93a1-f0a65933b28b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2feb8caf-c2ab-46fb-b833-0f3ba0f481ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fded5d1-ea2b-4b21-9891-14f42b0fe44a",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33d54d8f-e578-460e-8b7a-7e4bff62bb07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcdce4ef-9d02-413c-b265-bacbe924c6b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "280bcdf4-ab72-4256-9bfc-7788633db6ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "215f043c-d963-4e20-be7b-f09afe46b135"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b06bd4e7-9c67-479f-8723-0e86d51149f7",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcd179bc-56bb-4a63-9571-323e2aeaf129",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75c5e9d3-2c50-4120-937a-6e86eed88fc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7c4a475-d7dd-4bda-ad8b-a127a6206fd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "7a658e0d-7a68-4b6e-95da-a770c322b27f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d894a20-8eae-428a-bd2c-364d744108a6",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9412fe1-da3d-4561-87aa-e7468d0d7e31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76bdb874-c02f-4e63-821f-1fc13eb146c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82731fc5-dc33-420a-bf13-bed623b3d7ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "19adb2b1-5eb8-43b6-b487-e51166afc2b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17e235c3-4ac2-476f-ad83-5e11c508d20e",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b6c535f-dcdd-4e10-bf7a-a55858873a0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a7a06d8-6e42-46b2-883a-89da98dd57ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2bdd4bc-39ea-4878-94a7-c2bd62f6adeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c3c0153d-68fa-44a8-bd1c-f5d08e5b13d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5f196da-b346-4a85-81ef-27911ca10965",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73be4a2c-215e-4ee2-b95c-856fcd090307",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0871f5ee-ed0f-41ec-b580-b22a5201e12f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b107fa0-e72b-4327-946e-1a90d3c6e1d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3a2fb37a-6708-4aac-abeb-42c4b972cd33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b56f55c-fa29-43d9-87e5-1da57a49eb11",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd2e8c28-6129-42d0-94c3-8233ade69e09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4ad2394-2c6b-414b-9c74-c181de9527e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02215208-9509-4e04-aede-78a4dde0a620",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8997f8c4-b761-4455-9b6d-944d9216053d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "875cdcf2-db71-40ba-b037-4f728a797e31",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a90ef86-bd9e-42a2-83ca-ba9add060226",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1ddb961-c891-440f-b7d0-e1d89b34fbe8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50d137d7-1ae0-4973-b93d-bb49be26706e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "48a30246-48ba-4a42-a6b4-f09196d7cd03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f417636c-15d3-40d5-8c38-9f053450b2a7",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79873abf-24b7-41ea-b34e-6fde301807cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e677f00f-1293-47de-b57e-4c0368f54675"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b9668fc-821a-400e-be74-ab914b022a77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "88909f92-ebe4-4eb0-a9da-173f5830276b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9871fb23-124f-4cb2-8424-21e5455ab79d",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3af6b086-9238-4ee3-a715-13d6995d56fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d45c10ef-059d-4ed9-9985-f41e152f2771"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0769e069-8bb4-499e-8112-4a5972998902",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9b554a9e-e007-47f5-9b22-ac5bfa5699a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "202dd6e3-9df8-491f-b6c2-8fdbd1495238",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7f7e29f-66ec-409a-9c87-4bb755a62424",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79239dbc-6f25-4e2a-b51a-4f4a42de5238"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad8fadff-c9c8-4276-bf2b-f6b7cf71618f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "6fe67b2a-9ddd-4211-8d75-8d96025d2156"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99aa2cb7-6404-48da-b22a-c8e27a8c1980",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7a72592-a169-4dd8-bbc3-bfe0eec9e0db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc6c6518-8b6d-47ca-bf3e-bbbd36ab5198"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58b9e3cd-d9b4-4da4-9161-f12e3f7f256c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "d03f44e2-c640-4f5b-b8c9-de828c89fad8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7bdc1d1-f814-4efd-b347-aa69217ac1e4",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0584ec6-b42a-46c5-b62a-4fc7c1be923e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec4935b8-5482-40da-888d-12fb4b5a5e76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3be97c95-13c6-4034-bada-be1ec45eb0f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "2ca09eb9-a23a-4170-929a-6c31e8c4fc1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5404f51a-0292-4562-ad9c-0f2fdf5e7576",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db0924e3-d91f-413f-ad91-ea4df9fc66e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fbb598d-d4c3-4c04-9ceb-fa81e56b413f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bf9aa04-095e-45e8-8d2e-f689936e735d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a09228e5-669e-427b-8d0c-b3837c15a199"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25384ee1-1fdc-44f8-bdca-6f58a4beb85e",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c01516b-80c7-4443-8844-bb2857d0a7f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a661c080-d7ab-42a6-bd2a-f3bc351abbf1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b2eef08-a7ac-48f3-ab00-7020fe02a21c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "c0734a36-d8f0-4f18-a389-7150bbf24b3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cf5d1d5-c665-42fa-8754-df8433f4118c",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a57a94d-f080-48fb-bfe1-9d92f02e2471",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b04811f6-598e-4271-b1b9-cc7ff4001176"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82fb21d6-ba3f-4c9e-bcf4-6109b8fc2912",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "09cbde9b-30d7-4e51-b09f-3192f4c3ee82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e74f2f2-2b22-4342-ab09-47fc80f4004d",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f11c74b7-1735-4a72-877b-33703abb2da7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88a99831-7043-4b88-b247-af2bf8fb3bf3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3699ff59-1b8b-4a29-acb6-9f3dee485126",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "fe3a38d6-f38f-404c-b914-a8574357d8fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89214dd9-218b-4a9d-8b65-d933e48ca2a4",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9201264-253b-4367-ac50-8df9361a8863",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "483fc00a-5bd9-4870-bfc4-a75e60d094e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b20a2f1-8e64-483d-ba80-06cdbefc2f0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8ffa0e29-cdc9-434a-addb-93492b541480"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d34aae3-032e-4f85-9d1f-22af434cb3fb",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63ffd9fc-c439-4cd5-a71e-0721cfbeb3a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35843b96-9b38-49d4-b6ef-a2c73a719a95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05950d3c-6516-441c-bcb7-b2c00c07aa96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0c898e57-043b-4f88-962b-971550001d38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25e22cf1-86d3-456b-8d11-15041d59b77f",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcb1e236-b610-4201-92af-46dd3e0d0989",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fada359-5df4-4004-aabd-59dd968c64cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dde0c7ea-f6ef-4845-bdb7-2e62759022a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cf7ab3fa-0f53-4fb0-8e81-e608face4b0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d1eda61-3783-4015-8593-7661364cf100",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "838cf75f-c4cc-4660-a714-67a71a9f59c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfb1954c-66c4-4b25-8506-7acfc67d9dce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a81accf6-22fc-4acb-b7a4-139e491d4ad6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f36725cc-5d3a-455a-951c-fa17e21f28fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f55ebfd-dc2b-4b71-a731-7a42417b2a52",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93178ade-5e28-4299-8ad7-debbf51e1982",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae8cea80-a54b-4b9a-806c-6c27e5150979"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c552e91e-cc41-41a2-831e-133fc644921c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6475cb04-c69e-4c3e-8e2a-bf20fa726f10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5ea52a7-6750-4969-bbcf-6da94520d60c",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf773de6-8c4f-4052-8061-7993a56f9de8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d8441ab-402c-4b90-9d5e-064187308bdb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c71a8baa-ceca-4fc5-bbbc-b657523dc2a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7d5dd3a9-8409-4519-8bf0-e6f3dd263b69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19b49740-3d95-4960-a86b-e49d76bbb7bd",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "312d1a55-ca83-43d0-bbf4-168c833620a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27170fb0-2a8d-4644-9819-1eb08726ff0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dc4f926-ac01-453e-a685-2ee6a2b6c6be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "14f57206-6b29-4aed-934a-e9c766a5d3be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fe090f1-68bc-405b-9892-2487076fd4ef",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "227bdc3e-96d8-47f0-97e8-f297d84fec7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9366f06e-c9d6-4d82-b2a5-16694dd299b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a3f93d3-acbb-461a-83ad-169955f6afcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "abf54e3c-73fb-4d47-abc7-aa4e9ccf5396"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1d9c4e2-3c25-40af-9c9f-d396f828763b",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "239fa3f7-2476-44d6-b825-d04860631648",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01172755-b08e-4729-ae58-4a769b8f29c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb6844f7-3ac3-47ca-a5d2-f66a9dac3e4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9acaae3d-10e1-439f-b4db-8b71a9bb94c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a292202-512a-40be-acc8-6052dc338804",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bded6f3-1f4e-4473-939a-697255a83cff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ec6f426-0696-4c48-9e31-6e5761429721"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c6380db-0b5c-4813-901d-05ff7e6b581f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c71e9a67-9e72-4df8-9aef-6a34c5134629"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0b93b37-a5c6-43b2-bbd5-07cbc010ca44",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f67aaa6c-b080-4e76-8a48-c1a431190451",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fbe1760-b908-445e-a8a3-3d2a3ef42610"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "426522f9-dec2-4265-a5fb-d8481fc3f166",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6daa495b-6f84-49f3-9cc4-edf0872faea1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76ce9017-25cf-47d7-8b63-33cb654571be",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "654e886f-30c6-4762-9238-b53dc03865e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68c6fdf4-66fd-459b-aa6e-73ee6fbdf5fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "234a2d19-33f4-47aa-bcdc-78588d3a35fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "baaf9fed-7d91-4f96-881c-a9b822d4fa6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79cd7724-34b0-4502-8e05-0b2a85a13765",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c3cd962-7205-4edd-89b4-550e85e93743",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad844f79-2f5a-4356-a92f-8fe6d7cf7209"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84b85f16-ea6b-46b5-9869-45bf77c719d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "0593f693-50ae-4240-b7fa-8f22b3a12fa3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce8b58a2-f7b5-4be1-b465-5239748fa19a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39e66887-a963-446c-9594-1c779c6658dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bdaefab-f740-4e02-ae85-e6117675ceff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec1ff0f8-79f6-454e-90d1-6e81948edab2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "893e0854-beee-43c9-a14f-20a6e7abae78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc1c85ce-f8b3-4d97-b3d4-939cccf20010",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "127d757f-1911-41ff-b16f-ecb557aaf50f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5bf5ead-f03d-4175-8001-594643cdc70f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51bc5a4c-6e38-4be9-be7d-cff779d31611",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "db3584ff-5913-4aa6-ac24-4a2ae90979da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fa0a256-dd99-4c26-9365-a4a45e6b27b4",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9159f291-96b9-46d3-87bc-2a8866d1bcd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e6bf290-9269-4a6b-b36d-a161b98cb701"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29bb54d7-56e5-422e-b4a0-ded8d0b8a213",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "33f98c72-76a7-43b4-a31b-2d3d78fc0ab1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4000f429-8670-4f26-88f6-e45f21ece395",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8408625a-062c-4edc-816a-950f251a963a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7567d5af-bf9f-4485-af3b-d8a367a288ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c9d6d0e-240d-4163-b4c4-f78f9579b833",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "8095a3a9-605c-4533-8739-1e5571bd540d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb0311e4-70d9-4335-9b5a-022de0abceef",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "529c6e8b-a194-417e-98de-18ee6b5a8e1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da6ab5b1-b1de-48c7-b538-b020c9ca0673"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50cc5523-d098-47a7-967c-d1f72a454583",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "285ab6c9-0c3e-4017-adee-3bbc7c5bb66a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5eff549a-e959-4b53-b7ec-79c0c4caebe2",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bccbc0b-7daa-43b9-b109-3853897ad872",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8e8b045-7b27-434b-aa40-733a32ece548"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e80de90-ebb8-4ff0-bdc5-29c0653ce5c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "6707b776-a133-42fd-84f6-b07c2d99c452"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fee24618-09a9-4c43-be45-c52aabb5af1e",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd378399-d86a-4de8-b054-c3369005e02b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cb08cb0-f76b-43a1-a423-230b333fdb25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5db22cab-13fd-44ed-a341-ebca1ad606b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "50ff94a2-19d0-4912-9f18-86084105582f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb2ff9d2-88e6-4d35-abd3-ed47c23a7335",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80f64a02-b444-4a83-91c0-e083c82f72ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9479ed85-dadf-4931-b7a8-120140d6f967"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f5487f6-b3cb-4360-b67d-c8b1309c82ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "de263f8e-4012-4dff-84eb-9587c382828a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f9a73ea-8411-465a-b38a-8b489637ef50",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1f53f82-2145-4a0a-ae7d-a156c33665b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fae7175-e758-4610-9b78-a4e2bbd145e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51ccae7d-4e1f-4aaf-ae98-27ea4cdd8eae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a81acbc6-1b25-4068-99b5-16a2b191efc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "333979a0-84fd-48a7-a784-fc14b8f0bf75",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "611aa0ae-2723-4801-bfca-688cd578e2c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6af7f635-b609-4b79-8517-487a22eb479e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac1c3f7f-a757-44aa-807e-7846e1f806e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e19f09ee-5fd8-4380-a70c-dee370d06f58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77323dca-61df-49d7-9aba-0c99cef87e6e",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05499964-4b73-4ba9-b305-5e0525e659e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4fb0ecb-8f29-49c3-b26d-12bfcc428cc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54030673-67a6-432f-9981-e7022ab1ad32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "4c9d82a9-6448-41f9-b4b7-57881fa43e97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53469f77-4c41-46eb-8edf-2e5fe8635705",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d2799af-e8bc-44b1-84e7-72f1100fd028",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2dd46f2a-4057-433a-8612-e89702b72d39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fef99b81-c00d-4a02-a4a9-fc91fae61c01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "fc8ea64c-7ff0-4e80-8087-457751b63348"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10cdb766-5e01-4d66-aca9-f0112d41c9a1",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7276e456-95cd-4f09-8ae8-2245c6648c35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff3246e1-82a3-42b9-8b25-235d9fcfa00b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcf69002-2df0-4b50-bb41-3b54f62a9ac6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b262320c-09af-48ae-88dc-26fcf8071c16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91e46687-c3b5-482d-8f34-cd93d96f26f2",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92c2aab6-92ae-4fbc-8e6b-2f07592e5af4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5e6e220-000f-4117-9741-d17cea529b9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa8d38b4-d1f5-4265-8620-5bc1db0dd023",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f82be7cf-3e04-41cf-bee6-8e8fd164cbff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fd360a4-4e65-4968-b187-51b4525e85f5",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6aadb53f-e741-45ab-bf15-233ffb011148",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9fcf628-6e13-439b-8cfc-cc355752943b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "034c53b9-5092-4275-9c96-84dcafc53918",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4357472e-b73d-45b1-aa38-6d662b797ee6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eae7ce55-a2ce-4fa4-8ec0-63115905c5e5",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9bdd6a1-2c32-44e2-a228-f060ace59b88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15d9f781-aa80-4412-a84c-1e2c9c7ca1ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25bb160d-7058-49c0-9645-9c7dd46ba785",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5546206d-1211-49ad-80e3-a03bc2c98d94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce1eb07a-e021-4c2c-b2ef-9c67e1a03cac",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0650aca-c297-40c3-898e-2326011f8121",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f3ee8ff-6ca1-4fb9-a619-0356da1f9fda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2891391d-582d-48c6-b8f7-69f88db6d566",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "700c8dbf-e11a-4f69-96ff-1885103559b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5795a121-4b1b-4877-9558-84afbeaf89ec",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e469476-918d-4821-be6b-30c786a1dc9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ce825e6-dcfb-4892-a443-d18a17911cae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c524c3a-85a1-468d-8d5a-1de77931b5f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1cd9846b-103d-440e-beb7-0959ea024bef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ba4284d-d20a-4104-84bf-e9e024befe82",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "170f3147-9ff7-4047-aab2-bc386e79a435",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e423744-5064-46e2-ac67-23608da2596e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a43da043-c4eb-47b0-a51a-e327c0320127",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4b1e6887-6a7e-4f42-a738-7c3c2a84d81f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fde4b3a3-b679-4147-8e60-452915b4dcf1",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e5e0403-173b-47ca-81b6-b11171dabb67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "143abac8-1e61-4769-968f-296a07a2dfbc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af260e4b-7829-422b-a6e5-807f4992b673",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4bb4411b-4af3-4e72-a997-e31cb9bd510b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a344236b-f0a6-4988-9590-00a86a9a235d",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3943f34-0ed9-40dc-9611-add2cdb70c8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1070a7a0-7c03-4e04-b4fe-c750588450f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec9c99ec-5f1c-47f4-8f25-3c48614ae01a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8ed19257-e217-45e1-92fb-b4ff02546942"
                        }
                      }
                    ]
                  },
                  {
                    "id": "018e0517-c6f7-498e-a97a-8f66bbfc00d8",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2117e154-e028-441a-b08a-7addf4085fec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a5b6a57-2d83-43e5-b534-abf8af2b221d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab60da68-23e3-4a7e-a48b-cb9bf29ca9fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4ed4143d-f92e-4675-b938-63752aeb06c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "919828fe-57c1-47bb-b8ac-5e31530385a9",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f847fa2-bac6-42e8-bb65-f8400ae8947c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf283255-f91f-4c87-a919-e8e1a250e9c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "172ca351-c307-4e06-8186-dbd5e6933994",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1c4464d2-35ab-43c4-8897-814ecce53d72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3fcc6af-f01e-454a-95ec-e6c1f0f09131",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7f74338-35f9-4c79-81b7-0547d227d29e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9448d5da-965f-4214-a7e6-a5274d166fae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35060edf-26b0-4a8b-b7e0-7c0af7646525",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "ef63a296-4b20-4da3-aaf5-b358ce61cc40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c16284a4-2ee8-4e91-9b44-8c1ffca95a86",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "deca1283-bccf-4bd2-8eeb-f846993c6906",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2ad73ab-abf2-47e0-bc2d-e72efab12e19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c245653-2267-4c41-a716-03f09ee0612f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bea3a87b-128b-4dc1-adf5-50bab6ef1c9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3aa2d5bf-bbee-43ea-a84c-9b260f78f9fc",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e225e1a1-e419-4db5-b340-c3dd999b5d7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a8797e9-e1c6-4e99-a11a-b55f6eeb51a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b52b288-cf0f-4099-87f9-654cb22c1984",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "08e5560b-2b7f-46c9-ae9b-f267599e1872"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ed747e5-c998-49c2-b495-eff2fda920c4",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0666eb63-176b-439e-9697-15af416908f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee3f1e1b-e50d-44d4-87bb-b28497c4bae0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa9c6c6f-4602-45ad-b33e-66ac7be8daf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cd3deef5-e620-47bc-a412-bb752b1c12c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "718a57de-120b-4334-a143-bb987a7b36c2",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "393d67c7-6d07-4913-9fbe-6e5cc0641ecc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59bf23d9-045d-46c4-a4fe-726a75610a00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80b8f882-5ec1-48da-832a-da3610f2657e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f0acd7d8-c94b-482f-89af-5f1a32f02097"
                        }
                      }
                    ]
                  },
                  {
                    "id": "947af0c1-6af7-408f-97c2-92a092d76acc",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cca399ad-3cfa-4186-9e05-889dbb0fb7dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f95f9cb-c1c1-40de-9211-592c93b732c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b4dda07-d6ae-408f-ba6b-487fe7555033",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0b72ce9b-5501-4f8d-8ae8-4f4ed216e989"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49c247a4-cc7a-49b9-af15-5f32e9ac8224",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "006e8056-99a2-4733-ab1b-17d0461156e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4145c57b-8887-4e01-8f58-51070c321d55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2ba7ab8-49e0-4fc3-ab63-c289fa651d6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "a409f03d-b7d4-45db-90ad-a72a66812eb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "810ca5af-be39-42db-87c3-c51f82eecf4f",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cab33d80-9d4c-4aa1-80fe-dce000240d2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1950ad5c-24f0-49ab-bb80-407a39f4c28c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3351670-26c5-4ad8-81c4-aa00f99e626d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "fdb26b97-0e87-42e1-80af-c84a831a7a3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "461a9e81-b14f-4f5c-bd50-726ae0ad548c",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c9062c7-e715-48a5-a4a8-002b9ce709f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "858468b6-77fd-44ad-a3c6-35240c18ac71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0a121f7-2fa9-429f-98e4-a31672134377",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "6339f821-b7a7-4cdf-b47f-6a72dac6bb2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4eb7f301-9324-425a-a527-de76305df4a1",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e5d469b-6d10-4c00-a6c6-2878d2b62aef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "777d777d-5a89-4bad-b90e-ee4c6a533b5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "194c7547-c9e7-41b4-a4c2-71213edcac82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "9a97032d-86da-46eb-8fec-ca3241756927"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd73f44c-bf25-4fb2-a76f-adf65072218d",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92463031-369c-4713-acaf-cb9f7a92cc11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5431e601-b0b8-46ba-8e3c-f3999bb3263e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b08becd0-2211-48e5-974a-b0ca5297f3b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "67c47f60-b5ba-4908-a497-91ee27b071cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc4ab92f-bb50-4d28-b789-b362506a32c2",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e75b8ef9-6827-4dc8-af1a-bfd1123dd129",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "89c99786-f850-4bf8-a1c6-7888d7b4dba6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f28e3ee-dc5f-4d3d-8b71-d6a5e34ae301",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "b66678b0-aa34-40ad-8b9c-5793edb10609"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "958a1a68-fded-4f4f-8697-c7fc28f61f9f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4bec262e-a478-43f5-8b7b-d4f380b47229",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5feb1d98-8b80-4e0c-a8b4-7efbd2f98366",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0d7b5901-3bdf-4cd9-9fe9-74fb8e7295ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c474c92-8deb-4a56-832c-a9711b00a046",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9537a376-3e37-4e63-a362-9441242cd634"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fb6bb2c-4cac-4609-9b54-13574caee387",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d280d9d9-6738-47d3-a862-e7c30508286a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "663cad91-fd3b-4d6c-a20d-6ecefd591e80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6516be16-1bf6-42c2-afc1-36e7351b2533",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5cd85bd6-55d4-4265-80c6-cbf3bb120c71"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4d0d75e2-34a1-4337-b804-0015b8bb62b4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bf731396-5256-4517-af78-dcc8e85d6b33"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e04e5e4b-c79d-48a1-bd7b-720678826e80",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b5564ef8-f891-4ec0-b31d-d48f89953801"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "987695aa-c094-44de-9a49-2ca8e6acf9b5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6de8a352-c9cd-45f3-813a-2c093baddbe1"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a3a228e8-3abf-4951-b577-3a85f2c83120",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6c227920-b6ab-483b-85b9-ccd184ac5ab5"
                }
              }
            ]
          },
          {
            "id": "63c0ee98-840c-41af-b927-3f4c950f9b96",
            "name": "Positive Testing",
            "item": [
              {
                "id": "79e8f291-2973-4790-90e9-0b7c160f1ccb",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "93bac162-2d1d-47fd-8f55-f847684b9013",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5a802cf3-1419-41d0-a6aa-42ea1b1950d9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f94e4ab7-0a35-4bbe-a9a6-b25396a91429",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f901f4e7-9759-4695-a44f-5067290d054f"
                    }
                  }
                ]
              },
              {
                "id": "d2deea5c-382a-4420-868f-5ba3cd4cf2a2",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ef50d9e7-5a5a-4f8c-9fc3-d62264f2129e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "446f698c-5bed-4e6d-852c-9af4e2a655d5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d4f5f5ac-5650-4012-a163-b456f330fc18",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "690cccbf-c236-469f-b965-4d48c09bf843"
                    }
                  }
                ]
              },
              {
                "id": "7ee7182a-c51e-44d0-9765-72c5ad8322da",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "18bd6c2d-ec22-40ca-bcdc-9dc76293c1e8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2a02eb3c-cb72-48b4-a794-9c36be3c1f61"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7f9cf62f-f72d-483b-a08b-e588a6b45e80",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "0fabfaf7-99eb-41a6-a223-20b6ed26041f"
                    }
                  }
                ]
              },
              {
                "id": "d1556d73-7e53-4241-95ca-3627c6aacf6c",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "21af939e-c0b7-4950-af30-c67b4ea76cd7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f84cb3ff-775b-4c36-8ce9-0a3c947bcc08"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "368a658a-0b18-4cb5-9a91-ead0e01153fc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "dfb1f3c6-85af-4c72-88ac-ecf889cff063"
                    }
                  }
                ]
              },
              {
                "id": "97c2caa5-2e80-450a-9e24-e268a368ca48",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fa4a4bcd-0091-4607-9254-f45641ad10b1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fbf9dec0-82d9-4034-a107-a48bbe41f885"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a0d99a82-6e30-40f4-b36f-d5527ec39937",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "f9b7d5c6-5a77-4c75-a006-375c3a7cc7e2"
                    }
                  }
                ]
              },
              {
                "id": "baab102a-11e9-4f75-a598-4f6137994c5c",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9e7ee074-c595-496f-8e75-b8a1bac1008c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9afc0871-e393-4e54-85a8-e7b1671e9cbc"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fc51d4d2-2444-47dd-a889-b1b2ea2dafb1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "4d3dd674-2cd4-4af9-b59a-9725500f0008"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "13694eb8-f865-4bed-98ea-fcb947f16701",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "fd2f9126-754c-4997-b76a-23522e12ce70"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e47d73f0-0711-4efe-b903-c563b5ed018e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "bb52f6c3-3a3b-42cd-b84c-191ce81e6f0d"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8d52d679-9a98-42a0-9322-8e64fef0489d",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "c1fcb88d-0967-4e05-9733-3099e6ae8031"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9168355f-ae88-4302-aeef-12bee861b444",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "10ca4e78-2e5d-4a6d-88b0-ec111f9ed057"
            }
          }
        ]
      },
      {
        "id": "e76ac978-c5fb-4b63-9244-b92a939f7fa9",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "453d6285-3002-4732-a37d-bffc6604a9c5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b995bc02-84e6-4325-9811-f116d56d0e31",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "c078eee3-e329-4fe0-bab2-9dd88a0af779",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f69513f0-863b-4b28-ba38-d73e9842eea3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3e8960d-e7da-40d5-af3f-cfdce7fc4b40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da6d68f1-1928-488c-b736-f56a60bf5b1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "5fbb03db-41fb-4d96-be6d-c86cd39afa7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5680ab61-0bb7-464b-aa4e-1b27b70165b0",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b7c3860-3907-4259-b5ab-eaf98778d9f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7d2d222-1e0b-4ed5-92fc-68d4c92f9618"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fb67d89-dac2-4c9f-83f3-21b3c3810fd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "be94168c-4d9d-4fcc-9ff8-cc8a07c2f818"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d670bd0-de43-4140-8079-29dde8b66bc2",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77680e7f-77cd-4e26-9847-02861eaca501",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "050fbc1a-05de-4e59-85c8-4d0f9129cb75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73f9d139-ce4c-43c6-8cc5-e8e55a080944",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0b42a4b3-b8cc-471d-a7c7-92325e57761f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6f52d8b-f0d7-4b72-a657-041cbee612c9",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c6be775-6a70-4e90-819d-1448585a2298",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6971f54-4d5e-4ee2-92b6-18ceffbef9d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cdbe69e-fa7b-492e-bdbc-6a5a5650ca34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2e9d2dd7-5c09-4519-a24f-d80302ac4655"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67aca1c1-9836-48aa-b6ea-d9b536b49573",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc746962-a110-44f4-b279-bc4876f014ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c55c03c-3117-4693-9b70-c1e8d33c7ba5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d126c4c3-5848-4bc3-b5ee-8e8d479656db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "48c44708-f960-42e6-9159-71aad3b13d09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6da3c09a-dadb-49c4-9cdb-be5900750f20",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b02ba74-28b5-42b6-b952-b256a4975c4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0a1fede-fc6a-44a9-934b-8691f9194bf5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68f96433-96e3-4f4f-85a2-7236ede2efa1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "76fe6bf6-48d2-41e2-b99c-8f0dfb854f23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dde3587f-5f02-42ba-a620-22ec757ea3b1",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b722b7e-e8d2-49d9-a993-67b6f299be4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fe01f05-c9bf-49fd-899c-66a9047953db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bb7ddc3-c32f-447f-a498-fab3e9e7dbda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "43723168-0be8-49ea-a0af-5dad4d079dc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2932e3e8-0594-4bed-a64c-8bccd18c9bb1",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f64a202b-6b44-45ef-b5d2-408d5906bcc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f999f89-5cfb-49ce-98be-2bf8ce0f05da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "498d52cf-98ed-4fd3-b792-333287417af7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "99d05037-f790-4b57-ad29-db9028f85f79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c6d94bb-f704-4409-a136-7888d969656f",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17526813-d805-4543-aca7-90967108b75b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6e9c04f-a258-48dd-b136-553758bc4808"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ec77964-db8a-4305-a476-26f23225dea4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0a0d5be5-bd4f-4453-b90f-a00bfc7be6c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3813760-0390-4b85-a185-f367cab929e2",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f72ec06a-732d-42b4-886c-72df8cab3f6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0abefa5-ffc2-45eb-9e56-0d00bff5a9e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b28e4371-83fa-4ce5-b220-eae9aacdde9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2f7ad560-1022-4478-9284-9f2a50063f17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6232b17e-9486-49de-84d5-ba642b23565a",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db8ae92f-2cf9-4b51-bcac-c3cd3b4dae64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a982f82-7d83-478e-a1fe-708e798a431f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b55457ac-65ef-4201-b85b-48aba932fd1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "d57ef897-a795-474f-840c-35b8eb2ad98f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a35d0a6-da0d-49c0-bbca-e793beb81ff9",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb64f47a-99cf-4bf6-ac04-65fbfae7d35a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a432f6f-c673-49de-897f-7b15593e4778"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "531fce6a-b59f-487c-bfec-0451a4055731",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "53e7d738-8fee-4858-9916-f95b770be84d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6adcc5db-a215-4a7c-bd03-074d610a8233",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd5ed8ec-eba1-4fb5-9614-1ba715aa26e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c0b2251-0327-4d57-9e94-21ee2aae82f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45fcbf4c-5587-4fb4-980f-0a5a055c198d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d318baa9-05a8-4cbc-8764-b9eadc269347"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0663aa11-69f6-49e5-8ae8-1a0184eff1b1",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1908c6d-8a1c-49f2-9a7a-c87d7c50b736",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd0d1421-fccc-4549-ac81-f12d87a585e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65bea7b6-84bb-4c45-9b25-647490ba227e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "fe21ba26-36f0-40cf-8016-be2964c62f2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aab5b740-1956-41d8-a11e-012e1bae4195",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e01047a-bcd0-41fa-8f80-2c3775350a15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a6f7037-8330-4e35-a67a-83240ed146ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c705e0b3-66a0-4dce-bc98-7f30afcc608a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "0585bb51-fb0f-48eb-960b-18a12a1db980"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1da3532-565d-4cec-a374-d6dc3fd1385a",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e55ef8ec-46b8-4912-96ef-6d2f366c9da7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17858537-34f0-4a45-978a-d9852a52fa93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "993ecbe6-ddad-4727-b02c-21ec5fdb3e25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "d0f079f1-19d4-4180-911b-a4234b39218d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "278ffaa0-e47d-47c2-aa6e-3a4f1278d86a",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22eef14c-a10c-4bba-9174-d79240ab93cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e0e584e-6e14-4ba7-8102-7d6e321b8a86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5c80b32-5be6-4218-a99f-96f695b87779",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "5ad43870-c6c5-487a-9cb5-db258c11177b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1ac657c-1e04-4959-aaf9-b43f48962ce2",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d0685b3-cc09-417d-b207-57f718b0a370",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82e4d28c-9ddc-44b0-abbc-96b9408506bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7692251-a9f2-47c0-9330-272d6d2b9c09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "44f01dbe-7f13-4a0c-8923-3dfcc53ad24b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1642c70a-dc46-45fe-bf65-46160b481cd7",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e60ca590-09ca-4a6b-bd2a-62c6ea8bf73f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7caa5b0-4faf-43f5-b1d7-069e57e1d0b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94a7267d-8aa1-4f48-8eed-67a1303e8425",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "62acc853-335a-4313-95df-91a8213758db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e769e348-74d7-4ccd-a733-35dbc09be643",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e1a8502-d026-4bd7-969c-3a53e54fe6ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "805607cf-655b-4082-996b-f8c50f5bcc70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c438213-c9a0-421b-a89f-204c6c9bac65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "056db354-71f3-4b80-88a7-6879574ec267"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4260254-12cd-48dc-bd79-57e7a2933596",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8b1800e-9ea9-4bc2-91f8-30e5a1f7928f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdced23a-e08c-40fc-8a75-5a1673a6513c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24b99fbc-74a1-4600-a51d-67c91a6b1a3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "564a4885-eb32-4a60-9833-565a64ecaff5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8513395b-17f2-454c-bc73-d5dd746af746",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fcf2bd6-7f09-4a2e-b343-3349694b692b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "235521c7-bde3-46c1-8128-73c479dd4038"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aec0ca0a-716e-4db1-8681-cb90bcf0f967",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "004eda98-108d-4e3f-976b-d24409af5d95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0efd7a9f-bb13-4b32-b309-0b654a3aa353",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8b133cb-c706-4cc5-acff-52a9c7df610b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "538cefb5-fc36-418d-b181-749aebcfb8a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5203cb6-f90f-4e80-bd95-a62293d24aae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d0b4b14f-6349-4fd8-a29f-41c5f33b3027"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35a7d5f3-f924-4d6a-8c8e-135af30b0b0d",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55fc8f23-d338-4526-86f0-b1a455475920",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc449dfa-2cc8-4c33-b4c1-c4f2b43f5de8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbab0a7b-a557-4e99-a230-af3f7937f5cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e59e8858-57f2-4023-b670-b7838a7c55d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "598c9b12-d2f9-4bfe-8175-fbca5c773d93",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e00499dc-490a-4d8a-ba8b-be2bec4abd42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d16bf83-e13d-4339-a496-7e5c6fbb15f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eef8ea40-3aeb-4c2f-9684-a8c7e2e56c1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4adcaac5-f844-4a5a-a7da-cf6e972ebad0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26c86531-bc39-4582-8e35-63b857cce89b",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b6b139c-21f9-4a8a-8f79-61769d0217da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a13bd51-1152-4ae4-9ac8-fd0e51b80114"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0347b7db-bae8-4609-8d1f-52cf742699ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "243c8cda-fee7-476c-ae93-833e73fd7fa4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bec32a8-d4b7-4331-8f39-2956c458c865",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4f70747-82e8-4f2f-8d05-a8e15d749ba1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f684cbb-6028-47d2-9700-d1a16ae6ba4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c631e681-403d-4d98-b46c-59e0c1a25024",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7565a18d-b02e-42c2-8e76-2b14230c993f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62316efb-63b7-4b7d-b461-8ee6c47193a0",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8724db0-3f22-4813-a0f6-0c9ef9f92492",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc28f0c7-d338-4dd7-924c-a1b56ffe28be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1447ff6a-be17-4617-98aa-b87d89bc9bc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e5bc868f-8a8c-4fce-b943-0f1d3cd17bf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e083db5-f101-4ee4-8ece-30c0c888c2e6",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98b5e215-d730-4edb-bd18-e73baa28db78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8e3f9c0-ff64-4d14-9295-c9a501caccde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0f08ea2-f27a-46b5-aed9-29e18fc823a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6c132517-0f01-43eb-acac-ae0d3683f755"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd603328-52c5-4f18-944a-90776f3f41e4",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4638885-efb1-47fa-a9a1-79d6071ed726",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "813d75d0-fc02-45ae-a692-36f83b836887"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a86f6933-fad5-4439-826b-975a1369cb86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "841eba2c-8a54-4291-bee4-577ed6b4af02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4434db67-7a99-43a6-a58d-a79acf7515c4",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c62946a-9842-47bf-b8e9-d71d2337d0b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "451ed272-69b2-49c5-80d2-5d75c3cf8471"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71c2694e-3edd-4891-b4c7-92c1f3c96439",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a2114771-af93-437c-ac53-c7659f8d9878"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7aa0226-71a4-43e8-92ae-ce47df8f097c",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62111dc8-aa83-4776-91ff-4912eed77844",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2f96ae7-9b11-4497-9b35-0cbe455faf78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "614f3ed4-8b5b-4d5a-958b-0bcd9ddf08c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cc0d80cc-4116-4e0c-92b4-860ce018c543"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f51576e5-0494-46c1-9dc5-d120cbf37b67",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0cfc0075-4af7-43eb-842c-c915203b5e98",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "faf676b9-722e-4de4-99d4-822833d56150",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "4579af22-33f4-48ad-9d99-a1bb5aef4c17"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bce275a3-99d4-4a67-8585-775d1000f708",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "05fb6815-94cb-4c11-82f5-b1e82fdfe296"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fe283e5-67f7-4823-9a39-dd8b12d7fade",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec4802cd-3f2a-4714-aeac-00b5c48655a3",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "0106646e-4130-4130-bcc8-d826f8a053ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b42a031-f547-45e8-8652-032d58991f07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4064b6ab-3a4c-49ec-aae5-11aa28510ba6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c4a12d8b-87d7-4c30-b0c4-d87ce0d5b6fe",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0b3270dc-c3ea-464c-a655-949d091cc55e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b7df8b34-365b-43f4-903a-c5ee4fac5287",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "26e12331-5ba2-4f72-b4e6-0947a587435a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "83281cad-bb9c-4df6-8d38-6199d5cb164f",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "a3ba9371-3aea-42e5-af5a-898cf44a3909"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a0c37f85-00c9-48e8-8cd5-e351f64cd012",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0ea57a8a-9f2a-42e9-82e0-e96857d99785"
            }
          }
        ]
      },
      {
        "id": "a0d70e0c-da98-4ebe-ad8b-3dfd35abfcb7",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "0837c11a-0870-49a3-b06c-74e2ac984845",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f73f019a-b833-431e-b594-9e28866cd03f",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f1c2e6c4-db2f-4a8e-90ee-ba928f31d5a8",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a6bd01d-117b-44bb-82cf-5d9809f73da1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e1f494e-e244-44ff-9ec9-807a748483a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a8fdad8-2159-4397-8cb0-4c133e717115",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52f45136-1397-4a99-b96b-0e5ca2b02071",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ba4087c-9f70-4600-9ca4-c6286f7b2a09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62061c52-24ae-42a7-a598-beb6fb05bb5b",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b9a32e5-6809-4b1f-ba1e-98a84cdf72b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4349e9a4-e318-4446-9651-6677682fa475"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d04210d5-479d-440c-897e-d71214d03651",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5175f9a9-4e77-4d8d-993e-41863cea59e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "223aa6cf-e54e-4929-b52b-8b338c95e237"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6319e24e-00d6-4b8b-b065-54ab9ad7f7e5",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb49db0d-804f-4480-9b2f-e1fceaefd7da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f9588d4-d1ce-4f25-b05c-5dfd1aa127f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "272d67a3-455b-459c-aa5c-0966ec7c7ded",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a6fd119-c3ff-4f5e-9d2e-ca1ef7806ff7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "632417ab-cc82-4134-9032-bb9a6748c72a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82d756c8-bb9a-41f5-ab5d-6797adacd3b4",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e947336d-9f04-4c67-86d5-65f14badf4c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7adadc1-5064-469a-8fde-480b08f860d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95dbb80d-e6f5-4d59-9464-790b9ade8f2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6bf4eda-eb38-4a2d-8e58-33d122e2c865"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d32e055-1355-4579-b000-4ade13ad582c",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27647376-a713-48b6-b367-5d71b798290a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "400c6969-37e2-4214-80c2-9b09760511ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b7e9581-d9d8-4694-b18c-158081f3b9ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fec6a93-f3cf-45d5-9055-d707a93f10b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c493db86-b5ce-42a2-9ef1-0454c7a1dc34",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31248257-3a80-416d-b83f-0c7115543945",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ccd73ef9-ce7a-45a1-aca3-c4e3fe41519d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a69bb42-cb16-4935-9908-60b26e0a347e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f0d20da-9c30-4a5e-af5d-be77e6b7fe62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6834bc0-9114-4883-8a69-f6a78a98e144",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b950707f-30da-4f20-9223-ebbd5509bfa3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "74f82f3d-7919-4c40-a058-7ab77eeb99d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14e5e410-14b0-4101-9c20-41efff148d51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "894c82cf-8948-490e-9ebc-58abab9ecb6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01be6389-446c-4e7a-a174-15314ba5e51a",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c4da124-9f25-4e8d-9b3a-31ade5b21d08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3375abed-aa14-4f72-8016-8c9d4b89a786"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "afd28c8b-6075-49e8-afaa-21122977085d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3005c9f-adcd-4422-aaf0-821a72feba60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cac7a95-bc2c-469c-9fa5-f6edae452163",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "736a4345-5384-4a97-b8a3-e1b181f2be6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed8a9e0a-b2df-449f-9185-e824c784d03f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66abc99c-91ed-4b33-b25c-3f754ea2746a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7400dd5-dc73-4c0f-8d6f-88ece9fbe0e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a69d5850-4a5e-41da-b69c-c78b7798c46b",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b52148da-dec9-418a-9875-0dfca908a8b1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "39b681b7-b87c-46aa-b3a9-a6ae565a50a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "450ca6f4-4011-4b6f-8c34-9cee6c574eb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f937713d-d5a7-415c-b590-2955c6a09450"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cb7c37d-5957-4be1-82ae-dcc2425f0277",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30af2cf2-010e-43e0-a977-60d0c693d63b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "69815c36-a0b6-4164-a68c-da460e088dc6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "edfb799a-e4dd-49a8-bb90-617de869d12d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17cf2d6a-6dff-41a0-8ff2-bea0896d8c09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c883636b-ccd8-474b-ba84-7e3162f4d7c8",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5f0e31c-736f-4338-9343-41e8adbab573",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "226b7d40-9c8c-4550-b1a2-6eca4f12bb05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4014f1f2-07bf-4f01-a36f-05ad8bfe9ba5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41db08a9-36fc-47ef-8c0b-167b16bf35d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2f173a9-b49b-4cab-a33b-6dd12b869efc",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e38ed709-d88b-449c-bb47-ebc24353b386",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "60e84a11-f184-433f-b699-2781400dd0a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b35bd41c-bdf6-4fb9-88dc-7e010b1e7651",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ee5f142-f171-4ee1-8569-b06ad64f4f9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82158362-3b29-4958-ba1f-b456e0acf975",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f3c7a0e-592c-4bf5-8fde-2ba8434eff45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52f2ea67-d097-45a7-a9ac-862faddb8992"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3167259-3a3a-4083-8c51-2a03ad365360",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1300e8c-ba0e-4415-8724-a7bc59ded50a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d901c17-a1b1-48f5-a56f-e91e8bb1fc71",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0732625-1b60-49b2-83c7-c67dfc415677",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c12aa7d-c93f-4ae5-ac26-091da403d430"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42bf5646-c3ad-4e62-8ec8-92983c3a62eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "728e15ca-0bd6-475f-a627-65db71c4da96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b0977a8-9d75-4570-9e32-aeddc0ac17b8",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63f9705a-9bff-4e93-a33a-d7310f76dfe4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb5f8a8b-41cc-4d06-b8f3-bdad4648e850"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "caf0aeb5-3e33-4035-8a2e-7275862f6038",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6e5ff39-d13f-4eef-b514-c5999fb3492e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f7be035-83d8-4b5b-bdeb-d8aa08e1112e",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5b07798-4126-45a3-8185-dd54495399d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02d462d5-5757-4b93-990a-cc66ac65725f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eff4078a-dcdb-4b23-a0f4-1f872432cc5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f662b17a-9efb-4735-a3b0-67e700ff1f70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc172d84-8aec-4e88-8a5a-febe59f44257",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a7677b9-f430-4054-bfa4-0afdc1cdb248",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8333c08-efb0-4d6e-ad11-9aae05269d60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a46695a-ecb0-4dcf-9b3b-5a61c20a8a6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a27f19fa-459f-41d5-b4d6-a2fdd21215ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76b05630-ce2c-4a86-a983-4db9e151d231",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acb810ae-9f9f-4c29-8585-edfad63b2a4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10779bac-d04b-425d-88d5-4158ca10521b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e317526a-b846-4a8e-a8e3-ed630e5558fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d648a27c-7cff-400f-afff-4e05fe45ba6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d23e927d-495a-44be-ad14-405bac360e49",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7be7a40f-ed45-458d-a093-c7265ff392e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdddc7d4-16ac-4fb4-bce1-c09027e18559"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70b8374e-4b27-441c-9ce8-f1a726a4775d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfa88889-9c47-4d2b-93f0-cf888b3694af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d854a62-698a-4924-b789-d71ca73919d2",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67f552df-955a-48a0-ba29-2f20747de026",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "37174a8d-f8ea-47ec-9275-27c4a6f2b04e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ae20adb-98d6-4a8a-835e-4072db83a46e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76baf699-97c7-42fb-8cf2-04fd6f067c1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1553d94d-7e22-42c9-8882-c8e85a85edaa",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bbf16da-ce2e-44eb-8f51-80064f431dfa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "26df92f6-0421-4085-8552-9263d61af3cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b04c75bf-3585-4a82-b2b1-8827220e6ad5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81f591de-23c0-4fdd-888a-ca9f4cf86229"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5686140-d476-437d-9669-83fe844433ae",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee5dca66-8da3-40f1-a050-f214b156178d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1dcca200-d0d8-4990-8622-1753fa05f4d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24779349-da95-4714-85d9-56d71deade81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88f3c1ff-951a-4d8d-81a0-2d9d280c1165"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e246526c-4f24-4c89-83b7-7e308e85445f",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "639aec3a-7f63-4cc6-a066-85d2ba150f20",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5f87cce5-8827-47f7-af1f-a1e9e024b7c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20d6dc4f-0b22-4d11-8490-a2bc3032ef18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8361e77-f555-49e7-83cf-ed4f7ca7e6e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0295a66d-08fc-49d0-9610-23d5aa9ff5f8",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38d5c7fc-d3f5-461d-bf70-a85e1a9e8d34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82e3e91f-7d54-4d28-b496-7d216f982b28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a64b3471-04ab-4b49-97e9-7487e39168dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7390e63d-f020-439b-af21-4edaf0d946d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "373f1bbe-7780-40f4-813c-87e888e50e9b",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52c72512-4539-47dc-90b4-74de57b127bd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d9e112be-b811-43a2-ac2e-e048232d117b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eae814fc-06cc-46a1-8f7f-622886a66c99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2930ab3a-5b5f-41a3-a947-a428c6c9637e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86818d73-95eb-422a-bdde-6cdf18170ae1",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6177e720-810a-4f75-88a8-f01aeb373558",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4da0ee9c-4509-4b95-adbe-50c130043fef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22925e6b-2e49-429d-8075-0dfdb04c30f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e7118e6-08b9-4ab3-9da1-744bcd3e35ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6963aa1f-7821-4df7-b962-99571916a761",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b782bdcc-e5c2-40fb-89e6-edf004bfa717",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "125f8db4-9cab-4202-b2de-69fcb2c62601"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c850fe0-f4a7-4dfd-94d9-a0df53aa3c47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "462372d3-d6c8-41da-8906-ef0f3410e6df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42376d07-133a-44bb-8d02-614e22a1371d",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b912f9b-1466-4292-be3c-e26e75d45954",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2acd78b8-1d53-4c1e-a6ae-bded7db11ecd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05753858-ba74-44f5-8a8c-0a6a73a79e80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e87100a1-a3e0-4d62-b76f-9e3010e30dc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80bb7867-7082-4cbe-9959-fbb627a1537e",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72c7360f-aab3-43e0-a077-b5a2a608e0f0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eea3701e-a251-4a76-a334-a3557fd88f58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbd80635-91a4-4367-a59f-3c79dcbe3a70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3007a524-6d56-4689-b48d-bd5074036d7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f62d6f3-04be-4ef4-8bc6-679e509ecf9a",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9a9d3c3-2d55-4e60-8368-7ab01827068d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "20aa0f9b-78ab-42e5-9715-104ac5444cb3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f012e061-4780-48d3-8bb1-0e606a6b4cda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dca05ebf-73ea-4fec-bc46-135a7671abe0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "811576e5-3e97-40cc-876a-3a7af16bc24d",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "913017b3-7045-4e1b-99a9-b869d4a328ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34fc3b96-5687-4bd5-b6a9-8f2c85a9152c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2db537d-dc14-4150-aa26-5cf4737099a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a53349af-7d82-45ab-a41a-cf63ed335fb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57caadf0-0cd4-47d7-aa4d-733702f9dbe8",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1208bdf1-674f-48bf-bb4e-79f5c4b08426",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "566abd20-5e70-4305-bc2f-7b8bbd5e4227"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c7307b6-35ec-4930-b92b-c8fcec898734",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6279e1f0-5643-49e9-989a-c5ac73d816f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca72d4c1-fa16-4e4e-9d71-24c99e008895",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d0a39cd-5dda-42b4-9e25-4828314856a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c52fd96-734c-4395-8c99-9b77e0731ad0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "771a0760-a559-40bb-95b6-7dedd694f702",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2afcf092-996a-4762-8e69-31088574a339"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81a943c1-7631-404c-bde3-b6dc4b13a7bf",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2578c9a-3d53-454e-9b90-79bd386dfa3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae24edcd-158c-4acf-8aa3-e325852f1d26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5774a8b2-e2e7-4fb2-80c8-7e7753e93322",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ee3b4b0-dc08-4569-8587-c637429afea6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cc0f2c9-d747-4d84-acaf-ff9deadfc2ef",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2b66750-e80a-41f8-b769-37b9e442f4d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30d6cf6e-26eb-4231-864d-3b28998d8b31"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b7073a0-a78b-4508-a7a7-35241f6026e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "499b00e7-d68c-43f4-b46d-c4f372799c63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cc688c0-860b-4bc1-b063-3b01825ac6c4",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b16ca820-0e45-4a51-9b6d-15902bffb47b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71c8dc3b-abda-40c6-9def-d933d3a18246"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cedeafb0-ee17-4126-86f3-43f5e55d1029",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba9f239e-6230-42d8-839c-42128a9377c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf20eb1e-8a4a-4cae-98bc-fac31d52e67f",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09227b87-4d4c-441c-91f6-107335212ccc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbf2675d-e83b-43ae-99f1-0943d6c9f2bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24fcdf10-ecd1-4636-95ef-1a2347533a60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08a56d55-760e-4e6a-a659-7fbdd912bc31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af856de7-16b6-4c9e-9a55-0e03019d7e27",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccc5e78a-cc53-4eac-8135-2f315bb79104",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f135aee-7095-4230-9c6e-678e3b8edcba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01939bf6-7a32-4bb6-afc6-a0215eb484fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3582af82-6c76-448b-a92c-afbe14299718"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8aac4c9-6fb2-458c-9483-45f8ec18befc",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b7acc13-3c7e-4fa4-b13c-845ce8b81f2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66796fa5-1e5d-4fc4-a91e-ae196f534d14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "369d666e-0013-42cf-8d43-218b669670fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da7ffbf2-e695-4a3c-abb0-96aa010086c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2dbd246-f966-4fe9-a363-4f783ebe74ad",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb87317f-059a-4de0-8546-8ed317ea5872",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00318cd2-2a30-46b4-be42-64637d499da2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23371105-d443-43ba-85c5-8f4ec911e270",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8ce8574-4dcf-4c17-9fe2-06dc4019cb57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09482143-c991-48c0-972f-2d3b49fb2750",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b93a23c3-156f-4651-a19c-7f9ae0033125",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12f3a063-e616-4cbd-a02d-626c8c8e69b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb16af46-e97e-49cf-bcd1-6f366ed655f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea0e8040-2237-443d-8296-e75d76cabc69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b4639ce-6490-45c1-8cc4-b04d73dd77e8",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cce07e4-aa4c-4267-932d-cbed1d8e4c8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9840f39-6bf4-4adf-a00a-92e2e0fa027b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0749dd4-e4cd-4e09-8ff7-a2901f2c1452",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da32589a-bb7d-41a4-90d7-488b7e3fb4e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95593fcd-3763-42d7-b91f-058ca84acc36",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3721a0e1-bb55-4b2f-ae9e-73bff440a771",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ad68ac9-c0ee-4897-a922-690bb0a283e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ada25ef1-dc12-424f-821b-f300f5b375bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f90c8eb-702a-43a7-b7b6-9ebc3c37fe53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e194d4a-3db2-45b3-ad03-07ecd49f0b1b",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bd7a85e-b3ef-4392-8e29-2e0c9c88b7d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "888aa740-5a2d-425a-9ec1-a95a44a0fd34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11c72e8f-e86b-4e7a-93ff-96bec1de8c66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9b72dfd-987c-44af-8427-71e88ab95aea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b4853d2-9164-442a-9d0f-9ddb50a00dcd",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13e2958b-94b9-4989-bbbb-13506f83ea81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51b8fb4d-cac2-4002-ab8b-304b2085ff03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd1be790-600d-4e8d-9912-dfdb6d0632c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e8dd1e2-2095-420a-8c50-913b195cb8fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edcc5aa8-aca3-4766-b365-d08be23eec27",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8d23d09-404d-4a45-8f5a-7ac2c49dd3e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e897444b-e74e-4b83-8e3d-000c3c37efae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e31375d-8d37-4d15-ac2c-1dfebb36bbfa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6b09e5e-6e09-4fa6-9a5b-ac258548d08d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50f7d113-8f18-4684-9d08-b96f4878141b",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90763923-fe3a-4221-8528-ed22bc7a8126",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9bfcbdf-da30-4a75-85b2-448a319d36ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b67ce3c-3dcf-4d40-9ac4-4a52a70bcf31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f2a3cb4-1a7f-4fb2-aef2-a3751d54b0e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c89f528a-3d7c-4550-b59c-5383067d346f",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30655c14-d669-4ff8-9045-b04cf2ba0bc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e123d23-d4ac-4383-9313-7711cebece91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c28b14cd-4750-486c-aa06-a77ee299fe2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bbea45a-ad6a-4cbd-8ce7-0fef025f33d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "518f5f35-a29d-4c6d-bc3d-673cde503697",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd7f4669-8b7a-408f-8478-a99aafabf3cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63c2b9da-0baf-45b4-a2bd-d1fad9565636"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11c40dc4-ff45-42eb-9b09-db2494902014",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d690f739-08ec-4f04-a81a-27a6fde1aee3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d465c2a8-0dd4-4efc-bae8-bdf0d4c4f22d",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a650ffb5-6783-43bf-b792-71fedf299e1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31c7d15d-2df9-4845-85ee-4a1109e7bee7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15fdb4ab-cb64-4995-bd33-0b5ba1f5b89c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2aed414-d93d-4b61-978e-77709d55565f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f34e109-5aa3-480d-b88b-98ace107afee",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c561fe13-c73a-4b2b-920c-6d545ee0c6e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a01110e6-f77e-4e92-bb8c-f3616c6c22a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44675b3e-e9f2-4b66-a5f7-8dc88fe28afa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6940397-4427-418a-a435-30451d131567"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc74086a-6ef1-49a4-a73f-334c8e046433",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c38dded-1b2f-4b3f-9de0-11566e025c64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e162357-fa19-46a7-8fcb-8d6aef3082b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61ce24d6-f9ff-4208-b3a1-f0fce55ffd52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6492f20-64c9-42fa-90b6-8314bcdb5bef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3b6b1c1-d325-4f7b-9859-19f5b1c7dd9d",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a815019d-40f5-49da-8dd9-0f18048374e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9618d7fe-f59b-4475-8ae4-7a572a06704f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a44431b1-cb72-4598-8cf1-7cac6f4f3820",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "907f21f8-743f-4396-9853-72e043f89652"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1ea6a54-0d54-4659-af30-bddcc6d96fd5",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b78eb067-1ff0-449e-b2f8-f28ece3d5d5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e6ea248-7bac-4d9d-8db0-21279e3a8a18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07a9464c-f43b-4a20-9e21-01235ee42c94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31c582a0-0032-4590-adc1-6c40c5ee5873"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cc03613-c0a1-4f85-b17a-07c4114a9a4d",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "888fc2a7-5b33-4511-8d5e-8cac4b40a20e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "599d95c9-c9ea-49a1-877a-23131dc900e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa170dcc-7098-41ec-8a91-55f1276c6b40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "405e7106-8c44-4e07-a749-565f6b02fc72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9166904-2e45-4168-8fb2-ec25328df08a",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55901545-9eeb-4974-95bc-65335f2562de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f414d8c-ccea-42b7-8b32-461fd7a53f80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52a726ff-49ce-4f77-9ded-7a63fc701975",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8409678-9c1a-47d3-a87a-368e6e790be3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d98d06a7-aa4f-4b6a-890e-4ab94e0773af",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64e4f179-2645-4711-8325-55be272110bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc1bdd72-663c-4750-b020-437d23e17891"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfd76186-e808-4294-be67-a1b7a448031b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3b4c232-308b-44e8-af82-15bbf0429b4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab18813b-b169-4549-8422-b67bf7fc4520",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a94335b-1529-4636-bf8f-7ed9fc0c86e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54d89621-a385-4e2a-8ee6-a1f378f44aee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ea165c6-ab4c-4041-a6a7-b440ce4c820b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36a4fa77-75a7-4ce6-9d90-27553e8f6432"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ef08da0-a288-45a7-b402-eb12b6d29085",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2ceef9e-21e0-4787-8101-af5ae202ea2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5cc2c7d-a317-4e74-9c8f-ad23013e1f96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79990025-2c6b-42d7-95c5-7404ac44016f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e952cac9-6c50-4666-a23e-4fef23c6ce13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fc62233-1a68-449a-8573-e2eeb6b36702",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae5b33df-f337-469a-8518-4e3557c2a180",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b7785e05-8459-4847-bf4d-be12d0cdb993"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9121c698-2b8c-4d5a-a37f-ab41b38310b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9be1c523-0958-45e0-a542-9ab6625b4543"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6569f6ae-e159-4073-a842-f5946ac62d78",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e84be7c-6e66-4603-840a-395f8e5e20c5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2ccee562-d1ca-412a-85c1-3fb5dd4b1876"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59b1669a-0b39-49d8-9056-284a988018b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68e7b33c-d4c1-4e20-841a-a76c503355b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5cfa609-8709-428c-9de2-dddcd2696265",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66961470-c5f8-4de5-ac78-a17c3811d166",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "45c20765-9efd-46db-b57e-47ad7558a58e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b54e178-c1dd-4d05-916b-7c5107e7bcff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acad5f76-74a1-4c58-8b49-d02985621656"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7b5d56e-18c8-4461-bb5d-82c62496d30f",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1f84727-f16e-4339-bdcb-38dab560d4ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a0c53e4e-1a2d-46d2-ab74-12b2bf17b375"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "180413a1-4e03-4ed4-8277-05b79cb88587",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24bab6a0-c7b5-4cd3-b8d3-c4172820af31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24f5605b-2f12-44ee-bc44-983a08e5d6cf",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9bde115-9c67-4556-b02e-5d4109720e06",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dde5e12a-3928-458e-a7e1-aa009e0b1ce8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21555211-47ac-48f5-b85c-cb72be0c67f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ead8f4e-afbf-458d-a4d8-50085a21e752"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec33be54-2d1f-40e5-84ec-dfcb1e647ec5",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51fc642d-d006-45be-97dc-2121e4eb712c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f7e984de-5192-4f23-9261-0b8df54406ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9e3b4b8-7049-4527-b094-d157efca8055",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18d82d94-6d49-4e57-9e7a-5af57d4c83c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d59d37f-c4ae-4a39-8b56-0c7b976d96cf",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ad5f666-8085-4bde-8ce4-cf548bbaf46d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b5b36ea9-88b3-4e0a-b516-e315c4b78f8f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a02d3bcc-92f5-45d2-90f3-79599cc72e2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be6720b5-8f60-4b8c-8279-071903eff9f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8e7f0ad-1ba3-45ef-a41a-65a1ba5a3721",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33d7719d-b463-4f4a-974b-f4e695f3a48f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0e049125-66c6-4a45-9317-23e04261740e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bc53aa1-f3af-453a-9f58-e2589c1810f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17f71f90-de54-4025-9500-a79a7caa66a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "233bf55e-d8f8-405d-be13-40fa32f423f3",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "485e8d6a-d858-4576-b95d-0ebfa2379713",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "30c7c471-fe67-44ba-b193-8e427c613235"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5056ca83-8373-4e6a-937d-a10875ad913c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20484f79-99c7-4ec8-becf-0d390e6a2aa5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "296567d4-f90e-4196-9059-658eaed00bec",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d6c7b54-b820-4606-abe3-204bf80288ca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd4126d1-87a3-4cf4-af80-d38075838cdf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fa69d93-08d7-4caf-82bb-957496d89226",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db52d95b-63a6-4fbb-a987-a4024423d842"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01cae368-e038-4c3c-97dd-f2e8d6ab1b93",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60166653-fe50-4e04-83d1-cbc624b5f0bf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5f2f8c00-009f-486e-a8c9-95e1be617d2d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fffcb951-06da-4639-b452-5fabdc1f4b48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "313d863e-003d-4c8f-8068-662f4ba66032"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01bc22d7-0306-4e8d-91a6-0738638ba316",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d229f8b-7427-43f6-a49b-10ffc1ad5135",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a5c1534a-629f-472e-af22-f2c8f6b5f4fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08b1c0e7-d12f-4011-8743-4825296e23fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c50046c3-380f-4f0e-aa34-a84f45f1f43d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a94f4f6-1a5c-4bce-803f-4000adde0257",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8767f2fe-5742-4030-a984-64d88a0d22d5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a8e3069c-e53e-4922-bb0e-63d693f5bf33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddb62cae-fb29-4836-8d27-db88b464dd48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c428800-d847-4c53-ba6b-90c6b9690154"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9150f21b-4ee8-4070-ab0f-66fa0628e30a",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8fe0fa1-bb41-42d3-bb41-60b79004016a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b492b0cf-8b49-4233-be37-48c652b473cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "263af5b3-11da-41d8-9532-a39a11f52916",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce3595e5-440e-473c-b4e5-a6a7c42a76bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef44e568-649a-4bfa-8815-47032a5af6bc",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f36c290d-794d-404f-981e-09d3e5188562",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "78a18e03-58ab-40dd-8607-d0f9aeab9de0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a46edc7-3c8f-459e-88de-2b28d01c690d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee3b5ffa-c5eb-4dd3-a4e6-88707bf0552a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "daececea-ea03-4118-9404-e13e45867c0a",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c26585c3-5d06-4b8e-9708-995d6dfb0902",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "714753c4-5b77-4925-b551-fb54e30c5fc6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f95200f3-a47e-4748-88f9-6903fa3ed669",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "187abda8-2483-4b23-9f1e-28c39a9565f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5462bc99-d474-4255-8e93-034de4348547",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8446f88-fa61-4fe8-b7d8-35ed153a7514",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7de0c16f-1ded-4c55-8526-77b4ae1bcc6a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcee01b9-7fc3-4baf-aba4-cdb207afd4ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d58f5f1e-2eb7-421e-b773-eb51c629ccbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dabade06-4c0c-42a8-a425-0f5985543b97",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0fa8733-586d-412a-a17d-4e0fdfe41a13",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "85fa21bb-cea4-471d-96f2-ffc2e3a94bc2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7360f3a-18be-498d-87b4-3bc3a5ba8704",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cdfcb16d-3c46-4c63-818e-7d05e4e6cab6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2219545-7e11-40c0-9f6f-e42365f68e8d",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ea6e99c-6962-42bf-9e1f-6285ecc7c9b5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "311a1685-8e78-42c6-b8fa-6465c4c13b9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab115577-3d75-48c1-8df4-bd58492aa523",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0500d365-7a0f-450e-b542-e2d63ba2eff0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8131ac54-4518-405a-ae49-8fcaecd8e67d",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9ef65a2-f5d2-49da-83a2-77079cdf935c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ccf7b551-4d29-4842-98be-3a55cb8954b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dccde819-f05a-4a23-88f9-e3b30a0a1d7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "726225ae-f8b6-499d-9d1d-ef20b3618c9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2653a87-ab16-435e-8cfe-7ff4010025ec",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e05a8fe-c432-4fae-851e-4628d7c6ad6c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3434187e-eb10-4d2e-ba03-ebf8b40b01a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42a61d3a-ba74-4fee-87f7-8e61281b6734",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a2d0e3e-6493-49d2-ba9f-e67b20387bcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90c05dee-95fe-4c92-af37-53ed6c36acf2",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2132a25c-221a-4378-89c5-e438f996b92a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd2674f7-5f8b-4cea-ae0b-9a0ed86d4d2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2f3181c-61b4-4494-8aad-4dbd5a791443",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5df99e43-f5c8-4332-b103-f80f775f00a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89244317-ef02-43a7-801d-ca80b3c07df7",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5a0ae85-4558-4491-ac89-447115021c7b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "70cb376d-8ff9-4171-a086-3a7457820208"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2e6617f-aac2-4ef1-985f-1a4d4164e109",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63e9caf2-ccd8-45c4-93ad-df7362bd8f45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ec8ce59-3c43-49c3-a253-97003655462b",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b8a3939-d7a4-4435-98e3-adad5ee59d88",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2973fbb5-4916-4dba-bef1-3f8175c074e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42056cc8-584c-4e36-b394-17d0e54fbb11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b50a81a9-14de-4321-8b5c-19ff968a67d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d727f025-909b-4725-ac7b-2e45f5d748f2",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b484ded-10ea-4691-9021-d3a23cf020c2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f1681ef3-a027-4b87-87de-2c3b2b47889f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "233422b7-8218-416c-b322-52ad9d15151d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "597776d1-59b4-435c-97b5-168302341f27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b25f42f6-ebb5-44ae-bf3e-026761ac0f22",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad5fda12-323d-4ca1-85b2-eae426a8354b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "97b877af-c521-481a-871f-71ce88f22b60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99ab7d9f-4f44-4b77-a652-708faddf45b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72c586d5-0a99-4788-bb19-0ab5902a0d8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "214e2fb0-4ccd-4669-9781-f22cbb446dcd",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "081c0586-4184-40da-890c-eafac27ff804",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "44b0e5c0-ff81-4ace-8e31-df5fa05cbb5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c93d065-3b3b-4cf3-9aa3-a6a9a0b2ce8e",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49356873-8d6a-487c-b888-c8f578abfbf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1433be2b-ed14-427a-aab7-bf12fc54b715",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e7361cb-23e9-4595-9022-01c8da26071a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c81f4ed8-eb45-433f-b324-079904022674"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "808cc554-f827-4720-8313-0c5bdb4d9938",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3eed4652-de16-416e-844a-e24f92ed1569"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9c82913-8a91-43d9-9571-4507ac5ebb62",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a6c91ec-095a-4f67-9672-d7ceef5f28c3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dbecf5f1-c1c6-47bc-8a68-c03649385464"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf88b9e8-59b1-42af-a22e-174e58f3836d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4310c85b-2d47-4df2-bb95-05024709f84f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06e9524d-f3c8-4cef-a972-c1017d529a9a",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42bca285-d432-4b65-95c6-36267e4748f9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2d26f548-4dde-4cc7-ab62-1ce53b2f0c21"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6568156-9871-4d6e-afe5-2e49d158cab4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a50b6cb3-3aed-41d0-bb7d-e1f9aaca898f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5af933e-b451-4ef0-a7b0-0b7eeba21505",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93c2b71e-38b7-4248-a64d-cf00694a5df9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "50fba210-0cbe-41f3-af3d-5fc42f277640"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7698eecd-fdee-4acf-aa36-6ecf881e4a30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5cb2629-f236-4ce4-8bde-ab28644cd87e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57bc1bf7-f8c3-44b3-a45d-44980d61d47f",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "980a1e85-4ad5-49f6-a685-42518ee9e432",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "18caa6a8-785b-444a-bf07-3b01312ecb33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc3d219e-d7ed-4869-b916-0d69280752fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b871009-3cf4-497d-94f7-0f8f8027d001"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be2c6f2d-9584-454d-a769-db3246ef7563",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df0a8971-4ce1-4a3b-ae36-a192988b5ed1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "870d975f-dd89-4513-974d-e149b7d2bdbc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "169ce336-c71d-4ca3-9d96-50c91455b0c2",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14387c41-0245-4195-8541-2439e0adebf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2f26a6a-911d-407e-b98b-473a79af5272",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2158738-6b80-44cc-a956-88863cb4a511",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d7e788b3-e662-4efc-8ed6-c0557300edf3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4402f0a-7393-42bb-9a2e-22bf3d888882",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0b8db8a-3fa0-4662-97eb-d840f3dab29c"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e2b93408-9687-4e27-a063-03ee4f280622",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e7af4680-51a4-4cce-91f2-483773ecbc5f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "650e8818-9238-4d35-9601-786e66b0fa34",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3499941c-2926-43c4-8a41-b82762346020"
                    }
                  }
                ]
              },
              {
                "id": "1c7b61e8-26c0-4a9f-84bc-d8acc52224e3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "524a849d-9b77-4952-8fd2-79799ed15ac5",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51d60819-b430-4988-a7c7-63102e373873",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "620098a6-5ecb-492b-ae0b-bf11be74a01a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7b531a6-0e6d-4571-85a5-25f751d0105e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a64d5985-b56f-4686-8e3b-2acb74b696e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b892e38b-d68b-4e04-9e11-20a8b8a66b44",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8685e114-28a6-4955-bea5-13dd71533dfc",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "01ebdc78-886e-46b8-bb86-58bfd08bcfb7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5441aab-151b-40ca-b7d8-14967c244413",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7879d22a-d35e-40ab-946d-0dff8703fed3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "084a65be-8506-4583-adf1-d5c7c2f826d6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "23411125-c78c-4d45-b43f-8c066fbbe225"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ed0f8600-f74e-4846-b9ea-49e1c9ec230a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4b0aaad5-f85b-4c1b-bd99-69ee3d82a5f1"
                    }
                  }
                ]
              },
              {
                "id": "4e3e7620-bb54-4aba-89cc-f1979d655c8c",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "dade2bfe-d8a5-4c1e-8024-767e91519b2c",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48ef069f-88ed-4ca4-b493-dd440c3b6e2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "b40577ba-e12d-44f8-89a7-3d8919872a47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5813dda-d2c1-41c1-b21b-b90afc417187",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f58719a-b25e-4424-a5eb-193821e34f99"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "7e3e0851-8b88-4abe-b015-ac5c42963bb9",
            "name": "Positive Testing",
            "item": [
              {
                "id": "13b35ce6-c276-4641-b943-5c3e299d017f",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "43bdf983-4d8d-4b91-9b19-07827e567732",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "8fa75552-bf69-4423-98cf-7b5b96e83a70"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "11990b06-538f-49f6-86a4-e7000577ff38",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3746436e-be1a-4719-8d59-c3ea42a5f19c"
                    }
                  }
                ]
              },
              {
                "id": "5b04891a-9804-4675-985a-7c2c90fb46d1",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "49228760-bf44-4f89-b7ee-cb8dab6348a6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "7ba68293-a659-4648-a576-7afeabf2f492"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a2894400-a11e-4cb8-91e5-f856a82c33b1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1e831d5f-3d86-4150-a655-bce6b913de92"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e442be99-b8e8-45d2-8e50-7a4721cbeded",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "99ff7770-2f73-4a99-9941-281caa67b195"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2f58b1c5-583f-4574-9725-13884e0435cb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b67a87df-6001-462f-8c0d-503d436a714a"
            }
          }
        ]
      },
      {
        "id": "909bccfd-15ae-43c1-98e0-3fefeef209a9",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "9addc91d-a976-48c4-a204-96b1b3b1917c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "01cf1466-baee-4401-9e27-669c816bc373",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3de56f37-b340-476b-aa26-a803f807e69e",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8ae7372-79d0-4ebc-8809-07a685c72f77",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "278fa077-ce4b-49db-a2e8-9b5eae8c5009"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a529c4d-15d5-4270-92cd-d630659c303a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3424aa79-54aa-4ff0-b66d-a606c611dd19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46f68dee-c241-4f62-b9fa-7b5bbfabd7d9",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e19f401b-98a2-4ae8-bd18-4fd1e22ed1e0",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "446fa1e5-5f56-49f3-bac0-ddeef860fe48"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc597e0d-def9-4117-bad9-31479175ce59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "19f887cd-ad4a-44a5-bc6d-2fa5b176f4ac"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a60e006e-8e21-45d1-8b03-284c1b2a8b01",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f031f5ae-6939-4b92-95e7-4a8e0de3556a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3cac4381-85d9-4b19-8c5f-1ba4fa268800",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8760783e-f981-445b-8283-00d438352900"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1a61e87d-7141-4359-969b-f66aa5714f80",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "9e8d7340-a623-4cef-a079-706c490c6a87"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "66498d07-50da-42da-a7f0-196365f131b1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1927d518-ca9e-4d53-87af-5c88ca2b04b4"
            }
          }
        ]
      },
      {
        "id": "5f63b688-bd52-48aa-b1cd-5e9f272160b0",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "1febf705-1134-40fb-a22c-1143d723c2bc",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e2278db3-0284-4069-bdc2-c3d672faca40",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4469f5ee-12f6-4d56-abc8-708fb07ccd09",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d516bf6-0065-4d5e-a507-602120227abb",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0e3371d1-b7e6-454f-8d61-93dc0db76d41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f33f049f-ea79-4da4-b8a7-b5f010a8203e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2ced5616-7c18-496b-9968-feaa1a05fc46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "002e7ace-20ee-4203-9a66-5d2ace0c612f",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e975261-c29b-493b-9848-d1e2fa84bfd3",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "418250f3-43cb-438d-b0e8-dade460c8fea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1bd3d7a-6d23-4fea-a12d-1fe6dffc2d6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1e40c26f-4ad7-41a6-81a4-469e07d83cfe"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e22a3971-d8af-4efc-b80d-51b6c241bae4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bb62852e-2fb4-4584-a343-3a85f4af7406"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0fe775fc-e506-42da-b8bc-36d56292ebb3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c2a4e37f-19f5-4269-96c6-8e4ad0cf5c11"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "47bd7db4-ffe7-4293-aa07-9edde29c4879",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "526b9c0e-8fa7-4330-912d-959a79f5b7d1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "00423ec4-97d5-4f47-813d-305096b082ff",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bc2fb139-270a-4d70-9520-545444d95b41"
            }
          }
        ]
      },
      {
        "id": "d9d4633c-8106-4710-b3fc-379109ce2814",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "c7135fb5-794e-4c71-ae0f-b3500d799389",
            "name": "Negative Testing",
            "item": [
              {
                "id": "51ee2f8b-814b-4e8c-a60b-9e285f9191df",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0ecafac2-243f-4c52-a13a-de43bf4e2d48",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94a167d9-2671-4ce8-9476-7c0a411f0d19",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1e2b99cc-8891-4229-8ce8-93ad9349fdb1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b461f5a1-60ce-4be1-8555-dc003539d9ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9b76f25e-8e19-42fe-8b02-9521fed61f39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2334178-a154-4fc3-b4e2-219c7e27745e",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66f121a9-73b8-4ced-8060-718dcb5c3d03",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "9310f7e6-1406-4d40-b86e-083d546ffe87"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4b10cfc-0b8b-46d0-b117-70a9d54b1e63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "65c983ea-fd4c-40ec-9816-4a3f2b7cc72c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f9367e7e-5c02-47d1-889c-6dffad924402",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "efa86a5e-7ab2-4e29-bb62-2a7f4a62490f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "48ae0f7d-da68-442a-b722-6d98445ca8f5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "42ad9d96-8f82-4db1-90a4-a04996785d44"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0506513c-7a4f-498f-885d-20c6ecfa3863",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "154094c9-b088-4fc3-97a6-d5c9d54de08d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e41ff221-70d0-421a-909b-3d7315c00abc",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f7d66505-2b44-47bc-b1b7-8744ddf2f666"
            }
          }
        ]
      },
      {
        "id": "ee5cfa32-69d3-4991-bf8e-ec84cc3eace3",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3f6812cf-aa8b-4e8c-b453-7f2eacfbdade",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6b569159-b10e-4743-83f9-41c2ebcd72db",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "09efc642-8ee2-4833-aba6-ba202ef8df7a",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "32af604c-6e42-46cf-a80f-6f961396ae39",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0e4c3e82-6abf-4af6-b667-76166842e8d9",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 509,
        "pending": 0,
        "failed": 44
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 289.13076923076903,
      "responseMin": 21,
      "responseMax": 5471,
      "responseSd": 793.6857340521307,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1679791251382,
      "completed": 1679791337307
    },
    "executions": [
      {
        "id": "8c483d98-a88b-4a60-82f6-8aefc0b52489",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "e8a1d20e-63ab-4648-bdfa-9f3250cadf4d",
          "httpRequestId": "702c7975-f237-4dc6-b2d8-b7c3d20d111b"
        },
        "item": {
          "id": "8c483d98-a88b-4a60-82f6-8aefc0b52489",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "52f90345-1c6f-4a74-a3bc-2d62b1ad8d1d",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 0
        }
      },
      {
        "id": "ffc8dca9-d516-4117-878b-d603a0dc6a3a",
        "cursor": {
          "ref": "8a69bdd8-dfed-4d0b-b200-0c30ed561b98",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "c45c37db-335b-4896-851f-b272552157f9"
        },
        "item": {
          "id": "ffc8dca9-d516-4117-878b-d603a0dc6a3a",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "5269bc44-9175-4f01-a322-02c9950ae6e9",
          "status": "OK",
          "code": 200,
          "responseTime": 21,
          "responseSize": 0
        }
      },
      {
        "id": "816fd254-5b0b-4a7d-b969-e3affbc4412f",
        "cursor": {
          "ref": "de0b9742-c378-44ed-8b96-2e1803b7a0dd",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "3339de4f-67f0-4b98-a2e9-4c9239af9012"
        },
        "item": {
          "id": "816fd254-5b0b-4a7d-b969-e3affbc4412f",
          "name": "did_json"
        },
        "response": {
          "id": "591869cf-92ef-48c3-bd71-f6c2ffcf2665",
          "status": "OK",
          "code": 200,
          "responseTime": 503,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "588e48da-1994-4f01-8500-63aab6297e65",
        "cursor": {
          "ref": "a7a0f403-7193-4954-bb61-84fe6ee45284",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "801e9dd5-4f81-4af9-a7e2-c9e20e6b789e"
        },
        "item": {
          "id": "588e48da-1994-4f01-8500-63aab6297e65",
          "name": "did:invalid"
        },
        "response": {
          "id": "f85dc8f9-0999-4341-9b7f-cd2c62a7a393",
          "status": "Not Found",
          "code": 404,
          "responseTime": 898,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "588e48da-1994-4f01-8500-63aab6297e65",
        "cursor": {
          "ref": "a7a0f403-7193-4954-bb61-84fe6ee45284",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "801e9dd5-4f81-4af9-a7e2-c9e20e6b789e"
        },
        "item": {
          "id": "588e48da-1994-4f01-8500-63aab6297e65",
          "name": "did:invalid"
        },
        "response": {
          "id": "f85dc8f9-0999-4341-9b7f-cd2c62a7a393",
          "status": "Not Found",
          "code": 404,
          "responseTime": 898,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "2e02b508-15c3-4a6d-b714-b9b4e3e37b4a",
        "cursor": {
          "ref": "6c7b0393-2df7-413f-bd08-83d76375be98",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "f222bd25-e69b-4dc6-ae3d-0ebfcb865af2"
        },
        "item": {
          "id": "2e02b508-15c3-4a6d-b714-b9b4e3e37b4a",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "a7a19610-f837-4116-aba7-b665a31a6419",
          "status": "Not Found",
          "code": 404,
          "responseTime": 63,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43a9e6ec-065e-4c13-a102-bea85b67869e",
        "cursor": {
          "ref": "6e18aee0-e370-4eb1-b838-5be08e386ad2",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "06115bf5-9a4c-4673-ae67-da4f9bfc82ea"
        },
        "item": {
          "id": "43a9e6ec-065e-4c13-a102-bea85b67869e",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "8cae4703-ceba-4b1c-b8b6-c634a7398dfe",
          "status": "Not Found",
          "code": 404,
          "responseTime": 64,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5265a66-6624-4441-9bc1-c2996f8be5a1",
        "cursor": {
          "ref": "8b665186-9024-49a4-b277-b2cfddb2997d",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "7839698d-b72b-4863-ad6e-76ddd3b1fde2"
        },
        "item": {
          "id": "c5265a66-6624-4441-9bc1-c2996f8be5a1",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "f0fc968c-9f9b-4bea-a629-1ae0a16ad010",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "347badf0-6b3b-4df7-b5af-10e42b07e7e7",
        "cursor": {
          "ref": "affd738d-f216-4d32-81bf-f936970a69d7",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "1c1d4573-5706-478a-8e5a-e49e0b0853ce"
        },
        "item": {
          "id": "347badf0-6b3b-4df7-b5af-10e42b07e7e7",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "f419713e-688d-4ada-9cca-c6d3d92bfff5",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "347badf0-6b3b-4df7-b5af-10e42b07e7e7",
        "cursor": {
          "ref": "affd738d-f216-4d32-81bf-f936970a69d7",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "1c1d4573-5706-478a-8e5a-e49e0b0853ce"
        },
        "item": {
          "id": "347badf0-6b3b-4df7-b5af-10e42b07e7e7",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "f419713e-688d-4ada-9cca-c6d3d92bfff5",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "02f67189-a0dc-45fa-b457-812bd163bcbf",
        "cursor": {
          "ref": "678027b9-faef-42cb-8b8b-21b71583dd16",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "4b8265f9-783b-4cde-90fe-8b5b84eee8f6"
        },
        "item": {
          "id": "02f67189-a0dc-45fa-b457-812bd163bcbf",
          "name": "identifiers"
        },
        "response": {
          "id": "484b9d05-e4e7-40ff-894b-b8c4eadda94e",
          "status": "OK",
          "code": 200,
          "responseTime": 67,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31e81d1f-dc44-4f22-8c59-4687247cc75b",
        "cursor": {
          "ref": "12d65a0e-aa56-4966-a1f4-97401cf92600",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "3c8622b7-8152-416e-830f-71fe694a9d73"
        },
        "item": {
          "id": "31e81d1f-dc44-4f22-8c59-4687247cc75b",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "a4e529d0-7aaa-49e0-84b4-cb67acd14710",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31e81d1f-dc44-4f22-8c59-4687247cc75b",
        "cursor": {
          "ref": "12d65a0e-aa56-4966-a1f4-97401cf92600",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "3c8622b7-8152-416e-830f-71fe694a9d73"
        },
        "item": {
          "id": "31e81d1f-dc44-4f22-8c59-4687247cc75b",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "a4e529d0-7aaa-49e0-84b4-cb67acd14710",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b89079c3-fcb4-4b38-b0be-f0b2d7bb542f",
        "cursor": {
          "ref": "b85a749f-79c2-4943-b73b-ba042abac387",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "a9d2d993-79d7-44ba-aff5-6cda34d190c5"
        },
        "item": {
          "id": "b89079c3-fcb4-4b38-b0be-f0b2d7bb542f",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "6abe57ec-5974-41c8-ba78-ab263cfe47be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a817bbf-1b22-4457-81db-20ac92cbe94d",
        "cursor": {
          "ref": "3e911f9b-6c4c-4c1b-9e9f-22e9210b365d",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "17f154d3-7d02-4610-a06b-029c5fc186dd"
        },
        "item": {
          "id": "9a817bbf-1b22-4457-81db-20ac92cbe94d",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "ae0959ba-9b0a-4242-be96-105cb2ab5ce9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9efb75a0-4782-41dd-a92a-93386f58f619",
        "cursor": {
          "ref": "8f6784ea-c3aa-4e72-8354-1a52842ecd1e",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "8235b8d7-539a-4bf1-b2ec-e8cf6b0d4372"
        },
        "item": {
          "id": "9efb75a0-4782-41dd-a92a-93386f58f619",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "5950a736-2029-419e-9fa0-9e47b17cc249",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2326457-bc4c-4ed7-af52-e036346aa7bc",
        "cursor": {
          "ref": "9575bf95-4363-44ae-aee9-5863c8538a2f",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "ba3aa2d5-8902-4f77-931f-d32a12c4f3ef"
        },
        "item": {
          "id": "e2326457-bc4c-4ed7-af52-e036346aa7bc",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "17805475-ccd0-4e21-bf8a-86b1648df6a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa67ab4a-788a-433a-b38c-ed4fb2b24f2b",
        "cursor": {
          "ref": "7d38c56f-dc0b-4a1e-b0c9-07f3875e612d",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "a9382a4e-050e-4822-8d15-7cfa3cfb34e1"
        },
        "item": {
          "id": "fa67ab4a-788a-433a-b38c-ed4fb2b24f2b",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "b33a4ec9-8504-4979-83f8-c222fe39c5f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "165009c6-35b0-439f-a729-4e5803059453",
        "cursor": {
          "ref": "e7da8ab8-47c4-4542-8543-7004c84acbcc",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "7367de30-c601-4351-92e8-bd79a5bf928d"
        },
        "item": {
          "id": "165009c6-35b0-439f-a729-4e5803059453",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "16daac1a-7148-4b15-bdcb-7e7648b833c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1b1fd64-32d9-43ea-ad86-89abc478ee56",
        "cursor": {
          "ref": "adf6f1bd-a299-4697-92ab-47ee8cf5d451",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "4c339e00-a5df-44ff-b67c-aeb2c32bdbae"
        },
        "item": {
          "id": "c1b1fd64-32d9-43ea-ad86-89abc478ee56",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "076e9eb8-96c7-4f59-94dc-fd6734f7d18e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6ce7269-7f58-4b4f-be98-44a3d8e1c124",
        "cursor": {
          "ref": "594c5864-bd1a-4b81-8822-07a1a7d4db5e",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "64e0ec81-9f56-48a5-9372-1d27f50fc8bc"
        },
        "item": {
          "id": "c6ce7269-7f58-4b4f-be98-44a3d8e1c124",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "f653063d-c465-4b88-a368-0c7e88ef953d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6decddf7-2be8-4078-acdb-4bee246e096b",
        "cursor": {
          "ref": "9ab28a73-7e4f-4ba5-a7f3-f9a61b4ef2c7",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "a0b2f75b-0785-4416-88bf-0e95a255c4e3"
        },
        "item": {
          "id": "6decddf7-2be8-4078-acdb-4bee246e096b",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "3926e126-fa5b-4520-a66a-a7eec1062586",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "374a824c-41eb-4791-a068-53c40f333f9e",
        "cursor": {
          "ref": "8c79fd85-6ac7-45a0-ace4-b3936704024d",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "c6d3e40d-d51b-46ca-9ea6-953776f9029e"
        },
        "item": {
          "id": "374a824c-41eb-4791-a068-53c40f333f9e",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "a1963b8a-bcfc-4d48-9b5c-47174ecf880b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cb5f8bd-1af3-4fbb-beb7-2cd206969970",
        "cursor": {
          "ref": "9ae12761-cec9-4649-9412-b6770cc5e459",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "b1774e28-e912-4106-ae5f-e3d40c98de50"
        },
        "item": {
          "id": "1cb5f8bd-1af3-4fbb-beb7-2cd206969970",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "9b8c48c0-475b-409f-a0e8-da3dc897a802",
          "status": "Created",
          "code": 201,
          "responseTime": 1439,
          "responseSize": 981
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "8cbdc6f4-20fa-4e1c-9c26-510f3c77c95d",
        "cursor": {
          "ref": "e5421c24-a6ad-45cb-8101-3ca672c4d0f4",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "14ca393c-0b55-4815-aa81-a28fb6ff5b36"
        },
        "item": {
          "id": "8cbdc6f4-20fa-4e1c-9c26-510f3c77c95d",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "425adfa8-ec86-4150-b9f1-dd6091e36fdb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bc1433d-bd44-4740-8d08-125565a462d8",
        "cursor": {
          "ref": "ea6a19f6-b8a6-4f2c-81a1-d6d2c33f9b5d",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "8482b2cf-1a1b-40d1-a974-f4fe898508df"
        },
        "item": {
          "id": "8bc1433d-bd44-4740-8d08-125565a462d8",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "da466a9e-bd60-4df8-baac-9aa2846bde5d",
          "status": "Created",
          "code": 201,
          "responseTime": 5354,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "4dcb4315-d501-4775-b292-bd885aeba900",
        "cursor": {
          "ref": "220a8f42-4f08-4c9d-9664-d2e46a56ecc3",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "3627292c-4c92-4d5e-8ac4-e40d8e5dbbd3"
        },
        "item": {
          "id": "4dcb4315-d501-4775-b292-bd885aeba900",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "e451f703-df28-4eba-a49c-05dc31995041",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "929cca8e-4e7e-484a-a4b0-095be03ca262",
        "cursor": {
          "ref": "e77bc42b-a856-4cc4-aeb5-60f20714aeea",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "ceda1453-3483-40ee-8f8c-d4775263cb74"
        },
        "item": {
          "id": "929cca8e-4e7e-484a-a4b0-095be03ca262",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "2b017866-0ded-431c-b9d0-5dfb37b719b7",
          "status": "Created",
          "code": 201,
          "responseTime": 5471,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "b2fbecb3-a271-4eb3-a928-41655e2abae0",
        "cursor": {
          "ref": "116a612c-6efa-49ef-a201-21a128f15912",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "37ccaf7d-0963-4bc9-b880-679195872394"
        },
        "item": {
          "id": "b2fbecb3-a271-4eb3-a928-41655e2abae0",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "72474748-171a-473c-b063-ec06d77d210f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f12b3a5f-539c-4512-966a-98a2535cf31d",
        "cursor": {
          "ref": "1a7e91e6-fdbc-46b1-a9bd-50e2057bbf73",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "532b47a1-0fef-4bc3-8a5c-0c379ddd6925"
        },
        "item": {
          "id": "f12b3a5f-539c-4512-966a-98a2535cf31d",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "5943cf94-fcff-481f-a620-66ebdcaccfab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34e4d60f-fee6-44c1-9c11-c2ed42fc1260",
        "cursor": {
          "ref": "423331b1-3d7a-4361-9cd7-b8615844999f",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "da529ea6-89c5-4944-ac71-7ed2de89c1f6"
        },
        "item": {
          "id": "34e4d60f-fee6-44c1-9c11-c2ed42fc1260",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "08a58eb9-17c8-4615-bb7b-a79b54b7503d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "140e95ae-6444-4369-8c77-5f1892b07791",
        "cursor": {
          "ref": "5320d83c-161e-4e44-a896-beeb1a788d3b",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "03e816f2-2ba8-4780-961b-08bf3130a172"
        },
        "item": {
          "id": "140e95ae-6444-4369-8c77-5f1892b07791",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "443ccb4f-f300-47ec-a7d7-3737e3c63097",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d597e29-3497-4814-ba0d-2b329cd14820",
        "cursor": {
          "ref": "37168aff-e238-4dd1-b647-ceb21d416b78",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "3920bcb5-f79d-405f-b5a1-6fb5cc6c6b22"
        },
        "item": {
          "id": "7d597e29-3497-4814-ba0d-2b329cd14820",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "f7ef295b-13aa-4a86-bfc4-fd52443dafd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "791e0240-d151-4cc6-be5e-b89348867059",
        "cursor": {
          "ref": "fdc41e41-022e-417a-b68c-bb40c78f9f61",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "e1546f66-84c4-4f84-94f3-e558877100ec"
        },
        "item": {
          "id": "791e0240-d151-4cc6-be5e-b89348867059",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "4b02adad-3238-437e-9995-3ef33a739b4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "939358a9-2526-4a81-960b-2f9c2f49a821",
        "cursor": {
          "ref": "8ae7f034-88ef-437b-a6f5-868a03aa5462",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "4ee8c1c8-db73-481e-85a8-5c30a8470830"
        },
        "item": {
          "id": "939358a9-2526-4a81-960b-2f9c2f49a821",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "56558440-2716-4047-b4c3-b11df78ae454",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "109ce909-1725-4b6c-b6e6-ebf85e53bd86",
        "cursor": {
          "ref": "53ced077-0e8c-4c62-8a26-c2ace7f99395",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "dd285c6a-e63e-494a-8567-905c83399d21"
        },
        "item": {
          "id": "109ce909-1725-4b6c-b6e6-ebf85e53bd86",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "8440553d-9118-48c2-88a8-3de5f7909389",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0678da5-b18a-4237-ad09-e2380c8806ad",
        "cursor": {
          "ref": "7feff453-80f1-4c15-9855-13039a0265fb",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "5d7a443c-d3c2-4e65-804c-e2343830ce4a"
        },
        "item": {
          "id": "e0678da5-b18a-4237-ad09-e2380c8806ad",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "88ec10db-eddc-4b46-a5c0-2d0113f596a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06307375-3fb5-415f-9c5a-03c92821400a",
        "cursor": {
          "ref": "c52f43bf-8454-43e0-a3d7-6e2b18a47a67",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "cc81e2a4-748b-4798-86f0-0ecbaa43c77d"
        },
        "item": {
          "id": "06307375-3fb5-415f-9c5a-03c92821400a",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "dac3a52a-f7ab-45af-b8b0-bc6e6c9e1401",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93b85768-7779-4cf3-bce1-ffb7c28da5d8",
        "cursor": {
          "ref": "22abf4a7-35a6-4f69-bdbb-f80a1f68f7b9",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "fe7552d4-ba9c-4d0d-8e8f-db06c502ff5a"
        },
        "item": {
          "id": "93b85768-7779-4cf3-bce1-ffb7c28da5d8",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "1e06bcb3-8c18-47d4-97fc-a0067e9c036b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "174970c4-0866-4f0d-b7c8-b3ab3d975901",
        "cursor": {
          "ref": "ec0fc646-de3f-4b8e-8427-9acc004e92a0",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "0d373436-a8a3-4363-98d6-87d57726b5bb"
        },
        "item": {
          "id": "174970c4-0866-4f0d-b7c8-b3ab3d975901",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "b0810bd6-baaa-4ba1-ba5c-6d83c6ec5f60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fded5d1-ea2b-4b21-9891-14f42b0fe44a",
        "cursor": {
          "ref": "9c1fb2a1-772a-4148-9450-72eb77f73a81",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "1e0ca842-28e8-433c-ae18-68047c36a7b5"
        },
        "item": {
          "id": "5fded5d1-ea2b-4b21-9891-14f42b0fe44a",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "51873d31-fe97-4cf4-a9ec-9454b5a809a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b06bd4e7-9c67-479f-8723-0e86d51149f7",
        "cursor": {
          "ref": "fe4ab796-f711-4011-8341-f79d07eea84d",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "10f164d6-931b-461c-a85f-449db9136a3e"
        },
        "item": {
          "id": "b06bd4e7-9c67-479f-8723-0e86d51149f7",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "7a1591f1-3391-4fef-9ba8-9c2bb3685854",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d894a20-8eae-428a-bd2c-364d744108a6",
        "cursor": {
          "ref": "6fb5cfaa-721a-47dc-8305-816920ee4c0a",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "628da7a3-6ffb-4b47-be38-d38b3fe5d45e"
        },
        "item": {
          "id": "0d894a20-8eae-428a-bd2c-364d744108a6",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "71d68c15-cd2d-4afa-acf0-7a22d9c72fdb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17e235c3-4ac2-476f-ad83-5e11c508d20e",
        "cursor": {
          "ref": "a609d95b-6c10-441f-82c9-35d8e5e9098e",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "2926eb78-7115-4b2c-80e1-74534ddf7ac6"
        },
        "item": {
          "id": "17e235c3-4ac2-476f-ad83-5e11c508d20e",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "b0532ba8-22c6-422d-ae4c-3fed8dd3914f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5f196da-b346-4a85-81ef-27911ca10965",
        "cursor": {
          "ref": "f03e8820-b285-4002-ba42-600491696280",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "124edb45-afbb-4e36-a4a7-04d2d9eca0ee"
        },
        "item": {
          "id": "f5f196da-b346-4a85-81ef-27911ca10965",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "9c909b1f-e9fe-4d5d-b1a5-57862f72ed15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b56f55c-fa29-43d9-87e5-1da57a49eb11",
        "cursor": {
          "ref": "2cc7fb7f-f1bd-498e-a6fa-3fbc98d21898",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "5f5e9e71-d544-4814-a326-af604983819f"
        },
        "item": {
          "id": "0b56f55c-fa29-43d9-87e5-1da57a49eb11",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "92ce8751-5643-4e5e-92b1-921b537c8b29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "875cdcf2-db71-40ba-b037-4f728a797e31",
        "cursor": {
          "ref": "0af2058d-9fc1-484d-ba61-c24fb5883451",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "3e4fe030-1e84-453a-828c-6b9dbb486d37"
        },
        "item": {
          "id": "875cdcf2-db71-40ba-b037-4f728a797e31",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "34c28ec0-f54a-4af1-b7d0-d7451b2c4796",
          "status": "Created",
          "code": 201,
          "responseTime": 3788,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "f417636c-15d3-40d5-8c38-9f053450b2a7",
        "cursor": {
          "ref": "ff1ad180-5a4e-49a9-94cb-268f640b2708",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "a68280fb-277c-471a-bda9-32084e51d7ad"
        },
        "item": {
          "id": "f417636c-15d3-40d5-8c38-9f053450b2a7",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "787d7507-34df-4a39-9a74-321316c40fbf",
          "status": "Created",
          "code": 201,
          "responseTime": 3049,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "9871fb23-124f-4cb2-8424-21e5455ab79d",
        "cursor": {
          "ref": "3558f43d-408c-45f6-8f7a-f5b580976001",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "b5d8fec6-04c3-4f1d-9d0f-3bfa0b355085"
        },
        "item": {
          "id": "9871fb23-124f-4cb2-8424-21e5455ab79d",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "cf196379-e8ae-4aa0-8405-0bb75276e01e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "202dd6e3-9df8-491f-b6c2-8fdbd1495238",
        "cursor": {
          "ref": "e7527ef4-a286-4328-b99a-a39eae6cd718",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "864972b1-dd7a-4349-b1c0-70eff6925bf8"
        },
        "item": {
          "id": "202dd6e3-9df8-491f-b6c2-8fdbd1495238",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "6ee3d739-6dd2-43ca-80fe-6e7c014534e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99aa2cb7-6404-48da-b22a-c8e27a8c1980",
        "cursor": {
          "ref": "3bf2c779-b199-4adf-b7d2-cda84d5bf3b6",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "2b4d0044-2048-4cbc-9907-39fe5cf44f3c"
        },
        "item": {
          "id": "99aa2cb7-6404-48da-b22a-c8e27a8c1980",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "53f7b702-e199-488b-ad8b-7f1196f6c3ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7bdc1d1-f814-4efd-b347-aa69217ac1e4",
        "cursor": {
          "ref": "53d4a736-9150-4185-bc28-4c3fc95f5d8c",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "4e22bfc6-5d72-407d-91cd-53fd1a18430b"
        },
        "item": {
          "id": "e7bdc1d1-f814-4efd-b347-aa69217ac1e4",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "701b2c36-3865-4574-aa20-9cba47255132",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5404f51a-0292-4562-ad9c-0f2fdf5e7576",
        "cursor": {
          "ref": "3c218258-41be-4502-9301-904f1c351cea",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "91103e11-b523-4c50-9c1a-49a2eff1820b"
        },
        "item": {
          "id": "5404f51a-0292-4562-ad9c-0f2fdf5e7576",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "86c6ef80-fde3-465a-a6d0-45c36a2df717",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25384ee1-1fdc-44f8-bdca-6f58a4beb85e",
        "cursor": {
          "ref": "eb4ea0b5-2dc7-4eaf-84b9-f82877c02bb2",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "c82b5ea2-0e3a-42c4-86f7-84b6514079df"
        },
        "item": {
          "id": "25384ee1-1fdc-44f8-bdca-6f58a4beb85e",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "4271a79c-3194-4214-be3c-b2962e4f6212",
          "status": "Created",
          "code": 201,
          "responseTime": 2599,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "1cf5d1d5-c665-42fa-8754-df8433f4118c",
        "cursor": {
          "ref": "f41e54e7-060b-4262-8386-6ce031c086e5",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "23ccbf57-8feb-4687-82e9-58e4b539531d"
        },
        "item": {
          "id": "1cf5d1d5-c665-42fa-8754-df8433f4118c",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "87ec1381-72d3-4cb0-8da0-d34dace727de",
          "status": "Created",
          "code": 201,
          "responseTime": 2641,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "3e74f2f2-2b22-4342-ab09-47fc80f4004d",
        "cursor": {
          "ref": "8af7a22f-c0d0-4d35-a3aa-4c8fcbe44531",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "3642d7ce-2cce-41d3-a5cc-c36a0dd75908"
        },
        "item": {
          "id": "3e74f2f2-2b22-4342-ab09-47fc80f4004d",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "d8878ee1-28aa-4bdf-a28c-065637fa1a48",
          "status": "Created",
          "code": 201,
          "responseTime": 3001,
          "responseSize": 972
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "89214dd9-218b-4a9d-8b65-d933e48ca2a4",
        "cursor": {
          "ref": "0fc6c4b4-816b-49b9-9d6a-a0a89c09e9c0",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "37939c69-27de-4d83-9530-33cb780f68f5"
        },
        "item": {
          "id": "89214dd9-218b-4a9d-8b65-d933e48ca2a4",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "ee7ba066-4815-4ab2-89e0-ebd204dccb05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d34aae3-032e-4f85-9d1f-22af434cb3fb",
        "cursor": {
          "ref": "085687e8-4ef0-435e-b107-71b6f211131b",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "ccd2c7ed-88e0-4b65-a70a-aedcf2e1e965"
        },
        "item": {
          "id": "6d34aae3-032e-4f85-9d1f-22af434cb3fb",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "b3e803c9-a92d-42a2-9166-5db4afdce844",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25e22cf1-86d3-456b-8d11-15041d59b77f",
        "cursor": {
          "ref": "5c440178-8348-4855-91f2-7c7971795ec5",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "996ffbf6-9b71-48d9-9fff-22aa4309d556"
        },
        "item": {
          "id": "25e22cf1-86d3-456b-8d11-15041d59b77f",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "0958eeb3-9091-4bf9-8b4a-a9fb0950ac50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d1eda61-3783-4015-8593-7661364cf100",
        "cursor": {
          "ref": "0a3fdd05-9642-4709-b956-53547cdc5d02",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "a8998436-99e4-43f3-bc0b-b3415b178a12"
        },
        "item": {
          "id": "5d1eda61-3783-4015-8593-7661364cf100",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "c3221443-3d3b-4963-8226-96a5810e80e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f55ebfd-dc2b-4b71-a731-7a42417b2a52",
        "cursor": {
          "ref": "28ac6216-4f0b-4d6a-9cfe-6da96cb02e28",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "b7b227db-fc03-44f2-a667-bc22810fd2ba"
        },
        "item": {
          "id": "2f55ebfd-dc2b-4b71-a731-7a42417b2a52",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "15fa70e3-8967-47a2-8d21-651f5535c3ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5ea52a7-6750-4969-bbcf-6da94520d60c",
        "cursor": {
          "ref": "2a6b6e82-50c6-4ac9-b5fa-b86656f1f15b",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "ec19cfee-e9d3-48d9-9cd5-b24d61a06d50"
        },
        "item": {
          "id": "c5ea52a7-6750-4969-bbcf-6da94520d60c",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "021e97e5-c50d-4393-972e-99aa218399be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19b49740-3d95-4960-a86b-e49d76bbb7bd",
        "cursor": {
          "ref": "339735c2-04d3-41b0-990c-07e39a530127",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "72c13313-614f-462c-ba67-1f53917ba71b"
        },
        "item": {
          "id": "19b49740-3d95-4960-a86b-e49d76bbb7bd",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "9af3992d-be9f-4352-9758-437e4a7f3b71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fe090f1-68bc-405b-9892-2487076fd4ef",
        "cursor": {
          "ref": "d6763048-ccc5-4385-a3f6-e30f2f8b7e9a",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "0d11c8e5-f878-4ce2-b18b-fb7154c6aaab"
        },
        "item": {
          "id": "9fe090f1-68bc-405b-9892-2487076fd4ef",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "20f59bcb-9868-4bef-b92e-dbf589623600",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1d9c4e2-3c25-40af-9c9f-d396f828763b",
        "cursor": {
          "ref": "9f024e21-7c0d-42fe-83c4-c3a47f582714",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "aba8f455-8c79-4a96-8084-3fbb0a8a0210"
        },
        "item": {
          "id": "b1d9c4e2-3c25-40af-9c9f-d396f828763b",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "8806c065-e902-4553-a16b-96c988439eeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a292202-512a-40be-acc8-6052dc338804",
        "cursor": {
          "ref": "7cc682e2-4d22-4046-87dc-4ac543fbc4b8",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "8c5ee16b-87c1-49c9-81a4-3f134435a14b"
        },
        "item": {
          "id": "4a292202-512a-40be-acc8-6052dc338804",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "857ab737-c4ff-482f-bbde-be6abf45b0a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0b93b37-a5c6-43b2-bbd5-07cbc010ca44",
        "cursor": {
          "ref": "8303aa8a-9bb6-40c9-a8e9-8b03dc7d5cd9",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "d20928e6-701f-4682-b8da-c574eaf22392"
        },
        "item": {
          "id": "d0b93b37-a5c6-43b2-bbd5-07cbc010ca44",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "54b0b37f-7fd0-4e77-9ed4-631c0c9495a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76ce9017-25cf-47d7-8b63-33cb654571be",
        "cursor": {
          "ref": "f29b92a7-21bd-46fa-9776-5a72dcbc9175",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "f035ddef-4281-4337-b6a8-ef5e14502edc"
        },
        "item": {
          "id": "76ce9017-25cf-47d7-8b63-33cb654571be",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "541db1e8-6715-4db7-98d5-915c098ba501",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79cd7724-34b0-4502-8e05-0b2a85a13765",
        "cursor": {
          "ref": "3a81591e-911d-471c-af6f-066da70de2f9",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "ba32c5a0-e7a4-4d5d-9801-106ec9f20806"
        },
        "item": {
          "id": "79cd7724-34b0-4502-8e05-0b2a85a13765",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "c31ac139-5e88-4b8d-904b-175c65a0a07c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce8b58a2-f7b5-4be1-b465-5239748fa19a",
        "cursor": {
          "ref": "d55beea5-8719-4bb3-b09d-4daf905aeb56",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "6765cc8c-2278-4acf-9b16-107d238697f2"
        },
        "item": {
          "id": "ce8b58a2-f7b5-4be1-b465-5239748fa19a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "7aa1f5b5-0dd5-4b26-9519-837fad065303",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc1c85ce-f8b3-4d97-b3d4-939cccf20010",
        "cursor": {
          "ref": "f7e45279-9255-43d5-99d5-0c9016b0fe30",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "e273a214-d0a1-4797-8d62-97218c07e129"
        },
        "item": {
          "id": "fc1c85ce-f8b3-4d97-b3d4-939cccf20010",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "6864f2cb-7787-400d-9abc-a67d3a299173",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fa0a256-dd99-4c26-9365-a4a45e6b27b4",
        "cursor": {
          "ref": "2096cd93-35b6-49a6-958c-b1defc63ca72",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "25364854-e695-410a-af20-782eca01bc8c"
        },
        "item": {
          "id": "0fa0a256-dd99-4c26-9365-a4a45e6b27b4",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "dcb6077e-d06d-4de7-b8b0-de1d35c110f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4000f429-8670-4f26-88f6-e45f21ece395",
        "cursor": {
          "ref": "1ad87fd6-a998-476e-af37-eeb1cdf5a2a6",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "cf5b05ba-d605-4b6b-8f33-73189b998767"
        },
        "item": {
          "id": "4000f429-8670-4f26-88f6-e45f21ece395",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "99365d00-fdfd-4642-9684-db993409c65b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb0311e4-70d9-4335-9b5a-022de0abceef",
        "cursor": {
          "ref": "3a902b6f-7c9d-4144-84a6-56a31152e5f3",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "1ec69893-8a76-4932-9bd6-4107f75a59c6"
        },
        "item": {
          "id": "fb0311e4-70d9-4335-9b5a-022de0abceef",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "5074640c-b1a6-4577-b1b1-166a9489cb71",
          "status": "Created",
          "code": 201,
          "responseTime": 2823,
          "responseSize": 976
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "5eff549a-e959-4b53-b7ec-79c0c4caebe2",
        "cursor": {
          "ref": "7bd8e94a-10a2-4d46-97ea-2f953011a138",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "42abecff-b2f3-4a96-8594-ee69ea4f8371"
        },
        "item": {
          "id": "5eff549a-e959-4b53-b7ec-79c0c4caebe2",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "31b393a1-4b97-4207-9a80-2382750a512d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 173,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fee24618-09a9-4c43-be45-c52aabb5af1e",
        "cursor": {
          "ref": "bfa083f3-8b3c-4924-aeae-912c71d3b624",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "4666703e-2e29-49d3-8302-9650f4481298"
        },
        "item": {
          "id": "fee24618-09a9-4c43-be45-c52aabb5af1e",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "39451b7d-9700-47d8-84d1-e6e95b7b7c38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb2ff9d2-88e6-4d35-abd3-ed47c23a7335",
        "cursor": {
          "ref": "5c2aeed3-c52b-41ad-b014-69ad5ffd5b20",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "a49c7768-2bcf-4e87-956d-5f249478d3c0"
        },
        "item": {
          "id": "bb2ff9d2-88e6-4d35-abd3-ed47c23a7335",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "c1228f70-36b1-4f64-a245-5570a85ed92c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f9a73ea-8411-465a-b38a-8b489637ef50",
        "cursor": {
          "ref": "e1b99a4a-66ea-475d-bc96-56f44fd6a0d4",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "ef055147-ec8f-4c12-b79d-ec564b952dc1"
        },
        "item": {
          "id": "2f9a73ea-8411-465a-b38a-8b489637ef50",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "afa05345-10af-400b-a3cc-07c052fd5cc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "333979a0-84fd-48a7-a784-fc14b8f0bf75",
        "cursor": {
          "ref": "b435d980-77e7-4e0a-bc48-e3ebf86fee2e",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "a9018a5b-7021-4a45-8d09-6fabc18f2805"
        },
        "item": {
          "id": "333979a0-84fd-48a7-a784-fc14b8f0bf75",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "54d7044a-fe52-4cb5-94f0-c49ebb733b89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77323dca-61df-49d7-9aba-0c99cef87e6e",
        "cursor": {
          "ref": "5721cb2a-e498-4144-ba2d-17fd6a0872f7",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "fac1219e-e049-4fc6-b753-346b270f9ab3"
        },
        "item": {
          "id": "77323dca-61df-49d7-9aba-0c99cef87e6e",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "0d1eda8a-36d8-441e-b129-71134d6c4ef6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53469f77-4c41-46eb-8edf-2e5fe8635705",
        "cursor": {
          "ref": "9566ed06-50b1-4b89-8990-add251f1596e",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "500c05c8-1958-4d23-a67b-3bf769154338"
        },
        "item": {
          "id": "53469f77-4c41-46eb-8edf-2e5fe8635705",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "c0174f9c-761f-40ba-9b64-3be93e9f2fc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10cdb766-5e01-4d66-aca9-f0112d41c9a1",
        "cursor": {
          "ref": "87a57b82-8061-47a7-b819-75ad455074a3",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "c7e82174-e62e-4950-964f-f81a401867e6"
        },
        "item": {
          "id": "10cdb766-5e01-4d66-aca9-f0112d41c9a1",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "814fd944-6fb0-4793-a29a-688422a24a6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91e46687-c3b5-482d-8f34-cd93d96f26f2",
        "cursor": {
          "ref": "a867647d-cb2c-4153-8e2c-7f806c4ed0ad",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "f7ef8ea7-bb15-4506-a5e2-3db97e0a2dc1"
        },
        "item": {
          "id": "91e46687-c3b5-482d-8f34-cd93d96f26f2",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "d187a3b3-3a36-4170-928b-0cd843907526",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fd360a4-4e65-4968-b187-51b4525e85f5",
        "cursor": {
          "ref": "ca0f31d4-4e4b-4bd4-816f-a343ca0238fa",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "2bfbd18d-454d-4084-a039-1860e9c86786"
        },
        "item": {
          "id": "8fd360a4-4e65-4968-b187-51b4525e85f5",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "9fc1af46-8367-4eac-90a4-5e5a7daa7d4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eae7ce55-a2ce-4fa4-8ec0-63115905c5e5",
        "cursor": {
          "ref": "f84a3f94-0903-46d6-a932-d2b923a261e0",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "51d9403e-d1d9-48cd-a92b-fa2b56008a0b"
        },
        "item": {
          "id": "eae7ce55-a2ce-4fa4-8ec0-63115905c5e5",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "eb4723e4-4743-4903-bd22-43b1be5df9da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce1eb07a-e021-4c2c-b2ef-9c67e1a03cac",
        "cursor": {
          "ref": "f36c1b21-dd20-4675-a63f-af68a56f026e",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "1c74ed61-a1d2-435a-b218-9a68125ffad9"
        },
        "item": {
          "id": "ce1eb07a-e021-4c2c-b2ef-9c67e1a03cac",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "13483e81-ac4a-4f73-8abe-32c143466866",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5795a121-4b1b-4877-9558-84afbeaf89ec",
        "cursor": {
          "ref": "34e83a57-8ea9-4536-b179-015469adb53c",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "47d0a100-1fd8-4133-a3c2-ee3a82ce8c07"
        },
        "item": {
          "id": "5795a121-4b1b-4877-9558-84afbeaf89ec",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "ce6267ec-035c-4397-beb7-f7552a88dc4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ba4284d-d20a-4104-84bf-e9e024befe82",
        "cursor": {
          "ref": "0128d7b8-c358-4950-b65f-8e0c9aeffa42",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "ece71fbe-b1e6-4ed0-aec6-e49f82aa4008"
        },
        "item": {
          "id": "9ba4284d-d20a-4104-84bf-e9e024befe82",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "443d5a7a-363b-4584-a24d-758401bd25a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fde4b3a3-b679-4147-8e60-452915b4dcf1",
        "cursor": {
          "ref": "f18944b9-a16c-481e-a852-ad8c0ddcd431",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "307f6b3b-1a4c-4b87-8237-71ddef199f1d"
        },
        "item": {
          "id": "fde4b3a3-b679-4147-8e60-452915b4dcf1",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "a450163f-a2f1-46ca-9d09-d9b962621bf8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a344236b-f0a6-4988-9590-00a86a9a235d",
        "cursor": {
          "ref": "0d3e6a58-cb39-47d6-8b8e-b6f0614e5d83",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "60f0f507-5dd8-4afb-97d4-72d970c32f26"
        },
        "item": {
          "id": "a344236b-f0a6-4988-9590-00a86a9a235d",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "2429855d-3bac-4753-8ef2-60c523ac02d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "018e0517-c6f7-498e-a97a-8f66bbfc00d8",
        "cursor": {
          "ref": "662cba1c-db80-429f-85e8-8f3b5f299647",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "e6a59b1e-1745-430e-a498-7aa3b1d1a7b9"
        },
        "item": {
          "id": "018e0517-c6f7-498e-a97a-8f66bbfc00d8",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "76733f1b-f501-480a-848e-a8e7e7579567",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "919828fe-57c1-47bb-b8ac-5e31530385a9",
        "cursor": {
          "ref": "cbbb2381-cb99-4873-8c33-4dcca4dcbfaf",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "1e78f4bb-16a0-43b4-a0c9-f7f727a32596"
        },
        "item": {
          "id": "919828fe-57c1-47bb-b8ac-5e31530385a9",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "ec24e9f4-7a83-4b1e-822e-760a08880b85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3fcc6af-f01e-454a-95ec-e6c1f0f09131",
        "cursor": {
          "ref": "dda2c232-c5e4-4f70-9861-9aec8ecb97a1",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "e4e99617-77e9-42d4-abb4-0bb083c1421b"
        },
        "item": {
          "id": "e3fcc6af-f01e-454a-95ec-e6c1f0f09131",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "aff83c34-144b-48c3-b71d-af494b4b88ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c16284a4-2ee8-4e91-9b44-8c1ffca95a86",
        "cursor": {
          "ref": "fcea7f8a-f526-4c3b-98d4-0f7abbcb9d21",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "09c392be-99d0-4db1-b91a-d2318cda0a71"
        },
        "item": {
          "id": "c16284a4-2ee8-4e91-9b44-8c1ffca95a86",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "df409f35-ad92-4715-8b0d-007bb60b0c5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3aa2d5bf-bbee-43ea-a84c-9b260f78f9fc",
        "cursor": {
          "ref": "6d8e357d-0513-49a0-8f60-80a942830638",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "8c52d286-7a42-4bba-8a4b-4fa9e586273e"
        },
        "item": {
          "id": "3aa2d5bf-bbee-43ea-a84c-9b260f78f9fc",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "bb608fcf-673a-4340-882c-2b85be0d5dcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ed747e5-c998-49c2-b495-eff2fda920c4",
        "cursor": {
          "ref": "865002cf-61a3-42e6-aaee-53d1a5765c32",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "c598a170-3229-4a6e-8736-1fe151fe211c"
        },
        "item": {
          "id": "3ed747e5-c998-49c2-b495-eff2fda920c4",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "8d2e600b-d101-41a0-8e05-cb808da3ddad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "718a57de-120b-4334-a143-bb987a7b36c2",
        "cursor": {
          "ref": "4a6591f7-9b9f-4ff7-87fc-68afff3deabb",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "7024102b-4f8c-4a79-85a5-f9c3f4b4ff49"
        },
        "item": {
          "id": "718a57de-120b-4334-a143-bb987a7b36c2",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "37cce2ae-bb2c-4900-9f3e-fc570095532a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "947af0c1-6af7-408f-97c2-92a092d76acc",
        "cursor": {
          "ref": "3855d491-8d98-4e31-bcd0-143d0d589366",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "f5bcbff6-ddfb-4b8f-a749-a76355e65e04"
        },
        "item": {
          "id": "947af0c1-6af7-408f-97c2-92a092d76acc",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "ec1ab778-e021-44cc-906a-6e416b176b0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49c247a4-cc7a-49b9-af15-5f32e9ac8224",
        "cursor": {
          "ref": "c00653fe-8f79-45c3-9d65-25d36eda0f8d",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "2be7f799-4b8d-48a0-8337-4de6d84651b8"
        },
        "item": {
          "id": "49c247a4-cc7a-49b9-af15-5f32e9ac8224",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "34b5e1f5-cd10-462c-8500-ff2987c2dcdc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "810ca5af-be39-42db-87c3-c51f82eecf4f",
        "cursor": {
          "ref": "4813454e-f3ac-4676-813b-afa9dd1a183d",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "6a0f5553-85d0-4e5b-b56d-1ff036e22aae"
        },
        "item": {
          "id": "810ca5af-be39-42db-87c3-c51f82eecf4f",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "29db61ae-dc97-45bc-99dd-5b1ca5005b41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "461a9e81-b14f-4f5c-bd50-726ae0ad548c",
        "cursor": {
          "ref": "ce9c84aa-166a-47df-bfb1-c86688b67cd1",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "8c6dbff4-1959-4c98-9b80-e380c164c108"
        },
        "item": {
          "id": "461a9e81-b14f-4f5c-bd50-726ae0ad548c",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "82ab6752-4b83-4a12-bef6-39e41e205f5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4eb7f301-9324-425a-a527-de76305df4a1",
        "cursor": {
          "ref": "ede8c080-0635-4c56-8481-45642baf9353",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "5f51625d-1fd2-41c5-baab-e165209d177e"
        },
        "item": {
          "id": "4eb7f301-9324-425a-a527-de76305df4a1",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "fe9d0da0-1e3e-485f-be57-b99b740189f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd73f44c-bf25-4fb2-a76f-adf65072218d",
        "cursor": {
          "ref": "67bcd38b-4d1a-4501-8e88-79dbdbd5d139",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "bcc62732-7198-430b-873f-fbfa6f23c5a6"
        },
        "item": {
          "id": "bd73f44c-bf25-4fb2-a76f-adf65072218d",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "273f9607-332f-47d5-ab5c-400ae7373cb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc4ab92f-bb50-4d28-b789-b362506a32c2",
        "cursor": {
          "ref": "52925b74-5f4e-4e3b-9ea4-c96769b7bd17",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "4f9c920d-49bf-4561-a270-6d2fef315000"
        },
        "item": {
          "id": "dc4ab92f-bb50-4d28-b789-b362506a32c2",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "2719cffe-e029-4bc4-b20e-85579d70fb04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bec262e-a478-43f5-8b7b-d4f380b47229",
        "cursor": {
          "ref": "b22dd4f7-3824-4258-8932-3a4fe273d46c",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "65cdf992-33cf-4a57-836d-8abc880b03df"
        },
        "item": {
          "id": "4bec262e-a478-43f5-8b7b-d4f380b47229",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "c435ab58-fde1-4051-ad94-c699f61014fe",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "1fb6bb2c-4cac-4609-9b54-13574caee387",
        "cursor": {
          "ref": "7cc9fbfd-bdab-4e20-92ec-23493c5b1571",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "1594137b-4091-4ab4-8845-a276fd79b594"
        },
        "item": {
          "id": "1fb6bb2c-4cac-4609-9b54-13574caee387",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "d24129ad-3370-40cf-83a1-ebafb20fbe45",
          "status": "Created",
          "code": 201,
          "responseTime": 2812,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "79e8f291-2973-4790-90e9-0b7c160f1ccb",
        "cursor": {
          "ref": "e66754ac-6afb-4902-a7aa-32f615291d73",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "f4aa34e3-1a3b-421e-8e9a-fab1fa4e2144"
        },
        "item": {
          "id": "79e8f291-2973-4790-90e9-0b7c160f1ccb",
          "name": "credentials_issue"
        },
        "response": {
          "id": "8180d186-25e9-431f-8816-74e9b30d988f",
          "status": "Created",
          "code": 201,
          "responseTime": 2845,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2deea5c-382a-4420-868f-5ba3cd4cf2a2",
        "cursor": {
          "ref": "4bc428c1-711d-40d7-b2f1-76b2e3c43e26",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "21659bfa-c09b-41b7-aaf7-4bc8fcb6bcc6"
        },
        "item": {
          "id": "d2deea5c-382a-4420-868f-5ba3cd4cf2a2",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "ffbd36b1-7851-400d-848b-24fb55f6a248",
          "status": "Created",
          "code": 201,
          "responseTime": 1995,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ee7182a-c51e-44d0-9765-72c5ad8322da",
        "cursor": {
          "ref": "66461b71-be25-40bf-bd36-7eb4174b5099",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "e5f07242-b4d0-441f-967c-4c59fba9f868"
        },
        "item": {
          "id": "7ee7182a-c51e-44d0-9765-72c5ad8322da",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "3833bf29-ec04-4dd2-9631-2bb5fe1b460f",
          "status": "Created",
          "code": 201,
          "responseTime": 2602,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1556d73-7e53-4241-95ca-3627c6aacf6c",
        "cursor": {
          "ref": "4b1e0195-a5c0-4009-96de-d8451ca9bd5d",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "4d47df7a-0be8-453b-a96e-7b9a1af57186"
        },
        "item": {
          "id": "d1556d73-7e53-4241-95ca-3627c6aacf6c",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "4f4b320b-6d62-40fb-b0c7-12e6342bdb6e",
          "status": "Created",
          "code": 201,
          "responseTime": 2498,
          "responseSize": 993
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "97c2caa5-2e80-450a-9e24-e268a368ca48",
        "cursor": {
          "ref": "8f5ea1b3-a6cb-4565-a78a-1358b4a83e99",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "8fcac8e4-8ef9-421a-b175-cfebf2290831"
        },
        "item": {
          "id": "97c2caa5-2e80-450a-9e24-e268a368ca48",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "189d12b4-d970-45ed-a56d-63fb693aa604",
          "status": "Created",
          "code": 201,
          "responseTime": 2649,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-03-26T00:41:49Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-03-26T00:41:49Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:108)"
            }
          }
        ]
      },
      {
        "id": "baab102a-11e9-4f75-a598-4f6137994c5c",
        "cursor": {
          "ref": "9f54c8c1-ca64-4809-b767-4186626d3a97",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "c9c0293c-63d8-40ca-b07b-9d15bd193a4b"
        },
        "item": {
          "id": "baab102a-11e9-4f75-a598-4f6137994c5c",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "2079ee5a-8acb-44b1-add5-c6ff47bb8361",
          "status": "Created",
          "code": 201,
          "responseTime": 3574,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c078eee3-e329-4fe0-bab2-9dd88a0af779",
        "cursor": {
          "ref": "a32a0517-0378-4cd5-86fa-b085bb9887e4",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "38283eac-10e8-4fba-a715-21c55779b965"
        },
        "item": {
          "id": "c078eee3-e329-4fe0-bab2-9dd88a0af779",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "3cae1496-11d5-4612-b466-71e4c7493bec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c078eee3-e329-4fe0-bab2-9dd88a0af779",
        "cursor": {
          "ref": "a32a0517-0378-4cd5-86fa-b085bb9887e4",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "38283eac-10e8-4fba-a715-21c55779b965"
        },
        "item": {
          "id": "c078eee3-e329-4fe0-bab2-9dd88a0af779",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "3cae1496-11d5-4612-b466-71e4c7493bec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5680ab61-0bb7-464b-aa4e-1b27b70165b0",
        "cursor": {
          "ref": "70de26a8-c7e5-4ef8-9616-a112acf53c73",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "19aff22d-ab40-4424-b669-e1eb368f47c3"
        },
        "item": {
          "id": "5680ab61-0bb7-464b-aa4e-1b27b70165b0",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "ee7c34b1-b0f1-432b-9676-8e065df7acf5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d670bd0-de43-4140-8079-29dde8b66bc2",
        "cursor": {
          "ref": "4e02dbc7-0c09-43d8-89ff-eb2b4366be8d",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "b4e18268-a886-4524-98e3-1e3b1df33dfc"
        },
        "item": {
          "id": "1d670bd0-de43-4140-8079-29dde8b66bc2",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "3ba90774-1c80-411d-a1aa-0865847aa736",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6f52d8b-f0d7-4b72-a657-041cbee612c9",
        "cursor": {
          "ref": "28aec5ee-416d-4d3b-8e4c-2a9e61aa82cf",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "1a51dc60-118e-4b1d-b947-6586a575d683"
        },
        "item": {
          "id": "e6f52d8b-f0d7-4b72-a657-041cbee612c9",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "f8b87099-3a5a-4056-bb80-6f374cbb0e79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67aca1c1-9836-48aa-b6ea-d9b536b49573",
        "cursor": {
          "ref": "7559e9e7-a06d-46c2-8ada-e5cb00038334",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "266274a7-c5f0-4daa-b411-aa8ff8faa8f3"
        },
        "item": {
          "id": "67aca1c1-9836-48aa-b6ea-d9b536b49573",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "37cca4ae-7b85-46e8-a4e6-95f171892353",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6da3c09a-dadb-49c4-9cdb-be5900750f20",
        "cursor": {
          "ref": "34a470de-1af7-41cc-bacc-2f62f7da8025",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "74585b60-f37c-4a6d-ada8-9bcfe4e43bda"
        },
        "item": {
          "id": "6da3c09a-dadb-49c4-9cdb-be5900750f20",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "eea2bdb8-2f98-4a10-aaf9-0b2ef9e10eee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dde3587f-5f02-42ba-a620-22ec757ea3b1",
        "cursor": {
          "ref": "a8be2fec-fcaa-4c3d-9d21-8cd522cd6f24",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "9bf4a7dd-283e-4884-b595-1a48e950225f"
        },
        "item": {
          "id": "dde3587f-5f02-42ba-a620-22ec757ea3b1",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "5a3347c6-d8a5-45c5-b9d3-ef17be797819",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2932e3e8-0594-4bed-a64c-8bccd18c9bb1",
        "cursor": {
          "ref": "886ebb18-79b0-49e1-bf4f-93484dc02440",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "c11ddd53-8d5d-4fc0-ab08-91e10960527a"
        },
        "item": {
          "id": "2932e3e8-0594-4bed-a64c-8bccd18c9bb1",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "3ea14f19-b191-4d81-8d81-8c4359934951",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c6d94bb-f704-4409-a136-7888d969656f",
        "cursor": {
          "ref": "f30f8c1a-ef29-49f3-a214-d6a6cab04a4e",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "06e1d3a9-61a3-4175-8323-b27856b88b67"
        },
        "item": {
          "id": "0c6d94bb-f704-4409-a136-7888d969656f",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "5f268577-b119-4737-a3d7-afe9303f37e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3813760-0390-4b85-a185-f367cab929e2",
        "cursor": {
          "ref": "8639f119-f782-4f81-81c7-e6ff716f63a0",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "9e56485d-5477-41dd-b222-eb3b30422706"
        },
        "item": {
          "id": "b3813760-0390-4b85-a185-f367cab929e2",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "64ba025b-90c7-4d5e-9b8c-33e8d0a5d249",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6232b17e-9486-49de-84d5-ba642b23565a",
        "cursor": {
          "ref": "c3b363a0-4663-4235-97e1-a5bbd9cd999b",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "a2c337e4-9ad0-4096-befd-7782db3f6438"
        },
        "item": {
          "id": "6232b17e-9486-49de-84d5-ba642b23565a",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "e108f31f-ffb2-4ec6-91ef-00f050706c42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a35d0a6-da0d-49c0-bbca-e793beb81ff9",
        "cursor": {
          "ref": "22874625-4cef-45fd-ad40-4891c973bc92",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "cdc4329f-ca1d-4a26-94f8-5d1b7dbbc64c"
        },
        "item": {
          "id": "6a35d0a6-da0d-49c0-bbca-e793beb81ff9",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "f5c8ddf8-5225-4b12-bdc1-e79c70e3413b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6adcc5db-a215-4a7c-bd03-074d610a8233",
        "cursor": {
          "ref": "7db72bec-148f-4698-88b8-0546b5a77154",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "fee2f32b-fb87-4901-961f-5c880c8e3df3"
        },
        "item": {
          "id": "6adcc5db-a215-4a7c-bd03-074d610a8233",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "c258e5bd-f7c1-44a6-bee7-009a200a019b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0663aa11-69f6-49e5-8ae8-1a0184eff1b1",
        "cursor": {
          "ref": "165a683e-4883-4fa5-beac-ca6c7e9c0e73",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "05e961d6-1a50-4cca-bbd6-3fcf1df29483"
        },
        "item": {
          "id": "0663aa11-69f6-49e5-8ae8-1a0184eff1b1",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "a584bd4f-eaac-45cc-a618-9ce1e001256f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aab5b740-1956-41d8-a11e-012e1bae4195",
        "cursor": {
          "ref": "8bce2a96-dcff-44e4-ac48-f7f4fea7e0d7",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "a2fbbfda-ab51-48e2-9880-1972cbedfc98"
        },
        "item": {
          "id": "aab5b740-1956-41d8-a11e-012e1bae4195",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "b347cc11-ad38-4f36-a892-3140d52c7b0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1da3532-565d-4cec-a374-d6dc3fd1385a",
        "cursor": {
          "ref": "01a3eebb-ffa4-4527-b511-20fa78a19e17",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "cb2d13a5-d558-43a6-a723-d2a1d06fe1dd"
        },
        "item": {
          "id": "a1da3532-565d-4cec-a374-d6dc3fd1385a",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "f00f7311-8c1b-4e03-9ac5-88bb6f3766df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "278ffaa0-e47d-47c2-aa6e-3a4f1278d86a",
        "cursor": {
          "ref": "da3af959-1faf-438e-9b5a-9ba8df77ec48",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "9aaff706-39f5-4d62-9e32-c25697b2a731"
        },
        "item": {
          "id": "278ffaa0-e47d-47c2-aa6e-3a4f1278d86a",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "92d16c9a-b9f6-4b2e-a85f-c55375c5fcca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1ac657c-1e04-4959-aaf9-b43f48962ce2",
        "cursor": {
          "ref": "7fe56bf7-e965-4d9f-8f20-80d3a39d9534",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "ce277acd-6de1-4665-9d6b-7a44e0660d2f"
        },
        "item": {
          "id": "a1ac657c-1e04-4959-aaf9-b43f48962ce2",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "6f9ab65e-6c32-4630-80cc-24ef28e1651b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1642c70a-dc46-45fe-bf65-46160b481cd7",
        "cursor": {
          "ref": "f1e601c1-8632-4b5b-aac8-09e1a071de0d",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "1a8a6d97-c264-45ec-976c-707d0079870c"
        },
        "item": {
          "id": "1642c70a-dc46-45fe-bf65-46160b481cd7",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "ae717dcc-9d1e-4609-aac6-7c03971e77a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e769e348-74d7-4ccd-a733-35dbc09be643",
        "cursor": {
          "ref": "5efdeedb-089f-412c-8be8-e96094a78f81",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "ffd8684e-a8c1-4b23-8ebc-640d6b9d6b7f"
        },
        "item": {
          "id": "e769e348-74d7-4ccd-a733-35dbc09be643",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "a1442c97-4017-4026-bdae-2085d5900533",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4260254-12cd-48dc-bd79-57e7a2933596",
        "cursor": {
          "ref": "c43cf343-80dd-40ee-8f9e-e3e4593e507f",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "a40762e4-fc6c-4a87-a58a-918b6b6dcea1"
        },
        "item": {
          "id": "c4260254-12cd-48dc-bd79-57e7a2933596",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "667dc572-e27e-4b76-84e8-2b3535c08a21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8513395b-17f2-454c-bc73-d5dd746af746",
        "cursor": {
          "ref": "fc091c5f-3f47-44cf-a100-617bd6e31e62",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "379b8fac-e506-4155-8521-8902adeacce9"
        },
        "item": {
          "id": "8513395b-17f2-454c-bc73-d5dd746af746",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "ab763627-52e2-499c-a6ea-6b4eeedded92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0efd7a9f-bb13-4b32-b309-0b654a3aa353",
        "cursor": {
          "ref": "9e5dee46-8fee-4885-9587-e8642b4ad922",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "1c3acfbd-4c2a-4bd9-8c8f-6924081483f9"
        },
        "item": {
          "id": "0efd7a9f-bb13-4b32-b309-0b654a3aa353",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "32c1617c-c2a9-4ac8-a339-6d4638db1803",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35a7d5f3-f924-4d6a-8c8e-135af30b0b0d",
        "cursor": {
          "ref": "3490970f-e059-4746-b6e6-8e7fb24cf808",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "45335391-b93b-4338-b82f-d9b9ece681b9"
        },
        "item": {
          "id": "35a7d5f3-f924-4d6a-8c8e-135af30b0b0d",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "38fe605b-2d8e-4f5b-8318-3df86bc3ce81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "598c9b12-d2f9-4bfe-8175-fbca5c773d93",
        "cursor": {
          "ref": "8f3915d5-cf11-4860-9859-ef08c2d3452c",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "8d70fc35-0b13-4645-89ed-d767d356c993"
        },
        "item": {
          "id": "598c9b12-d2f9-4bfe-8175-fbca5c773d93",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "4a42032b-46e1-485b-b6b0-69b7e9b2c5a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26c86531-bc39-4582-8e35-63b857cce89b",
        "cursor": {
          "ref": "95616a3f-5686-4b86-9821-bd10f6ec4570",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "c3eca191-33f1-4c2f-889e-617e01ec61e7"
        },
        "item": {
          "id": "26c86531-bc39-4582-8e35-63b857cce89b",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "bf66cf00-6332-4ea7-bc4d-0bf5597de8ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bec32a8-d4b7-4331-8f39-2956c458c865",
        "cursor": {
          "ref": "c06ac5d9-3cbc-4eeb-b44e-92bbe8019092",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "99904bf0-a66b-4225-aae1-d98f266be4b2"
        },
        "item": {
          "id": "0bec32a8-d4b7-4331-8f39-2956c458c865",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "0690a003-e669-4ec9-b7eb-274f46bf763b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62316efb-63b7-4b7d-b461-8ee6c47193a0",
        "cursor": {
          "ref": "736eea4f-695c-4840-9b6f-670e41edb97c",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "d88a76c5-7f0b-40f6-86de-130b5259f053"
        },
        "item": {
          "id": "62316efb-63b7-4b7d-b461-8ee6c47193a0",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "304e68ca-8306-46f4-8072-4046427561e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e083db5-f101-4ee4-8ece-30c0c888c2e6",
        "cursor": {
          "ref": "4ca2604a-b24c-4cab-b9ea-f4627e816a1e",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "05d044a8-7263-410c-bd9f-ce219edc88c7"
        },
        "item": {
          "id": "7e083db5-f101-4ee4-8ece-30c0c888c2e6",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "aa0ae2ac-50fa-4af3-af7f-32746d025a86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd603328-52c5-4f18-944a-90776f3f41e4",
        "cursor": {
          "ref": "6a0399c0-d049-47fc-9c91-1569ae569524",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "99d10d2f-ec19-479b-86de-1aa4980b9c8a"
        },
        "item": {
          "id": "cd603328-52c5-4f18-944a-90776f3f41e4",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "0d1cc8a8-8813-4ee5-9042-f7fe3884fae5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4434db67-7a99-43a6-a58d-a79acf7515c4",
        "cursor": {
          "ref": "c62f6884-eab4-41a1-a6c9-15cfe9bea01e",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "9c8f669d-941d-4ade-9921-925b72b24499"
        },
        "item": {
          "id": "4434db67-7a99-43a6-a58d-a79acf7515c4",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "6a7e1165-1bbd-4f3c-8dbb-e5cc3b9b941f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7aa0226-71a4-43e8-92ae-ce47df8f097c",
        "cursor": {
          "ref": "80d3386e-df22-40f0-871d-492697d5143b",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "21827bfb-5a6e-4972-98e5-0525be34acef"
        },
        "item": {
          "id": "e7aa0226-71a4-43e8-92ae-ce47df8f097c",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "79327f57-f82e-4986-83f4-4dbb66802a95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cfc0075-4af7-43eb-842c-c915203b5e98",
        "cursor": {
          "ref": "4de90a8a-7383-40a4-b4a1-a71e4fe3255a",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "29e65aed-720e-4917-ae96-ae523a0f3a41"
        },
        "item": {
          "id": "0cfc0075-4af7-43eb-842c-c915203b5e98",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "7a26c475-c457-49fc-96ba-7db593568a30",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "6fe283e5-67f7-4823-9a39-dd8b12d7fade",
        "cursor": {
          "ref": "e09420a9-9abf-47c8-8d5b-6191817187cc",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "9a17de23-2d3a-4d95-bfa7-ab1e38db0eea"
        },
        "item": {
          "id": "6fe283e5-67f7-4823-9a39-dd8b12d7fade",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "c923e8a0-23c3-4b2e-adf5-f3dafa0e6a14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "f1c2e6c4-db2f-4a8e-90ee-ba928f31d5a8",
        "cursor": {
          "ref": "33ba12ba-94e4-48db-b41f-6ec958c93028",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "2773abb8-fcd0-4805-bab3-8d7bc786ddc7"
        },
        "item": {
          "id": "f1c2e6c4-db2f-4a8e-90ee-ba928f31d5a8",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "d8874be6-7dd9-4d8d-a4f8-8b6b33074a02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1c2e6c4-db2f-4a8e-90ee-ba928f31d5a8",
        "cursor": {
          "ref": "33ba12ba-94e4-48db-b41f-6ec958c93028",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "2773abb8-fcd0-4805-bab3-8d7bc786ddc7"
        },
        "item": {
          "id": "f1c2e6c4-db2f-4a8e-90ee-ba928f31d5a8",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "d8874be6-7dd9-4d8d-a4f8-8b6b33074a02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a8fdad8-2159-4397-8cb0-4c133e717115",
        "cursor": {
          "ref": "749800ed-80c4-42cd-885f-b8cc7cfb837f",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "ae708104-86d3-4ace-9bb2-ff317e06b27e"
        },
        "item": {
          "id": "2a8fdad8-2159-4397-8cb0-4c133e717115",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "32dd2b0a-6393-4add-9052-8c2aab62feb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62061c52-24ae-42a7-a598-beb6fb05bb5b",
        "cursor": {
          "ref": "ca318dc1-2ab6-42f9-9e44-384d1cb9d59a",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "9b3b501f-ee29-4cf7-8433-3c0422e8d42b"
        },
        "item": {
          "id": "62061c52-24ae-42a7-a598-beb6fb05bb5b",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "b2a1a392-cee2-4e35-bbcd-1a9ab28fbe68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d04210d5-479d-440c-897e-d71214d03651",
        "cursor": {
          "ref": "2d7867ea-4d78-444a-a0c8-ab4cec4b1f5f",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "34c0d9c4-f7fc-44f7-9799-85c1ae7100fb"
        },
        "item": {
          "id": "d04210d5-479d-440c-897e-d71214d03651",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "84caa722-a914-4919-8e0c-6e5329c0b1ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6319e24e-00d6-4b8b-b065-54ab9ad7f7e5",
        "cursor": {
          "ref": "88cf49fc-4905-4729-8f0e-3e870f5f9619",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "6b69719f-2da7-4a93-8471-a657d8919930"
        },
        "item": {
          "id": "6319e24e-00d6-4b8b-b065-54ab9ad7f7e5",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "2a1b7618-1b83-4073-afba-ea26296d1010",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "272d67a3-455b-459c-aa5c-0966ec7c7ded",
        "cursor": {
          "ref": "3d34aa1d-6bf8-4bfd-a5d3-cc0266f555b3",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "fd9e549c-6644-4979-b240-b2577dd6a1a4"
        },
        "item": {
          "id": "272d67a3-455b-459c-aa5c-0966ec7c7ded",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "f8511a51-89ef-4f60-b671-ce6514d6a924",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82d756c8-bb9a-41f5-ab5d-6797adacd3b4",
        "cursor": {
          "ref": "4a2617eb-e1ee-4562-bbb7-ce1e616c24fc",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "7054a50c-12ff-4315-ae6f-c796ccb47b31"
        },
        "item": {
          "id": "82d756c8-bb9a-41f5-ab5d-6797adacd3b4",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "be1d4ffd-8970-4cea-8c4f-b61104db78b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d32e055-1355-4579-b000-4ade13ad582c",
        "cursor": {
          "ref": "56f9204f-097f-4816-be2b-513afe943cb6",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "b675745d-5209-4ec4-baaf-90af91486b42"
        },
        "item": {
          "id": "2d32e055-1355-4579-b000-4ade13ad582c",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "880a90c6-0ebd-46e2-86ef-523350144dcb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c493db86-b5ce-42a2-9ef1-0454c7a1dc34",
        "cursor": {
          "ref": "b40277c9-0f3d-4e6c-ad27-8a9d591f3ef5",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "5dea3902-10d5-47e1-a816-46b7deb580ac"
        },
        "item": {
          "id": "c493db86-b5ce-42a2-9ef1-0454c7a1dc34",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "8c125607-7e64-4cb4-9e88-abb5e7731777",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6834bc0-9114-4883-8a69-f6a78a98e144",
        "cursor": {
          "ref": "73a711b1-256c-4c3a-86a4-dc41563d110f",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "5eac7911-139a-418e-a8a1-bbfbccca5173"
        },
        "item": {
          "id": "b6834bc0-9114-4883-8a69-f6a78a98e144",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "cd55d252-3360-4057-8f2f-cbcdc62455f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01be6389-446c-4e7a-a174-15314ba5e51a",
        "cursor": {
          "ref": "3dda3181-16a0-45b2-b74b-30c64432fafb",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "49d38386-d4b0-40be-b857-568dc78189ae"
        },
        "item": {
          "id": "01be6389-446c-4e7a-a174-15314ba5e51a",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "d7dff858-6530-43f1-8cef-ae817958d70e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cac7a95-bc2c-469c-9fa5-f6edae452163",
        "cursor": {
          "ref": "0ae7d378-3deb-4c97-aa2a-3446ef921ee1",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "19486ac3-992c-4ae2-bb48-ffd12537db77"
        },
        "item": {
          "id": "9cac7a95-bc2c-469c-9fa5-f6edae452163",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "f03fc77c-08ce-4995-98b2-06d96c34176c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a69d5850-4a5e-41da-b69c-c78b7798c46b",
        "cursor": {
          "ref": "c3082041-3435-4e52-8e17-2c06104658d2",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "5447c9ee-4b3a-4f26-838e-5df4dc21e6c8"
        },
        "item": {
          "id": "a69d5850-4a5e-41da-b69c-c78b7798c46b",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "325a0d26-819c-4b07-8f1a-cbea6faa53e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cb7c37d-5957-4be1-82ae-dcc2425f0277",
        "cursor": {
          "ref": "dd05e668-ba1e-4cca-bef1-5cdb4acd95e8",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "7c250855-de54-4b05-8f9a-97cc42e9da31"
        },
        "item": {
          "id": "2cb7c37d-5957-4be1-82ae-dcc2425f0277",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "b88d4ad7-1689-4185-9e52-e1fe82eee424",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c883636b-ccd8-474b-ba84-7e3162f4d7c8",
        "cursor": {
          "ref": "14fc35d0-95c7-4307-b838-3ed5afb764e0",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "3b1b5073-10e6-4cf6-a54d-5b1cce8f9f8b"
        },
        "item": {
          "id": "c883636b-ccd8-474b-ba84-7e3162f4d7c8",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "c4adc6cc-2dbd-48a3-83de-4bb97f11d2a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2f173a9-b49b-4cab-a33b-6dd12b869efc",
        "cursor": {
          "ref": "7dd39cb0-d662-445b-9ea7-fa773d04c603",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "8915730c-1aed-4e6e-af8c-a6127bc423dd"
        },
        "item": {
          "id": "d2f173a9-b49b-4cab-a33b-6dd12b869efc",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "2cea1f2b-17b4-405e-b310-ef5548ba6dd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82158362-3b29-4958-ba1f-b456e0acf975",
        "cursor": {
          "ref": "0c89e5a8-097a-45d5-a0a2-eebe570a22ba",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "a9d77128-80e3-476a-8729-2b40008e23d9"
        },
        "item": {
          "id": "82158362-3b29-4958-ba1f-b456e0acf975",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "f46f0a6a-6ffe-4899-89f8-e7e6185c4c3d",
          "status": "OK",
          "code": 200,
          "responseTime": 286,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "4d901c17-a1b1-48f5-a56f-e91e8bb1fc71",
        "cursor": {
          "ref": "5de03794-be07-4388-ab37-051c65c0cdda",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "7f36dc44-dcb4-491d-aef3-e2f32fd2f570"
        },
        "item": {
          "id": "4d901c17-a1b1-48f5-a56f-e91e8bb1fc71",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "97c2cd20-69a5-4d54-b1b8-6f760f62f0d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b0977a8-9d75-4570-9e32-aeddc0ac17b8",
        "cursor": {
          "ref": "feadcf0f-1770-4b43-9679-629ea82096a3",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "78f57d13-cb69-4dff-a7ee-c0a327d072ae"
        },
        "item": {
          "id": "8b0977a8-9d75-4570-9e32-aeddc0ac17b8",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "cf3a99e3-97dc-4e96-870e-c68b3c46e845",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 172,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f7be035-83d8-4b5b-bdeb-d8aa08e1112e",
        "cursor": {
          "ref": "3c3f3ce8-af91-4935-a717-760e516e69b2",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "1bb878c4-3b26-495e-9908-c71fc2c7cb54"
        },
        "item": {
          "id": "2f7be035-83d8-4b5b-bdeb-d8aa08e1112e",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "58bc8654-00de-4efc-ba63-532b0f8b33b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc172d84-8aec-4e88-8a5a-febe59f44257",
        "cursor": {
          "ref": "efa76286-b297-4ab3-841a-f3a1c971c58e",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "0e19d196-115b-4a27-ac96-e4e2528a3991"
        },
        "item": {
          "id": "dc172d84-8aec-4e88-8a5a-febe59f44257",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "9a62bcb1-a2b5-4749-9801-efb3cea6c74a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76b05630-ce2c-4a86-a983-4db9e151d231",
        "cursor": {
          "ref": "1cef9e5c-33fe-4994-86e1-9fa0b4d9db1c",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "2772b124-7027-4e4f-ae2a-abc88129531a"
        },
        "item": {
          "id": "76b05630-ce2c-4a86-a983-4db9e151d231",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "13e95686-df9f-4d28-9aba-848e43bf3942",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d23e927d-495a-44be-ad14-405bac360e49",
        "cursor": {
          "ref": "c614f796-9f87-492b-8c52-0d46b23e0e5c",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "d3ab3b8c-b8e1-4e14-beb1-05dc989a095c"
        },
        "item": {
          "id": "d23e927d-495a-44be-ad14-405bac360e49",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "f06d912a-ec40-46b3-abdc-02b7de412cd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d854a62-698a-4924-b789-d71ca73919d2",
        "cursor": {
          "ref": "39181751-bbcf-4e09-8db6-b84c3169a811",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "4c3ed336-8ecc-411c-8ec2-1908f868bb1d"
        },
        "item": {
          "id": "1d854a62-698a-4924-b789-d71ca73919d2",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "5c799ddf-2e65-4977-b7b3-fd559c381756",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1553d94d-7e22-42c9-8882-c8e85a85edaa",
        "cursor": {
          "ref": "a8f5a614-6007-4300-bdc6-b76b0ed440b0",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "458efa8d-3d39-4ca9-97da-c79e47458f50"
        },
        "item": {
          "id": "1553d94d-7e22-42c9-8882-c8e85a85edaa",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "a114f0a2-13f2-401e-b9c5-34a53b95a2b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5686140-d476-437d-9669-83fe844433ae",
        "cursor": {
          "ref": "77ec8bb6-af53-466b-848f-8b85b845bc64",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "079aa12e-a427-4044-8d04-9ebba9e927cf"
        },
        "item": {
          "id": "c5686140-d476-437d-9669-83fe844433ae",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "5880c701-cc89-4ddb-a736-5c80758d4e37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e246526c-4f24-4c89-83b7-7e308e85445f",
        "cursor": {
          "ref": "539692b1-52d8-4ad2-96df-db746063bf3a",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "7b9cf941-71fc-4945-b283-759b5b405a11"
        },
        "item": {
          "id": "e246526c-4f24-4c89-83b7-7e308e85445f",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "ad2fde6f-ea2b-42f7-b590-92ce4cfc668f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0295a66d-08fc-49d0-9610-23d5aa9ff5f8",
        "cursor": {
          "ref": "c01bf397-9690-4aa5-8fdf-bb3e140f1383",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "1057d36d-3c65-4dbc-bafe-020655697fe2"
        },
        "item": {
          "id": "0295a66d-08fc-49d0-9610-23d5aa9ff5f8",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "5c0dd011-06e0-4d08-9bbd-2fe57dc240a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "373f1bbe-7780-40f4-813c-87e888e50e9b",
        "cursor": {
          "ref": "59d0d5a2-6358-4938-bede-96d9baa16457",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "394482ed-9716-4720-ab23-166c0cf81070"
        },
        "item": {
          "id": "373f1bbe-7780-40f4-813c-87e888e50e9b",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "5dc9b055-95f7-4bd8-bc59-756f6a10c74f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86818d73-95eb-422a-bdde-6cdf18170ae1",
        "cursor": {
          "ref": "044dcbdb-5564-4ed1-b9e6-27550e379f6c",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "38e8b1bb-3577-4836-96ad-e51f9b61ae1e"
        },
        "item": {
          "id": "86818d73-95eb-422a-bdde-6cdf18170ae1",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "fe0802a1-cea6-467e-974c-5b7781818263",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6963aa1f-7821-4df7-b962-99571916a761",
        "cursor": {
          "ref": "7a93d9a5-3853-4900-a95c-79a5d6db80d2",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "9a3b5348-8507-422d-9ae3-3d7ecaa7bc0b"
        },
        "item": {
          "id": "6963aa1f-7821-4df7-b962-99571916a761",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "045cf6f4-842c-446e-bd00-ce4c58fe256a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42376d07-133a-44bb-8d02-614e22a1371d",
        "cursor": {
          "ref": "e2dbabf4-c40c-40ed-aca1-4f37b0656b2c",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "4a0af110-bd11-424f-8a65-8fa3b44be8a9"
        },
        "item": {
          "id": "42376d07-133a-44bb-8d02-614e22a1371d",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "5ab5c065-b8b2-49ef-a80a-28e93455db8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80bb7867-7082-4cbe-9959-fbb627a1537e",
        "cursor": {
          "ref": "5eb18f1d-7fce-4e88-9d35-ebe036d0008e",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "288d9df3-a77d-4be7-88a2-d7a482fb5676"
        },
        "item": {
          "id": "80bb7867-7082-4cbe-9959-fbb627a1537e",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "f094ff0d-f3ed-4060-b733-354301a000bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f62d6f3-04be-4ef4-8bc6-679e509ecf9a",
        "cursor": {
          "ref": "4cdb7f95-4eb7-470b-97df-df283cc54006",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "2863f9fc-e676-4e80-9a3f-39555aef2da6"
        },
        "item": {
          "id": "5f62d6f3-04be-4ef4-8bc6-679e509ecf9a",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "81daf029-0b03-4a39-a0d2-3f654f9095a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 127,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "811576e5-3e97-40cc-876a-3a7af16bc24d",
        "cursor": {
          "ref": "526b07ca-abf7-4144-8e95-244709007259",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "24de6eeb-b66d-4acd-b6e0-e7a24bc0e761"
        },
        "item": {
          "id": "811576e5-3e97-40cc-876a-3a7af16bc24d",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "9e5b81a4-9c69-4f0e-9156-a2bfb007337e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57caadf0-0cd4-47d7-aa4d-733702f9dbe8",
        "cursor": {
          "ref": "6ca5f20a-f687-4801-a7b8-51e8e72c9796",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "cef62dcd-c7b7-4910-9995-d1e97499cfd2"
        },
        "item": {
          "id": "57caadf0-0cd4-47d7-aa4d-733702f9dbe8",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "200df4be-a98e-47f2-80ee-930286f11f89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca72d4c1-fa16-4e4e-9d71-24c99e008895",
        "cursor": {
          "ref": "93f9299e-9029-421e-ac5d-3c08e8b5231c",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "f60335ee-df6e-425d-93bf-9e7de5799739"
        },
        "item": {
          "id": "ca72d4c1-fa16-4e4e-9d71-24c99e008895",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "f48bbf09-e650-4b1f-a7ea-da5ce9155771",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81a943c1-7631-404c-bde3-b6dc4b13a7bf",
        "cursor": {
          "ref": "67d09812-70d8-4ea1-9454-b46ee77ff40a",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "29a4ebc0-d945-44f5-813f-946f9aa7e19e"
        },
        "item": {
          "id": "81a943c1-7631-404c-bde3-b6dc4b13a7bf",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "2d6fa1ec-f48a-4252-841c-6251f3d07daf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cc0f2c9-d747-4d84-acaf-ff9deadfc2ef",
        "cursor": {
          "ref": "459d36b1-d821-414b-9713-b48d48c9506b",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "b38d5d33-97c2-4a98-a587-9a3309d25337"
        },
        "item": {
          "id": "7cc0f2c9-d747-4d84-acaf-ff9deadfc2ef",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "dd0b8159-b4aa-4b5d-8ea1-901c946802a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cc688c0-860b-4bc1-b063-3b01825ac6c4",
        "cursor": {
          "ref": "abb332b0-7607-4c86-ab6d-9ddbaba1de14",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "d7874ff9-358d-4254-afb1-d4d358609ffb"
        },
        "item": {
          "id": "9cc688c0-860b-4bc1-b063-3b01825ac6c4",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "5d3a1c20-66ec-42f2-9031-b912e178e1a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf20eb1e-8a4a-4cae-98bc-fac31d52e67f",
        "cursor": {
          "ref": "4a574297-7c00-435c-ae46-833adc0810db",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "af9e1b8a-6eff-482a-a631-76bd85c63939"
        },
        "item": {
          "id": "cf20eb1e-8a4a-4cae-98bc-fac31d52e67f",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "c92c195f-31c5-4fe2-b93c-699ac837281b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af856de7-16b6-4c9e-9a55-0e03019d7e27",
        "cursor": {
          "ref": "45a4c8ad-7484-4e02-bde9-af5641bf638a",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "0cb6e746-6219-4cbc-973b-abc3070f32a0"
        },
        "item": {
          "id": "af856de7-16b6-4c9e-9a55-0e03019d7e27",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "ea65323b-fcee-426e-b1b5-0ff7756042c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8aac4c9-6fb2-458c-9483-45f8ec18befc",
        "cursor": {
          "ref": "62a77942-65e0-4589-9fa2-1cc65de1320f",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "b22e7256-b680-441a-88d8-083c39223dda"
        },
        "item": {
          "id": "b8aac4c9-6fb2-458c-9483-45f8ec18befc",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "27d666cb-cb02-496a-a71a-12b37c4b8a7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2dbd246-f966-4fe9-a363-4f783ebe74ad",
        "cursor": {
          "ref": "52990e53-f03c-425b-a85b-42fb8b4473af",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "3ab2c8cb-db27-4219-8250-eeb3c1519841"
        },
        "item": {
          "id": "a2dbd246-f966-4fe9-a363-4f783ebe74ad",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "70417b00-a193-43d9-a625-a514900c68b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09482143-c991-48c0-972f-2d3b49fb2750",
        "cursor": {
          "ref": "03b15fc2-2792-4333-958f-1d662af0ec13",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "e351a6b6-1f6e-47a0-a19a-5c050ee2aa0e"
        },
        "item": {
          "id": "09482143-c991-48c0-972f-2d3b49fb2750",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "a5c5dff0-f8e1-43f8-b781-7bbfdcbb081d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b4639ce-6490-45c1-8cc4-b04d73dd77e8",
        "cursor": {
          "ref": "dabf6bc0-7fe3-4029-8f88-45fb3c465e03",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "a2aaf88b-9e22-45e0-ae07-b1caf24cdda0"
        },
        "item": {
          "id": "2b4639ce-6490-45c1-8cc4-b04d73dd77e8",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "c31cea18-8c49-436b-9177-6840b3f75cd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95593fcd-3763-42d7-b91f-058ca84acc36",
        "cursor": {
          "ref": "f2b100ab-4035-4884-af0a-d97ecaaeb972",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "846a603e-126c-46d8-acee-659fd2446bfa"
        },
        "item": {
          "id": "95593fcd-3763-42d7-b91f-058ca84acc36",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "3d304de6-265b-441d-8998-144374400144",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e194d4a-3db2-45b3-ad03-07ecd49f0b1b",
        "cursor": {
          "ref": "58c79169-a920-4bdf-bb50-18f174b655a9",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "8937e482-296e-4a3e-b632-0e4ce1b6bffb"
        },
        "item": {
          "id": "7e194d4a-3db2-45b3-ad03-07ecd49f0b1b",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "7fa16187-48fe-4b62-b961-1e98c62be43f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b4853d2-9164-442a-9d0f-9ddb50a00dcd",
        "cursor": {
          "ref": "4d2bba4b-b80a-455b-a1e9-7d1222ed203e",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "77a54d70-0d13-4365-a318-a60fdc5fbcab"
        },
        "item": {
          "id": "2b4853d2-9164-442a-9d0f-9ddb50a00dcd",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "05b3ace2-f623-4008-9493-1f0f1f1090a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edcc5aa8-aca3-4766-b365-d08be23eec27",
        "cursor": {
          "ref": "0d2c4b87-45ac-4492-9844-03f8a0e53511",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "fbe239e0-0c31-4c97-9f07-709701da2775"
        },
        "item": {
          "id": "edcc5aa8-aca3-4766-b365-d08be23eec27",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "2a3fd5ad-d375-44bb-aecf-8d786ca1dcc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50f7d113-8f18-4684-9d08-b96f4878141b",
        "cursor": {
          "ref": "57bbecf9-ab2b-4d96-9aac-41b84c668eaa",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "253bd617-9ffb-4c7a-b34f-cb55ee4ae99d"
        },
        "item": {
          "id": "50f7d113-8f18-4684-9d08-b96f4878141b",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "35ad78c8-0669-497b-84d8-f53d1918477f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c89f528a-3d7c-4550-b59c-5383067d346f",
        "cursor": {
          "ref": "0918a4fa-2ca3-4a3a-b207-98ab1ff74ce8",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "333af600-159a-42cc-9f88-0d66cb8d356b"
        },
        "item": {
          "id": "c89f528a-3d7c-4550-b59c-5383067d346f",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "abcf22d7-c590-4438-932e-4506809f6176",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "518f5f35-a29d-4c6d-bc3d-673cde503697",
        "cursor": {
          "ref": "8a38426d-4925-4de0-b414-77455b3a26f2",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "3c303ef4-e6f6-4d3e-b58b-6886becd7f50"
        },
        "item": {
          "id": "518f5f35-a29d-4c6d-bc3d-673cde503697",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "e35283c4-5ca5-4881-969d-4b65e0a2d61a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d465c2a8-0dd4-4efc-bae8-bdf0d4c4f22d",
        "cursor": {
          "ref": "c0c7e5f0-6623-4d69-ab16-f258b7b76eef",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "5a3ccba1-ce9e-4fc4-9632-e35c4782fb6a"
        },
        "item": {
          "id": "d465c2a8-0dd4-4efc-bae8-bdf0d4c4f22d",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "00b8304b-89c2-46c9-8194-168ab55a0d41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f34e109-5aa3-480d-b88b-98ace107afee",
        "cursor": {
          "ref": "9c6267cf-b63f-46c4-867d-6d601ba4a72f",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "3893ab72-9da4-4807-8175-873fb86908e3"
        },
        "item": {
          "id": "7f34e109-5aa3-480d-b88b-98ace107afee",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "0a798f7f-b5de-43fc-ab45-389ca319fee7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc74086a-6ef1-49a4-a73f-334c8e046433",
        "cursor": {
          "ref": "f50e69e8-c4f0-465a-98e6-047ee4ee6fe2",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "3d840e0e-f5eb-4985-a137-2ff1cc76b664"
        },
        "item": {
          "id": "cc74086a-6ef1-49a4-a73f-334c8e046433",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "ceb96a73-b9be-4662-b771-02c6720c38e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3b6b1c1-d325-4f7b-9859-19f5b1c7dd9d",
        "cursor": {
          "ref": "ee6b2e97-97c7-410e-b0d9-ad5ed6ffa484",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "9d5f3ed7-b5e0-4ec8-836e-bd5558b70b65"
        },
        "item": {
          "id": "c3b6b1c1-d325-4f7b-9859-19f5b1c7dd9d",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "6e4a345a-a019-49a2-bee7-1e10f9ebb48c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1ea6a54-0d54-4659-af30-bddcc6d96fd5",
        "cursor": {
          "ref": "7df45d47-e084-4e62-b8fd-94f6efed9e09",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "176c1f75-dca2-40b7-af7c-52872fb168a8"
        },
        "item": {
          "id": "d1ea6a54-0d54-4659-af30-bddcc6d96fd5",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "0fe10011-dfcd-4011-af58-175b969da10f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cc03613-c0a1-4f85-b17a-07c4114a9a4d",
        "cursor": {
          "ref": "bda50b07-ec6d-4ba1-b2ed-d3ef816f1f26",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "f61028f2-6879-4ee6-b93b-18398d1d0829"
        },
        "item": {
          "id": "3cc03613-c0a1-4f85-b17a-07c4114a9a4d",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "ac7a2652-8d8c-45c4-ad2a-18fc30786c2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9166904-2e45-4168-8fb2-ec25328df08a",
        "cursor": {
          "ref": "0fe9018f-e438-47bc-8069-b814cd846e95",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "a3720c46-230c-4e9c-83c9-d145ecb24cc2"
        },
        "item": {
          "id": "e9166904-2e45-4168-8fb2-ec25328df08a",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "80035b25-22e8-4c10-90ec-22b2f05147aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d98d06a7-aa4f-4b6a-890e-4ab94e0773af",
        "cursor": {
          "ref": "37e0d155-be23-4b1d-891d-2584e7909ed2",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "53c5ef97-7736-427b-b734-f3210db62d16"
        },
        "item": {
          "id": "d98d06a7-aa4f-4b6a-890e-4ab94e0773af",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "6fee3790-8058-49f1-95e0-391a8d728463",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab18813b-b169-4549-8422-b67bf7fc4520",
        "cursor": {
          "ref": "93abe63e-2715-4650-a9da-8cee988adda9",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "04992f92-ddca-479c-a666-c6c33e96cf48"
        },
        "item": {
          "id": "ab18813b-b169-4549-8422-b67bf7fc4520",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "a6a7aa40-e39b-440a-a660-02d452cb7f21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ef08da0-a288-45a7-b402-eb12b6d29085",
        "cursor": {
          "ref": "347fdf87-044d-4125-a56e-b70768d34fab",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "88f87c45-eec3-47cd-b552-14b219b86e3f"
        },
        "item": {
          "id": "2ef08da0-a288-45a7-b402-eb12b6d29085",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "450cf259-fdaa-4c12-8de8-2d2ac6765353",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fc62233-1a68-449a-8573-e2eeb6b36702",
        "cursor": {
          "ref": "d1112d56-72d3-4411-aa42-56bc8fe356a3",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "7a7f00ff-122f-4491-a6bd-6adcf1134307"
        },
        "item": {
          "id": "0fc62233-1a68-449a-8573-e2eeb6b36702",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "7f3b55a7-6c55-4751-a654-02fbb06e5320",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6569f6ae-e159-4073-a842-f5946ac62d78",
        "cursor": {
          "ref": "8c6c1da4-d828-49cd-ae26-bbf904a1564f",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "68c5eb27-c0da-4a18-bfa2-eeca753c9b30"
        },
        "item": {
          "id": "6569f6ae-e159-4073-a842-f5946ac62d78",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "0ac54edc-4640-46d3-9065-5df7e808736b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5cfa609-8709-428c-9de2-dddcd2696265",
        "cursor": {
          "ref": "89cb83cc-5ffb-4ed2-9a78-3cf7d19ff73f",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "1ee56d02-03a6-4133-a74b-4441e75cf6af"
        },
        "item": {
          "id": "e5cfa609-8709-428c-9de2-dddcd2696265",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "b89e4316-e9b7-41c4-910c-00d126ece871",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7b5d56e-18c8-4461-bb5d-82c62496d30f",
        "cursor": {
          "ref": "404dd886-a50c-4e16-ac7d-85d89eddac7c",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "8dade3ee-5d46-4cc5-bcee-57d3335b3267"
        },
        "item": {
          "id": "c7b5d56e-18c8-4461-bb5d-82c62496d30f",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "f485edf0-f4ea-4386-9adb-b3beeadb32d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24f5605b-2f12-44ee-bc44-983a08e5d6cf",
        "cursor": {
          "ref": "a9211516-8685-4ccb-9f72-5b0633014542",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "3ef1f7c7-31d0-47cc-a7d4-a9d398fecdb1"
        },
        "item": {
          "id": "24f5605b-2f12-44ee-bc44-983a08e5d6cf",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "c063cb50-2ea0-4713-8b03-c9a46c5b46b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec33be54-2d1f-40e5-84ec-dfcb1e647ec5",
        "cursor": {
          "ref": "7f1d59b5-5623-4938-a879-369f712f5160",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "54cbf397-f493-4817-80db-cec6829e3329"
        },
        "item": {
          "id": "ec33be54-2d1f-40e5-84ec-dfcb1e647ec5",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "fe704bce-1c52-487a-aeec-9cbc339e2d99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d59d37f-c4ae-4a39-8b56-0c7b976d96cf",
        "cursor": {
          "ref": "f89b4216-ffae-417f-9411-4fd87d14184b",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "7100073b-7ebc-424a-b803-a8379d1f7c36"
        },
        "item": {
          "id": "5d59d37f-c4ae-4a39-8b56-0c7b976d96cf",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "230c7954-a2d1-4509-b7f0-53fe8e6ac9a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8e7f0ad-1ba3-45ef-a41a-65a1ba5a3721",
        "cursor": {
          "ref": "feeb5cca-92e8-4eb6-a3ed-c0f97dbaf21e",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "3da63296-8c8b-4526-88cd-b8d41053c517"
        },
        "item": {
          "id": "e8e7f0ad-1ba3-45ef-a41a-65a1ba5a3721",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "0f260f48-cbf0-4682-9b19-655763861441",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "233bf55e-d8f8-405d-be13-40fa32f423f3",
        "cursor": {
          "ref": "75bfdc92-b0f6-4494-bc22-e76e1721b392",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "896230e5-dea0-4fb8-9da0-7b73b5c9a572"
        },
        "item": {
          "id": "233bf55e-d8f8-405d-be13-40fa32f423f3",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "1728be60-06b4-43ae-8c43-240d0330f696",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "296567d4-f90e-4196-9059-658eaed00bec",
        "cursor": {
          "ref": "60d75d8c-84de-417c-acfb-ad0c30f64ffc",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "f02344ce-1636-4d23-94ed-280bf7bccf43"
        },
        "item": {
          "id": "296567d4-f90e-4196-9059-658eaed00bec",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "5b203386-4431-4067-9476-2e3ce59f89bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01cae368-e038-4c3c-97dd-f2e8d6ab1b93",
        "cursor": {
          "ref": "d30e7cb7-f1c6-4a5c-80d9-8de923ce1438",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "f587c3c8-4d86-41d3-bdd5-5d173e785978"
        },
        "item": {
          "id": "01cae368-e038-4c3c-97dd-f2e8d6ab1b93",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "9c98495f-fbfa-4193-b3f4-795eeb80c7fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01bc22d7-0306-4e8d-91a6-0738638ba316",
        "cursor": {
          "ref": "c94239ae-f35a-4897-af65-3bd6ccc058bd",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "aecba386-de39-4fad-9eee-2e96c7b1a98c"
        },
        "item": {
          "id": "01bc22d7-0306-4e8d-91a6-0738638ba316",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "f6fca2b8-f831-4fb5-b53e-3eff9a638758",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a94f4f6-1a5c-4bce-803f-4000adde0257",
        "cursor": {
          "ref": "7c2b4a65-2d4d-4008-b65d-f46ac7de974c",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "e05f3582-3a11-47d4-993a-4fa4b6c02cc0"
        },
        "item": {
          "id": "0a94f4f6-1a5c-4bce-803f-4000adde0257",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "fe458c2d-6a6c-4143-a0fb-1053b45122bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9150f21b-4ee8-4070-ab0f-66fa0628e30a",
        "cursor": {
          "ref": "2fed22fe-94aa-4475-83fb-6e0030d44c4e",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "c00b41d0-fdf4-49b1-b19e-fb950931e32e"
        },
        "item": {
          "id": "9150f21b-4ee8-4070-ab0f-66fa0628e30a",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "309086e0-d5cc-458a-abd4-4acfe77a8a9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef44e568-649a-4bfa-8815-47032a5af6bc",
        "cursor": {
          "ref": "366f150f-6262-42d7-8dc5-ba2d24adcd33",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "db1f3dea-5576-426a-a295-e14bafcc94ad"
        },
        "item": {
          "id": "ef44e568-649a-4bfa-8815-47032a5af6bc",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "f8c4b200-b522-4e2e-87df-a1d344e22fbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "daececea-ea03-4118-9404-e13e45867c0a",
        "cursor": {
          "ref": "6e7954d4-1624-45e5-8d10-b1c740f5190b",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "48b3e848-5a07-4810-8dd7-d186769b3e5b"
        },
        "item": {
          "id": "daececea-ea03-4118-9404-e13e45867c0a",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "24a98858-12f1-49e6-a537-5c54c169e718",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5462bc99-d474-4255-8e93-034de4348547",
        "cursor": {
          "ref": "0401e520-e873-462a-ba11-3d9a833b3997",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "e0439605-41a8-4d8d-b139-a2120b374180"
        },
        "item": {
          "id": "5462bc99-d474-4255-8e93-034de4348547",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "8fdc79be-8a8e-4e26-93fb-c57eff54da46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dabade06-4c0c-42a8-a425-0f5985543b97",
        "cursor": {
          "ref": "789cd5ea-e58a-423b-91f2-42ebb6bb3c1b",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "2468f734-8cc1-4714-9b3a-2f7c74eba5db"
        },
        "item": {
          "id": "dabade06-4c0c-42a8-a425-0f5985543b97",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "99e8f136-54e4-4a7b-a35f-a605eee5e604",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2219545-7e11-40c0-9f6f-e42365f68e8d",
        "cursor": {
          "ref": "afbe4eeb-956d-48ac-b1cb-338177f52ff6",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "a0648821-da64-4878-bd4a-4d35233593e7"
        },
        "item": {
          "id": "f2219545-7e11-40c0-9f6f-e42365f68e8d",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "fedb4c5b-8d9a-4f9d-b859-9acadcdd7bf6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8131ac54-4518-405a-ae49-8fcaecd8e67d",
        "cursor": {
          "ref": "7119f4cb-6244-43bb-9a85-c1f3e7dd7660",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "f9c0e40b-490b-4347-b8d2-fef0abd9c0d6"
        },
        "item": {
          "id": "8131ac54-4518-405a-ae49-8fcaecd8e67d",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "6604688c-5a5a-45ed-8687-4911e43682e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2653a87-ab16-435e-8cfe-7ff4010025ec",
        "cursor": {
          "ref": "94f197e4-1a04-473d-ad3a-127f0e5a99fd",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "321cc54a-3406-448d-874c-947d4d33a21f"
        },
        "item": {
          "id": "f2653a87-ab16-435e-8cfe-7ff4010025ec",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "519ae280-7f7c-407c-9b72-427622eff586",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90c05dee-95fe-4c92-af37-53ed6c36acf2",
        "cursor": {
          "ref": "144e56b8-16b4-4af3-8ac9-479e43e5f1e8",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "567c9ea2-59ea-413b-ab45-aef6712c15c0"
        },
        "item": {
          "id": "90c05dee-95fe-4c92-af37-53ed6c36acf2",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "1613e434-f396-4214-9c46-293ba021a0c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89244317-ef02-43a7-801d-ca80b3c07df7",
        "cursor": {
          "ref": "ba6cc309-d62c-404a-b85f-070ce33e6f65",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "089db905-52d0-406b-ac04-943215d788f6"
        },
        "item": {
          "id": "89244317-ef02-43a7-801d-ca80b3c07df7",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "819403c0-1119-468c-994f-d5e09d84241f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ec8ce59-3c43-49c3-a253-97003655462b",
        "cursor": {
          "ref": "4636e7b7-92a4-4fcf-a246-ab006c2794a4",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "1c77c9a2-b4fc-4c86-920a-948995cd70c3"
        },
        "item": {
          "id": "5ec8ce59-3c43-49c3-a253-97003655462b",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "67d73e44-a290-48a8-91b1-345f8d8a4243",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d727f025-909b-4725-ac7b-2e45f5d748f2",
        "cursor": {
          "ref": "805068ae-a4f8-4372-b5e0-2b61e1d45ded",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "ec129ce8-3c52-4bef-9383-dcd12e02d458"
        },
        "item": {
          "id": "d727f025-909b-4725-ac7b-2e45f5d748f2",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "288cde6a-2482-444d-91f4-5e6e3098ba08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b25f42f6-ebb5-44ae-bf3e-026761ac0f22",
        "cursor": {
          "ref": "505edbac-e00e-484b-a3e5-7f09f88ab299",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "ed461f4d-fcc5-43e6-8dc2-fa5a63d7b6e5"
        },
        "item": {
          "id": "b25f42f6-ebb5-44ae-bf3e-026761ac0f22",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "d51d5888-ddfe-4cf0-a058-cc0bf0bda296",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "214e2fb0-4ccd-4669-9781-f22cbb446dcd",
        "cursor": {
          "ref": "f399d783-6815-459f-9f7d-bc36e56350bd",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "2fc8dc60-85a7-4eeb-9d2b-323e27708949"
        },
        "item": {
          "id": "214e2fb0-4ccd-4669-9781-f22cbb446dcd",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "5de59c60-9165-4da9-a4cb-380598a421ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1433be2b-ed14-427a-aab7-bf12fc54b715",
        "cursor": {
          "ref": "d31aafe9-1c12-4268-9ce3-7627eef775bf",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "c4517f48-858c-47ef-9302-db0321b4e85a"
        },
        "item": {
          "id": "1433be2b-ed14-427a-aab7-bf12fc54b715",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "9f10129e-9824-4573-8a0e-0308373d997d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9c82913-8a91-43d9-9571-4507ac5ebb62",
        "cursor": {
          "ref": "bacd2b25-7097-4ddb-9c0d-78cdc515c608",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "06abbbad-e838-4d61-aa52-ca85c8198dc4"
        },
        "item": {
          "id": "b9c82913-8a91-43d9-9571-4507ac5ebb62",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "7068c4ce-4d27-4058-811f-1e748ffb46b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06e9524d-f3c8-4cef-a972-c1017d529a9a",
        "cursor": {
          "ref": "e7183b6a-f2e9-4b17-bc6c-19018aa7888c",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "36a9af48-43b1-4d6b-ab2b-ccc01c450ecd"
        },
        "item": {
          "id": "06e9524d-f3c8-4cef-a972-c1017d529a9a",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "c392ac09-d8d0-4ffe-abc4-25cdbbba7d46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5af933e-b451-4ef0-a7b0-0b7eeba21505",
        "cursor": {
          "ref": "cb2dcd73-1cfc-4280-b2ad-096fff168372",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "ec3d1995-bf69-4819-b532-60e5f9833722"
        },
        "item": {
          "id": "c5af933e-b451-4ef0-a7b0-0b7eeba21505",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "1a1a445a-eb17-4c6a-bb7e-5d4dc4199559",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57bc1bf7-f8c3-44b3-a45d-44980d61d47f",
        "cursor": {
          "ref": "556f4f72-01fc-40e0-89d0-48114abcd65e",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "d08b40d9-23a9-46c7-be72-62177ed7ebf1"
        },
        "item": {
          "id": "57bc1bf7-f8c3-44b3-a45d-44980d61d47f",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "67249010-21f6-4b24-9f73-e82d829ee889",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be2c6f2d-9584-454d-a769-db3246ef7563",
        "cursor": {
          "ref": "d6d7a4c0-5d27-48de-acad-08bcccb3508f",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "36cd1525-7268-4d86-9d54-68201f6f7da5"
        },
        "item": {
          "id": "be2c6f2d-9584-454d-a769-db3246ef7563",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "0188cc64-cdb6-4090-923e-c457cdc6271a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2f26a6a-911d-407e-b98b-473a79af5272",
        "cursor": {
          "ref": "76c0bb4b-d9d3-406b-8cfc-7c0bc828eb64",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "5d8992ee-75a7-4301-a327-cd8811c1280a"
        },
        "item": {
          "id": "e2f26a6a-911d-407e-b98b-473a79af5272",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "1d4c7ef6-54f8-4c34-81c0-39a58d7d8f82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "524a849d-9b77-4952-8fd2-79799ed15ac5",
        "cursor": {
          "ref": "fec67452-8858-487b-a80b-81e14485c316",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "af9bbcc4-b039-4d60-8447-b5c18b9bf75d"
        },
        "item": {
          "id": "524a849d-9b77-4952-8fd2-79799ed15ac5",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "a965fc90-f7f3-479b-ac6d-af1e8c9cf086",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "b892e38b-d68b-4e04-9e11-20a8b8a66b44",
        "cursor": {
          "ref": "7b87a078-66d0-4e5e-aaab-0df5d08e7ad3",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "f9b1753b-6ccc-4bb0-a447-bb86707d3b30"
        },
        "item": {
          "id": "b892e38b-d68b-4e04-9e11-20a8b8a66b44",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "465b2a8b-94f1-49e8-823c-931677cb1115",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "dade2bfe-d8a5-4c1e-8024-767e91519b2c",
        "cursor": {
          "ref": "cf38608e-44ec-446e-8aed-4b52e7cf4da7",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "7944dbbb-a717-46c9-823e-eddc8b3cd733"
        },
        "item": {
          "id": "dade2bfe-d8a5-4c1e-8024-767e91519b2c",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "edb55f48-4d19-4f7a-a3d6-4331bb7f8d55",
          "status": "OK",
          "code": 200,
          "responseTime": 142,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "13b35ce6-c276-4641-b943-5c3e299d017f",
        "cursor": {
          "ref": "76941ca4-1101-4718-890f-18af11c001bc",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "9f4ed5ab-108d-4c8d-b9ce-da418e272cd5"
        },
        "item": {
          "id": "13b35ce6-c276-4641-b943-5c3e299d017f",
          "name": "credentials_verify"
        },
        "response": {
          "id": "d188c578-686f-490f-a9ad-a40645c8d1ba",
          "status": "OK",
          "code": 200,
          "responseTime": 2551,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b04891a-9804-4675-985a-7c2c90fb46d1",
        "cursor": {
          "ref": "d2879058-2621-4c4a-b735-d282f69e72ef",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "33da767b-a622-4322-b685-85e81d6903f3"
        },
        "item": {
          "id": "5b04891a-9804-4675-985a-7c2c90fb46d1",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "8b5f07f8-8149-45eb-88f4-d36d3917b5f6",
          "status": "OK",
          "code": 200,
          "responseTime": 2367,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "3de56f37-b340-476b-aa26-a803f807e69e",
        "cursor": {
          "ref": "fe9042ef-940c-4dd0-8e82-fac16b089398",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "0398f9f4-d6ad-4d45-9912-310f80fd7c8c"
        },
        "item": {
          "id": "3de56f37-b340-476b-aa26-a803f807e69e",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "f54f9d7f-aa67-458e-818f-0c5c175e7f7e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "3de56f37-b340-476b-aa26-a803f807e69e",
        "cursor": {
          "ref": "fe9042ef-940c-4dd0-8e82-fac16b089398",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "0398f9f4-d6ad-4d45-9912-310f80fd7c8c"
        },
        "item": {
          "id": "3de56f37-b340-476b-aa26-a803f807e69e",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "f54f9d7f-aa67-458e-818f-0c5c175e7f7e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "3de56f37-b340-476b-aa26-a803f807e69e",
        "cursor": {
          "ref": "fe9042ef-940c-4dd0-8e82-fac16b089398",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "0398f9f4-d6ad-4d45-9912-310f80fd7c8c"
        },
        "item": {
          "id": "3de56f37-b340-476b-aa26-a803f807e69e",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "f54f9d7f-aa67-458e-818f-0c5c175e7f7e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "46f68dee-c241-4f62-b9fa-7b5bbfabd7d9",
        "cursor": {
          "ref": "dacb5bae-aa58-4b99-b0a1-bc5844353180",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "799c052a-75cf-4d05-80d9-387598d145e6"
        },
        "item": {
          "id": "46f68dee-c241-4f62-b9fa-7b5bbfabd7d9",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "e808f5a6-4cf1-45a7-a595-181bb55dd611",
          "status": "OK",
          "code": 200,
          "responseTime": 102,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "4469f5ee-12f6-4d56-abc8-708fb07ccd09",
        "cursor": {
          "ref": "071ea704-77a1-4d65-acb6-97c30ab395f9",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "da8cc7c7-e053-4474-8072-d61be3be5260"
        },
        "item": {
          "id": "4469f5ee-12f6-4d56-abc8-708fb07ccd09",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "518dfae4-4b14-4a99-801a-63c44654d92c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "4469f5ee-12f6-4d56-abc8-708fb07ccd09",
        "cursor": {
          "ref": "071ea704-77a1-4d65-acb6-97c30ab395f9",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "da8cc7c7-e053-4474-8072-d61be3be5260"
        },
        "item": {
          "id": "4469f5ee-12f6-4d56-abc8-708fb07ccd09",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "518dfae4-4b14-4a99-801a-63c44654d92c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "002e7ace-20ee-4203-9a66-5d2ace0c612f",
        "cursor": {
          "ref": "d0be7b62-9b04-43b2-8d32-14a102eb904a",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "f98603e9-4a57-4a61-bdbf-19650c02901d"
        },
        "item": {
          "id": "002e7ace-20ee-4203-9a66-5d2ace0c612f",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "27332fc9-dec5-4b0b-a820-5d6c968030dc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 144,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "0ecafac2-243f-4c52-a13a-de43bf4e2d48",
        "cursor": {
          "ref": "8f73258e-d87c-4226-94ff-94e067dd3892",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "dea190d6-c9d5-42e3-9eea-0541b5409353"
        },
        "item": {
          "id": "0ecafac2-243f-4c52-a13a-de43bf4e2d48",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "ce291c4b-2ae3-45bd-87c0-1c43711db31e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "0ecafac2-243f-4c52-a13a-de43bf4e2d48",
        "cursor": {
          "ref": "8f73258e-d87c-4226-94ff-94e067dd3892",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "dea190d6-c9d5-42e3-9eea-0541b5409353"
        },
        "item": {
          "id": "0ecafac2-243f-4c52-a13a-de43bf4e2d48",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "ce291c4b-2ae3-45bd-87c0-1c43711db31e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "e2334178-a154-4fc3-b4e2-219c7e27745e",
        "cursor": {
          "ref": "43d785fe-3bc9-4d3c-ac11-95208539e5ee",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "6a9ffa14-8802-4c3b-a917-bfbcc174d8a6"
        },
        "item": {
          "id": "e2334178-a154-4fc3-b4e2-219c7e27745e",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "b99ab4f3-d559-40eb-a2aa-6d45ece3a84a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 109,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      }
    ]
  }
}