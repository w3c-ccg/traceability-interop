{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "57ad7161-a473-4402-ad7e-5fa2c958c7bf",
        "name": "Clear Cache",
        "item": [
          {
            "id": "4706ef46-c1b3-492d-800a-74170ea5a1a5",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0aeed1df-0f2f-467c-a2ed-46a9dca82d54",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "00f59554-e3cc-4aa9-90b3-ec90e01f7aef"
                }
              }
            ]
          },
          {
            "id": "f465aea8-3ff8-429c-8833-acd952f39e84",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "fd75d16f-0972-43eb-9ed0-741917d521bd",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "086b9b7e-9754-431d-b188-da83fe93ac8f"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "33b101d2-3444-4d4d-8a12-5ff89829e6d3",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "116dcbf7-f29a-4ba1-acb5-d7f8f3abb98b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "4984194a-81af-45e4-a442-ed05be012a0a",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ae181b30-0d84-4f09-92e4-2af24b28fb09",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a8fef3f2-7b1e-4b20-ae30-c3d10883f057"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f57a1513-91ad-431f-9171-ab418de005e8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "74888bd6-96fb-4662-925d-50cbdfbea5b0"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "4517db73-fe53-4c46-b8df-27b06674490a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8409fdbc-c2e0-4941-a2ac-2e825c2e0189"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8af24e5a-bd33-4349-b750-a437c4773089",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "105c92e4-e152-4039-8634-67b6e81c2a66"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "731a6860-31e3-481b-9c36-f74749c48331",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "52881386-d6ff-4294-b851-6185bbb43734"
            }
          }
        ]
      },
      {
        "id": "fd9ba228-461d-4bd5-8548-c2e9a9d61bcd",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "044f5391-0dad-4d56-b199-04a198bb3aa9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0dd5468e-fda9-4b6c-83f0-8d8127d62234",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "88080303-318d-4d07-97e0-967d20fcebf8",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb5cfddb-b1b1-4232-8b16-f88b3848c2ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ab93da56-e482-467f-a05b-b8d4a33f1265"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5d6db33-5ec2-44fc-9193-ff78a01ee355",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fe44523-44e4-46c6-8fbc-a20a837aa64a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ce14e783-097b-4646-aa0d-d4695712c0d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2d37a02-f18d-430d-b133-41969e1ea912",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "312278b8-f0d0-42cf-911c-f6c4a8b76571",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "24c0fcb0-1d9f-4248-8fea-76f54474c287"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "bb3de894-c3e6-4962-8908-fccaf59e59de",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e834b317-3b3b-4946-b5ac-9f05e128e4b3",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fa09233-291b-43bd-b7a9-79b3485d46db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "304aba59-60b9-42fb-80d4-321ff6b194e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b5565b6-0cd7-41e6-97f8-d6f9932861c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e30db41e-94c3-4e4b-9500-e53a622642e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36aaf71a-20f0-447a-b570-5918990bbd58",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c71805cc-b449-48d5-8c45-e0b359ead74e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "18e8fa57-ca3a-482a-ae7a-d4c751ff3f10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "453765b8-1ec6-4608-8e72-18c7b17d2e6c",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "2950ec11-9059-45f1-ac66-4f6c2024ef81"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "89fc916c-351c-41b3-8b3c-b0229501af15",
            "name": "Positive Testing",
            "item": [
              {
                "id": "6152f4c7-6cec-4a9b-b7ba-01ecf25af8d0",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e731244e-bc49-4631-bfa0-a7a128a0127f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "b2f22afe-5095-4976-8e69-25d7eea89cf0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "85c9ba2b-15b6-4508-8cf2-6de53cd17eb1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "2367122f-5841-4ecd-959e-2eb4ec855bc7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1697075f-7449-416c-b094-628aa1140f9e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3d01c37b-c73a-4c9f-b786-a4cc7c1ea64a"
            }
          }
        ]
      },
      {
        "id": "ba3bb0ce-6ea8-40e3-9a2f-3548ee3ea57c",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "7f2fa522-ca73-4d35-8a29-775d122be288",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2f56a37d-b493-4989-87a0-721e9d410ad7",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "48acc003-d797-4c82-8831-7d411fb05d80",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e9883fa-bb5e-4ef0-b554-0b32fccfb62e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00612edb-c87b-4836-97fb-090d13a03bfd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbc97d52-894e-45b0-81db-a5af20eeb8ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0ed38394-b7c0-4b07-a8c2-a76a0ab85c61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ed6a404-67d5-4f48-9d1c-0664f127ab71",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d975476-430b-4727-994f-a0638887e155",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a61829e-be08-4f10-b21c-ae4941e74cdc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a3cc2bd-be47-4581-9406-122d746f4c1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "64fbc55b-17cd-423e-b498-e83ba620ae4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba487e22-3652-4e75-97b3-caf5bd11a3c9",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1526e54-f986-40b1-bdd3-563037569e8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f0afcc4-dd82-41fa-85e8-6c0821e9d09c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77b70e33-8f1c-4e33-a902-6b0c10108b98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6012967e-d6a8-4c57-956d-88a5c55023b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4743f42-aedc-42c0-9e68-90169968e15e",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce2f24ae-ac9b-4bf5-87fa-1d532fc5ff2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e24af43-dfc4-4198-80fb-f24265cf3646"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4108dd60-8940-4b7a-87b2-e085a7d7fd92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "67bab53c-edbd-40bc-ad56-950be3cd6fbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00f6bde9-937c-4e62-b35c-3f0bc09dbc38",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7fc0e78-1e6a-4984-bef6-bd46dab6cbbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd6a3240-2a0f-4576-bc77-807ef0fc0acc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d783ac9-7ce6-4141-b3d8-12310a0bfa34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "519c9e65-51cc-45fb-8766-d05433ad5b88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a03c90b-53c7-438d-be9f-b9688125548e",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb321a40-6163-4a2b-81bc-3fe8139567f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74d450a6-2341-486a-8881-4a1e1c763c1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "222e16cf-0e1d-4be0-b416-f82404ee4d8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3fac8829-d85d-4042-bb32-ff7520574113"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a2d2008-6748-40d2-b7f4-c51ba19c7cd7",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8be72592-c6a7-4b55-8997-f6e6a6a49051",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "675339f4-c2a6-48c0-b13e-f61e23fb60c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2a1bce7-52e1-455a-9ea9-b5b5f960af19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b7934910-a551-48d9-a062-366d0b9e9751"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7253610-4e1a-4496-b4fd-151bb9a7ccd6",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08be9f6a-e2ed-4429-8838-eb95c52c187e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "501f7e3c-bfa9-472f-a763-4bb56ddcaac3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65170788-9df7-4c93-a595-66d97a994994",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6989cc1f-2fe1-4bd7-89f5-08671b531793"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2b3768e-e916-41be-b13b-9acbb18974a7",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1193523-7415-4f3f-a580-7780390242d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6502cba0-3c9d-4805-ba70-828ca4b9cab6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4368e97-5738-4182-912f-263e0821393b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "32f99924-fc03-45a3-93b8-48708461d84b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "357680d4-b01e-40c1-b5af-c655dc99b85a",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52520458-c57d-4db1-b4d1-ec9853f67655",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5be5edce-b6d5-4a1a-ba24-8c7310c12276"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02d000f4-70c7-4fce-8aa6-8fc94393d2da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9639f88e-c858-4090-89bd-7cb96e4be388"
                        }
                      }
                    ]
                  },
                  {
                    "id": "979b7b7b-0d4d-4ffd-a4e1-be46571c3dbd",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fe67b6d-6505-41bc-b7e4-1a3d26548150",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "481e6b2c-aba6-4aa5-ad82-8a2957d67f0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc14407c-8c1c-4222-b2a9-67c6b1a54457",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d9ac738f-0c99-4d30-ba83-ccfbf8fb63d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83eaef80-e4da-4e29-a511-d748e3b3113a",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba60f9e0-601b-4a26-b09a-13dc62568c28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58c2a232-d610-4ba6-877b-f951bcbd1d13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2aba5167-f880-49ec-9090-9590cc87559a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "366bf437-92f6-49f9-a66e-2ba1bc9b7bbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "052495b4-417b-46ea-86eb-e0f7415358d1",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eefda05a-84ed-4ffb-9ab2-edc66b2d6912",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8126fa4-6cb8-442e-ab90-b6dc99124537"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a67b21ca-2b8b-4482-a769-e24140b7f0be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1f144938-1bf5-4cef-9b58-707c06f0bafc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17fe7242-2b91-44ad-8607-a7c78de01df9",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ee868b3-70c3-446b-8c3e-8e428ad66717",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7a23bcf-2bc9-4f15-b0d6-357937a215ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ec8079c-7747-4e80-9775-aab904875191",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "542c98cb-cfda-436a-abef-0e0c56b22229"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95de231c-3c49-4d5e-8c1e-3cf2622c4d3e",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f35a46db-d5c8-4ea8-b863-d29bd529edb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7f989b7-f4e6-4e81-b964-4babd2751dbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "619d6063-0597-461b-ba71-820a95623932",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dae76810-66fb-4a50-a0ec-f0a9538600d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fe23f29-180b-4a74-b1b1-8432013d3d57",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c7ae6ab-bd80-433d-ae3e-3b74bef0d4f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a78bfadf-5974-487d-b6fe-f889977eda8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ae38253-6f4e-47d1-93c3-aa8ab65f5c9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "36565b5e-77c0-4145-9cb5-d70409abb7d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6a0d7cc-ac44-4e94-b4e2-089d2efe6b91",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f83f7332-b4aa-4d07-b031-953909ecf1cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "045b1946-7c78-4fe0-a928-64c4267680f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44c4d97d-c0ef-48e8-a3a0-6c937e97a6a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "983707a8-68e3-4d68-a724-aec6505db540"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c46d1d4-b208-451d-9b09-d87f54db7447",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ae96633-b865-4941-af53-afb14fec4e43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27eed6a9-ac93-456f-a507-a714c0628547"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbab3be8-e637-4c04-b3cd-b19762f8d274",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "581df28d-ac56-4b5c-b13b-8bfdab81fb5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21a67eda-609e-481f-a264-9ed87845d9a6",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e8b9a33-cb4c-4559-aa09-0df179a55e5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07608ee7-147a-4fb5-a0db-0be66229cb57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "928d73d2-6dbf-4b55-aed3-8552214949ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6679bbe5-a0c3-49f8-aada-94efe72ef9f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0363d8dd-f509-404a-91be-6ad6984ddcfd",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a68d831-2916-4ca3-9b75-1560d39e69c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb35619e-e9d9-48c3-b943-3c1904e3a4c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7819834d-830b-4743-bd92-25dbc0c57865",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "07f066d4-9225-43c0-995b-b5a98831fa58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73272165-3a83-4c67-a826-1bac1d478522",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b45567f1-c610-4ccb-ae7c-5ea1d627be0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d003c720-2f9e-4509-990e-2fb167a1351e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b8773d5-bd32-4489-a888-af6123c539d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e089094e-b004-49a4-bfeb-a771513fa9a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "498481f8-d6ea-495a-b6ba-c8d96e2a162b",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5ea85b4-82ca-4b10-9ed9-7ea519f2da35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eebb9657-27b1-402e-ae65-9437b09ee064"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "badadd49-2d2a-4e90-854e-1238df6eb91f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "304ce5eb-93d7-4db8-95ba-a38f5c58a3ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6bbe9fc-ed78-4329-8299-dd7adf2ece36",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "751a7956-7784-47cb-b3bc-072b8ed4f802",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35c3c574-ebf7-4ec7-99d9-a6f419268d14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37d53357-d997-4aeb-97d6-dc6718cda202",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "25fb02c2-576d-45fe-b276-4669c815ca00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be62aa33-9f91-45db-b054-25a66ab171a2",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "189add03-1b0f-4d7c-a574-74dd6e97f9c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "290cc695-ec3e-4acc-8377-bb385b36f65a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27ec38ea-b583-4a4c-a18b-cee94c0c1eae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "b6e44f9f-c61a-4523-9b1b-82042f2b12e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18e2de3d-d362-4622-a7b3-0a8bd93d993d",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7ea5b0a-0966-4ab3-9915-9e7b341e6210",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd885837-2e51-494c-889f-4a524e82def0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3664298-9708-4c3a-98bf-47824196c0c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ebd7bbd4-c779-40ce-823b-c819a9fe3322"
                        }
                      }
                    ]
                  },
                  {
                    "id": "451ed921-fa5b-412d-b77f-91163ef9334a",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65b06662-44f6-46d1-b3cf-87206c685d88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c438f8a5-53b6-486c-ad9e-664a2eaf93b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0050ec15-265f-4294-8006-94b4fcb09e13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d4ffd054-a03e-4e20-846d-ada6dc74ab7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "566a9eb6-364b-4d11-b0f0-cf818828cef4",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff63aae3-3db3-4209-9bab-16fc39f533ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab51806a-2bea-478e-8617-18c9ae131f8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10b983b8-cd93-4d1d-88fd-f994edfe6143",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ad104f37-a5dd-4da7-8f15-737334d88680"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c618762-3928-4896-b95c-a93e272d8975",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c336f3d-73db-465f-b10e-8077ef5424e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af8c47fa-358b-449b-8e8a-0a3b89b5b732"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0eafe571-22d9-4c07-bdca-2258357c2e52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "04996871-1bc5-4402-af11-54637565dc62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36aebcf0-7041-428a-9ca4-31b82a4687f9",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55a174ba-f17f-4bdf-8c49-ded85785c155",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a49e716-c219-4440-95cc-cdd809249550"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71194a22-9965-4a41-a560-6a8415bbe075",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2f644fbc-cc19-402f-a16c-5f49a2df5c48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34801d7f-a269-40f9-9b2f-000594c62430",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e58e898d-cd92-451a-95f3-303030ab0289",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "544f4533-07b9-4a16-8d14-848368d5168d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dfe10d9-6072-4f78-957f-3ffc6e3c554d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "0ca41f3c-8de9-4f8d-98c1-0783c8b158c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1507ff1-1f2e-42dc-b3f0-5a58aa9bce8a",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "960f3be2-4420-4945-9878-dbacb6248f06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "caec237b-b36b-45f8-828a-b36329fefedd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28c9fdcb-3e11-4c0f-b622-9d7ba6abe423",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ce8d7860-6592-425d-b929-2b633e3872ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c24fe86d-017a-4e2c-bdea-a50b52b0779a",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14cd5f26-055a-4ac8-9e3c-b2133c0afe0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eaa76860-b1db-442e-831a-f4b5adea902b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50db5966-64e1-4cc9-833b-1f2e9f0b17f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "17e995c2-a530-4db8-887d-7d27d0e5cf80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cad165c3-565f-48a1-8ed4-3305beda1cb8",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2280adac-c0fd-40fe-8044-e2757c4d622a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "927313f1-6d9d-41a5-8ac8-191d9488453d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67d394db-30ee-4a93-b7cd-364af9f86f33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3fd94d4e-d50e-4bd9-b0a6-e58d06a33dec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e3b617d-c00a-450c-876e-3da5a7f41c56",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36a9a081-a8aa-4c2d-9a53-ff798b7de877",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ab0208b-482f-4692-a60d-98b920f1c356"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f88fd31-5f31-4817-8487-bfadcecd7491",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "44bc8b1e-6826-497d-91ff-fde1afab0954"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dc8eb4a-1dba-40f2-85ff-06664f5bc5c3",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9daaebbc-b8d6-4cd6-b456-949ad5356214",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1b0075e-ead3-4de7-8a71-a1865a05870e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43f1710d-5b7f-42e9-b859-8dd7052904e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "aca66a29-f653-493e-8a67-6c36ba9dc3c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1facd32e-f3ff-4f23-b650-e7660b4956d4",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c8754e6-15d7-4061-8fbc-97a515c0a780",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "24fbe5a5-ce66-427b-8aed-f3938155a282"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "680e009f-599e-40e0-854f-36a93f3bd76d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "346d1dee-b673-497b-841e-329952b6fddf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c74ebb1e-ab8f-4942-839d-05e86814db04",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07093694-f73b-4ff7-bf56-8f404bd49425",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac7e83f6-0614-400d-9844-49103717a9c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9f5f4ad-fa29-46f6-ad76-3abc1d82907c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "07a7cf72-3982-48ab-9437-55f0f16a6953"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba3b90b9-4c71-4636-b94f-e54c9e2fbc6c",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32ef079d-8324-4e2f-8573-1576a208cf32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b538141-121d-4536-b0e9-374ef537f3e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82744aa9-3f54-4364-a835-f248e2ba2715",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "d5b89093-7a04-4c06-99a8-96ecb1bb8f88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65b7e772-4430-4f1a-82e3-80194721d808",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34cf1ca1-920d-4895-af59-39ddb3edc7da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bb9f36d-191c-4257-9396-8fbb4c891926"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5531c4a4-a53e-4a69-8bc5-2b74163bd59b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "d748687a-418a-4d68-8d82-f61afc7f936d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78af02aa-e851-4427-a035-cec1511a75aa",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2174a42e-64ca-48f4-81e0-c8ef3e312a96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa1ab1d8-796a-41eb-9ecc-f60216c9d448"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea9e4dd5-37a0-4366-814c-d75587acc159",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "deca7988-4992-4871-9d33-825942d42c80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6a16a87-7d12-4965-8135-5b0ab60c4d14",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad292330-94fb-4b4d-a3e6-3bdbdce9a657",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4e90779-91a7-44df-97b9-d06c18a3b4e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c281ddb-46b2-4550-9ced-ccfc03b8a584",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "e1af0150-740a-4bfb-b711-c703fa9f2994"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cb97f3b-f8e0-4f75-b53a-a8016f1bd737",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0796cc2e-36ff-42ff-bfaf-e399bc4d4b0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "246b0961-5e6f-471d-99b5-c661f5a96b64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e6ed183-1dee-4039-802f-63bb004b5926",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "bd995b3c-76a4-45ea-af7b-c3c0daac6e93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "069484c1-a88f-47d8-b517-aebe45677546",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17b7ab97-ae76-4844-9c74-6a72c4f09b35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c9eb08f-1aff-4235-a0b9-d5f3ca4bdc59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c3a7033-10ea-41f0-b0e9-dc711473a56d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "1b6d053c-61ba-46d4-8b80-3018a6f279a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c458c285-b63f-4ead-9c90-c18af39da3e0",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65ab61a6-c5c4-445b-b4d0-d0080635dbcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c3f6e20-a910-4516-93ae-eb7181dcbf54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7a6a8f4-48bf-43a3-bfbc-ab587afc8565",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "cd89f5ed-b3fd-463e-ad91-6f519d8d6b45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b073397f-d8ad-477a-a967-ad478c52b2a4",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0695220e-082c-4cd4-bbc4-9075a0391a46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e279e8e5-6fe8-4167-91cd-d7266cf465ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f39725e-9d07-4c54-8bd6-2da83ed6cab5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5c4cb894-2f07-4709-a994-a7776bbee141"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfd12adf-b2ed-404a-b965-7160e9eacab2",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b25bb36f-c230-41d3-9303-6c8ba3d3e470",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11a63758-d122-4710-a77b-d2b45972ee8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c51236d-d3c0-46e0-b2fa-27375eab9e15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "64cfb411-8e84-49b7-b830-698ccb31f99a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2ad6fef-a54e-4a98-9fc6-931767ae084b",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd91c6f9-b6e9-4269-90a5-9edfe367479c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb64b4db-7b38-484b-9dac-ef4f95bd5357"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8758a473-9d32-4deb-99f6-be0d8b79cddd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bb8ae1de-c1c5-4a2a-8d8d-0879308fb11a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d52e3a8-d0e9-43bb-a3e3-fb11b2b4cdf0",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27658e1b-323c-46fa-a77f-5da9dbd3ec63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "610011e1-7c0e-41c7-ab51-8968bfd05cfb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "452f7013-72f4-4c9d-93c9-42cbd1f6bbdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "964ac259-c396-44a7-ab18-7aad39361d77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37aeb2c7-f036-4bf3-8b32-ce7d926bb4dd",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87cfa616-ec83-4421-94df-ce6fdc9ed46d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f5a051e-196c-4155-8c8e-8e3a8a66d157"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d85f16f1-febf-46f5-8e33-2eb480433897",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "10973c7a-ff4f-4f01-b53d-ec003cec4188"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71382db8-733d-4693-9ab1-2a55cb5fbd35",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "069d3d1b-e994-4887-a04f-3db937ca37f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da984955-5676-4ba2-8170-cc9f60dee3bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e8094bb-deb5-4b90-a884-6dcaabb5353f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1c793a1d-916c-4b4b-ae95-6e7b087ddc25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a6f85bd-f0cb-4a06-9061-a649a8965bf8",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "865df413-40e5-47b0-ace0-11ed8ff540d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "827b57a1-b0cf-4744-b185-101e5553a281"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ead83f8-fba4-49a9-a00d-69d96c1ebe4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "6a385e00-95af-45b5-95db-e5b33e91a146"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb916fcd-51fc-4f42-a1c6-89c4ff9ed9c7",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a805f68e-13e5-48cf-842a-ef1ff46ec58d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdd30aa7-149f-4a55-9639-205058649350"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b78ae74-3aa2-4e21-b6da-b5528df8077d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "42b4a3c4-eacb-4a38-829c-a51d0f703605"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9dd95e5-a474-44ca-89f5-c696fe80b39a",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94373d34-a46d-4939-adb4-77f45f165407",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd98b96b-e6ac-4f85-bba7-5b6ea31286b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f0286a9-7fcd-4b26-bac8-842c63d05fff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2ed06fa4-41a6-4f96-b381-3e99c02d1113"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e21f2bf8-dbe3-401b-8597-258c9d1b3a70",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d432e222-e5fc-4bdc-b853-c620152d0858",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e48c8360-7929-4b25-a83b-1cf859e18864"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29e4a085-bf74-4398-8f0b-468d31375a95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "73f2fa36-12e9-444d-af76-0ebc199aa0c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05ae9570-07c3-44bd-a9f7-60bed375cff5",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2934edbc-cab0-4d51-8b33-44f2a69639bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2d8ca5d-c242-47a9-96da-48a2114946f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e732542-da25-4151-b861-1282c3bc559a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a277f7c2-bfbb-47ab-914c-7879be3aec82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e95b4db-cee1-426c-a424-d49f229bfabc",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "685961a8-4e22-4890-a0dd-1c4c963dc77d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e793372b-fd7d-40fa-9ab8-1e2dfc0049f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59ee97cb-e870-402e-a1d1-f5c792941e26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "5038cf8c-b636-4e4d-a71e-76c068f466ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c14bf2cd-8035-46a0-8798-dbecb030123c",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10c87b17-2764-4add-b276-c95efca77242",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b814225-7fa1-4fce-8454-04a538f04922"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63fbbd12-faa6-4e6a-a6b9-afcc51718325",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "cad67f7d-84f1-414e-ab83-28715875d67e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "550b7b14-44e9-4046-a35f-7408448f34d3",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22acc91b-8e3e-40fe-8a8f-908532790dec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ede477d4-5307-45b2-8062-c624847873cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b674628-66a0-4085-a2f8-6c06aeb13dde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "7e00ae66-5ed5-47da-b1a2-98f772685ba5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "873df8b3-4b96-4130-b8d7-4b03d313d392",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5418f5aa-4dbb-4bac-9da1-6c9610000d50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46447f4a-81f1-4388-8234-df75a46fae4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5ccaa14-6e0b-4ac0-84ad-0cfc6be201c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "d32953a3-784b-41fc-aa20-d4eb5948e28f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22bdebaa-55c2-4d8a-9f0f-7a6615b4a759",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed8e528a-dd00-44e1-9ce3-f6a3f3209221",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c01afe10-f6ba-42fa-8ade-5ce4bcc0723b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29fc4df4-f7c1-4c2f-a544-565714fd8bfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "13975b58-5062-498e-ac42-86fea5a6479b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4463374e-d889-4ef8-8672-c627e28a222a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba4b6d1b-c64f-4fee-b8b8-57b12094ee5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39eb02d0-ac7e-4e32-8b4b-21a027b4e39f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b867d0b-e022-4948-a961-bde6741574f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "efa3d519-eebe-49ac-8b78-cf423e580ed0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32233cc7-d2bf-4569-98cf-e4f659cc9d30",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34872d1a-2346-4a90-ac76-d0bc6b453c8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1a0cabc-e631-4ccc-b0c3-aeb6757fef76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "862a2472-8b09-4eee-aa36-c3fc903dd551",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "90e22af2-cc25-4580-9639-d490e93caba9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f198d91-a854-4221-9c19-f62563983335",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89523fe8-4e18-474a-9861-bb31cb42b392",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2434000b-7215-4dc2-b686-c79aab6bf756"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab4e45eb-190b-4e1e-9ece-88d862fdc327",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "a6f7e826-5c33-4433-8f03-d6007c72e1bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "802a8bb7-f338-4568-ab5a-0391e8526f47",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23d71547-02f5-4570-9b48-4c28b6194625",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "718d8564-55a6-40c9-8f94-73547edc4dca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab3919d3-1bff-4e3a-a841-bd926a884eaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4da4ca97-59f3-4bb1-b529-cad8bddbc06c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "089ea176-da3c-49a1-bf64-884b50dee64d",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45d34005-72d9-4db3-bfbf-fa68e523fe7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e1de5bd-4026-4b9f-97db-8fd216955125"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "852c99a0-a45b-4c58-8294-ce3f0304d053",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f239e5da-9abc-4107-9688-ae0c56fc4987"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6c9d05c-78cd-41f2-912d-d086b90d95a3",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "682e6c03-e6ef-4424-bf38-8c42a1fd8a55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ecb9271-3127-4228-b732-421e97817214"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "936f0453-a14d-48ef-9361-87c7dbd18b39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "eeeb02c4-112b-4bd4-a5fd-3df406c4e7ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c954d6d-66a1-438c-a934-409168175f2b",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b43c4aef-704e-4b32-b83f-0ddd5b461ddc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a8d1866-e481-458d-9b63-e0539d61da8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "129de99a-3f47-4064-bfcc-7e0ae8d2cccf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "289b2c33-1fcb-4d81-9f84-1dc16b826423"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09ee7f6e-9da8-4903-a04d-3869bc5a1d22",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02c9b9d7-18c5-407a-9055-d930084b0d30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7af4daf8-83b0-4bf5-a588-c902754db4ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1ea1155-b25d-4232-9c19-a534fe6e0fee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "ddeb18e7-87a5-4d46-a4a6-bcc30fe015c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f14c772-2ce6-437b-8556-915653bb9678",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62d5d65a-5b22-49ab-ae94-666e5d3dd4c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef2d63af-6a59-4fbd-96a9-f941496fadae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d7c225f-5de1-40d7-8c7c-1bd482a83be2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "932cf471-eac0-468b-a97a-d1cfec7aa7f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b31ea7d7-ac18-4774-8e0d-09e4c777e00c",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "554a25c9-cbd2-4563-814f-41baf9b8f935",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "255e8d12-7a42-47ff-971f-500a170333ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9c009ba-29bf-404c-bb33-226d38583afe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e9d2263f-4fa2-427f-89bb-180e28f1f6cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2645cb09-79f2-4583-883f-ddba4c134176",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f0c4224-4735-440e-922b-06806f6d91b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43caa52d-544b-487f-94e7-54d5fc492f1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b98b81dc-1878-458b-bf32-303166c101c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "63b096dc-4de6-40e8-9c99-a159c3259ac3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f3679e4-b9ef-4fce-b057-b3913ee6996d",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "993e6496-177b-4cfd-a70c-656deb0a4f19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f642da6-c776-41d2-a19f-c2caaf9007a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d3c92fb-aae6-4b7c-8227-1995f2fdf2b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "db824c47-e72b-41dd-b1fa-68a6e16799db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9ec97ec-bc1d-403c-aa30-47627c15630d",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45291276-6148-49e2-b5bc-5e4fc371afd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0aeded49-3724-4ad8-899b-e14bc0b6337d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3972cbc8-d026-4a98-9d7c-ee715ce1fb9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0409d4a2-d4cc-4355-8ce7-ee1187518da2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3f1534e-d975-4653-84df-6c7f3b1e75e1",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3683750-506e-4e62-8798-767d7fb33eed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d1828a4-e9a0-4549-9def-2313b07041bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c401a1a-5007-4a65-8584-882649de4ef8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f1ebc78d-eca1-4383-affa-319242c859a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6265a54-7c47-42db-80b3-9b2e18d94e90",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "862f2cb9-92be-446d-a962-7ac8c5875c02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c69c0ee-4e3e-4af4-a9d4-1d4c8746af7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2afe3be-c548-46d0-b384-92db1705bafb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5d5e377c-20f1-43e0-9e76-9f19cb2c77ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "349163df-504f-4fd8-8b08-df3a9e8a64c5",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8adb798b-d597-466d-b5bb-6040a344ea39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29711cbc-5b8e-47c3-b0b2-f03497aa2b4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "704d2577-cff4-49b2-9ae0-7b0d4fb1ad34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "378b5e21-c640-446c-a2a5-febc356f6a9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f82d82d-4b0b-4a58-ab30-76ee5400cbe1",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b3ef3ea-2384-4072-8321-2b263b646b60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0881c0a-9593-404a-b23e-0b1992d0de88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "932e7f1d-ab61-422e-926f-2d967ffc373a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bc465e93-5d4c-455a-ab74-e08e9dc16ee9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e128e23b-07d2-4484-b1b5-23f4d6c8363f",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d2bc352-7d49-498a-8af8-be5d163e6d60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8652deb3-ae14-4718-ba31-dcc41db4e645"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "818f1ced-3e78-4105-931c-43bf473f9903",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e26401b7-82a1-4650-b8d9-308b512cf6c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f31a72c-cf57-4f7d-b119-d3c97557ed3e",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbc5024b-4798-49c0-b739-29c6aea69b4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b09930c9-afb6-467d-8b28-6e06e26530f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daa554c9-ad91-4912-bf09-dd4ba2e0b770",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1e25505b-d80f-45b1-8773-634356c34d51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c041b3d-05b8-4a90-add0-2a31f4f6919d",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3ba5472-2f3d-445c-b7b6-6fecb8dadc12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afb095cb-3d3c-4495-9716-a29178ff551f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae213913-eac9-4683-b497-bd79848591b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "374f7af4-8a94-4a88-9a41-e9c747b9d87e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "840ec846-ca67-4b9c-83a1-7b32a9db8be5",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1a69076-4267-4aac-af55-5a135130179a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ed4adc4-b0a0-43a9-bd53-22064c0b88e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7baeed71-1425-488f-b184-020d2bc34b45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "a6641662-6d8f-45a6-9589-7519e5a81e8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3962ed1a-71bc-4b2d-86a6-6fa8635ac545",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04eff1e0-f81a-4f61-8588-21cc537c03b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "551a3297-6f8b-4126-b819-afc99be2588c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aed92236-0ca5-429a-ae80-7fe4c57af93d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "eff860c9-cccc-4297-aef8-09aa089f0a85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "716f63f7-5af5-45d7-aa74-9f98e3ca2816",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "271e2e7c-2522-45f2-a581-4cca06858db4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e78ab01-84ec-4ad8-9d4d-d28001136d23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee55f9f0-d78f-4be8-a937-29ce756e82da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7611349e-7c69-41b5-b4bd-4d827c93751f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbdeee7f-8c08-4271-a0e6-32354ec4928c",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "931dd4ed-8ba2-4b09-981e-acf49d6b72e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01ad4180-2d01-4a72-ab2f-c1fa15367b99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82c18279-ce6c-45df-b57b-441ff4eec151",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8fe0f30f-3dfd-4823-b425-e10032e581a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d1c8dc3-d05e-4c91-85c6-376025adedd9",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96b9a3a2-66b4-4531-8d92-1e03b7ee2a8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "436ff8ad-963b-4817-a088-2078f18bd179"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e31d4d90-0d00-4473-abf8-4c906db67377",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "feb4de1b-29dd-4463-b7f8-5ac0f1e6c55f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d33f870c-2ddd-41a7-a4ef-a56adbe37ade",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6452e163-904d-4107-b324-22407b8f89fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae0f5974-43ea-4c9b-b1ce-0c772d6df5bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e9d5337-758d-4260-bce4-61d2aaf50585",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "16d67072-6871-4283-b2b0-3ee3e60806c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c64e2995-2f1f-48a1-ae0a-900f96355e67",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6241cfab-b250-4238-85bd-072c5ee02209",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd13d727-f0f5-4d8a-8e04-576c52de9de7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa67b825-074f-47d1-a508-e98e6c2beccc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "6604ca09-2f8d-4d98-962c-462dbf32172c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a3c3f6a-8375-405b-b07c-ac994aba8904",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e298486-70ec-49f4-a7ec-514cd2f64771",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84ec0011-27db-4f94-a571-a148dad50e4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb675414-fbd0-4427-be17-0e17645737e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "acc72a95-d765-44e2-9968-c55117b9debb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb33a809-0627-4fe3-9293-b4f4ec957142",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e27591e8-43f4-4b84-bd22-8b3ee6d2b17b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74244e2d-c8a7-4546-b55b-440e70d37bd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24e55e8b-53b6-4099-adf8-852e2417f13c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "47e3fdb8-8bf3-4d22-8ae2-d5253580a542"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2cfbe3e-ce3b-4dfb-9a89-c30a2646eacf",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25791c1d-f8e3-4a5e-81f3-1d01221a9068",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e51ce120-6b16-4f58-a6c9-e9874444656c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2525dd2d-1245-46cf-a283-ed77524a3988",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "1cd5669f-7f4e-4bf8-bf04-1f63a8edf538"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cf17fb4-ba17-4d54-8831-a9e6b46870f6",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c303563-93bf-4568-9fe3-f7a7246059aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f7922d9-404c-430a-9866-341ff1fff6d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9af2a88b-a7c2-420f-8468-c66767fb4866",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "3f89d566-6dbf-44e2-8af6-70332dc92f29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c75f8c5-2251-418c-8c68-b6700212f279",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe6da9db-a9cd-40cf-a9ef-b0779ad1753e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "ebbcd636-677a-483e-aa22-2f9ffd3f05d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f95d1946-a8aa-4313-8d04-629d77d0bfae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "f0583a40-a7cb-4af8-aac1-4b105e0051f1"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "aa14fc67-f0ba-4e28-a9ec-c9fb34c903ca",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9a02b32c-dafa-4e96-b7dc-d4e1bbe51f17",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9ee19fc-89e2-402a-a60b-7b8ea53c86d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b6fa9ec7-259b-42c8-b5d5-269b46a8349b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdf51df8-251a-4f5e-9273-d20a604b1d05",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "67a61bc0-25f9-4e6f-9df3-3296f875837f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3f64abe-9584-49f5-9b2b-1cbc0f5bd2e6",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6ecd802-8899-4739-b7b3-19a4d48365d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9614fb89-229c-4a5f-a6b8-5a73b3e80df5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8cc87d6-fe05-4d16-87ae-ef770c6c8187",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e9cc8685-2ae4-4178-9c65-30f21718f9a6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8b37b274-d2ca-42a3-897c-0d5631ed9a25",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2dfb6488-5ac3-465d-9719-1dd8ea089e21"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d0b38728-106d-4f6c-bc26-3adcbfa9fd0c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e0be5791-c575-4a82-be6f-58040d7ab05a"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f641cc78-5d71-4253-a17a-f593457571de",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "279679b1-4f06-4274-bdf2-4f03729f1bc3"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "9bd43185-3310-4f9e-87aa-5f41c6b6484f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "34ad7430-1856-46c9-b82a-a1370cdc6166"
                }
              }
            ]
          },
          {
            "id": "f2449273-12ce-4a0a-987c-ed2ec1ae16e8",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e24e61a4-3471-4ecf-8142-f01878845aba",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bb391da2-07f7-4208-ba36-c4de450e4302",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "91951408-1ca6-49a6-bbcb-25b2a719658e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "762e9708-98cf-46bd-91ae-0e01f9654d1b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "6263f2e4-894a-4de2-aeda-9e59e767da5d"
                    }
                  }
                ]
              },
              {
                "id": "dc724eb1-a162-4933-91fd-2ea04756d517",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "06779b4f-1598-476f-81e6-b0883e6d2518",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ca54d6cd-d3c5-4dda-a95f-1b1d8125aa7a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c991b8e4-ba56-4dfe-9cc4-8651a98f2fc5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "acc5dcd3-ad30-4b87-baff-97d2f7fbb48d"
                    }
                  }
                ]
              },
              {
                "id": "202b3e82-fac1-43da-9e30-b1a0ab8c1024",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "dcd4f8ef-7c9a-47e1-95c0-61b25995262d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3d7523b5-c40b-4d46-939e-a26ec9691f10"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3a561867-bc87-40ae-a6f0-bd960b7456e1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "8876e3c2-fc67-487e-8487-4c89d4778953"
                    }
                  }
                ]
              },
              {
                "id": "6932c9b1-ec13-4b0c-90e0-450a2c80a3ba",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "256db5d2-8f74-4f16-bc06-d43be19539e8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f945c46e-1f5f-4a78-98a7-2d008a16043d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "86c66f48-8f61-48cb-ab24-d5a23a71c3e1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "aa8dab92-f27d-49c8-b630-155c8fdb7824"
                    }
                  }
                ]
              },
              {
                "id": "846bb1c0-169b-4a54-8f72-072f7a157215",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "db594fce-e202-4c29-a7d8-fb49e6f7e095",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0a3a9859-2927-46f4-825f-367de577c948"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9f72902f-c344-4ca6-8d7f-46d70ae3fdf5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "4cbc6f89-2fde-4262-ba80-92200c1d65d2"
                    }
                  }
                ]
              },
              {
                "id": "e2ebab78-2909-411a-a1c3-419fc479b1ec",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fecff396-ea30-4575-ace1-ede8f0febbd4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3cbd5f28-5995-4926-9235-0b88d824810f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "161af705-3343-4a98-a2fd-3421b6d9be3c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f4e4112b-2dc2-48e9-ba6d-adb5f654c0ad"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6c6f5c29-64c4-4701-9b98-75b13e7dc599",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "51f35d36-d319-4d4c-9198-09af1978b25d"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "6da4a369-08f2-4a8f-a3c0-d52e43bec9bd",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1d3979cb-bc61-454a-9f22-f518fc12f38b"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b783e899-541d-41b9-8d5e-63afe5774de2",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "5d437cc0-4398-42f7-aee3-0fea2ed74b86"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2dc9ffb9-8403-4c53-9ecf-f555be93651c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "01544c11-c271-4c60-a639-7697fde8786f"
            }
          }
        ]
      },
      {
        "id": "41d142d9-cf10-415f-b709-9cbe0984a399",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "e7e694d4-4486-441f-8d24-37f58809a55b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b373a850-52c9-439b-9e5a-8fb47ff9b915",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "c15eba5a-d4df-4015-bc0f-72e4a06b2e92",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40a9445a-c23a-40b8-8a1f-7a2da96fde8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1e63c94-5aa8-4fde-bda6-53e923a6750b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20a556f3-294b-413a-bc09-a23d760a738c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "7a1807a6-7d87-49f4-b560-897d47359921"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa8a19c5-a894-4ab4-85d2-e74520a82be1",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfec1cce-eafa-4eea-abc0-89a952188968",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d53e123f-cc20-44ef-b517-11bd1b3eddac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aefec70c-ac29-4c4b-9712-a991c7bb8d27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6314877c-a762-42cc-923c-94983c537cc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e85cad18-694b-438b-831f-b40fa630eb02",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0565fed-5346-400b-a6ee-a0e14f9d3a3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40f9db4f-3160-4205-8eea-d013e99dcb94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "581d9cab-e663-4fae-a443-d7e140c9e5e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f9425c4f-7647-45cd-b285-54a3a0cde554"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed838e36-ff75-44bb-9dd7-67f5e2e74e04",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f92770b7-e41d-4976-a546-4ab6ea93c3b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecfde2ac-f19b-4b4d-887c-64603bc4efca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf81f6e2-e326-4da8-bb0f-c5c1deb69301",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "da8e96a0-a3c0-4f94-85b2-b14e85f0f831"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e71e2cb-c3cc-423b-8e0a-c57bd322d1b8",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d78a5bf5-5233-430f-a0e5-21aae0a72349",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5cb1585-0be8-4fc5-8ece-66b39c4b3de4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84854e20-fa7a-4ba9-9f52-06d34a729f5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "52060c8f-dbc4-47cb-bfea-26111bd361d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2f3277c-1cc3-4474-ac28-75f0bde1ef3b",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99e67d6c-e4b1-464f-86cd-82b8a275aedf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c5f4409-fd23-4150-b5af-330ef6c037af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99da272e-1588-4286-b861-0f26fd5f7615",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b8ac4c86-7c02-4c2e-b5dd-0316570961a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2509c4df-1552-413b-a798-04cb0c4bd561",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc287991-393e-4552-a12d-1b7897dbf80a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cb11822-ea1a-4a74-9f85-60d8cce5cf71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "578bc312-d790-47e7-b8b7-9a22354a6845",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "1f1a48fd-e7b3-4abe-8ff1-8365d871995e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "159d5f15-0d89-4800-b80d-b4e55d97d834",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bba9366-f408-4d92-ac53-232d36134564",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff439899-ac26-4895-8e56-deeafd08c563"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efd6e7c9-8892-4a2b-bed8-0b4e4f8e42ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c00e2a8b-c624-4eb5-baac-01878d9e0d82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fd4fb5a-0d45-4b69-b0a0-63315c7aa292",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d3f1fa6-82f6-4efa-961c-020eae94397b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "671506bc-0ba9-44d5-a0bb-39de4c39d205"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6557a99-ba34-4056-a8d3-a4bea1bdcbd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0726aedb-7613-48d8-a2db-91dae4b06972"
                        }
                      }
                    ]
                  },
                  {
                    "id": "179c8516-cfa4-4003-8f0e-e44c10f28a75",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6c15bca-7d00-4b08-bbb8-7c886aba4e76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2783f55-2700-4acd-8bde-6b782a99e2a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dac79e97-5bf4-49f0-8dd5-8d6023d262c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6c73ec2d-d943-44da-8134-72f35bb92825"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12559765-684b-4d0d-841d-fe2199603f19",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d138530b-6cd7-47a9-ab68-7704346575d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8c3a8a1-d8f7-43d5-9094-cf03818564c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf732f25-384b-4c48-afd9-f04452a20235",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "0a1f0ea8-6e18-414f-a6c1-8ed8f13aeb60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e0f9875-80b3-4283-8a37-dc3d5409948f",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d2cda83-4280-4f3a-8d2c-75da7e70d66d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b96634b-1c6f-4e52-85e2-b99854a31019"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81b4ca82-3271-43bd-ae57-8261839bcf4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1e293d8c-536e-4d19-81f4-a51de551086d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08f1b9a3-2b41-4581-97a6-3e98a5c6e2c2",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31e2753a-5a6e-4bd2-bd51-f44db1a503e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9f489dd-f68d-48e1-a02f-4213acdc2274"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9aafcb37-8499-4831-b960-ca57f4e070f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "649e61b1-c00c-4f3f-a128-7940acc5ad02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0be68c27-e552-43bc-9204-b985fc47699c",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9c0976c-41d5-4463-817b-bb4320fdbe99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59f63ec6-a54a-47a4-871d-9efae90d031c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a0b518e-955e-495c-a10e-99409312471f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "118c1263-43be-4032-abf1-e57443a916e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03f4860e-d747-44c4-a2a5-04a04ef270d6",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4db99ff-b150-4c09-9d0a-a011dcbb5ca3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6cfe715e-cc41-4b6c-8d4d-80d3d7d8fb70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccff04fd-b1f7-4139-9e7f-a831e12fb757",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "ce533a02-0d2f-40c8-bc92-ede2619a8f58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "511a2f8e-85ee-407e-b97a-7e76a9711436",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2bcf79e-fd4e-4026-8845-7e966ed2a600",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbbafb91-258f-45aa-bd05-d7a7ed3dfcbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65b6f18a-7118-4a4b-ada3-682e1d149e89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "e8a45272-8044-4259-b5f0-4045e8d0d026"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0b0c1b4-1813-4e9c-b12e-0ba7fa593934",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8804f997-4f24-4edb-9fa2-8c850a9c93ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1860d449-bb3a-4003-a743-63690d033a06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d03eb35-bd3f-42a4-90ab-b94bd6ed9f4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "86ad82fb-ef30-4838-8cee-c222ace3857c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "545dc740-31cb-45cf-b7bd-f8c83059c578",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3aab9983-e13d-4ac8-be92-55e5c01a42c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f366588-bdb2-47c8-9592-d1101a11b032"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9ec7a78-b16f-4ab2-ae92-bdd154af095f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "7b8d652a-6ffe-4c51-97f2-6bd966db8039"
                        }
                      }
                    ]
                  },
                  {
                    "id": "628772aa-491e-4f0c-b363-82e95d2ce452",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "644181ee-9e32-48fa-b76c-ff7765f6d28e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9279919e-f2a0-454f-90ae-2259b52d842f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3cc9f6b-16b3-46c5-ae8d-575397bd6977",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "839f2d8f-28ba-4c89-aced-9ff1102223dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a477394e-f47f-4e77-af0f-664c34dbe3d8",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2529918-06aa-469b-9a60-729d3359f6cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "102980cc-2cf3-439b-aa5a-777e5f6f10f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1993c552-3dce-4cd6-bd2e-72b169067703",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e9343ba1-e807-4324-a273-8a71122ed3e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "726ae04e-7418-40c1-b2ba-1b6b4ae4699e",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eacbe483-966d-457a-a607-1cee1f7db2ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21cdae3e-5970-4d87-87c7-a820cab075ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b4c8096-38e4-4432-bc89-80fc93bf8f64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8267f718-b59f-4f33-8cab-b10ef46a5a3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e88a50f7-eb8a-4da8-b7f0-21ef2cedc312",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b40eb96-4a22-4a53-9238-0edc712cab43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6403100-d5e4-4639-bc28-99f764c08399"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7d1cadb-7942-4597-b131-e06f3694526f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b10149df-a715-4a60-8d4f-8cd17fdcc316"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3f7b17a-0713-4389-b115-8ea296d290ae",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c63cb00-c1ce-43c9-8cac-ec2fca67e57e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af6e240f-31ad-40f5-b923-95aa431d4b47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c65b8205-adf4-4a38-97d1-84c5ad161ce9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "acc40392-6fc7-4649-a6a3-7acf5189a2d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cfd8529-025c-4637-82ee-213a7b04f304",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8038313b-a01e-4089-af34-c57e1e942e62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27e909bc-fa29-4422-a7c3-2d3f997013bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3330eee8-a607-4e31-97b0-89985db7f861",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "83b2e4c8-cb7c-416d-b9fe-f9a2c4767df8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c250010-6b7e-48af-9464-6db4bef166af",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2392208-3138-4c53-a1d8-774185381250",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17c61c94-bd42-4c04-a3c1-cc4090b7cfba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0bf1a75-e683-4a3f-893c-f92bfe5ee58c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "87608c49-ecd7-49cc-9989-a0a830077a7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e45bee53-6ac6-4bd6-81a6-016b5a20610e",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a12728e0-006b-490c-b754-ed6f4a078e10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33ca0e0c-4e11-4663-8395-33682944163c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01b65c48-8c51-439a-abc8-0fa498e32444",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "98c13594-26fc-406f-8393-87febbfbac54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b84482e-9d03-4b35-baea-70d0d7067045",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6d2191e-97fe-4846-98ba-b9da03c0fc66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ac0f3d2-1a1a-493c-b695-18865b77fdb3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96b7e6e7-425c-46df-86e4-2caba9abbc94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4621a617-e2ad-4636-b139-43a5eff8b868"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22c63fd3-d523-45a5-bedf-d9538c62b6c4",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "966e55d1-5a08-43e5-b6c4-23f542842aa2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "681f4d5b-1c39-41fa-8cc0-f289b635c28b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b463e470-1016-44f7-90c5-b3fc676b60d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "06b4bfaa-16f4-4799-8f9f-f87c53411ab5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d98ed134-916a-45de-8eb9-f8fdad6af6f3",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a988203c-ffab-491d-8ef0-c81af7850476",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e02108b-6a82-4507-ad47-0f4b4498bf60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6730ec66-0ae8-46f6-a360-3e9827c6e3b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "92d3cf11-9a51-417b-80a4-67e9991ad879"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3f39135-6e20-4710-a979-5d2e3ba1f798",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c098615f-0d27-4dd8-bfeb-9f6223faa1d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d03e4117-a923-4a29-9f04-aa22569d5cf7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08c97504-4539-41b2-b929-0d4a670cb474",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "aa120407-1a30-4e55-9d03-60cc105e918a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b36df67-ba38-447f-8e5e-61bafe7516f6",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "827c7406-8cb8-4298-bf58-7b425172bb6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c95ba7a2-90f1-4d2c-957c-f611a0ab9d9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78ab7da1-4cfe-4c65-a66a-f61e3d2dd93c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7ab08285-e44c-4819-bbca-949132050a8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b38be950-f168-4e23-b040-beb7a961b235",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de5ae255-0813-43f4-b9dc-c66d78885f55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "370a49e0-8359-4288-a90a-eff0cef9101e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a55305dc-9e63-4a49-a961-3183c37fd37a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "312c15ac-f40d-4bf8-8f22-8872612f92c6"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "72dc2413-da3c-41a4-b028-d88b53c19104",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6a3cf2bd-94bc-4024-91b2-097ebc586fde",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5a8fb3f-3544-4934-b022-11a55532de58",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "de252def-5400-423a-8158-96113bb98686"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86e1714d-1387-4919-8298-2ee9d493889b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d244db4a-4668-42d7-b2d2-d02a40dddb72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81e2ec4f-bcc7-42ef-a76b-ddf026c9a0cc",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e0b1af9-86fb-4988-9f94-9130f52905ee",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "5d9ad802-77fc-484a-9b78-299f49785ad7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cfe1c9b-28c9-44cc-865a-caaeb86f07a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a58cf3d6-a9ed-489d-a17c-23dde284e45e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "657be02b-affc-4d1f-afba-8455e39b45fe",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c1b4c91f-6220-4422-98bb-fa5935b0d16a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3b697258-cfe0-40ba-bf98-e930a61f1934",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d0bb7896-360b-4c8b-83f2-b9d0e12dfabd"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fefff5c0-2682-43d8-ab8e-8f1e73d2e0c4",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "0a6dfee8-bc7e-4264-af96-6e57df614707"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5943861d-9c8e-4a7d-b629-5a950f61c22b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9b300833-3118-4e55-b1c2-d06c5c00838a"
            }
          }
        ]
      },
      {
        "id": "8eeeb35f-a040-4aca-a94d-b22276655bd6",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "ff6ce854-12fc-40b3-870e-85e310812667",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d4aabaf9-3163-4756-805a-148f7bb382f6",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "776c3393-21a8-4324-bd00-daf9cb0baaec",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "838fcba5-12bc-44f9-8658-4205649444ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9018886d-eaee-45f6-a50b-b281049806cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59ae9731-44d7-4e0f-a6e0-2955d86a5b4a",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57bd5d1f-c666-43c4-a999-a6d5421e2242",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cff261c9-35c1-41e9-86e7-43654506d85f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbdda456-80dd-4a0b-8a4c-902174a5289b",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19faec0e-83a3-47cb-a247-c36b305de12b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e70791bc-7e64-4bca-9148-10f3c0de90a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cd5b673-2273-4142-abbd-5bf425aa6381",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "981d2b9b-bf88-495c-89d7-fee81e23dbfe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31272114-3af0-4d19-82a9-a767dbaadbd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6edf020-a7d4-4bb4-ab23-966a31b7cad7",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2e81c43-5199-4ff6-a988-81f355227acc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26e42412-8902-4445-a466-0638a3cd10ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b31718f6-c4ca-415a-b552-78d7bb3e0a26",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e1f748d-2656-46cd-97ce-5bd2a977ba46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cba01a68-85fd-48aa-a0c6-13718f7a882f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1873c6c-eea3-4c87-a18c-ce14ef0adda2",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7d9d28a-942a-484c-839c-20c6e85e49ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4e0ddbf-e316-43fb-8534-7fd242ddf172"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0964918-26de-4e3c-a6b3-d866ab4b6965",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d466e4a-d1d9-4858-8f99-1146c2b1d562"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9a16410-938d-4827-82b4-5610fd157a49",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edc35961-22ab-4eb9-b15f-263f71c89268",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4192d831-cd20-4cad-92e3-18a3b0a9b1df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "086db9fd-9957-40e0-b2f1-95f5fcfee5ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10e2e166-056a-4f30-9692-bfd03f6ee7a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5001e71-3e12-40ef-8fca-a3225bac1654",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f02612b5-e0d3-4bbe-b95e-05d1478ededd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7c06a41a-2a24-46d9-92ab-0ae27887af04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0978003-0827-459f-a66c-dc7ecaaf6c67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "556f22a4-b0b2-4af3-8027-32101dff70b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c005e9dd-06ab-457d-97da-fe5c04a0565e",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ddc6312-ff4b-48ae-b740-e050617ac5d6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c006c0aa-74ea-4706-b6c6-cf6da400c133"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf4d1a6a-c4bd-4129-af0e-8a3a44bc89ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ead1a3f0-9125-49d9-8d00-82e477f05900"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee28b11e-40ef-48cf-999f-2635cf3f9cce",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4770bb8a-d435-42ba-9a20-6741cc133005",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9ed533c-e32a-484d-82cd-5a7955a9a97b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "029b1fa0-e107-4342-af5d-f17e8efd8297",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c464a37-cbaa-484c-adc8-934ec0222296"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc261b06-1fdd-45e4-89e0-de2a287e6403",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6457182-94a2-494f-ba9a-16af1056cb33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ba7b043-b18e-4965-a233-8fb1dbac783e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87f9f223-d6a6-4129-a754-d0dc2a0abf01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43b38586-2908-4087-a327-7bd417be64f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3fba6c0-7ca6-49aa-b34d-8ff1a19e5491",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36e49314-42e4-42d6-a21d-32fb9f386c3a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3350fd3a-4892-40f4-944c-56ef4a60ac34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a8c5089-6c32-4f59-ab9f-8b98c943d9da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc5c1a15-93ea-476e-8573-6a226d624982"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c1e46d4-bcc6-4d9c-8df8-2ffe9be0838b",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49803faf-1ca9-41c1-9d27-399618591ed8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "623d4504-856e-44ba-bfa7-f79566cae733"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3c2df97-1082-4d17-829d-cf19dc83afef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93c4841d-1e72-4ac7-bd1d-141fbd505756"
                        }
                      }
                    ]
                  },
                  {
                    "id": "beba1f47-253f-4cbe-a671-4e2d5362d62f",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cb4b948-d532-4452-9bf2-488b5b1e95f9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c6fc3f42-2ca9-4c56-a22c-78a5747d65c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93d64673-96e3-494c-9b4d-8efca09e7a2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72a4c681-fa25-4f8b-a08a-fbcdcba83c14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c88453f2-b41f-4fd4-ba06-270c0b78b684",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dce758d-9c6c-4266-97a2-f614b29f9c88",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "44717aa8-0c31-491b-9e7d-d064353f223d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cdf5d5a-f299-4ec4-b076-f4ae814f12cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8e8c8fd-ff87-4ee8-a5e7-d1be01cd06a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8815216-2b5e-4090-9811-fef345b87ee6",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "208058bb-d4b2-4822-9427-4255c563235d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "174a15b9-0524-47ff-8779-4d8380019e57"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a33f247-6cea-445b-a0c1-a334ed8f6a42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ee40605-6c4b-4bf3-9c5f-409a80ff5848"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b44eef47-47ee-464e-936e-2e275d9e6bb2",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdc058a1-dbb8-4b5f-ab5f-19e23b51cc84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0af798a8-b231-4743-bcb2-eee586073a11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30a27d73-068e-4501-af10-413fdc93223a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2644818-bc14-48bd-aea3-47b2184cb12c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d30124e-5685-4880-89ee-08627315a248",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "403403c5-9327-46cb-813a-f09b15f9d900",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94e4014d-8734-4809-8efd-49015e1f6d35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7febe4c-48a2-45f5-9f6c-42df924c7bbd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a28c3b1-f712-4c1b-bc4b-135ef7407cf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de9d4d0a-6661-40be-ad34-d0773dfe1273",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40ec8473-0842-4e93-8b14-0a9a9b8aad17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbaf8fba-6738-4397-a02b-ac4b09c5de52"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b381cd00-3f3a-49b0-bce4-c08aabeda4ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3d17f28-98b7-4e97-a6a3-887f530ab2b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d970cf4-0a10-4139-a7a2-c8f31b50ae42",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de964320-cf9c-47ae-88f4-2ac373b624ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e7c4a4b-7fce-4187-80c0-d2c92be356d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55bb5c18-91bb-4c59-91cd-a1158ef11254",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7400a494-8d0f-4ac0-b67d-3268c16e417f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78b549fc-65ad-44c6-b2e4-35e23dd1fe7a",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e7034dc-dd2f-46f3-9d93-19351b668b36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed52b0a5-7028-472c-9a21-222d6d533525"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d73cdeb5-c996-4292-bfd8-9e0f71ec0e79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb259300-05ea-4217-a137-d7151f26805f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e312b12-16c6-41a6-ada2-ab65e8d0b2d9",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a72249a7-3883-4007-8a8a-5c5dc487ff92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb776022-bf8a-43ee-a973-5e2e41f780f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "657934c2-cdff-4e43-9417-b954b2543bfe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0149e074-308e-437c-a005-d842c73c845c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8c77439-9e32-41ca-b804-e402348b2033",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e63e59fe-7439-464c-83c7-ac4e4e380704",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "95aa1f92-832c-4829-b339-27cffc442260"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7db18b50-300e-48dc-96fb-8e6ffda54911",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b7617d7-1ee7-4cf8-b161-68c7a6e815e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13855f49-70e3-448f-8ec0-649b0bcf6327",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb834b04-fa6c-4384-9ff5-1557a3c67eca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f34c1f4b-3a8e-4bd8-88f0-518b4f8c5ded"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c4ea322-fb87-41a0-ae6f-8038f18e0f64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17b3e9a9-c984-4f9d-99f2-e6a9e7a8a7fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f616db92-3b73-4651-8bf0-29e827115fce",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00dc1da9-716e-4ca7-ba83-00a5b79e6fb2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6e6a7ec0-d1cf-479a-a07f-e5e2b8c58543"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7224f6c-7306-4956-a025-e39b65b31736",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a3b00a8-0b27-4c44-b1c2-e38404239cf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80d6f441-f717-49d5-94ae-7186e8ac4f9e",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de4baecb-96a7-4c1a-8eba-be193e6a040e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "88cff442-234d-471a-87b2-1e763193b51b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d9532d7-f40c-4b62-a248-aea42a92ad51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb144f7a-8316-4457-81b6-59d999143be6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95d04fa2-50ed-4554-9d62-ffb24065aa7d",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "608b35c3-b5f2-43d2-aeea-012f016465ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ced5587d-5844-4ad1-aae8-7fdf00af5c45"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "822247b4-ac83-430e-95da-d81fa8f8d8dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05dcdb41-73aa-42ef-8603-45ad96c7ed96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0672a20b-4929-48dc-aefa-bfc531b5fd2d",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "013e70df-1cbf-4154-bbba-e7852ae80913",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "18a13eab-a0e8-4fe2-92df-321ee6661758"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92e40ca0-a373-424a-a275-ef052d80ac99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc84b080-16f4-4386-9372-22a2d1028646"
                        }
                      }
                    ]
                  },
                  {
                    "id": "329c77ea-290e-406c-a2b7-a09c6a1887fc",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d52e1c05-1a05-4f89-a055-989f5c5f872d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b892c39e-a7f3-4e66-b99a-e49f5311488b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f35aa8ff-5130-4b55-b8b3-b13bee37473f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "922d5822-b855-4f63-b445-499d0604763a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "558bd0e1-4b97-4c80-9244-e4e22fa358e9",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "233dd587-873b-4627-a7ea-d8b687fc0c08",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d689117a-0518-47e0-9169-357467662c31"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "097dc442-f328-41eb-aa0c-4738e62783cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44df6769-07cb-456f-8d1d-5e8d3e3a72ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b938489d-eae6-4e3a-a8fd-26236c91ad01",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffc3db9c-c655-494b-9c9c-91d784b6f894",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9610c7c8-50dd-43d4-b0a3-f4bc3fa6190e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da6861ee-4769-406d-b008-ce71cbab08fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9a54941-4569-48d5-a936-bad2d9b2c217"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc312b96-6fde-4ee0-a596-9d7de2401f83",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fd6ed5d-7f0a-498b-898d-24df09ca9ce6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "652055eb-a7c3-4634-b449-6200c4425cc8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5260ecc1-9453-44d5-9eb1-8b644da8d103",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30521905-67d3-4911-8bfa-eb01ccef67a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c04a3316-8713-44bd-8572-c0fdddbfc916",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "814f22c7-0323-407b-a592-336e57bdd674",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9dc372b2-ce69-4a73-b5c1-7a31aa72b89d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0f12884-ba7b-4f66-b89b-a1156c0ef539",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2594c753-00cd-4e08-b29b-6cdc1274c7fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc8699a2-6b0b-4f73-8aaa-0bd70a203235",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "139e5df1-5966-4282-98e4-b77c8d4a054d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4af53ace-a400-4643-8717-f134ba2141e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7870b21a-ef4c-48a1-a8c4-0524d2680849",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1414da1d-1310-4b3e-9fce-bed1325f5c52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5bc2646-ecd4-4aa7-ad7e-67e3be285e12",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc54a5af-a567-4838-992e-d7661fa07e46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c789d81-5f49-4f6f-a433-1d8a3432d9c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c07860f-47fd-46f4-9ce1-ecad0847ed19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c435b4f-05b9-43e8-8b59-80fcdae98e14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "beeec763-fbce-40e6-afc7-2d32aaf23639",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "196c31a3-95cc-43e5-92a9-c053a1945325",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66dca6d9-e1a1-4a8d-a228-a122a870ebf9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68d076d8-3b2c-4716-b8c6-facdfd01c5f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f9e3d94-4052-40e6-afee-ed344c7ba9bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d540ca73-b4c4-444f-be04-a3f3a5ffe4fd",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c3135af-4564-467c-bd0a-61d30c2e027c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "304886d4-2f7a-4859-8226-2a8249926d95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7e1809e-f660-4b5a-a4f4-1b63211fdb3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29874b56-295b-489b-8098-1c61a6c7f1a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33f64a33-e9ff-48c4-b537-2c2060bc0bef",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0464c24-1d80-4b38-adbe-f41ec684b307",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ac83e59-5bdc-43e5-a30a-d2c213569b4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9adafb9e-89ce-4b27-b7cb-e5f32f6ac8ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c02b6d5-8434-4488-9b24-7b1b05711179"
                        }
                      }
                    ]
                  },
                  {
                    "id": "375943c2-e91d-4fdd-a0c5-1a56b8cf84c2",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72e3f3c7-82c0-4e29-9505-81c94be2d57c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa166a1e-9cd2-47c0-8e39-82689a33315d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d917d96-92ba-48e5-816b-2716fc24eb27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "617a50d4-f994-4bd9-a709-fafc817b7783"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d8a0846-23d4-4600-a97d-3330842d94bf",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e20d2529-f7ac-4283-a29d-d2a91a8c6c10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd6fddc7-5582-41cc-ba92-4f3b053d27b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ca43882-b653-445b-a6f9-1a76ffdd1bb5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09e8eb28-660b-4fc6-9bb1-9404dd1c7080"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bfb25c9-60f2-43aa-9a41-1ef887636597",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7991bde6-78e5-4c3b-b7bb-2ac14c54e523",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "939f35ae-8c65-4fd5-8d5d-dd55368790e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "270eaa42-c26e-4471-828d-a02b8798e96c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "422b8753-d892-43ef-a680-d55c507c7689"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0def61dd-8239-4637-aa24-f5404532acf6",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "512496d5-8f7c-4956-b13b-c9fbfb1aa2ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20efc911-0958-421e-99bf-911c7d91b079"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16a3ffd8-5e0a-4e46-94a1-dbee001b0729",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "445f04b0-16ad-4088-b0b5-ee706459886b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8532b0d0-04ce-4e50-8bb8-102e0026f3f6",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e9fd971-1f48-4313-bad8-4e16b9cd18bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6657f691-566a-4175-b68c-f885e1d74288"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e6d7f61-b2a6-40a8-ae9b-b50fdf1f0993",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "900e1b11-6cfc-48b6-8397-c61975aa48eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fda388bb-83e7-4014-9f8f-249e657be897",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63a12709-2ead-4a13-aae5-56d68c41cef5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b54eee77-25a6-404a-8e28-eb8e9cfd8efe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b04a339-83aa-47ed-b996-98e2e68f734d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfea62ae-ab10-4949-85d6-c64c689255c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5be4fc8-e386-4994-add4-c087b726cb7e",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89195665-38ea-4f1b-8d40-6e8dec6d3a17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18c04532-2ca1-4f2e-adf7-6c8ab32f1484"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "606d2612-be61-4a92-8bfa-996f54829c32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "064923b9-b398-478b-83f9-9e9b76801fe3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68f6ea48-02f5-4059-9977-9779011d634d",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "821f52e0-73f5-4fc4-970a-2bbe78ff53c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f33a1a7b-fb13-4dc8-ba4e-c572c5894b94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dad3b118-73b8-44ee-a527-1e92bd21d40a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55c38883-cad5-4a9a-baa6-710c026cea48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3196c611-be2a-4f91-bfa2-5ad4d4f5602a",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "065ee7ae-4a91-4f3f-b0aa-f7708d862d87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3136ba29-abcd-468a-be21-d96cd65659a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d752838e-f2e4-4ed5-a5b4-d3c331ce4449",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb935c23-bf5a-4011-8daa-6c0ae58fbf94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01282ca3-7641-4eb9-a5da-377dbbc60230",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df58a9fc-b4de-4468-a49a-968ddd96cb14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54895fc3-a079-4ba5-a08d-0006ec31c1c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a536752-f342-4cc4-b46d-da67ad9dd70e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f9780da-5d52-4e51-8f38-7904e37edfb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d7bfda4-34fc-404e-b3d6-a39a0e07749d",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd0fc397-ea35-4e35-8d72-f008ff282f7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c55859d0-ce10-4b90-b5d2-b39acb287ffd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a95ddf75-e2c0-401a-898b-db54bc264df0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d97ff724-eee5-4ce0-bfd2-89521cbbeb08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbf5735e-fd0f-4f8c-995f-1cad88051a20",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d16d43cd-c76e-44f8-aa38-366f7c0e9640",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0eef5bef-396d-41e2-9a4f-4a6e12e2d282"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8d61409-6c6f-4f94-aa30-15892af2b3e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab10ca03-4d24-47cb-9186-03a911a59e72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "417042ff-ac0b-448b-a58e-ed0caf52ee25",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63c30f24-4a59-470e-b390-2982b4ce144a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48119b4f-102e-48b8-acc8-93ee2382064c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35719dfa-463a-4002-b11f-83877b158c7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5be2d4ef-fa8f-4760-96a2-01faae631b24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2279d6db-a157-4754-8150-8be09aaae47b",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f9c99bb-00ae-48bf-a315-2f712373bef9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dafacfd4-2525-4f4c-8447-83f32c047a80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c8a740e-6780-4bc8-91da-b13f9e7077d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d13a2f6-bc2c-473e-99ba-18e5825c7256"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e572e560-a8c3-490f-9a5d-23f0e7bfe913",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1a41fa0-0e7a-457f-93e3-0beb3431c27a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "870460c8-a87b-47d9-93c6-820e8b77da73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89675280-3b4c-4c11-8f8d-f825a6e09e2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b40a59ab-c18e-4053-ae40-9748467eca52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3723d52-80ee-4115-a6f2-e36b118f34d1",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "004e7841-0f36-4c22-9fce-230817217eb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d068e88-d660-4909-94aa-d1a898748bd4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfb575cf-303a-406f-a89e-55d27fa84689",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eff23d95-2d0d-4347-9f4f-2e7608b36a9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5c93f7d-02db-4ad8-a18a-f3bf22db36e3",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed6cc4c5-c44e-4165-81a8-87a24fadc786",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed42a55c-8e68-44e6-88b7-b4ea0e85eb20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a21c74d4-0a03-4a7a-9f3a-eb1685636e5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed8d9313-8604-454c-898b-b5273328b0f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b075ee34-9751-4e3d-859a-f39ba30cb095",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f609d50d-5aed-48ac-be2b-c473c18682c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e51b894-cc4f-45df-9634-ec628641e67a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a21027c-6db9-46ab-92f9-f42e7097bda9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3686a56-6fab-4424-8817-026335bdbfba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30a875af-a928-46ed-94e4-466830ffa66d",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0740637-9320-4a30-86c7-e21514ddf65b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18561ae9-98c3-47e6-891d-5e5553622226"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1873809-3e75-45ac-9592-8920c90889ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8272349-3247-4a3d-8bc2-0c0593f7b2e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c5dcfc7-8d33-4641-8268-f7b3174db3dd",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8aadbd2-0bec-4dbf-816c-481cf4f06eb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9f5ffe8-49e4-409b-a0cc-700b1020d40c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfa59f8d-86b3-452e-9989-e1cda9021259",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a872570c-e5fd-467c-984d-3fd9c2b5ff48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa2c8774-175a-469d-96ba-37427e181669",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7bf234a-8f87-4498-a825-6ab8bcca6f3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0bfb187-f3f7-4c26-91b0-d9b3c6cb01a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0f5c916-c209-46fc-a5b6-707c7264a1b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ca8572e-b9e1-4b1b-8b1e-b8d5f2c536bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4729482a-9e61-423f-8138-265c669580b3",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37c8ea94-b5b5-495e-af82-e0b69982a403",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33fb876c-6583-49ca-86b2-4e9f9888d07a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7ef3553-cd1b-455e-b079-02cea9d6182c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68882046-ee66-4156-8135-fe6105eec86f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc7ed5e6-b55c-4ab2-b27f-918639393137",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce977dcb-54a5-411b-bc52-3d61ab1db25f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78a2d7a6-3dfb-45b2-9e5e-2495c24fc1be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c27a56a-a28d-4123-aaf2-f1095c811579",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db57fced-2f2e-4dc1-bbce-2abb85dc7436"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e918c04-161b-4afa-87aa-22d91772fb96",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae9ba09b-7f22-4e4c-876a-44a2b179370b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ce6701e-269c-42d2-ad58-aedcb1e6667f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fd6ee38-7a8b-4bb9-9a11-929917414cdf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d622d09c-f165-42ee-a45c-7f46c3c67b3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "932196f3-0aad-4981-8e42-15198d528c64",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1be6080-e733-4192-ad35-13351b13f30a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "74cec849-db73-484b-8c07-a1bd891efaa6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5aaed35-0ca8-422b-8a0a-1f6a87b40525",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bedb917d-d8c2-40e7-a46c-edab2cd70e9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bac710a1-baae-4ba5-9541-bfda51cc12c0",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29b71571-90b4-4f81-9d45-3f96294a94a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4626b5b9-ab13-40b8-a5f0-11d737517e7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdb3504e-34d6-4645-b858-7237f4865c8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "247a22b3-13a0-4fe1-9204-302fa351a9cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ac08baa-d819-43a7-8cf0-bafc9e33bd2d",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e3c94a4-07a2-4fba-b3eb-18d20a71f755",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f5d1cb4d-ecad-42ef-819d-1e1917bfacf8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ff75052-5792-48f3-8513-357de48fa00d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9018f1ce-d89b-4162-9268-91559be4fc1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d062645-9706-4976-b51a-1d80ef776ea6",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd33bc8e-687a-47cf-9426-aedd395dc77f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "33f34d91-00fa-4061-80b8-9a7027d701df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46dbb46a-80df-4286-b272-f43ed6780b26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acec6fc2-1dc6-44b6-bab6-d899db84f013"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c129ea0-1b7b-4084-8015-feef93577640",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e691e898-f32e-40fe-8c65-8e740351cc52",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8cc150ed-9108-4dfd-9a94-19d61c2b0cbf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfd4807d-5a8e-432c-bf57-d0a5c5391b74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "363c6372-b56a-444d-bf92-e7f1864822e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97662d79-cea2-46ed-ba7b-ac83df5011db",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65681a2f-63ae-4f66-85ce-b5726bb48378",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ff4fe09-dfd7-420c-b502-76fd8304fb99"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ba81fd5-97f3-423b-8a53-270957d1b0cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0e678d5-2df7-4cf1-8e7b-505b907b917b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b1ff9d1-acb3-4d63-80ed-e0d648d620a1",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2abd1647-36bb-4cf1-a499-37e9df2abae6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "399cdf89-7b48-4e3d-bdaf-4bbc31fdf4a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71612dc1-520c-4feb-9080-e0c5a6b20c2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40fd4f9c-eb51-4c6e-b97c-8b47ce446352"
                        }
                      }
                    ]
                  },
                  {
                    "id": "047d683f-b88c-4870-8e5f-cec564138b3e",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ce823fd-714b-4942-8a51-5608dbe4030e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "82a6244a-13a6-4b11-ba4f-38c107506111"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a77f422-619e-42de-9433-3eab5ea083c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3f048bb-819d-4631-8e3e-6eba254fdf7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "775c59b1-be83-41be-9f02-6319f2b36975",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90ab1045-40a2-48cd-bb5e-3d96fba92400",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a1f37742-3803-44ea-b7c3-08ca5cc63de9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d6e977f-5988-4fdc-b6b8-7aa025e860af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07e886dc-0124-4c79-9a08-8aa94f872975"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3246ef37-11ab-4e8a-95c1-913a3b70fd9f",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "915c9ad8-fc71-4ac8-85c0-590cb21a09d9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "82f50948-2b94-4f7d-9f1d-668226204ec2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dd4d6cd-f124-45a4-bfcf-01ce0e2e89bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a4da412-5253-4a4f-9751-7439c6c75dcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "042a555e-2e8e-4137-8767-dc493bb16d56",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75f682ba-9c45-4437-ba7b-5f359d4a92e1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "982099f3-f01e-4873-969b-7bce28d549b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e7f4daa-812a-4e81-8927-db59babbbf29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "080ec888-7469-4ee0-93ff-769bb0248c71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f98a57a7-3276-4d0e-9160-40c7c97abbd0",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02dbeca1-4d1d-422b-a162-81707e4fd4b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e0ddfeb2-eb44-4dcc-9d4c-741f895aca0c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e56c9c56-ca3d-4188-b73c-2f6186120fbd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47f74923-992b-4327-b890-759885db3d5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a09b257-9b2b-4468-bf4d-7f5e912dbdac",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1810c381-149e-4980-b90e-0ec689b933ca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d90d3812-0291-4bbe-9d86-e1721f05a3ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30a24bec-241d-403e-943a-55e4bf7496a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da8deeeb-2022-44a9-bcf0-46cc70a9012f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a2f0a97-7460-4202-8c99-2cfef5091395",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ea6d833-878c-4cdb-aac6-6af1a510582f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "adf77490-090b-4a25-bef6-9b3f4cd6852d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91b3300f-b6e0-448b-a0df-1aea8f462064",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7e1ccf2-b975-46b2-be94-e3053a24b116"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58691ec8-72f8-47de-8a74-af2b42f70f80",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e4e2ed9-d6e2-47a6-9f92-01660aab16c0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d37b2657-70da-4ff5-bd32-71aede1de2e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c925413-f3fb-46a5-920b-0b204e821db6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8ecc614-8b50-4184-8790-3ff4e9f3aa5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fad248ab-6aa9-4e77-88ac-ef2b113137e9",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "484e8d81-40d7-4470-a09a-d3ec8d2ab1cf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e149fe11-3fab-4502-b1ce-b8cc4ab1a7eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7b4f527-9182-4ad5-8b45-50e8a797622e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c4474ac-c648-40a9-b0ab-35166e9feeb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e5f6165-e44a-47e1-bfcf-789ef4ca10da",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee2a7a93-1b01-4744-b831-1e6bfc2573c7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "15e127cf-9f69-4975-b15f-f507977efdd0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60435e29-8b0a-4cfd-9004-1409cc476f57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d0cfa16-cab6-4baa-b751-ac9d6a7877c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef8ddcba-1f12-42fa-9fa6-52e94abe61a5",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f2d1cc0-8fcb-4134-b394-1445b1922ff5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "675fa457-873b-4fe1-81ae-7c1027f54bfa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bf276ea-ac0d-40c9-a335-91e672ad0023",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f23eb85c-bd86-4efa-9d05-5051638ecff3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79aa8cf8-686b-4fc4-890e-7999014d39b2",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0107a1a-44bb-4ceb-a037-24ec4f7a9745",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8bb58d66-899e-4035-94f5-7d229420111c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89f44bf0-f3d1-42a5-a5fb-50f91e71a34d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d54404e-dc84-472c-9c78-e4b4ae686cba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb391d81-84b6-42f6-982d-e52d48c1bcbe",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55a0651f-c8f6-48f5-b806-64b3e1b83e25",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2f1c48e9-76ba-40dd-beed-0b9df8c662d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f681340a-ce57-476b-a434-854f9926a1e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0570a7a-9981-4cac-a364-1ecd9958626b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2316350-cafb-42c2-a325-55cdee958d81",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f20dd6ba-80ee-4d91-b218-70b3c90754e8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "550f9526-dd44-4aa0-8af0-14c6c0a2b28e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f2758a7-2b6e-4331-b548-aedf8835bb37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f4291af-1ef7-4589-8ff1-a772db2853e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af5f80e1-6a1e-4bac-821d-8e89a99b5194",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa8f69dd-51a7-4042-b404-2ab021a09a6a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "083c3b75-df0d-47ef-b8f4-aacc5e4e2ea8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42ccd2fc-84c1-459c-a803-eddb6fef839e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f32614a-70c7-4bff-a011-e3960b2fe789"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6258a9b3-8f4b-4136-8317-7a41f12aecb3",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71c36f87-dfb9-4cef-85e1-6f34e1862772",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "20e8ef19-e1db-43da-888d-df645c8610d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9ebdb4f-4886-4931-9382-1b3deb49d0c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f53fd74-737c-4b3c-9fa5-a2f45eab2ad0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11b7d9e3-9c48-4e3a-ab97-06d03a1d7019",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ada1f935-b0b8-4b38-8714-b6cdc3bc76a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "00e41f7b-4ec5-4070-9072-4c9fb1a296a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f15a349-077f-4bad-9a98-d7cce179a67c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7d5bd57-5d6f-4f5b-86db-52ca92c827ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "249a0998-3f01-4436-95a3-0aa5466859a8",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0022c20-fe6d-43ff-bb10-c54c0ee091b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bdaec5a1-698c-41ed-a8ca-83a880f91299"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45439faf-6317-4ad8-9be7-1d8e8fe64e82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8c5243f-5e27-416d-897d-7b3064f1a1fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b1b2265-f55b-4bcc-9bd0-b0693dcffd3a",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c6d28bc-3062-4e51-a339-4e3cb0dc380f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "72a463c6-de55-4112-bc8f-a679ff9016ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a40e2fe-2ec4-455f-9a0e-9f6b2ecc7c93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f878531-becf-4eda-bf70-5e4e73de4dd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fce45be-3fd1-468f-9912-2305c8259652",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0bb60b0-fdc5-4bef-8cc2-7bedd85fe075",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8cc57156-3c5a-42b5-991a-fab2150ef8c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ff90b80-2a72-48e8-bc0c-af293d08c16e",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81541c9e-3688-4319-bb20-366e4714fd55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70c4e1fc-5999-499d-91f5-6810634068ff",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed01d698-095d-4cbe-a53c-e901171a88ff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "39aed870-c507-42f7-984f-258ab426704d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "771acff6-7f6f-43b4-834d-d18f6a09accb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa638f4f-8e52-4a67-b0fb-d978ed627009"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0b36307-e81b-4af0-a39c-4407d45b3da9",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "060240f7-cdb0-4507-b426-f69905954ef0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d7238f05-9b4c-45ae-8e19-318f5456bbe0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28aed28f-2808-4077-8c68-684688811a4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1ae6316-5d89-4db2-8291-2f9bf1376650"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0df3235-8688-4dfc-afe2-c605fe07507c",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c85dabd-33c4-4a2f-ab0d-41d479e6b3b9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "696de7e9-5fba-4eb5-91a4-0ede6d87752e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "391239fa-12af-41b7-a112-7a37183ae323",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d98552e-40f5-4cbd-a96c-410b6674faca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31990685-2e69-4388-a6bd-d966c29724b3",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bc3e27b-f504-4854-9b38-bb5772a79a46",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f5881b2f-5e1b-4399-bdf2-899666389241"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "988a2ace-5387-43a2-850f-2c5d6e588b58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fed18891-42b3-4062-af34-7f0e3987f9dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba7b0123-7514-4c48-aad8-10395b961c86",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0f0a233-ab0e-40c3-a436-865370632441",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7d60fa73-0483-4348-a56f-4e24d1d4cdef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f623742-7c00-415d-86a7-6e42b347e2af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9a30a6b-bfb8-42f2-afee-6d5021679416"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8db0f004-ddb6-4393-ae81-7677fc6618ed",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2418c15-45e8-4973-a88e-a7880e24e40c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8925a491-f3c3-4658-add0-8e6cf5a46263"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2bca944-3b4f-4b81-93e8-27598bb5a798",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08ec3621-2342-424c-87fc-80647f6cb4bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69eae26a-3ce3-48b7-bd13-c6900d4baea9",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bd7dfd8-db86-43c2-a75a-9d6947b4e4fb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "07b41ade-7055-4123-9bd8-95cb9c6844fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b9deac5-d195-4a9c-872e-ff80f2017e08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc261d06-2928-4fd7-9c31-c2bac86d2f18"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bb55d49e-06d2-4d23-bd5b-9c3339936627",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "55b2be39-44dc-42ef-9213-8e22946d6187"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fc43dc90-a255-4d32-90d3-692b14e2de85",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "aa7fa0cc-3137-49a2-b197-d2cbb59a14b9"
                    }
                  }
                ]
              },
              {
                "id": "48df22e1-7a02-41bb-a836-a1ab3e6673a0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "49107d1b-3363-422b-a55a-5eb5fb400a9e",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b55ff0e2-701d-423f-9a04-2fb5ce32bc5b",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "76355cdf-9e4f-4a06-96d5-4974c7ed8818"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ba2ebb6-893b-40b1-93da-d2d6871c7c2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2fa8d9e6-503e-4bf9-8e9e-aee887fc8267"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae9f54f2-3d68-45ff-af80-da392c93c311",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d8e2b09-7bac-4af7-a7ea-5d06be4439a1",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "b1026f23-3777-487e-b9a3-21280fa5250b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a862a182-5e1e-457e-b082-ccca1ef8bc4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7b31d398-4d4f-44b0-ab47-58570543c0b1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "374a47c8-a290-4f51-a66d-1af468ec2b96",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5d6b1523-3cad-4b94-93ab-c8ad172a7d0e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b65e99da-9645-46dc-b22f-1f9c95c0d1cf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "004d9a34-6dc5-4e8d-9517-0b4bb155ff13"
                    }
                  }
                ]
              },
              {
                "id": "18c705ca-4669-468c-a731-d1f8c99bf449",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "1c231d9d-08f1-443c-92eb-0e3b6447d0b2",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32c42178-d3c8-47e3-91fe-828ffacc8ff4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "70101652-302c-466f-b5fa-456efa8878a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99b45b7a-dc63-421b-afc8-a3e52c7a816a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f00ab096-4c51-4c6a-a618-ec1ea8a2acd7"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "3493bea0-1a77-4af2-b31e-0871d4b331c6",
            "name": "Positive Testing",
            "item": [
              {
                "id": "5afddb87-83f4-467c-be18-b25ff49ff7aa",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8820eb69-430a-4b72-ac9e-ecfd50245474",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "0e5e5f76-5107-4797-974b-3dee89f39d6d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c825e161-21b0-4f20-a482-c398096ef258",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4784cdfc-adf2-4d39-9fb2-4dfb1df81484"
                    }
                  }
                ]
              },
              {
                "id": "c3352753-16d7-484a-9c17-8ca783b1b2f9",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4a6500f2-9175-402a-822e-c5c1423c6c3e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "c2b77c2c-1c9d-40c5-ab78-998d400af751"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "010f490a-7672-4518-a349-56733eaeff5a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7ad672b3-a27b-4f6a-aba1-3ae12c1671af"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "53dae7c1-7756-4977-a497-67c177490176",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "7b142d61-a2ca-46aa-87bb-fd77c4536ee6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5791f7ac-6617-4753-8cad-aa3fd4459a5e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9ed4e990-5b34-449f-a61e-bad64fba629f"
            }
          }
        ]
      },
      {
        "id": "473d2531-56ac-4b7b-bd9b-3739133df309",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "66f84f9d-c384-463a-ae93-0fa395482409",
            "name": "Negative Testing",
            "item": [
              {
                "id": "012ceb1e-e769-499f-8d40-97ec2733ee69",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "40aa77bb-ae72-4e49-b84d-78b54571d85b",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "967d6338-1adc-4f60-a7de-b93367a25997",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "6d4644f7-be38-4d41-8018-4f8e58598386"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d869d50-8625-471e-9918-15b78cb031d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7a281ddc-a433-45de-a090-2961a5d95425"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fe687e9-debf-4de5-8f95-a2a52eae1dee",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3462a345-8c14-4d9c-b8a5-b6566f2f6b4d",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "e9fd95dd-6562-4b22-ab95-16b242cbd1c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b636e3aa-5505-44b5-8369-8bf5a55ff0ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2018a824-c675-4e82-ac4d-5bb220deeb1c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e39cff2d-3243-4b0b-8a85-b58835c06af7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e105185d-9c47-464e-83fb-9717657dad14"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cef61af5-6d5d-494d-a9ca-945dc66d5294",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "af1f432b-c75d-4c4d-9216-96e4b88b3795"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5a554cd3-65fb-4b7a-9f98-b6494320564f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "8bc06ee9-fe61-451c-970b-a4a5681a4bc6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cb5aa7a9-6b32-4773-bf35-87574484f750",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a94c7b0d-0b27-4dad-a769-bb9b47274309"
            }
          }
        ]
      },
      {
        "id": "1923bc9d-cece-47cc-9705-a6104831f57f",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "e8f254c4-1ced-4f0f-8155-9a054ee014f9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "27b86e51-01e4-4995-b8f0-ea74f1436b31",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7e30eb36-fee4-47f7-a27f-969b97f71383",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2027bc1-f87e-404a-af38-1aeddae7dd67",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "65612d39-c8d5-48f4-ac4a-a63b8e1c7ab7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c2c42a0-25d9-4e3f-9409-aca5d132bcb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5ad5bf31-4f19-49a9-8447-d1ffc447eecc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ab94aba-3d45-435b-bafa-d2f75b9142cc",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "673552c3-dcf6-4be5-9043-19b5c8692749",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "c794711e-0306-431e-94e8-fbf34e3e5711"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a59cbd03-397f-4851-ab6e-11d76f36395c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c0c6ee8c-54fd-478b-a61d-2ba496d54589"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ea4e308e-c43e-438c-8e08-ea20b05e1a8e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c056b6b3-7913-4a26-88f0-ba098a19f9a9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2effb0da-34d8-41a5-ab44-a4fc22a94a68",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "52925efb-4284-4e64-9245-c3f608ec12b9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "eab5dc6d-79e6-48b7-8f19-c83c07e84d51",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "313a1700-b3ba-4749-8b4f-39a68e9d0705"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d13f3e42-8326-4388-a804-77bd6b36000f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "183af435-638c-4eed-ac15-036812979aa1"
            }
          }
        ]
      },
      {
        "id": "18b2decd-eb45-4feb-a19f-738873adb4aa",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "5a4276a6-cbca-431f-bed1-c94dc92f3eda",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f1d51b42-ae92-4d4d-b7c4-3673c7b6cb81",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a39ea7dd-d67b-49d0-acd5-02f4a6ca56eb",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d798617-5cc9-4613-8668-e9c61c6d1a09",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "62401834-a85c-46dd-9e40-4e4645d7234c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6249fb6-1a5a-4ef1-8edb-6e6646026177",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "555eadbc-9b42-4b00-a4a0-04c0016ca3cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03c723df-7f65-4293-be12-665b0ca6b6e0",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a563a34d-8a19-451e-931b-640cff0e7418",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "586432f8-daf6-4e4f-b93a-3ab650e92b12"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "546f5b11-c578-455a-9cc6-f0d9ed4cc860",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "21f310a4-d003-4db8-998d-5e50dd593090"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "07e0b425-4362-473c-b044-c45292b5b03b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8c898fc3-feca-4b33-864b-8dc395916e9a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3a95b482-a9fa-431e-a2c1-66e338a22415",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2d7f9cfa-42b3-4060-b874-948234049eae"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "29217c38-8c32-4a0b-b738-016fd2a9a86e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "39c6e021-edb9-4d47-b944-9ee3ad6f6d4b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "22d371b6-a0d1-4b2c-85d4-61f61f3cd532",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "188019a5-fd4a-45d8-809f-011ea7e8d93c"
            }
          }
        ]
      },
      {
        "id": "649b52cd-a0f6-48a9-9aab-77b9753cb0ea",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bf27139d-e843-45ed-ae54-a38d76a536d5",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "814cd1b2-c0d5-435a-8a28-2544134d7eae",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "3e940caa-c07f-4f56-94cf-99e124a43c19",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4cf14dc6-0083-4f46-9648-5a6ec7990ad0",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "dda7744f-cfc4-43dd-9381-8a750d1fc73d",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 509,
        "pending": 0,
        "failed": 44
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 407.1692307692307,
      "responseMin": 7,
      "responseMax": 11896,
      "responseSd": 1367.9121408946928,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1681086969510,
      "completed": 1681087086089
    },
    "executions": [
      {
        "id": "4706ef46-c1b3-492d-800a-74170ea5a1a5",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "c2dcdbca-d68b-45ee-91a8-97e5c4d55b5a",
          "httpRequestId": "a986b3e8-ca12-4fd2-ac4a-97232373d087"
        },
        "item": {
          "id": "4706ef46-c1b3-492d-800a-74170ea5a1a5",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "4d7263bc-bc3c-42df-abb8-466a0173396d",
          "status": "OK",
          "code": 200,
          "responseTime": 53,
          "responseSize": 0
        }
      },
      {
        "id": "f465aea8-3ff8-429c-8833-acd952f39e84",
        "cursor": {
          "ref": "cdc55cdd-9106-4383-8376-95d66b9faf52",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "dd144c4a-bdf8-4e54-9f70-e06608009f31"
        },
        "item": {
          "id": "f465aea8-3ff8-429c-8833-acd952f39e84",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "f0d3c07c-f7d8-418f-93cc-d6752b946d86",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 0
        }
      },
      {
        "id": "4984194a-81af-45e4-a442-ed05be012a0a",
        "cursor": {
          "ref": "8159e027-6286-449c-a4ce-8eb0413eb585",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "1a6804a7-430e-4bc8-99e2-327cf0d78d9a"
        },
        "item": {
          "id": "4984194a-81af-45e4-a442-ed05be012a0a",
          "name": "did_json"
        },
        "response": {
          "id": "b2aa9e59-a7ce-487e-81bf-8f35da2f1d33",
          "status": "OK",
          "code": 200,
          "responseTime": 511,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88080303-318d-4d07-97e0-967d20fcebf8",
        "cursor": {
          "ref": "d62ee420-941d-47de-8a08-5d404ae26979",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "62d8c0c4-356e-41be-8884-6d0e6634f195"
        },
        "item": {
          "id": "88080303-318d-4d07-97e0-967d20fcebf8",
          "name": "did:invalid"
        },
        "response": {
          "id": "af47bf55-c7da-4506-80bf-466e550bbc12",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1135,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "88080303-318d-4d07-97e0-967d20fcebf8",
        "cursor": {
          "ref": "d62ee420-941d-47de-8a08-5d404ae26979",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "62d8c0c4-356e-41be-8884-6d0e6634f195"
        },
        "item": {
          "id": "88080303-318d-4d07-97e0-967d20fcebf8",
          "name": "did:invalid"
        },
        "response": {
          "id": "af47bf55-c7da-4506-80bf-466e550bbc12",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1135,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "b5d6db33-5ec2-44fc-9193-ff78a01ee355",
        "cursor": {
          "ref": "514cd7bd-1071-402e-8f88-5fba35f68f27",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "c0199312-27f2-4fac-9603-56c22465ce3b"
        },
        "item": {
          "id": "b5d6db33-5ec2-44fc-9193-ff78a01ee355",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "1b2121b1-0b46-4673-a4b3-8b2d5a123130",
          "status": "Not Found",
          "code": 404,
          "responseTime": 46,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2d37a02-f18d-430d-b133-41969e1ea912",
        "cursor": {
          "ref": "ef7d0166-4ee3-4747-b506-4c79fb8d89e3",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "f29222f4-cadf-4da6-a31e-bf63a485018d"
        },
        "item": {
          "id": "d2d37a02-f18d-430d-b133-41969e1ea912",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "68d5039c-d342-4e96-a87d-93e1b97e852d",
          "status": "Not Found",
          "code": 404,
          "responseTime": 30,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e834b317-3b3b-4946-b5ac-9f05e128e4b3",
        "cursor": {
          "ref": "af0022c9-7b0c-4fba-8057-efccc2bb2273",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "bdd14352-203a-4b8a-86a7-bf56c2b49c3f"
        },
        "item": {
          "id": "e834b317-3b3b-4946-b5ac-9f05e128e4b3",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "bffefb3a-c7f0-4527-99a6-09a36835bcae",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "36aaf71a-20f0-447a-b570-5918990bbd58",
        "cursor": {
          "ref": "85c5752f-502c-4c1a-b9b4-76b0ef2438f4",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "22d39ae3-221f-40ae-b36f-13bc80c3b8c6"
        },
        "item": {
          "id": "36aaf71a-20f0-447a-b570-5918990bbd58",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "69386a42-69f3-4eea-9d07-c82d3b735384",
          "status": "OK",
          "code": 200,
          "responseTime": 77,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "36aaf71a-20f0-447a-b570-5918990bbd58",
        "cursor": {
          "ref": "85c5752f-502c-4c1a-b9b4-76b0ef2438f4",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "22d39ae3-221f-40ae-b36f-13bc80c3b8c6"
        },
        "item": {
          "id": "36aaf71a-20f0-447a-b570-5918990bbd58",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "69386a42-69f3-4eea-9d07-c82d3b735384",
          "status": "OK",
          "code": 200,
          "responseTime": 77,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "6152f4c7-6cec-4a9b-b7ba-01ecf25af8d0",
        "cursor": {
          "ref": "dfaf749f-ec85-45ce-9ea6-203a1695a39c",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "bfccaea1-0832-4f76-8b62-0262613a6b04"
        },
        "item": {
          "id": "6152f4c7-6cec-4a9b-b7ba-01ecf25af8d0",
          "name": "identifiers"
        },
        "response": {
          "id": "d247dbc4-3a8b-4af5-bcf5-f9f4db1e3683",
          "status": "OK",
          "code": 200,
          "responseTime": 56,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48acc003-d797-4c82-8831-7d411fb05d80",
        "cursor": {
          "ref": "2c0642d9-a33e-4439-8325-4c7af1db28bc",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "1eb45f61-8845-4f28-b68f-e1ba0d8a0ac4"
        },
        "item": {
          "id": "48acc003-d797-4c82-8831-7d411fb05d80",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "3245628d-04a6-4d39-a029-8af311bfd45c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 117,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48acc003-d797-4c82-8831-7d411fb05d80",
        "cursor": {
          "ref": "2c0642d9-a33e-4439-8325-4c7af1db28bc",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "1eb45f61-8845-4f28-b68f-e1ba0d8a0ac4"
        },
        "item": {
          "id": "48acc003-d797-4c82-8831-7d411fb05d80",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "3245628d-04a6-4d39-a029-8af311bfd45c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 117,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ed6a404-67d5-4f48-9d1c-0664f127ab71",
        "cursor": {
          "ref": "50f3ac78-2169-4392-90b1-3e674ccd0835",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "3363951e-fa45-4bf2-ade1-2f9e2fffcc1f"
        },
        "item": {
          "id": "2ed6a404-67d5-4f48-9d1c-0664f127ab71",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "531c76ff-783f-4ee9-b320-54ae18a93628",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba487e22-3652-4e75-97b3-caf5bd11a3c9",
        "cursor": {
          "ref": "158e4281-b1e2-4a11-9948-e438d290286b",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "935e4786-7f85-43a8-b236-412bcb06525a"
        },
        "item": {
          "id": "ba487e22-3652-4e75-97b3-caf5bd11a3c9",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "7887f72c-9bb0-4920-914f-19fb5e18bc19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4743f42-aedc-42c0-9e68-90169968e15e",
        "cursor": {
          "ref": "03ea17ad-2977-44ed-bc38-6d2292378abb",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "df06ea24-a409-4d54-adc1-bca81b10b04d"
        },
        "item": {
          "id": "e4743f42-aedc-42c0-9e68-90169968e15e",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "fe51df04-e2a3-4477-a314-3d3a73f7c4cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 646,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00f6bde9-937c-4e62-b35c-3f0bc09dbc38",
        "cursor": {
          "ref": "a7229ef3-3851-46ea-85d1-59e3cee21cde",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "2c03a409-8213-45eb-a8c7-f782dc6c5487"
        },
        "item": {
          "id": "00f6bde9-937c-4e62-b35c-3f0bc09dbc38",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "7f583b10-90c4-40cf-a63c-91fd7ce3c2e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a03c90b-53c7-438d-be9f-b9688125548e",
        "cursor": {
          "ref": "5cb211be-650c-4137-b56d-50faa323359b",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "d896e317-40a0-4d91-bdb2-921d89284599"
        },
        "item": {
          "id": "1a03c90b-53c7-438d-be9f-b9688125548e",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "ac74819f-6893-4255-afa5-7ed8717fac77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a2d2008-6748-40d2-b7f4-c51ba19c7cd7",
        "cursor": {
          "ref": "32e9a92c-c059-4806-985f-068fa455fbd4",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "477f079b-dccc-429f-b229-1e127ac8a748"
        },
        "item": {
          "id": "5a2d2008-6748-40d2-b7f4-c51ba19c7cd7",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "8bdcb672-4f25-497e-8ac1-7e4ffe1ad0fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7253610-4e1a-4496-b4fd-151bb9a7ccd6",
        "cursor": {
          "ref": "ea9d8541-ca17-4582-b1f7-bd5809d05867",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "393ff9d7-8206-4599-b367-df8de753b13e"
        },
        "item": {
          "id": "f7253610-4e1a-4496-b4fd-151bb9a7ccd6",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "bbada702-ee8f-4941-a515-4c10d5054efe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2b3768e-e916-41be-b13b-9acbb18974a7",
        "cursor": {
          "ref": "828cf953-a976-4b7d-9cff-2d93def70f47",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "3d1af67a-ce36-4a2f-ba55-93e9573cd982"
        },
        "item": {
          "id": "d2b3768e-e916-41be-b13b-9acbb18974a7",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "a1c71dfa-091f-4aa1-a97f-023435352aa1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "357680d4-b01e-40c1-b5af-c655dc99b85a",
        "cursor": {
          "ref": "7d29d914-426a-45ba-9498-0b30305e3e24",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "7474ff41-81f7-4789-8e65-24f817137154"
        },
        "item": {
          "id": "357680d4-b01e-40c1-b5af-c655dc99b85a",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "86c89768-febb-4270-8250-5cfbc297854c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "979b7b7b-0d4d-4ffd-a4e1-be46571c3dbd",
        "cursor": {
          "ref": "0ecf7d1e-3592-44d3-9b35-6e4be3e69a14",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "9c3d9e87-4363-446e-8a23-f7ad0160ebf6"
        },
        "item": {
          "id": "979b7b7b-0d4d-4ffd-a4e1-be46571c3dbd",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "f6a736da-5b6f-4e11-958f-99eecfbe5cce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83eaef80-e4da-4e29-a511-d748e3b3113a",
        "cursor": {
          "ref": "1425cfbd-55f7-4cac-8c54-b732c3feeaea",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "b89ad5f7-8261-4b6e-9e4d-379f2373ba8f"
        },
        "item": {
          "id": "83eaef80-e4da-4e29-a511-d748e3b3113a",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "93a4db9f-dc98-4f73-b0f4-14304a2b087b",
          "status": "Created",
          "code": 201,
          "responseTime": 1739,
          "responseSize": 982
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "052495b4-417b-46ea-86eb-e0f7415358d1",
        "cursor": {
          "ref": "9584d789-6bd6-4c36-905e-b6bc235866a6",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "bb59a47b-821b-4a21-be67-f1438bfeab68"
        },
        "item": {
          "id": "052495b4-417b-46ea-86eb-e0f7415358d1",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "b3da1e39-ff77-4715-a14b-657f350cd2c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 372,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17fe7242-2b91-44ad-8607-a7c78de01df9",
        "cursor": {
          "ref": "616c614f-9a6f-4c8e-afd6-4141ba581ffc",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "37ecbefc-7e8d-4fde-9351-408e60417807"
        },
        "item": {
          "id": "17fe7242-2b91-44ad-8607-a7c78de01df9",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "625e902a-7e99-477f-aa92-0c21effab51b",
          "status": "Created",
          "code": 201,
          "responseTime": 8861,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "95de231c-3c49-4d5e-8c1e-3cf2622c4d3e",
        "cursor": {
          "ref": "2c057399-264f-4f0f-8447-a1ac164d879b",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "96710379-c63c-4152-ab01-4808b999a3ee"
        },
        "item": {
          "id": "95de231c-3c49-4d5e-8c1e-3cf2622c4d3e",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "6a85ae0f-0a86-4d74-a59a-1c660b89b59f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fe23f29-180b-4a74-b1b1-8432013d3d57",
        "cursor": {
          "ref": "4f0909da-fb34-4a0e-b012-5fc2707c4853",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "204cc0bf-b567-4a24-92a1-528af1587851"
        },
        "item": {
          "id": "2fe23f29-180b-4a74-b1b1-8432013d3d57",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "708824d4-90fb-46e4-876e-4591933a4da2",
          "status": "Created",
          "code": 201,
          "responseTime": 4429,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "e6a0d7cc-ac44-4e94-b4e2-089d2efe6b91",
        "cursor": {
          "ref": "dff0f69a-6522-4741-8329-5ddfa1098b25",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "f5d9cce1-b710-47c0-9a31-44d2446c37d9"
        },
        "item": {
          "id": "e6a0d7cc-ac44-4e94-b4e2-089d2efe6b91",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "a649bbd8-9c27-47d6-b6a6-b28994a6e565",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c46d1d4-b208-451d-9b09-d87f54db7447",
        "cursor": {
          "ref": "2610db9d-13d4-4c34-82a0-e9c4be2034cc",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "6c7d5e77-5fdc-45a2-b0d4-9641fcf55d0e"
        },
        "item": {
          "id": "9c46d1d4-b208-451d-9b09-d87f54db7447",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "5163bac1-74ba-4929-bd38-90ac5e48fe9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21a67eda-609e-481f-a264-9ed87845d9a6",
        "cursor": {
          "ref": "a0f82a3a-9c9d-454c-8450-ed3839d6ef83",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "e499e337-7ed5-4423-9dbf-49710f7b5650"
        },
        "item": {
          "id": "21a67eda-609e-481f-a264-9ed87845d9a6",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "347755b2-e4ea-488c-821e-64c30d59b331",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0363d8dd-f509-404a-91be-6ad6984ddcfd",
        "cursor": {
          "ref": "c4fe75be-30d7-4c90-9eed-eaecfb55855d",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "bd3af6ca-553e-400b-b8e2-4dcf853635fe"
        },
        "item": {
          "id": "0363d8dd-f509-404a-91be-6ad6984ddcfd",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "548df3a4-1fd9-48bc-8c2d-510cac428396",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 242,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73272165-3a83-4c67-a826-1bac1d478522",
        "cursor": {
          "ref": "5fd68e59-aa70-46f6-add6-f814be553c7e",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "427fe0b6-3ba4-4aa8-a3d9-dd401dc44210"
        },
        "item": {
          "id": "73272165-3a83-4c67-a826-1bac1d478522",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "237eb8fc-4743-4413-9f5a-42106fba93c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "498481f8-d6ea-495a-b6ba-c8d96e2a162b",
        "cursor": {
          "ref": "b8ede374-b0e5-4a75-a16e-29184ca75ad4",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "2fe885b6-bb73-4cd3-be57-25b7548c3953"
        },
        "item": {
          "id": "498481f8-d6ea-495a-b6ba-c8d96e2a162b",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "d8ea250e-84ba-42ba-a578-3f7d7902aed7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6bbe9fc-ed78-4329-8299-dd7adf2ece36",
        "cursor": {
          "ref": "2266e699-07fe-41d1-ae72-4f0301c7fdc9",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "a01e2597-c98e-498a-80c1-5788915d3ff8"
        },
        "item": {
          "id": "a6bbe9fc-ed78-4329-8299-dd7adf2ece36",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "1d04111d-6b33-476d-90c9-d0266acc499f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be62aa33-9f91-45db-b054-25a66ab171a2",
        "cursor": {
          "ref": "d52ec303-2f6e-4912-b718-70511c2ce15b",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "62948e2e-14e2-430c-ba8f-494acf055aa3"
        },
        "item": {
          "id": "be62aa33-9f91-45db-b054-25a66ab171a2",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "4fb66692-b179-4e3d-83b3-9cb725e39cf3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18e2de3d-d362-4622-a7b3-0a8bd93d993d",
        "cursor": {
          "ref": "7e20c931-ef08-4469-968a-7bf85493be14",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "0f7d7e34-097d-4c20-8bca-74fbd01471d2"
        },
        "item": {
          "id": "18e2de3d-d362-4622-a7b3-0a8bd93d993d",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "061fdaf8-75b0-4317-a832-635acb2e00ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "451ed921-fa5b-412d-b77f-91163ef9334a",
        "cursor": {
          "ref": "806b5a59-872f-400e-88f7-4f2c6b05ca3a",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "fd2d8617-5a48-4a4f-a10e-8826b71a7b56"
        },
        "item": {
          "id": "451ed921-fa5b-412d-b77f-91163ef9334a",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "8b13467d-2aa5-4fb1-826b-58a30f556e37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 114,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "566a9eb6-364b-4d11-b0f0-cf818828cef4",
        "cursor": {
          "ref": "80dd1048-4877-4862-b0ee-90ffe90d3ece",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "afc7c41d-41a0-47b1-b119-44f9feb11902"
        },
        "item": {
          "id": "566a9eb6-364b-4d11-b0f0-cf818828cef4",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "dca83ab0-38b5-4a95-b47d-1b88611184d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c618762-3928-4896-b95c-a93e272d8975",
        "cursor": {
          "ref": "c69a6605-f17d-4c63-87a4-d8b1315f11f9",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "54887ffc-abd5-4c54-b2aa-b3ce83b03f65"
        },
        "item": {
          "id": "1c618762-3928-4896-b95c-a93e272d8975",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "276a9d07-9ebb-4cc4-83c9-fbf314d26e6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36aebcf0-7041-428a-9ca4-31b82a4687f9",
        "cursor": {
          "ref": "39fde036-23c7-449d-9a93-0f84c723dd18",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "28a9b6d2-927e-41a5-9ca4-f4020ea73177"
        },
        "item": {
          "id": "36aebcf0-7041-428a-9ca4-31b82a4687f9",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "00104d81-824f-48db-8a3b-893bbae1aa19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34801d7f-a269-40f9-9b2f-000594c62430",
        "cursor": {
          "ref": "43c5845a-6ddd-45c3-bbb2-e9c520dbc289",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "f77b555c-28ba-40c3-a004-27b5d3a79cd7"
        },
        "item": {
          "id": "34801d7f-a269-40f9-9b2f-000594c62430",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "b8aeec16-66f9-46a2-9a86-76c6ef0895a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1507ff1-1f2e-42dc-b3f0-5a58aa9bce8a",
        "cursor": {
          "ref": "a0e99071-c58b-40da-bebc-989ed9411eae",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "6daf5284-9340-4985-976b-147cc7fccdcf"
        },
        "item": {
          "id": "d1507ff1-1f2e-42dc-b3f0-5a58aa9bce8a",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "19f062d1-2930-4454-95e5-10c7e24b80c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c24fe86d-017a-4e2c-bdea-a50b52b0779a",
        "cursor": {
          "ref": "25ea9dd0-6eba-4676-8b64-95cf456652ce",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "5b62fc9a-33b6-4ab7-bc92-725cc24a860f"
        },
        "item": {
          "id": "c24fe86d-017a-4e2c-bdea-a50b52b0779a",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "548d81bb-6b1b-430b-9618-337d69a83a7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cad165c3-565f-48a1-8ed4-3305beda1cb8",
        "cursor": {
          "ref": "25cd3b7c-d5ab-4e69-bf1d-cd771c380f1b",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "4effc3ef-7588-4b25-abad-2fa0e99a4b9e"
        },
        "item": {
          "id": "cad165c3-565f-48a1-8ed4-3305beda1cb8",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "61613e6e-06d7-415f-95a5-925661840624",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e3b617d-c00a-450c-876e-3da5a7f41c56",
        "cursor": {
          "ref": "b96a3923-2cab-4080-b30c-ffc313c70148",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "9d647129-b472-4d51-ab5d-7a438236ad57"
        },
        "item": {
          "id": "1e3b617d-c00a-450c-876e-3da5a7f41c56",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "6d3fa1e8-b4ef-4bfb-adaf-fe79480c43de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dc8eb4a-1dba-40f2-85ff-06664f5bc5c3",
        "cursor": {
          "ref": "3c88639b-799d-4618-a65b-29904e32d358",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "7167d9b6-520d-4573-9548-db0f27f10bed"
        },
        "item": {
          "id": "6dc8eb4a-1dba-40f2-85ff-06664f5bc5c3",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "970f23ee-3ab9-475e-9b1c-16f6bdb9f323",
          "status": "Created",
          "code": 201,
          "responseTime": 2488,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "1facd32e-f3ff-4f23-b650-e7660b4956d4",
        "cursor": {
          "ref": "7bf3d974-3b60-4641-b8ca-9e4f33b611c7",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "2fc63223-0452-4677-9b44-9bec86c1392a"
        },
        "item": {
          "id": "1facd32e-f3ff-4f23-b650-e7660b4956d4",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "86e29981-21a7-47bd-ad9f-0bcf8912bc08",
          "status": "Created",
          "code": 201,
          "responseTime": 4340,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "c74ebb1e-ab8f-4942-839d-05e86814db04",
        "cursor": {
          "ref": "3a0c7fb1-0546-4160-a94e-47958cedf4f1",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "1b990b00-36d3-492b-98d7-9629f268deaa"
        },
        "item": {
          "id": "c74ebb1e-ab8f-4942-839d-05e86814db04",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "5d20a790-b79b-4d8f-bdd2-80c0e6c61e1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba3b90b9-4c71-4636-b94f-e54c9e2fbc6c",
        "cursor": {
          "ref": "835a6eca-39d3-41e4-8b8e-ddc1a54c6370",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "d2ade1de-6627-4ad4-afe8-0b91cad0c7d1"
        },
        "item": {
          "id": "ba3b90b9-4c71-4636-b94f-e54c9e2fbc6c",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "24e0502e-c147-41af-b365-2ff35f19c21a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65b7e772-4430-4f1a-82e3-80194721d808",
        "cursor": {
          "ref": "0e2eab24-ce0e-432e-bc4e-7b24e9284737",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "fac4e9a6-ce1a-4b40-837e-5a64331749c5"
        },
        "item": {
          "id": "65b7e772-4430-4f1a-82e3-80194721d808",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "b1d44395-b920-4609-bef1-3489e300e9d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78af02aa-e851-4427-a035-cec1511a75aa",
        "cursor": {
          "ref": "85048958-a939-47c2-9245-ddd423e98f5d",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "df60708c-eb0a-4c5b-86b5-0215fc893eea"
        },
        "item": {
          "id": "78af02aa-e851-4427-a035-cec1511a75aa",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "54ca7878-43e4-4078-b9b3-d3f5f8cf3622",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6a16a87-7d12-4965-8135-5b0ab60c4d14",
        "cursor": {
          "ref": "629922b1-8fe8-4357-877e-dc02ddd2b772",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "0c91f123-e64c-4993-ad98-88859c69ead6"
        },
        "item": {
          "id": "c6a16a87-7d12-4965-8135-5b0ab60c4d14",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "98bf74cf-e177-446f-84fc-7bfecee866e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cb97f3b-f8e0-4f75-b53a-a8016f1bd737",
        "cursor": {
          "ref": "905355e4-b9c5-4a7c-863b-5309d07c2db1",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "d9eaf286-c820-43f6-8d89-80f9443e4d9d"
        },
        "item": {
          "id": "2cb97f3b-f8e0-4f75-b53a-a8016f1bd737",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "8ddab0e0-4d00-4a54-a401-42675b1d9621",
          "status": "Created",
          "code": 201,
          "responseTime": 2969,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "069484c1-a88f-47d8-b517-aebe45677546",
        "cursor": {
          "ref": "7ae2b6c8-b107-4916-a70f-66445907b679",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "3efac88c-f782-42b1-b22d-009bd77880ef"
        },
        "item": {
          "id": "069484c1-a88f-47d8-b517-aebe45677546",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "1621aae4-8a22-41d3-bc71-73d4bdeb3ce5",
          "status": "Created",
          "code": 201,
          "responseTime": 2043,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "c458c285-b63f-4ead-9c90-c18af39da3e0",
        "cursor": {
          "ref": "c27011b2-53ec-4d10-aa51-52bae9898c2e",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "747661f2-9831-449c-8469-2224d5bffb61"
        },
        "item": {
          "id": "c458c285-b63f-4ead-9c90-c18af39da3e0",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "59a7b9c6-e1fd-4715-98da-65382f11c11c",
          "status": "Created",
          "code": 201,
          "responseTime": 2050,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "b073397f-d8ad-477a-a967-ad478c52b2a4",
        "cursor": {
          "ref": "35cb4dc9-53ad-4d53-938b-272249884ad7",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "9f4c59ea-aa0b-4ce8-8947-fef5752b70e3"
        },
        "item": {
          "id": "b073397f-d8ad-477a-a967-ad478c52b2a4",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "e2ef05e1-b52c-4d4d-8a62-9c8f86247a87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfd12adf-b2ed-404a-b965-7160e9eacab2",
        "cursor": {
          "ref": "6255e205-378f-47a4-aa7b-0adb4e54055a",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "0b4fb8cc-fb8e-4c37-b164-d1ba945093f1"
        },
        "item": {
          "id": "dfd12adf-b2ed-404a-b965-7160e9eacab2",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "7908cbbd-46c9-4f17-95c3-f9b7902af2c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2ad6fef-a54e-4a98-9fc6-931767ae084b",
        "cursor": {
          "ref": "6aee7e98-079b-4659-924b-0ee5309838e6",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "ad8bf9f3-6e25-484b-91af-e9435bc0016f"
        },
        "item": {
          "id": "f2ad6fef-a54e-4a98-9fc6-931767ae084b",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "7c963d1e-c404-49a5-95de-4bdfe5568f72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d52e3a8-d0e9-43bb-a3e3-fb11b2b4cdf0",
        "cursor": {
          "ref": "b0bacafe-22fe-4c7f-ae73-0daf468cd47a",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "62ddb80d-7010-4082-9584-18a3d48606b1"
        },
        "item": {
          "id": "5d52e3a8-d0e9-43bb-a3e3-fb11b2b4cdf0",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "f01e9602-5c84-4d78-af11-fb2253a2069f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37aeb2c7-f036-4bf3-8b32-ce7d926bb4dd",
        "cursor": {
          "ref": "dc4a36f6-5aa9-4a87-8bf9-e23d22337a62",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "01071e9f-42e4-49e7-97cf-578a9c21eb7c"
        },
        "item": {
          "id": "37aeb2c7-f036-4bf3-8b32-ce7d926bb4dd",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "c43fc0e1-5caf-409a-962b-d98fba96eda7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71382db8-733d-4693-9ab1-2a55cb5fbd35",
        "cursor": {
          "ref": "3a57a988-08da-4c71-bd0e-3a5bc45894d7",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "6395401d-0f6f-4a75-8ff3-faeb9ee5f72d"
        },
        "item": {
          "id": "71382db8-733d-4693-9ab1-2a55cb5fbd35",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "f24ab02a-c5b6-4918-8871-e2fd4d65b07d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a6f85bd-f0cb-4a06-9061-a649a8965bf8",
        "cursor": {
          "ref": "1a4baad4-9bf6-4d3d-8c7b-6a9dc58e1188",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "ecba4249-668d-4e0a-898f-cea35ca16510"
        },
        "item": {
          "id": "8a6f85bd-f0cb-4a06-9061-a649a8965bf8",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "3680a259-bf5e-4b3a-abfc-0225d21895eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb916fcd-51fc-4f42-a1c6-89c4ff9ed9c7",
        "cursor": {
          "ref": "4b775ddf-c335-4c03-8b49-f09e844e41b1",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "1fcbd6da-0ffc-4256-aca6-0a0a3f0576df"
        },
        "item": {
          "id": "cb916fcd-51fc-4f42-a1c6-89c4ff9ed9c7",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "e2121b82-eac2-452f-adbc-54ec149214e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9dd95e5-a474-44ca-89f5-c696fe80b39a",
        "cursor": {
          "ref": "bf7b223d-8e52-4625-b86b-2b6159482419",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "8d5622c3-1a14-4f02-a331-fed95407b63a"
        },
        "item": {
          "id": "b9dd95e5-a474-44ca-89f5-c696fe80b39a",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "cda1982d-4f51-40c6-aca3-56865970a804",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e21f2bf8-dbe3-401b-8597-258c9d1b3a70",
        "cursor": {
          "ref": "9ad778a0-4d7c-45f3-9031-25dfe4ebe8f8",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "05cc5d3e-1ac2-48bb-a2af-52b0772e3aa7"
        },
        "item": {
          "id": "e21f2bf8-dbe3-401b-8597-258c9d1b3a70",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "3524fd87-7b22-4850-aa98-8899c10855bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05ae9570-07c3-44bd-a9f7-60bed375cff5",
        "cursor": {
          "ref": "fa6bd380-845d-4022-96a0-10117bc76a7c",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "d482e76b-b7aa-4d4c-a034-08a380be841b"
        },
        "item": {
          "id": "05ae9570-07c3-44bd-a9f7-60bed375cff5",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "8d01d307-2e39-4840-9bb4-db665c71e692",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e95b4db-cee1-426c-a424-d49f229bfabc",
        "cursor": {
          "ref": "68cf725a-df06-4cec-add3-c6c550141969",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "56924ddc-3acc-441c-a170-472e29c46152"
        },
        "item": {
          "id": "0e95b4db-cee1-426c-a424-d49f229bfabc",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "7386cd46-0d89-4055-b2ad-5cabe12cd066",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c14bf2cd-8035-46a0-8798-dbecb030123c",
        "cursor": {
          "ref": "568d200f-5092-439c-82fe-e868f08310fb",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "bc48f0f1-6f2a-4191-ab96-ccd2929d45d1"
        },
        "item": {
          "id": "c14bf2cd-8035-46a0-8798-dbecb030123c",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "d0fc93f6-3119-4d74-9ae3-c9bcdac6472d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "550b7b14-44e9-4046-a35f-7408448f34d3",
        "cursor": {
          "ref": "f2fad822-8fe6-41d9-9f0c-bfe986c146ba",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "c82c3e99-5b82-4276-b1c8-50ba2f781f14"
        },
        "item": {
          "id": "550b7b14-44e9-4046-a35f-7408448f34d3",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "9ac2a8ff-33d6-453e-a1ef-5d5a0625bed0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "873df8b3-4b96-4130-b8d7-4b03d313d392",
        "cursor": {
          "ref": "764ed572-72a5-4e8f-af1d-5407d3a84029",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "63e5dab4-7770-432a-b95f-874fbe9bf8e0"
        },
        "item": {
          "id": "873df8b3-4b96-4130-b8d7-4b03d313d392",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "9595a429-1187-43c7-98c9-add12c91c89c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22bdebaa-55c2-4d8a-9f0f-7a6615b4a759",
        "cursor": {
          "ref": "2bf66e10-ad2e-4dc6-921c-3be214329982",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "b6b915f0-8a49-41e8-acb7-ab27ed038619"
        },
        "item": {
          "id": "22bdebaa-55c2-4d8a-9f0f-7a6615b4a759",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "17818c99-f19e-4690-9abd-4b805ef329e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4463374e-d889-4ef8-8672-c627e28a222a",
        "cursor": {
          "ref": "3262f293-8667-40f3-ba69-a3e1e40c8e04",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "b0ac97b0-25e3-4375-9995-58a692325f21"
        },
        "item": {
          "id": "4463374e-d889-4ef8-8672-c627e28a222a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "2013d11a-43df-4ab9-a0c3-ee0757d637a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32233cc7-d2bf-4569-98cf-e4f659cc9d30",
        "cursor": {
          "ref": "6a54e6ba-3869-4317-880e-8faec7c193d6",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "36b376ac-e041-4fe8-9747-dea53ae71f76"
        },
        "item": {
          "id": "32233cc7-d2bf-4569-98cf-e4f659cc9d30",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "bc1c7017-91bc-4894-b595-ed824a3fb5da",
          "status": "Created",
          "code": 201,
          "responseTime": 2475,
          "responseSize": 977
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "7f198d91-a854-4221-9c19-f62563983335",
        "cursor": {
          "ref": "0ff6c4ba-11e3-419a-8028-7f3a8df3c895",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "1fd0054e-911b-4879-b51b-ee5c4c91f30d"
        },
        "item": {
          "id": "7f198d91-a854-4221-9c19-f62563983335",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "a2ad1c93-f5f1-44e9-a2af-5a85546e23ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 124,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "802a8bb7-f338-4568-ab5a-0391e8526f47",
        "cursor": {
          "ref": "17de4127-c064-4ec7-a557-51205717786f",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "9292234c-2425-4ab6-8cb1-d2260553fbe2"
        },
        "item": {
          "id": "802a8bb7-f338-4568-ab5a-0391e8526f47",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "f9d92aa3-1058-49be-b4cc-ab5e323b0110",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "089ea176-da3c-49a1-bf64-884b50dee64d",
        "cursor": {
          "ref": "90fc2127-fcec-43d3-a01d-481fe5891380",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "b17508f4-dcd5-42a5-a7be-3c4bd4624c62"
        },
        "item": {
          "id": "089ea176-da3c-49a1-bf64-884b50dee64d",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "75e4ff32-5ceb-4228-bb10-88ac9d1d2874",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6c9d05c-78cd-41f2-912d-d086b90d95a3",
        "cursor": {
          "ref": "8bc11f94-3c83-469e-866e-37f1833eafa6",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "81f8157b-e1ed-456d-ad12-b03b0b1a75a6"
        },
        "item": {
          "id": "d6c9d05c-78cd-41f2-912d-d086b90d95a3",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "ebabfdad-80d8-44c7-a300-2d7cfad0c9a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c954d6d-66a1-438c-a934-409168175f2b",
        "cursor": {
          "ref": "71004c89-b754-487f-98d2-361d8265e90a",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "65c241f2-8b73-49a1-89a3-e6c504eaf905"
        },
        "item": {
          "id": "9c954d6d-66a1-438c-a934-409168175f2b",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "e99c21bd-b174-4742-b44d-1dfba8639add",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09ee7f6e-9da8-4903-a04d-3869bc5a1d22",
        "cursor": {
          "ref": "555fffe5-3390-4a5a-9ef1-546baa056940",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "81bc5045-0a8c-4d13-ac5e-f219d7f8e9a2"
        },
        "item": {
          "id": "09ee7f6e-9da8-4903-a04d-3869bc5a1d22",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "b345f4a4-c17d-429f-a24a-9d2fccad7cc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 146,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f14c772-2ce6-437b-8556-915653bb9678",
        "cursor": {
          "ref": "0c226bf3-d17d-4a5c-b1dd-1a98d03946b8",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "433c6c6a-745f-4452-a957-cf5f4ac504b8"
        },
        "item": {
          "id": "2f14c772-2ce6-437b-8556-915653bb9678",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "b817f382-b398-4824-8007-94896c0b0ddf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b31ea7d7-ac18-4774-8e0d-09e4c777e00c",
        "cursor": {
          "ref": "74d744f2-db86-46a6-9834-59a54a9a405d",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "a1bbfb77-6bf3-4413-a049-bfdc25eaa64e"
        },
        "item": {
          "id": "b31ea7d7-ac18-4774-8e0d-09e4c777e00c",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "9958a501-7677-4fd1-b101-ab9a59949dae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2645cb09-79f2-4583-883f-ddba4c134176",
        "cursor": {
          "ref": "a023ef08-e734-4b7a-a396-4c3d1283a6a2",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "8f094b71-44a6-4b18-b5e2-10bc05f04a2c"
        },
        "item": {
          "id": "2645cb09-79f2-4583-883f-ddba4c134176",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "59f8531f-fe77-49cf-8ea2-3eeb401dbc4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f3679e4-b9ef-4fce-b057-b3913ee6996d",
        "cursor": {
          "ref": "3902924c-f2b5-456b-9b8f-b637ceac1e7c",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "5196150a-6086-484e-9ef8-bbe84974a014"
        },
        "item": {
          "id": "7f3679e4-b9ef-4fce-b057-b3913ee6996d",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "05bc6cc6-be97-4c3b-8178-9b2427a59254",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9ec97ec-bc1d-403c-aa30-47627c15630d",
        "cursor": {
          "ref": "fa21117f-73a4-47fd-955d-9f0de9501273",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "4ee3b6be-5038-4c4b-a129-dda64c10152e"
        },
        "item": {
          "id": "b9ec97ec-bc1d-403c-aa30-47627c15630d",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "58096441-916f-4aee-a4f1-a33581be1d15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3f1534e-d975-4653-84df-6c7f3b1e75e1",
        "cursor": {
          "ref": "3e1080f9-8630-4dce-b50a-95baad867f4d",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "b09d4ad3-a17e-4c56-b1e5-54a711ce53aa"
        },
        "item": {
          "id": "e3f1534e-d975-4653-84df-6c7f3b1e75e1",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "16bb1404-6b52-43d5-af46-1ea062fea656",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6265a54-7c47-42db-80b3-9b2e18d94e90",
        "cursor": {
          "ref": "bd7b4103-a1b5-4d09-b8eb-a5c0090a7cbd",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "a670750a-503d-4d73-9bc0-8ce116ffbed2"
        },
        "item": {
          "id": "b6265a54-7c47-42db-80b3-9b2e18d94e90",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "7a11b5e6-d5e6-46ba-8d3a-7745fdf2f97f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "349163df-504f-4fd8-8b08-df3a9e8a64c5",
        "cursor": {
          "ref": "6416dd8f-b0d8-42de-a921-cd93a3eb86bf",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "eff877d6-0b08-4498-a55e-f7a508e600b5"
        },
        "item": {
          "id": "349163df-504f-4fd8-8b08-df3a9e8a64c5",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "6744fa6f-98fd-47b2-a799-be606c3c0755",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f82d82d-4b0b-4a58-ab30-76ee5400cbe1",
        "cursor": {
          "ref": "83299b04-71a2-4ccf-8d40-ff3c4716820a",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "36b4cdf0-48e4-4bd1-a7a0-cd42387e782e"
        },
        "item": {
          "id": "0f82d82d-4b0b-4a58-ab30-76ee5400cbe1",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "aedb0716-2492-42b8-8f8e-ef2e31b71c09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e128e23b-07d2-4484-b1b5-23f4d6c8363f",
        "cursor": {
          "ref": "8d019d6a-0fd4-4078-81f1-91ac0bd8b6d1",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "039866e2-16a6-4a54-bea1-54d9240f2cfb"
        },
        "item": {
          "id": "e128e23b-07d2-4484-b1b5-23f4d6c8363f",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "318784d9-9110-4601-9d67-e15597230aeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f31a72c-cf57-4f7d-b119-d3c97557ed3e",
        "cursor": {
          "ref": "ed779daa-f86d-4f5a-96cf-98477e610ba3",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "186ab84d-c2a8-45fa-b850-f44264431d63"
        },
        "item": {
          "id": "0f31a72c-cf57-4f7d-b119-d3c97557ed3e",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "5fbb851e-ce67-41d2-8ecc-f021e4b931d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c041b3d-05b8-4a90-add0-2a31f4f6919d",
        "cursor": {
          "ref": "415dd485-935e-453f-9333-bd3088e8cf34",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "d1bcd6cf-37ae-4a97-a0b1-6cf23d83e672"
        },
        "item": {
          "id": "3c041b3d-05b8-4a90-add0-2a31f4f6919d",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "fcae0d99-b736-431a-b078-1714ba8650bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "840ec846-ca67-4b9c-83a1-7b32a9db8be5",
        "cursor": {
          "ref": "60e2e5f2-227d-4f45-a1f2-7bc115de29a3",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "618b0134-8d46-4eb8-9ca6-fc1345bbe67e"
        },
        "item": {
          "id": "840ec846-ca67-4b9c-83a1-7b32a9db8be5",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "d9c3764d-1131-4e85-9560-26bf088faeda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3962ed1a-71bc-4b2d-86a6-6fa8635ac545",
        "cursor": {
          "ref": "77326798-496d-4c87-9549-3eab6eccfdc2",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "9abea913-ee63-43d6-bb35-2f86a29db8c3"
        },
        "item": {
          "id": "3962ed1a-71bc-4b2d-86a6-6fa8635ac545",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "20a4daa5-726d-4920-bcd8-5a4654eeeceb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "716f63f7-5af5-45d7-aa74-9f98e3ca2816",
        "cursor": {
          "ref": "db0e1a50-96fc-43df-a6eb-4c9a9e8a9e79",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "979b7ed6-4bc0-41bb-96a3-d9ee1c84284b"
        },
        "item": {
          "id": "716f63f7-5af5-45d7-aa74-9f98e3ca2816",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "009dce47-c713-4821-8c4e-026d23f3322f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbdeee7f-8c08-4271-a0e6-32354ec4928c",
        "cursor": {
          "ref": "47eead3e-6c01-4515-a9b1-7ad784711547",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "71e6a0df-661f-4dfd-ab0a-1be4b0a48d6f"
        },
        "item": {
          "id": "fbdeee7f-8c08-4271-a0e6-32354ec4928c",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "6522079c-f2b8-40a8-98b4-4269e38da182",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d1c8dc3-d05e-4c91-85c6-376025adedd9",
        "cursor": {
          "ref": "92ff1ed5-826e-40e1-9614-7b632c7172ea",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "da2d1dd3-e14a-407f-8e48-c15827534033"
        },
        "item": {
          "id": "7d1c8dc3-d05e-4c91-85c6-376025adedd9",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "08a085f4-900d-4663-b333-e1bcd987f1d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d33f870c-2ddd-41a7-a4ef-a56adbe37ade",
        "cursor": {
          "ref": "d8582160-da35-4274-804f-c0a8654eb71c",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "10f00e2b-d20c-424b-8383-e5e902545abb"
        },
        "item": {
          "id": "d33f870c-2ddd-41a7-a4ef-a56adbe37ade",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "e84085c1-72bc-4127-a497-4d4fae263422",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c64e2995-2f1f-48a1-ae0a-900f96355e67",
        "cursor": {
          "ref": "2ceb37d2-032f-4f69-abb4-08d8f18144ad",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "2bb60088-5425-4c3c-a686-f1cbdea9362b"
        },
        "item": {
          "id": "c64e2995-2f1f-48a1-ae0a-900f96355e67",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "43d15926-46d5-4ef6-ad11-57699b97bcc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a3c3f6a-8375-405b-b07c-ac994aba8904",
        "cursor": {
          "ref": "4feade1c-f1c3-4099-a565-02ee162514a7",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "d2004c79-e79b-476d-8442-f87185a3023b"
        },
        "item": {
          "id": "7a3c3f6a-8375-405b-b07c-ac994aba8904",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "1e934a53-39d7-432f-a61d-14df74aab493",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb33a809-0627-4fe3-9293-b4f4ec957142",
        "cursor": {
          "ref": "eb5ac878-bd83-4354-a478-80f1ba3ee78e",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "3c55e888-9adb-4a96-b5d3-cb5f2efcc86e"
        },
        "item": {
          "id": "fb33a809-0627-4fe3-9293-b4f4ec957142",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "077ed63e-2fe4-4808-8a39-614d020fb880",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2cfbe3e-ce3b-4dfb-9a89-c30a2646eacf",
        "cursor": {
          "ref": "11021698-db5e-4547-9f51-3a306114d71b",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "f7dbca79-a84e-4f1e-8b50-fac334f4f058"
        },
        "item": {
          "id": "c2cfbe3e-ce3b-4dfb-9a89-c30a2646eacf",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "02d426f1-3b78-4399-b15e-2d43aee19a84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cf17fb4-ba17-4d54-8831-a9e6b46870f6",
        "cursor": {
          "ref": "6e3b1208-3085-4253-a031-faabec209f73",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "8366d8f4-a816-4158-97e1-d93164998486"
        },
        "item": {
          "id": "6cf17fb4-ba17-4d54-8831-a9e6b46870f6",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "3f961a97-94d2-4f33-9b1e-c954b7d5ae76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c75f8c5-2251-418c-8c68-b6700212f279",
        "cursor": {
          "ref": "68e83bb2-8a89-4430-a5c3-c0a9d5e26e05",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "4fc5d8c1-1dd1-47c0-a18f-21bd497398da"
        },
        "item": {
          "id": "2c75f8c5-2251-418c-8c68-b6700212f279",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "0c30c64d-7e92-495f-91bc-075b6d6fd742",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a02b32c-dafa-4e96-b7dc-d4e1bbe51f17",
        "cursor": {
          "ref": "8324b250-d26f-4b26-beab-c2eb7d74624e",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "dc74646d-4b90-4211-8b41-269e52ec5888"
        },
        "item": {
          "id": "9a02b32c-dafa-4e96-b7dc-d4e1bbe51f17",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "a5a1602a-6f64-407a-b34e-fe3e5b7089a9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "f3f64abe-9584-49f5-9b2b-1cbc0f5bd2e6",
        "cursor": {
          "ref": "6e0cffb4-72bd-43c9-955c-db3c85f645c8",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "f150b445-376a-422f-bb6d-120081b81172"
        },
        "item": {
          "id": "f3f64abe-9584-49f5-9b2b-1cbc0f5bd2e6",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "438b9964-2783-4573-af39-9b78bfb98789",
          "status": "Created",
          "code": 201,
          "responseTime": 1810,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "e24e61a4-3471-4ecf-8142-f01878845aba",
        "cursor": {
          "ref": "5ea1198d-9ab2-4573-ba3e-e10c52cebe96",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "2cc4b389-2d95-43f5-8cd5-14f1cb642ee8"
        },
        "item": {
          "id": "e24e61a4-3471-4ecf-8142-f01878845aba",
          "name": "credentials_issue"
        },
        "response": {
          "id": "bed486c8-8772-4199-a19d-3479339f63b9",
          "status": "Created",
          "code": 201,
          "responseTime": 2399,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc724eb1-a162-4933-91fd-2ea04756d517",
        "cursor": {
          "ref": "2bae20bc-e29c-4981-9ddf-b25592e8e959",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "997759c5-5916-48c0-8f2e-ce5fb7f20eb0"
        },
        "item": {
          "id": "dc724eb1-a162-4933-91fd-2ea04756d517",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "d63a0b3a-ec7a-45a6-bbc1-54e8f6c41a29",
          "status": "Created",
          "code": 201,
          "responseTime": 2152,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "202b3e82-fac1-43da-9e30-b1a0ab8c1024",
        "cursor": {
          "ref": "55a482d7-8f39-4afc-bff5-fbd866becd2f",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "c23f4000-2861-4bfb-af55-cd649e2ddec5"
        },
        "item": {
          "id": "202b3e82-fac1-43da-9e30-b1a0ab8c1024",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "c9e7d32e-c270-4982-8845-0e1a52142302",
          "status": "Created",
          "code": 201,
          "responseTime": 3250,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "6932c9b1-ec13-4b0c-90e0-450a2c80a3ba",
        "cursor": {
          "ref": "3d22005d-342c-44b5-942b-551259c52d7e",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "e67d19bd-f138-4741-838b-4f96b2863882"
        },
        "item": {
          "id": "6932c9b1-ec13-4b0c-90e0-450a2c80a3ba",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "80927abe-04a7-4462-ba0b-ece6bd5383b1",
          "status": "Created",
          "code": 201,
          "responseTime": 2328,
          "responseSize": 992
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "846bb1c0-169b-4a54-8f72-072f7a157215",
        "cursor": {
          "ref": "ef99de65-c42b-491b-8cfc-efbbfe367924",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "87154d21-344e-4cdd-abe9-e1ed9b86597f"
        },
        "item": {
          "id": "846bb1c0-169b-4a54-8f72-072f7a157215",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "63fb9c00-e867-46b8-b2d6-c92ee482707d",
          "status": "Created",
          "code": 201,
          "responseTime": 2978,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-04-10T00:37:08Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-04-10T00:37:08Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:108)"
            }
          }
        ]
      },
      {
        "id": "e2ebab78-2909-411a-a1c3-419fc479b1ec",
        "cursor": {
          "ref": "c4d5e4a4-abac-4d3e-b119-6f20028d7352",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "7dbc3cf4-12c5-4fe2-90fa-0b0ff4bc0574"
        },
        "item": {
          "id": "e2ebab78-2909-411a-a1c3-419fc479b1ec",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "3a26b20d-7ccb-4d07-956d-cbe0bfe88c8a",
          "status": "Created",
          "code": 201,
          "responseTime": 11896,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c15eba5a-d4df-4015-bc0f-72e4a06b2e92",
        "cursor": {
          "ref": "74eacdf1-2601-4ee7-8245-3f1f3e7d8fb9",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "8b643fc3-7cb6-4dbf-a7cd-1c5909da5f54"
        },
        "item": {
          "id": "c15eba5a-d4df-4015-bc0f-72e4a06b2e92",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "2594cecb-5b95-4625-86c4-6fdeb9bbba63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 478,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c15eba5a-d4df-4015-bc0f-72e4a06b2e92",
        "cursor": {
          "ref": "74eacdf1-2601-4ee7-8245-3f1f3e7d8fb9",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "8b643fc3-7cb6-4dbf-a7cd-1c5909da5f54"
        },
        "item": {
          "id": "c15eba5a-d4df-4015-bc0f-72e4a06b2e92",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "2594cecb-5b95-4625-86c4-6fdeb9bbba63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 478,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa8a19c5-a894-4ab4-85d2-e74520a82be1",
        "cursor": {
          "ref": "4ea546d0-1610-4d5b-aca4-75181c80dd32",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "dca24400-0f00-4972-aaf6-d428b169c0f5"
        },
        "item": {
          "id": "aa8a19c5-a894-4ab4-85d2-e74520a82be1",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "dda1e25a-d496-4a17-be3b-d7889f2a9bbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 256,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e85cad18-694b-438b-831f-b40fa630eb02",
        "cursor": {
          "ref": "8a8d82c6-3257-48e1-b780-0237474894e0",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "65571833-7d6a-4b2d-aab5-cc7d0c208de4"
        },
        "item": {
          "id": "e85cad18-694b-438b-831f-b40fa630eb02",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "c3ffddad-d5a1-446e-a6d4-f7d91340e135",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 505,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed838e36-ff75-44bb-9dd7-67f5e2e74e04",
        "cursor": {
          "ref": "d856db47-a6aa-4bb5-9828-2bc3cd8e502c",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "29d2d859-3656-44fb-a16b-cb28d59d42be"
        },
        "item": {
          "id": "ed838e36-ff75-44bb-9dd7-67f5e2e74e04",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "c9679ba4-b4bf-47d5-9937-6952aa979afc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e71e2cb-c3cc-423b-8e0a-c57bd322d1b8",
        "cursor": {
          "ref": "50a58da0-ca40-4de7-8e80-cafeb16c9206",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "a714101c-09a5-4335-b1a4-3f6c6bf07266"
        },
        "item": {
          "id": "1e71e2cb-c3cc-423b-8e0a-c57bd322d1b8",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "2ceab311-04ba-49fe-8f87-650aaf80acbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2f3277c-1cc3-4474-ac28-75f0bde1ef3b",
        "cursor": {
          "ref": "f95a7a18-593c-4215-a76b-290b151d7656",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "8976e9af-ce63-4518-b353-8683955e7884"
        },
        "item": {
          "id": "a2f3277c-1cc3-4474-ac28-75f0bde1ef3b",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "fe803e9f-b538-4890-b989-13168dd74731",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 317,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2509c4df-1552-413b-a798-04cb0c4bd561",
        "cursor": {
          "ref": "16e380b3-77aa-4883-9590-82b0f953a699",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "181d3dd2-aac9-4cbc-ac79-e84e746cefdd"
        },
        "item": {
          "id": "2509c4df-1552-413b-a798-04cb0c4bd561",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "1cd26933-1e2e-446c-a371-8107a521c46e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 666,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "159d5f15-0d89-4800-b80d-b4e55d97d834",
        "cursor": {
          "ref": "af6dce64-10b4-4c34-87d5-c8bd472e8e99",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "38b6f16d-33d7-4aa4-a9c7-0347d0575a69"
        },
        "item": {
          "id": "159d5f15-0d89-4800-b80d-b4e55d97d834",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "9f2b2c63-40e1-4b0f-af3e-409dcfea2de2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 139,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fd4fb5a-0d45-4b69-b0a0-63315c7aa292",
        "cursor": {
          "ref": "3eeda77a-5007-48bb-a9a5-a647dc6bf9dc",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "9656e227-3c15-4c4c-af82-52619f82e09a"
        },
        "item": {
          "id": "1fd4fb5a-0d45-4b69-b0a0-63315c7aa292",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "0a57d877-86cd-4ab7-8f93-ba15fb7183d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "179c8516-cfa4-4003-8f0e-e44c10f28a75",
        "cursor": {
          "ref": "1d823c54-98e0-4e82-af3f-57c0d0a930e3",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "e3851c15-d896-4238-a5b6-ada9ca349be1"
        },
        "item": {
          "id": "179c8516-cfa4-4003-8f0e-e44c10f28a75",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "3b63b4cc-3357-4011-a46d-8f9f417dc7e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12559765-684b-4d0d-841d-fe2199603f19",
        "cursor": {
          "ref": "8519cba1-cae2-487f-9abe-da1087154414",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "68e35485-e6f3-40bc-9bb0-1e6c9a9f05e0"
        },
        "item": {
          "id": "12559765-684b-4d0d-841d-fe2199603f19",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "5192a26c-c570-4235-91b2-b711f5aedea4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e0f9875-80b3-4283-8a37-dc3d5409948f",
        "cursor": {
          "ref": "4f8ad7f6-2eb2-4917-80c7-73c4fe861a33",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "48b2d9f1-a2b2-4022-91fb-07fb64c68c21"
        },
        "item": {
          "id": "9e0f9875-80b3-4283-8a37-dc3d5409948f",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "016d9257-e836-46cd-b694-59d127342bef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08f1b9a3-2b41-4581-97a6-3e98a5c6e2c2",
        "cursor": {
          "ref": "e27cf93a-6322-403e-b6c9-0ae40ecaf85f",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "d6bc3013-0420-46ce-a194-fe0a5a9e7792"
        },
        "item": {
          "id": "08f1b9a3-2b41-4581-97a6-3e98a5c6e2c2",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "45c64931-951c-4b92-93a8-d5923049aed4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0be68c27-e552-43bc-9204-b985fc47699c",
        "cursor": {
          "ref": "65e6472e-be52-4192-b60f-1e3e01696630",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "531271dc-ce2d-4412-aef5-ef8503265bcf"
        },
        "item": {
          "id": "0be68c27-e552-43bc-9204-b985fc47699c",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "3875f544-e9fe-4986-b7ee-1c0905cc9f67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03f4860e-d747-44c4-a2a5-04a04ef270d6",
        "cursor": {
          "ref": "b3ab7aca-1138-4b18-9c28-b024b9dde3bd",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "1b0f2792-a926-4c5c-bc54-4a2f2a2f48fb"
        },
        "item": {
          "id": "03f4860e-d747-44c4-a2a5-04a04ef270d6",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "f8972b4e-81f9-4af7-99fd-10ec3d389df1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "511a2f8e-85ee-407e-b97a-7e76a9711436",
        "cursor": {
          "ref": "55bb8e25-dfb7-4169-8d98-acba41fbfbae",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "e4d3da27-644a-493b-9845-c5e7f047d70f"
        },
        "item": {
          "id": "511a2f8e-85ee-407e-b97a-7e76a9711436",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "56f70755-10b1-4bf9-9b13-9245b25fc66d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0b0c1b4-1813-4e9c-b12e-0ba7fa593934",
        "cursor": {
          "ref": "9da911fa-8312-404d-a763-b653317feca5",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "609b72b8-f718-4dac-b8bc-5b2acd1d7eb6"
        },
        "item": {
          "id": "c0b0c1b4-1813-4e9c-b12e-0ba7fa593934",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "8767f7de-d0c1-4aa9-b25f-10d1643495a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "545dc740-31cb-45cf-b7bd-f8c83059c578",
        "cursor": {
          "ref": "f2bc2560-c824-45a3-9768-f2e158f4d109",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "6e4b2a38-31d9-48ec-bb21-d811de0918fc"
        },
        "item": {
          "id": "545dc740-31cb-45cf-b7bd-f8c83059c578",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "664d6a9f-1b02-4c22-8a98-81190cc9be50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "628772aa-491e-4f0c-b363-82e95d2ce452",
        "cursor": {
          "ref": "2725c20e-e788-4d7b-9e5c-9bf08b87459e",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "3db986b0-897e-41ec-9b58-6b8b0ffd524d"
        },
        "item": {
          "id": "628772aa-491e-4f0c-b363-82e95d2ce452",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "03cadfd6-237a-4863-83dd-f8a09c1a3829",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a477394e-f47f-4e77-af0f-664c34dbe3d8",
        "cursor": {
          "ref": "6dfbeb8e-4961-430a-99de-02c4d44f323d",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "fafb68e4-d2ef-47e2-9682-06d0cea59aa1"
        },
        "item": {
          "id": "a477394e-f47f-4e77-af0f-664c34dbe3d8",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "5ccd3a7a-2887-4267-a816-33442a43e768",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "726ae04e-7418-40c1-b2ba-1b6b4ae4699e",
        "cursor": {
          "ref": "459f078b-c277-4c69-a0b4-49bb3c99901e",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "ebd4ad01-c494-4adb-aa6d-7015308ca3f2"
        },
        "item": {
          "id": "726ae04e-7418-40c1-b2ba-1b6b4ae4699e",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "51e65496-6d85-47fc-93bb-3fd17c5c85e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e88a50f7-eb8a-4da8-b7f0-21ef2cedc312",
        "cursor": {
          "ref": "4af7cfab-4a2e-4de2-b39a-95413a32bbac",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "53721af7-2749-4e24-b69b-8d8ee4218587"
        },
        "item": {
          "id": "e88a50f7-eb8a-4da8-b7f0-21ef2cedc312",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "5926f33b-c683-40e8-bf20-7fcd429d115b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3f7b17a-0713-4389-b115-8ea296d290ae",
        "cursor": {
          "ref": "d3c7f4a1-81a1-495d-aa92-1c7870095e1c",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "47aafbea-5d61-4867-a6c4-67272b0802e3"
        },
        "item": {
          "id": "b3f7b17a-0713-4389-b115-8ea296d290ae",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "39355646-237e-4137-8c7a-2cd83cf159b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cfd8529-025c-4637-82ee-213a7b04f304",
        "cursor": {
          "ref": "53fffa0d-c3dd-460e-9d21-f760369ccd20",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "be0fca55-48bd-46a8-bc6c-8c9e96facd6e"
        },
        "item": {
          "id": "1cfd8529-025c-4637-82ee-213a7b04f304",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "d0b724a6-6145-4549-917c-78e64fc1464e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c250010-6b7e-48af-9464-6db4bef166af",
        "cursor": {
          "ref": "5a25bdd1-7e9d-4596-981d-acd6ea8d19e4",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "a441a070-c1fa-4ea6-9719-24178f3d7871"
        },
        "item": {
          "id": "6c250010-6b7e-48af-9464-6db4bef166af",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "f4506c0e-557b-463e-901a-be3df82c894d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e45bee53-6ac6-4bd6-81a6-016b5a20610e",
        "cursor": {
          "ref": "2a421fd4-e537-4d5a-8295-6e5cc5dcdd28",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "6bad104b-e40f-433a-a2ec-ed803e58ab9e"
        },
        "item": {
          "id": "e45bee53-6ac6-4bd6-81a6-016b5a20610e",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "aa47b203-6cef-4777-bf02-5764d89a8719",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b84482e-9d03-4b35-baea-70d0d7067045",
        "cursor": {
          "ref": "714c572c-0ebc-4e95-88c7-9724aa1477d9",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "502bf20d-22b9-406f-9d0a-a49a622d7f2f"
        },
        "item": {
          "id": "2b84482e-9d03-4b35-baea-70d0d7067045",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "09323441-9e29-4b6c-ab33-f9156c0fce97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22c63fd3-d523-45a5-bedf-d9538c62b6c4",
        "cursor": {
          "ref": "e474227f-6e58-437f-87e2-3a0358325c96",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "ab3732d6-804e-4958-83b0-324a89a15e37"
        },
        "item": {
          "id": "22c63fd3-d523-45a5-bedf-d9538c62b6c4",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "ddba247f-998d-4319-91cf-dd4b37d68ba9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d98ed134-916a-45de-8eb9-f8fdad6af6f3",
        "cursor": {
          "ref": "fcd9f0c0-a457-438e-bdbf-03fa8a6494d6",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "ff247853-7654-4b42-a733-1a2c0222029b"
        },
        "item": {
          "id": "d98ed134-916a-45de-8eb9-f8fdad6af6f3",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "ff608d42-205f-49a4-b0f6-ea2a7234e98f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3f39135-6e20-4710-a979-5d2e3ba1f798",
        "cursor": {
          "ref": "caac55ca-bb98-41ac-9ec4-0a6dbfafcbbd",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "83ebf676-9f5c-446b-80da-a5bab8ffad3d"
        },
        "item": {
          "id": "c3f39135-6e20-4710-a979-5d2e3ba1f798",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "fc6e67bb-8b43-4b58-84d1-befc4d13765d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b36df67-ba38-447f-8e5e-61bafe7516f6",
        "cursor": {
          "ref": "9b1cd040-8091-4529-a6ec-fb4b065112a6",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "5743ed17-91f4-434c-a712-93604be9a5c8"
        },
        "item": {
          "id": "0b36df67-ba38-447f-8e5e-61bafe7516f6",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "b2ac0bc4-a32e-4e9d-a4e1-feb502b00bcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b38be950-f168-4e23-b040-beb7a961b235",
        "cursor": {
          "ref": "c24baf6d-da4c-4f98-8dc2-2a54b6005705",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "b5609b29-5c36-477d-8e05-ab1f0ecea208"
        },
        "item": {
          "id": "b38be950-f168-4e23-b040-beb7a961b235",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "7d366320-7747-47e0-b3d1-af444d452a81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a3cf2bd-94bc-4024-91b2-097ebc586fde",
        "cursor": {
          "ref": "c4581e74-6716-41f1-8cc1-9c9c3af7c526",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "24adee50-9765-4db1-af4d-370665a5d841"
        },
        "item": {
          "id": "6a3cf2bd-94bc-4024-91b2-097ebc586fde",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "36e714c9-ba30-469a-9c3d-32f3e63301fb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "81e2ec4f-bcc7-42ef-a76b-ddf026c9a0cc",
        "cursor": {
          "ref": "b837df99-4c32-48a8-b293-44169371cfba",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "a0f57cbf-1080-4d82-aa0a-3ba6f33d2557"
        },
        "item": {
          "id": "81e2ec4f-bcc7-42ef-a76b-ddf026c9a0cc",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "31971b34-4703-4c65-8c16-67b92b391939",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "776c3393-21a8-4324-bd00-daf9cb0baaec",
        "cursor": {
          "ref": "4e732a27-884b-4d79-8836-6265ad7b0549",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "7089b682-dc88-4213-885e-1922a712d21c"
        },
        "item": {
          "id": "776c3393-21a8-4324-bd00-daf9cb0baaec",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "5cba0dc3-9570-4345-8d4e-e824ba630560",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "776c3393-21a8-4324-bd00-daf9cb0baaec",
        "cursor": {
          "ref": "4e732a27-884b-4d79-8836-6265ad7b0549",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "7089b682-dc88-4213-885e-1922a712d21c"
        },
        "item": {
          "id": "776c3393-21a8-4324-bd00-daf9cb0baaec",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "5cba0dc3-9570-4345-8d4e-e824ba630560",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59ae9731-44d7-4e0f-a6e0-2955d86a5b4a",
        "cursor": {
          "ref": "f3c630f8-2bf9-4a2b-b874-0e3ffad6d2eb",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "f9977736-6092-48e4-897f-4a228ac27737"
        },
        "item": {
          "id": "59ae9731-44d7-4e0f-a6e0-2955d86a5b4a",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "1e65c288-243e-4078-a47c-5796581562aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbdda456-80dd-4a0b-8a4c-902174a5289b",
        "cursor": {
          "ref": "525ad2f4-8145-4351-bc1d-cecff5d88e3d",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "3cee28e4-7f52-4dc5-943e-3896485a132c"
        },
        "item": {
          "id": "dbdda456-80dd-4a0b-8a4c-902174a5289b",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "7eaacbf2-5e4a-4e54-9ede-819753845108",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cd5b673-2273-4142-abbd-5bf425aa6381",
        "cursor": {
          "ref": "f7f55ffd-22ac-496c-95b0-f7455889c544",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "81af7fe1-9a17-42b9-87b0-a570c4a674af"
        },
        "item": {
          "id": "3cd5b673-2273-4142-abbd-5bf425aa6381",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "7b91ad8e-0d7a-4691-8a10-67f7eccd7e20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6edf020-a7d4-4bb4-ab23-966a31b7cad7",
        "cursor": {
          "ref": "790344c4-22b0-41a3-aa5f-ad69f9cb349c",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "4061e18c-6172-4a91-838b-238d59a28364"
        },
        "item": {
          "id": "f6edf020-a7d4-4bb4-ab23-966a31b7cad7",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "88c3817c-9c39-4d16-92cf-9cb482e92989",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b31718f6-c4ca-415a-b552-78d7bb3e0a26",
        "cursor": {
          "ref": "75e57ce6-170e-4b84-9169-c0eee6932137",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "ddb34cfe-9cc7-4d69-8337-06bedd8e18e5"
        },
        "item": {
          "id": "b31718f6-c4ca-415a-b552-78d7bb3e0a26",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "d6cbd2d8-14c2-4585-86e3-993137d5964c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1873c6c-eea3-4c87-a18c-ce14ef0adda2",
        "cursor": {
          "ref": "161f56b0-fa25-40a4-85de-db683a27f78c",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "6d0f4085-9e40-4086-852d-4d61bb838b79"
        },
        "item": {
          "id": "b1873c6c-eea3-4c87-a18c-ce14ef0adda2",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "3381f5b3-45ff-4346-9db4-3559fc89637f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9a16410-938d-4827-82b4-5610fd157a49",
        "cursor": {
          "ref": "4a469ba1-4df4-4e16-aab1-85d8349cdee0",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "9b877666-a09e-4897-a86e-6f78c2c80116"
        },
        "item": {
          "id": "e9a16410-938d-4827-82b4-5610fd157a49",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "8f9ae2b4-a7c1-4c9e-8295-4afeb322ddc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5001e71-3e12-40ef-8fca-a3225bac1654",
        "cursor": {
          "ref": "21169eaf-bb85-4e34-89dc-73eceb961ca1",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "003f414f-5b32-48cb-b88b-a1872be60951"
        },
        "item": {
          "id": "f5001e71-3e12-40ef-8fca-a3225bac1654",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "ab4005e7-918a-406c-abd7-05d0a4832302",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c005e9dd-06ab-457d-97da-fe5c04a0565e",
        "cursor": {
          "ref": "94986ca3-6dc2-409e-84f1-e0069488a795",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "f479e700-940a-419e-b337-5954184ebd8c"
        },
        "item": {
          "id": "c005e9dd-06ab-457d-97da-fe5c04a0565e",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "7034f9f9-e51e-4ca8-9d69-bba61ec74031",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee28b11e-40ef-48cf-999f-2635cf3f9cce",
        "cursor": {
          "ref": "46bc7725-eac1-4978-a2bd-f93bae7f7d63",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "2c142963-4928-45e3-a1af-919bf35fa99f"
        },
        "item": {
          "id": "ee28b11e-40ef-48cf-999f-2635cf3f9cce",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "f36d704a-1a8d-4317-8009-9c38931b9b85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc261b06-1fdd-45e4-89e0-de2a287e6403",
        "cursor": {
          "ref": "a3b3dafe-7896-41f7-8b6f-c2221f3d09e8",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "82af5ff6-799c-48a3-ade1-e970c519d03d"
        },
        "item": {
          "id": "fc261b06-1fdd-45e4-89e0-de2a287e6403",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "8c715446-ff57-4a14-b077-ccd37ab48d1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3fba6c0-7ca6-49aa-b34d-8ff1a19e5491",
        "cursor": {
          "ref": "b472facb-2965-4668-8737-acb675c77167",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "3d483145-6bcd-402d-926b-912e3f81482e"
        },
        "item": {
          "id": "a3fba6c0-7ca6-49aa-b34d-8ff1a19e5491",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "ed6adb11-17e6-477d-85cf-026c2ec1cc17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c1e46d4-bcc6-4d9c-8df8-2ffe9be0838b",
        "cursor": {
          "ref": "cd6d018e-b8a4-440d-bd7c-531e525026a9",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "9e8a11cf-9bec-456d-b726-a135e42d39bc"
        },
        "item": {
          "id": "2c1e46d4-bcc6-4d9c-8df8-2ffe9be0838b",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "370d8c79-6ca0-44bf-91e0-aa1056330533",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "beba1f47-253f-4cbe-a671-4e2d5362d62f",
        "cursor": {
          "ref": "74f61ec6-1e89-4b32-a731-1d6ab4464ec4",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "ade36cd5-5c3b-43ae-9774-6fbd9c705bb9"
        },
        "item": {
          "id": "beba1f47-253f-4cbe-a671-4e2d5362d62f",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "517513d7-b97b-44fa-940e-cf79c6f69b06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c88453f2-b41f-4fd4-ba06-270c0b78b684",
        "cursor": {
          "ref": "5428d25b-2e6c-49fa-b4aa-c49b02719dde",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "e397db7a-43d1-44cf-9c5c-2718fa0d3552"
        },
        "item": {
          "id": "c88453f2-b41f-4fd4-ba06-270c0b78b684",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "8d7f5db2-1b01-4a5f-80f1-726e98908001",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8815216-2b5e-4090-9811-fef345b87ee6",
        "cursor": {
          "ref": "01bcc17f-35d9-4dac-bdb7-25a5a58baae8",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "40fd6fee-3cc2-43bc-907c-9d92198a525b"
        },
        "item": {
          "id": "e8815216-2b5e-4090-9811-fef345b87ee6",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "e01230c3-b00e-4f3d-aa6e-784f18727bad",
          "status": "OK",
          "code": 200,
          "responseTime": 372,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "b44eef47-47ee-464e-936e-2e275d9e6bb2",
        "cursor": {
          "ref": "bcb29441-a58a-44b4-910e-e28dd9707c71",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "7f44ec2a-9db6-4718-b590-18ba5df96217"
        },
        "item": {
          "id": "b44eef47-47ee-464e-936e-2e275d9e6bb2",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "2f0b2881-0b8d-41c6-b1dd-30ad91b2b778",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d30124e-5685-4880-89ee-08627315a248",
        "cursor": {
          "ref": "f2153e2c-a050-4202-82b6-906c60b9ebae",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "2125757e-efc1-4ee3-bac8-6cca97a7c75f"
        },
        "item": {
          "id": "6d30124e-5685-4880-89ee-08627315a248",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "baa8eea5-792b-47a5-9ac0-cdcf88cbfa82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de9d4d0a-6661-40be-ad34-d0773dfe1273",
        "cursor": {
          "ref": "d2c2e919-66fd-4f02-8f7b-961ecaa8321f",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "b21da709-4783-445f-bffe-ab3d12f247c9"
        },
        "item": {
          "id": "de9d4d0a-6661-40be-ad34-d0773dfe1273",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "b90a92fb-731c-461e-a429-5376991209d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d970cf4-0a10-4139-a7a2-c8f31b50ae42",
        "cursor": {
          "ref": "67306f20-eef8-4512-a05e-47ea2195e977",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "db23f622-9f74-427d-8a82-890ad3f4216f"
        },
        "item": {
          "id": "9d970cf4-0a10-4139-a7a2-c8f31b50ae42",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "7ddcf8c4-8f9b-4547-aabb-debf5bc34491",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78b549fc-65ad-44c6-b2e4-35e23dd1fe7a",
        "cursor": {
          "ref": "b217c9c7-8f5e-4859-a63b-048500ff7406",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "e07dc50f-704d-4715-b87f-679d8d2b7f05"
        },
        "item": {
          "id": "78b549fc-65ad-44c6-b2e4-35e23dd1fe7a",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "0260dd77-05a6-4543-941f-bf9c327acf52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e312b12-16c6-41a6-ada2-ab65e8d0b2d9",
        "cursor": {
          "ref": "8bb28b54-b8fc-449e-9a3e-2ce112011481",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "77f5c343-d687-4c7b-9ce0-d93bba435685"
        },
        "item": {
          "id": "9e312b12-16c6-41a6-ada2-ab65e8d0b2d9",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "aba2954b-0b67-4732-8a0a-414f60a9395b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8c77439-9e32-41ca-b804-e402348b2033",
        "cursor": {
          "ref": "172adc18-82d2-4b3f-8643-22cf1b09e2c6",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "f3b3413e-9f62-4778-9f57-c289b6176bda"
        },
        "item": {
          "id": "a8c77439-9e32-41ca-b804-e402348b2033",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "bb8edae5-cb24-4ce0-bd59-7bb62425840c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13855f49-70e3-448f-8ec0-649b0bcf6327",
        "cursor": {
          "ref": "2114e6a7-3d82-40c7-9171-0c9886e03531",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "23b85765-e350-41b6-b9d8-836a8150f7c5"
        },
        "item": {
          "id": "13855f49-70e3-448f-8ec0-649b0bcf6327",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "8483c76e-b3f8-448f-aa72-817f5fd93f2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f616db92-3b73-4651-8bf0-29e827115fce",
        "cursor": {
          "ref": "80c8b31d-6f32-4801-aa40-f630eb8c29a6",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "da880369-f6a7-457c-a44e-c59be9ecc7c0"
        },
        "item": {
          "id": "f616db92-3b73-4651-8bf0-29e827115fce",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "832d8041-4224-49b3-9b31-85f63bfd33cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80d6f441-f717-49d5-94ae-7186e8ac4f9e",
        "cursor": {
          "ref": "7e8def83-f30d-4b7c-aeb9-3df907819763",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "08af6c8c-de95-4e1b-bc41-45e10456ad43"
        },
        "item": {
          "id": "80d6f441-f717-49d5-94ae-7186e8ac4f9e",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "f714dd96-933a-4b20-8993-e8b1fe9ea8f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95d04fa2-50ed-4554-9d62-ffb24065aa7d",
        "cursor": {
          "ref": "77ba389a-330b-4d15-b193-aa10516f1b39",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "bcf4a936-1bb6-48ef-813c-64731aa47c27"
        },
        "item": {
          "id": "95d04fa2-50ed-4554-9d62-ffb24065aa7d",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "311df9e0-04a1-4679-9b82-6cd68adda03f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0672a20b-4929-48dc-aefa-bfc531b5fd2d",
        "cursor": {
          "ref": "83339af7-4b2c-4e3b-97b8-26a42c27bfdb",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "a752f380-3562-46a2-a8a2-129d4fc79fc7"
        },
        "item": {
          "id": "0672a20b-4929-48dc-aefa-bfc531b5fd2d",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "8628ff90-4876-431e-8718-49edf2a0b847",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "329c77ea-290e-406c-a2b7-a09c6a1887fc",
        "cursor": {
          "ref": "44a5f6a6-6c38-4a73-ae65-b90177f35cce",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "ee30a14d-a164-4a89-bf25-5d979ecdea5a"
        },
        "item": {
          "id": "329c77ea-290e-406c-a2b7-a09c6a1887fc",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "7e081e8c-4dc5-40e6-a750-39d8e581d699",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "558bd0e1-4b97-4c80-9244-e4e22fa358e9",
        "cursor": {
          "ref": "661a7c8c-3637-48f2-aa64-2f71ee56da86",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "3fa4cb99-5e3a-4897-9ca9-0946efb18896"
        },
        "item": {
          "id": "558bd0e1-4b97-4c80-9244-e4e22fa358e9",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "efeb5e2e-abd8-47a5-ac94-aee7dcc69cd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b938489d-eae6-4e3a-a8fd-26236c91ad01",
        "cursor": {
          "ref": "f260f5e0-a8ad-4603-b6c0-c38b3bf2c407",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "765d4e27-e302-4bc8-8ad6-54ca5cec4f89"
        },
        "item": {
          "id": "b938489d-eae6-4e3a-a8fd-26236c91ad01",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "77d99285-c98f-4e1a-9302-1f3f5c9eabf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc312b96-6fde-4ee0-a596-9d7de2401f83",
        "cursor": {
          "ref": "1dc36dab-92d6-4071-be78-cfcff7b89407",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "2d684c0b-c40e-4705-b847-6169c3da558f"
        },
        "item": {
          "id": "dc312b96-6fde-4ee0-a596-9d7de2401f83",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "75b57666-6a5b-407a-b381-4f19c21e15fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c04a3316-8713-44bd-8572-c0fdddbfc916",
        "cursor": {
          "ref": "a56281a5-0f04-4094-b478-49dee169d65a",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "f3dd77b8-2823-4700-948e-9526c09e8db6"
        },
        "item": {
          "id": "c04a3316-8713-44bd-8572-c0fdddbfc916",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "47e0c47d-e958-48bd-b008-419ee7b1ca7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc8699a2-6b0b-4f73-8aaa-0bd70a203235",
        "cursor": {
          "ref": "36088c57-3663-4450-ac13-0acca6238f5d",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "340e4bb5-098b-4b88-b701-1a64f275efb5"
        },
        "item": {
          "id": "fc8699a2-6b0b-4f73-8aaa-0bd70a203235",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "39d1affa-84ea-49be-b047-4efbd98f53a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5bc2646-ecd4-4aa7-ad7e-67e3be285e12",
        "cursor": {
          "ref": "a6a7df07-1dc4-4867-ab6a-8a4d76cc06b8",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "83dc22c7-6fc2-4db8-a4a9-f211e2271b50"
        },
        "item": {
          "id": "f5bc2646-ecd4-4aa7-ad7e-67e3be285e12",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "5cbc1962-402c-4794-8417-91855a362b39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "beeec763-fbce-40e6-afc7-2d32aaf23639",
        "cursor": {
          "ref": "8aea1398-d988-4b1d-bc10-ab5d22263208",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "fc9fd03b-fcd0-4993-ba7d-1c47252bf57c"
        },
        "item": {
          "id": "beeec763-fbce-40e6-afc7-2d32aaf23639",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "89060634-3069-408e-88eb-45136020ded3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d540ca73-b4c4-444f-be04-a3f3a5ffe4fd",
        "cursor": {
          "ref": "c25e8ce1-ceb7-4fd4-a4ed-27e09ae8795b",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "19cf3b5c-6b9b-410f-afc4-759bcabb88bf"
        },
        "item": {
          "id": "d540ca73-b4c4-444f-be04-a3f3a5ffe4fd",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "8ed9b908-35c2-4e19-8bbc-3b5dad3889a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33f64a33-e9ff-48c4-b537-2c2060bc0bef",
        "cursor": {
          "ref": "9b58b6a9-651d-460a-82be-7bb141d6f621",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "2c981695-30f2-406a-af0c-ae576c1ec883"
        },
        "item": {
          "id": "33f64a33-e9ff-48c4-b537-2c2060bc0bef",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "0832ca1a-541a-4d02-93d8-c5bf27f03182",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "375943c2-e91d-4fdd-a0c5-1a56b8cf84c2",
        "cursor": {
          "ref": "022417ce-f048-46d4-b22b-501b57d7de04",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "10f7b170-8dcf-4586-90c7-6d3859c918a4"
        },
        "item": {
          "id": "375943c2-e91d-4fdd-a0c5-1a56b8cf84c2",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "4dd1ac18-33f7-4813-ad2e-9c20b326c4f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d8a0846-23d4-4600-a97d-3330842d94bf",
        "cursor": {
          "ref": "7a8718d9-30eb-4901-a77f-e5d4d069675d",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "38cacb4e-fd85-45f5-9c30-d37e139b9f4c"
        },
        "item": {
          "id": "2d8a0846-23d4-4600-a97d-3330842d94bf",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "ee19bb07-dd4c-4312-8f7f-1c86690ca773",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bfb25c9-60f2-43aa-9a41-1ef887636597",
        "cursor": {
          "ref": "667bb984-3354-43b6-9171-a68dbec871ae",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "6fb371be-27af-45d1-9f0b-174343f47f37"
        },
        "item": {
          "id": "3bfb25c9-60f2-43aa-9a41-1ef887636597",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "dbe9b001-3237-4de2-a2d3-6cdcb7c77d0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0def61dd-8239-4637-aa24-f5404532acf6",
        "cursor": {
          "ref": "7d16b403-fd25-4be9-95ea-14d9c6be6cb6",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "a7bb15b7-5995-4240-958a-c5c98976dcff"
        },
        "item": {
          "id": "0def61dd-8239-4637-aa24-f5404532acf6",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "4f7b53a0-ff3b-469b-b1f1-714adbd71832",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8532b0d0-04ce-4e50-8bb8-102e0026f3f6",
        "cursor": {
          "ref": "af23b179-ccc5-4808-bb98-54e540a76a03",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "c88adcd3-0c09-41df-9706-3878ba12b742"
        },
        "item": {
          "id": "8532b0d0-04ce-4e50-8bb8-102e0026f3f6",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "26abc98e-4c60-41a8-92fb-c7a9d66dd8a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fda388bb-83e7-4014-9f8f-249e657be897",
        "cursor": {
          "ref": "896d89b3-7ebf-4414-9145-f213d51207dc",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "ec552f70-4b8a-4603-b977-6b90d385c1ca"
        },
        "item": {
          "id": "fda388bb-83e7-4014-9f8f-249e657be897",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "58fb7516-7cae-471e-9ae1-4ed5336d6f6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5be4fc8-e386-4994-add4-c087b726cb7e",
        "cursor": {
          "ref": "92194290-04e7-487d-82d6-53902c9427de",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "563333aa-ebd6-4bca-9548-013e494bea89"
        },
        "item": {
          "id": "f5be4fc8-e386-4994-add4-c087b726cb7e",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "272b0f11-fc3e-41c2-bfc6-93e116c67598",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68f6ea48-02f5-4059-9977-9779011d634d",
        "cursor": {
          "ref": "d06cca15-39b5-487d-a66a-3e2c755be932",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "70f5abfe-ab9b-450c-adf4-c753aa243d2b"
        },
        "item": {
          "id": "68f6ea48-02f5-4059-9977-9779011d634d",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "dccedaa3-07d2-4579-84b0-40ae98434870",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3196c611-be2a-4f91-bfa2-5ad4d4f5602a",
        "cursor": {
          "ref": "f36111ba-0f53-4252-9705-77503a34f9d2",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "8c96a5fc-d71c-4fd2-a980-b3d19606c507"
        },
        "item": {
          "id": "3196c611-be2a-4f91-bfa2-5ad4d4f5602a",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "390737d5-b8df-4542-bb71-fe584dfab345",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01282ca3-7641-4eb9-a5da-377dbbc60230",
        "cursor": {
          "ref": "35c0a828-1d4d-4544-b90b-56932b436e0b",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "fd08abd8-f9d4-4742-a391-af28b45b2055"
        },
        "item": {
          "id": "01282ca3-7641-4eb9-a5da-377dbbc60230",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "580dbc0e-a907-41d8-b62c-ff7df47159d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d7bfda4-34fc-404e-b3d6-a39a0e07749d",
        "cursor": {
          "ref": "acb3a7e9-4738-42e3-b790-341445d18b4d",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "11e89b0d-5bae-4acc-9790-42489d46499e"
        },
        "item": {
          "id": "1d7bfda4-34fc-404e-b3d6-a39a0e07749d",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "4dee5c7a-3027-4ce2-b18e-370d3407e594",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbf5735e-fd0f-4f8c-995f-1cad88051a20",
        "cursor": {
          "ref": "ef018247-bbbf-4db0-a16a-6c6ec0e23d6d",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "a5dd6c0e-d1e5-4103-909e-821c6c95263c"
        },
        "item": {
          "id": "dbf5735e-fd0f-4f8c-995f-1cad88051a20",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "44df06f0-d2e6-4aa8-8132-7ec502cdede3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "417042ff-ac0b-448b-a58e-ed0caf52ee25",
        "cursor": {
          "ref": "6ae5e630-fabf-4b8b-9819-064487ff1a2f",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "1b86061d-393a-4cfe-bb37-f637519c8c09"
        },
        "item": {
          "id": "417042ff-ac0b-448b-a58e-ed0caf52ee25",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "827edbb9-2feb-421b-ba9c-69dfde478870",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2279d6db-a157-4754-8150-8be09aaae47b",
        "cursor": {
          "ref": "2b97287f-47a0-4f32-a6fa-acb4ea881a03",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "a9f5f702-4bc0-40ab-a8be-3f83cac8a2d4"
        },
        "item": {
          "id": "2279d6db-a157-4754-8150-8be09aaae47b",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "7b61fbfc-2132-4b6a-b1c6-718be73d937e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e572e560-a8c3-490f-9a5d-23f0e7bfe913",
        "cursor": {
          "ref": "26cbdebf-1cfe-4b78-8d6e-e909254312cb",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "66512ed1-565f-4722-a784-23e25f4f2d80"
        },
        "item": {
          "id": "e572e560-a8c3-490f-9a5d-23f0e7bfe913",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "dc5f94d6-8dd0-4543-98fc-27060695f589",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3723d52-80ee-4115-a6f2-e36b118f34d1",
        "cursor": {
          "ref": "cf741ed2-fcd4-4caf-ac42-4b609b1e2fbb",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "9baef791-3dc8-485d-b393-abe22dd716d0"
        },
        "item": {
          "id": "f3723d52-80ee-4115-a6f2-e36b118f34d1",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "877d2ec6-1e30-466c-b168-ee1981a8a726",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5c93f7d-02db-4ad8-a18a-f3bf22db36e3",
        "cursor": {
          "ref": "9b1ea15f-bd29-4f75-aab6-3b13212572a7",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "6b3c1d9a-046c-430b-96a4-f16c244b0d17"
        },
        "item": {
          "id": "d5c93f7d-02db-4ad8-a18a-f3bf22db36e3",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "e1224091-62fa-4c57-895f-35c46b856cc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 122,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b075ee34-9751-4e3d-859a-f39ba30cb095",
        "cursor": {
          "ref": "a7682f3d-05a7-4698-9732-95401284339a",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "898dea07-d150-4fde-abf3-8c7ab6515ba4"
        },
        "item": {
          "id": "b075ee34-9751-4e3d-859a-f39ba30cb095",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "1598e6e3-5c02-4bae-b867-bf5ea77d6fad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30a875af-a928-46ed-94e4-466830ffa66d",
        "cursor": {
          "ref": "a48a80df-cf5e-4d82-9ae1-8dae55163ed7",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "c841e5a5-00ac-4d93-a25a-36eafc1d7dc3"
        },
        "item": {
          "id": "30a875af-a928-46ed-94e4-466830ffa66d",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "e12cdbe8-9a23-4186-aa44-a2aa28113624",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c5dcfc7-8d33-4641-8268-f7b3174db3dd",
        "cursor": {
          "ref": "31fadfef-c7dd-40d3-bf29-70da5fff1d5d",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "9e7fc11a-9e8e-495f-b892-51452392a2db"
        },
        "item": {
          "id": "1c5dcfc7-8d33-4641-8268-f7b3174db3dd",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "ca21cce3-7d4f-476c-89e7-6a1e1f39eaf2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 131,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa2c8774-175a-469d-96ba-37427e181669",
        "cursor": {
          "ref": "3f9c6d23-45f0-4625-a43a-ff4542417d6d",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "5d469529-bf13-4eb9-9b68-5c08c90a6ae0"
        },
        "item": {
          "id": "fa2c8774-175a-469d-96ba-37427e181669",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "59b04182-3cc9-4371-955e-cf23820a916c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 161,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4729482a-9e61-423f-8138-265c669580b3",
        "cursor": {
          "ref": "2874a7b5-ae65-4a68-9c06-caefeb1ed9e3",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "0a98ab48-8050-4395-973d-e8dda43c0546"
        },
        "item": {
          "id": "4729482a-9e61-423f-8138-265c669580b3",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "9ad6432d-e113-47ee-861b-bfca75a28f61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc7ed5e6-b55c-4ab2-b27f-918639393137",
        "cursor": {
          "ref": "1ecf925d-dbb9-4540-9f66-c158b3a20437",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "ec9a8362-6b94-4428-95e5-14f30c98b8f8"
        },
        "item": {
          "id": "bc7ed5e6-b55c-4ab2-b27f-918639393137",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "4f7f4f6d-a0eb-46c1-b7bf-2b08effcb7ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 161,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e918c04-161b-4afa-87aa-22d91772fb96",
        "cursor": {
          "ref": "4aa54984-d637-4a12-8590-6ec2a157c1fa",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "989424cd-e2dc-4d29-b480-085d6f0dcc7d"
        },
        "item": {
          "id": "8e918c04-161b-4afa-87aa-22d91772fb96",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "e1981e0e-7ee3-4742-88e5-32b366eb06c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "932196f3-0aad-4981-8e42-15198d528c64",
        "cursor": {
          "ref": "5f0b8a6e-a803-4ef5-a575-6240d4babb5a",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "bf72cb0f-ece8-41ba-9eb0-403ebdcd13fb"
        },
        "item": {
          "id": "932196f3-0aad-4981-8e42-15198d528c64",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "16dde4d2-be71-4e93-a915-ddff7bc1b39d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bac710a1-baae-4ba5-9541-bfda51cc12c0",
        "cursor": {
          "ref": "5a54c8bb-0ad1-4d07-8047-1be1860147a9",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "939c8580-8b90-4d42-b7da-740a25d69554"
        },
        "item": {
          "id": "bac710a1-baae-4ba5-9541-bfda51cc12c0",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "95a1c2b2-e0e3-48df-904b-5c5a74f117b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ac08baa-d819-43a7-8cf0-bafc9e33bd2d",
        "cursor": {
          "ref": "0233237a-6d63-4aa5-abc2-75b5193f6ed4",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "fabb9b1c-fc47-4fe9-a6bc-3f1357a4a071"
        },
        "item": {
          "id": "6ac08baa-d819-43a7-8cf0-bafc9e33bd2d",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "5634eed3-1773-4abc-a5bc-d8b5b554a2fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d062645-9706-4976-b51a-1d80ef776ea6",
        "cursor": {
          "ref": "5b9f96ab-6095-40bb-9b6a-bc16db0f0999",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "867ba171-215c-4508-8346-4b7c6eba3746"
        },
        "item": {
          "id": "5d062645-9706-4976-b51a-1d80ef776ea6",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "3742c389-6777-4965-99f1-0457660828cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c129ea0-1b7b-4084-8015-feef93577640",
        "cursor": {
          "ref": "208cf168-79c8-4162-9417-86320e7ff89b",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "d9f98d24-f965-43d0-a114-1b9bad60ae73"
        },
        "item": {
          "id": "6c129ea0-1b7b-4084-8015-feef93577640",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "b1ed8e1d-e974-4228-a97a-f0ead9ecf248",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97662d79-cea2-46ed-ba7b-ac83df5011db",
        "cursor": {
          "ref": "f202ee01-a796-4917-80d7-8243bb2a63db",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "a60dc6c5-e98d-4186-97ef-87afe85f4db6"
        },
        "item": {
          "id": "97662d79-cea2-46ed-ba7b-ac83df5011db",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "b4a3f3f2-11af-4b4c-ad79-95dac4dd0b66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b1ff9d1-acb3-4d63-80ed-e0d648d620a1",
        "cursor": {
          "ref": "bc60e601-1e5c-4225-b4db-2cd5fb104ab0",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "140f667b-436e-4089-86b6-338e28a7093b"
        },
        "item": {
          "id": "2b1ff9d1-acb3-4d63-80ed-e0d648d620a1",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "0a34e908-2d1f-4759-9287-43de85939098",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "047d683f-b88c-4870-8e5f-cec564138b3e",
        "cursor": {
          "ref": "4e2ec638-b636-4ccb-bb4c-031b3857f356",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "ff5f2c93-8afd-490e-889e-2fe7c8291ddc"
        },
        "item": {
          "id": "047d683f-b88c-4870-8e5f-cec564138b3e",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "4cb5784c-9c54-49b9-9b35-46f47cd14939",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "775c59b1-be83-41be-9f02-6319f2b36975",
        "cursor": {
          "ref": "7111e483-e8b3-4a6d-a899-642c9562eb63",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "4d9831ba-0114-4b2a-ace8-19f4f6098058"
        },
        "item": {
          "id": "775c59b1-be83-41be-9f02-6319f2b36975",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "ef825f3d-cb6b-44b6-8a16-ee3e6db2573b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3246ef37-11ab-4e8a-95c1-913a3b70fd9f",
        "cursor": {
          "ref": "7d558941-bfcf-4699-b74e-3b5e438f4238",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "68dfeb71-dc4d-42c5-896a-15e7f4379a67"
        },
        "item": {
          "id": "3246ef37-11ab-4e8a-95c1-913a3b70fd9f",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "296d9155-9a27-49de-b7ef-70daf390373c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "042a555e-2e8e-4137-8767-dc493bb16d56",
        "cursor": {
          "ref": "6f676184-5bd2-47a7-8f8c-47c4285544b5",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "2d46d87c-0552-4108-bda3-5a49f6e33a68"
        },
        "item": {
          "id": "042a555e-2e8e-4137-8767-dc493bb16d56",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "7e0284d5-c023-46b1-9e52-542425a3968e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f98a57a7-3276-4d0e-9160-40c7c97abbd0",
        "cursor": {
          "ref": "ceb4c3a7-3654-451c-8b3d-fb111128965a",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "9e637e41-b783-4755-b04d-752248d46764"
        },
        "item": {
          "id": "f98a57a7-3276-4d0e-9160-40c7c97abbd0",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "a6d074cb-349b-4f09-a44f-493f57f03f76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a09b257-9b2b-4468-bf4d-7f5e912dbdac",
        "cursor": {
          "ref": "b14ff156-dacd-4a8d-a09d-86eea57cc5ca",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "27bfc9ba-ee08-4f5a-8025-3f8cab90d21f"
        },
        "item": {
          "id": "2a09b257-9b2b-4468-bf4d-7f5e912dbdac",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "b331e083-0acd-4785-a6da-1d8eabe1aaf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a2f0a97-7460-4202-8c99-2cfef5091395",
        "cursor": {
          "ref": "5f056f22-5520-484a-8150-03b8851d0220",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "90b9337a-9369-42e2-b370-d8e3741fa573"
        },
        "item": {
          "id": "9a2f0a97-7460-4202-8c99-2cfef5091395",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "f37361ad-1bd8-474a-aff2-8e1764941301",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58691ec8-72f8-47de-8a74-af2b42f70f80",
        "cursor": {
          "ref": "f32bf51f-0ddd-406b-9fa1-22c04c45b730",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "8c3e4176-867d-4266-b133-cdedd45b73b6"
        },
        "item": {
          "id": "58691ec8-72f8-47de-8a74-af2b42f70f80",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "d566ee3d-deea-4f93-9c4e-423829baa972",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fad248ab-6aa9-4e77-88ac-ef2b113137e9",
        "cursor": {
          "ref": "4f3a1623-5dc0-4cdb-a21b-76c9f0cac012",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "3a63c6e4-01a6-4c0e-8474-5d9fcf4fcb3d"
        },
        "item": {
          "id": "fad248ab-6aa9-4e77-88ac-ef2b113137e9",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "0ad50329-2c8f-489b-a081-aa8afd22058b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e5f6165-e44a-47e1-bfcf-789ef4ca10da",
        "cursor": {
          "ref": "c8e6d1c1-e915-4330-9b3d-4e26f011d76c",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "16edb2c9-d9bd-4904-bae3-109b96bee59f"
        },
        "item": {
          "id": "2e5f6165-e44a-47e1-bfcf-789ef4ca10da",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "bbd86777-4bb6-407f-b615-69c1790e4283",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef8ddcba-1f12-42fa-9fa6-52e94abe61a5",
        "cursor": {
          "ref": "dce0a7b2-a105-45d1-91e6-ca9c2e12ceab",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "a11a545b-0607-4729-b16e-5fa7378d23ff"
        },
        "item": {
          "id": "ef8ddcba-1f12-42fa-9fa6-52e94abe61a5",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "106c90d1-a9f8-4a7e-ab8e-79842237b29c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79aa8cf8-686b-4fc4-890e-7999014d39b2",
        "cursor": {
          "ref": "4df5f74d-681b-481d-b8ce-f2f8c2e3c805",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "9c3cc23b-1fe4-4837-9287-1b2d53c88cc6"
        },
        "item": {
          "id": "79aa8cf8-686b-4fc4-890e-7999014d39b2",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "53296bf8-e82d-4483-94d5-54537df69c27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb391d81-84b6-42f6-982d-e52d48c1bcbe",
        "cursor": {
          "ref": "791fa39e-9b11-441a-9855-4eb985dbfe7b",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "3da7db63-1dd7-4ca8-a001-e2ccdf55f364"
        },
        "item": {
          "id": "fb391d81-84b6-42f6-982d-e52d48c1bcbe",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "af00e43e-6aef-4f13-9917-e8a9d410f845",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2316350-cafb-42c2-a325-55cdee958d81",
        "cursor": {
          "ref": "f9e906fe-b455-4682-8ab9-5f10cee70548",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "c38b8677-11a7-4691-8b34-babaddd400ea"
        },
        "item": {
          "id": "b2316350-cafb-42c2-a325-55cdee958d81",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "eb560dbf-97df-41da-828b-6390e7b1c18e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af5f80e1-6a1e-4bac-821d-8e89a99b5194",
        "cursor": {
          "ref": "a142cbe1-a10f-4762-a82e-6ec10905f19e",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "08873163-750c-4dc2-92a7-401a61f1f65f"
        },
        "item": {
          "id": "af5f80e1-6a1e-4bac-821d-8e89a99b5194",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "2cca26c9-4206-4dd2-b930-38a522c061ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6258a9b3-8f4b-4136-8317-7a41f12aecb3",
        "cursor": {
          "ref": "99591773-75ec-4b5d-aa04-c54476fc5e5b",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "1bc49153-15b5-4963-b256-f396402ad37e"
        },
        "item": {
          "id": "6258a9b3-8f4b-4136-8317-7a41f12aecb3",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "3ce756d1-02a5-4c52-95a2-bc6074e3d6e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11b7d9e3-9c48-4e3a-ab97-06d03a1d7019",
        "cursor": {
          "ref": "3f002876-d823-4897-bba1-ed7d282f293e",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "0b6a8d57-923a-4545-b719-3d88ecb31dc6"
        },
        "item": {
          "id": "11b7d9e3-9c48-4e3a-ab97-06d03a1d7019",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "af3a6647-3c6a-4ff1-a584-e767a66849e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "249a0998-3f01-4436-95a3-0aa5466859a8",
        "cursor": {
          "ref": "f82b4630-f423-46e6-8385-c3cb4eaef1e7",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "4462b909-2125-4c7d-9a2a-5d5a6e34a978"
        },
        "item": {
          "id": "249a0998-3f01-4436-95a3-0aa5466859a8",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "06691629-27e9-42da-b636-ab15a74c3d00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b1b2265-f55b-4bcc-9bd0-b0693dcffd3a",
        "cursor": {
          "ref": "2a78a4f4-6b8c-4b6f-bbbc-43262d87e9ba",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "46d1078e-eb21-4f38-80f5-54ca6a0afa2d"
        },
        "item": {
          "id": "7b1b2265-f55b-4bcc-9bd0-b0693dcffd3a",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "d05f9c70-158a-45bc-a20b-d13a54831fd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fce45be-3fd1-468f-9912-2305c8259652",
        "cursor": {
          "ref": "f7caeee0-8b2a-4524-9080-6d71cadd3593",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "d4843e74-91c1-47b3-9d30-818577abffda"
        },
        "item": {
          "id": "4fce45be-3fd1-468f-9912-2305c8259652",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "dbe7407f-edab-4e0e-8eae-a701a9f78de9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70c4e1fc-5999-499d-91f5-6810634068ff",
        "cursor": {
          "ref": "f27d2a3d-a9eb-40a7-ad92-edd7ec146ff6",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "9e7886e6-b344-44c0-a453-e04d1e114048"
        },
        "item": {
          "id": "70c4e1fc-5999-499d-91f5-6810634068ff",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "445cfb82-6135-4f21-afee-3ddf5d2b08f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0b36307-e81b-4af0-a39c-4407d45b3da9",
        "cursor": {
          "ref": "a821f61e-53f4-4d0e-bb73-791869cd8ad2",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "558d0918-920f-4a5f-ac3e-1a3ab06340f9"
        },
        "item": {
          "id": "d0b36307-e81b-4af0-a39c-4407d45b3da9",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "060c8f10-6910-42c9-8e33-acb064beb77a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0df3235-8688-4dfc-afe2-c605fe07507c",
        "cursor": {
          "ref": "b624fa4d-d281-4fcc-8829-5f27596b8d4c",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "d2efac5a-938e-45c3-b092-732eba54c9cc"
        },
        "item": {
          "id": "f0df3235-8688-4dfc-afe2-c605fe07507c",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "799835b0-e51c-4216-a87e-9d94f5310e33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31990685-2e69-4388-a6bd-d966c29724b3",
        "cursor": {
          "ref": "fc1c63d8-7f99-4852-b0c5-7fd544635f23",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "36b45906-ba10-4b18-b692-a1b7d8b4b358"
        },
        "item": {
          "id": "31990685-2e69-4388-a6bd-d966c29724b3",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "3bb62c68-3864-4d27-88d8-6fa74960e032",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba7b0123-7514-4c48-aad8-10395b961c86",
        "cursor": {
          "ref": "5d732af5-f234-48bc-8f2d-b1c2fcfc1916",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "b29b5f78-b670-42d7-9f64-542a0269dc19"
        },
        "item": {
          "id": "ba7b0123-7514-4c48-aad8-10395b961c86",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "c6b43b3d-6a2e-44f6-9d8d-8629ac3826d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8db0f004-ddb6-4393-ae81-7677fc6618ed",
        "cursor": {
          "ref": "21a5eed8-38b0-409b-aea9-8a50641ecca0",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "762b5757-ef76-4e1e-af13-94377976974a"
        },
        "item": {
          "id": "8db0f004-ddb6-4393-ae81-7677fc6618ed",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "d7bd2859-956e-43d9-9c49-10fab3297186",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69eae26a-3ce3-48b7-bd13-c6900d4baea9",
        "cursor": {
          "ref": "8c28ea73-d4f9-45f6-9a48-58711d47be8b",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "e7c648ee-e5c9-4166-9c98-e3a67fd0063f"
        },
        "item": {
          "id": "69eae26a-3ce3-48b7-bd13-c6900d4baea9",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "50314ac3-11bf-49f5-a106-b0f80cc8f2d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49107d1b-3363-422b-a55a-5eb5fb400a9e",
        "cursor": {
          "ref": "c57f8d22-2d48-474b-be69-822b1450d5fa",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "f0f33cfb-c542-4f0d-b007-72d955baeed3"
        },
        "item": {
          "id": "49107d1b-3363-422b-a55a-5eb5fb400a9e",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "70bba9a0-5d4f-4192-b01f-c82d20ed813f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "ae9f54f2-3d68-45ff-af80-da392c93c311",
        "cursor": {
          "ref": "8a56204b-ee1f-4ba6-bfd1-3142fcab5d5b",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "78aa21f3-67d8-4dff-becb-ba5207b787a2"
        },
        "item": {
          "id": "ae9f54f2-3d68-45ff-af80-da392c93c311",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "8369c62b-f93e-4ec1-b37f-fc2420b70c32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "1c231d9d-08f1-443c-92eb-0e3b6447d0b2",
        "cursor": {
          "ref": "759111f7-8aaf-4c2a-9d31-0c93b35b2b9b",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "de41e7df-fb1c-4892-8239-485105ffb747"
        },
        "item": {
          "id": "1c231d9d-08f1-443c-92eb-0e3b6447d0b2",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "71954042-29c4-4175-a3ac-418b7fb92295",
          "status": "OK",
          "code": 200,
          "responseTime": 3951,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "5afddb87-83f4-467c-be18-b25ff49ff7aa",
        "cursor": {
          "ref": "02ea96d8-dcca-45b9-bd3f-18397492135a",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "d3d82c9d-fbe9-438d-a86c-42b23d7032d1"
        },
        "item": {
          "id": "5afddb87-83f4-467c-be18-b25ff49ff7aa",
          "name": "credentials_verify"
        },
        "response": {
          "id": "387d2053-93ba-408b-bd9f-0b91cb6c4c78",
          "status": "OK",
          "code": 200,
          "responseTime": 2377,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3352753-16d7-484a-9c17-8ca783b1b2f9",
        "cursor": {
          "ref": "48e0480a-05b7-48c5-b8df-ddfff0f3893f",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "3a971bf8-d020-48a8-935f-03af02a8bf0c"
        },
        "item": {
          "id": "c3352753-16d7-484a-9c17-8ca783b1b2f9",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "88dca738-78a9-4d7e-92dd-963e2105b1a5",
          "status": "OK",
          "code": 200,
          "responseTime": 2326,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "40aa77bb-ae72-4e49-b84d-78b54571d85b",
        "cursor": {
          "ref": "b140fe37-73a9-4e43-859f-ca814319b93e",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "7bd21ad6-4de0-4f7e-a232-b6fc4692b1cd"
        },
        "item": {
          "id": "40aa77bb-ae72-4e49-b84d-78b54571d85b",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "e5d18c05-066e-4a05-9448-a7d7ab79a5a1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "40aa77bb-ae72-4e49-b84d-78b54571d85b",
        "cursor": {
          "ref": "b140fe37-73a9-4e43-859f-ca814319b93e",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "7bd21ad6-4de0-4f7e-a232-b6fc4692b1cd"
        },
        "item": {
          "id": "40aa77bb-ae72-4e49-b84d-78b54571d85b",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "e5d18c05-066e-4a05-9448-a7d7ab79a5a1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "40aa77bb-ae72-4e49-b84d-78b54571d85b",
        "cursor": {
          "ref": "b140fe37-73a9-4e43-859f-ca814319b93e",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "7bd21ad6-4de0-4f7e-a232-b6fc4692b1cd"
        },
        "item": {
          "id": "40aa77bb-ae72-4e49-b84d-78b54571d85b",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "e5d18c05-066e-4a05-9448-a7d7ab79a5a1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "8fe687e9-debf-4de5-8f95-a2a52eae1dee",
        "cursor": {
          "ref": "aecb6901-738e-4f51-a91d-d728f4536e37",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "26033716-655a-4f6d-ab9c-5eb655a26fb4"
        },
        "item": {
          "id": "8fe687e9-debf-4de5-8f95-a2a52eae1dee",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "16cd7939-9487-4a69-b7f7-7e07844100fc",
          "status": "OK",
          "code": 200,
          "responseTime": 4735,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "7e30eb36-fee4-47f7-a27f-969b97f71383",
        "cursor": {
          "ref": "e49992ed-55c5-4fa8-ba02-2f2c34b76899",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "811c6c8c-b95a-4d86-afea-0fb1a257fbac"
        },
        "item": {
          "id": "7e30eb36-fee4-47f7-a27f-969b97f71383",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "2c3d8c62-eaf8-46cc-b125-b464a84566b3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "7e30eb36-fee4-47f7-a27f-969b97f71383",
        "cursor": {
          "ref": "e49992ed-55c5-4fa8-ba02-2f2c34b76899",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "811c6c8c-b95a-4d86-afea-0fb1a257fbac"
        },
        "item": {
          "id": "7e30eb36-fee4-47f7-a27f-969b97f71383",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "2c3d8c62-eaf8-46cc-b125-b464a84566b3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "9ab94aba-3d45-435b-bafa-d2f75b9142cc",
        "cursor": {
          "ref": "0c8a7128-9912-488b-97c2-29419e74a974",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "68756281-66a7-41cd-b5f9-396028cfc7e7"
        },
        "item": {
          "id": "9ab94aba-3d45-435b-bafa-d2f75b9142cc",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "25e0376a-7142-470d-a519-3b50b9f211da",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 321,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "a39ea7dd-d67b-49d0-acd5-02f4a6ca56eb",
        "cursor": {
          "ref": "9408aa15-716a-432d-a6a9-828f862bc505",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "3e1c37ca-6ce4-4279-a8be-0c4df4502687"
        },
        "item": {
          "id": "a39ea7dd-d67b-49d0-acd5-02f4a6ca56eb",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "f4236f66-f6da-4229-bff5-42701f7a8a63",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "a39ea7dd-d67b-49d0-acd5-02f4a6ca56eb",
        "cursor": {
          "ref": "9408aa15-716a-432d-a6a9-828f862bc505",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "3e1c37ca-6ce4-4279-a8be-0c4df4502687"
        },
        "item": {
          "id": "a39ea7dd-d67b-49d0-acd5-02f4a6ca56eb",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "f4236f66-f6da-4229-bff5-42701f7a8a63",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "03c723df-7f65-4293-be12-665b0ca6b6e0",
        "cursor": {
          "ref": "001a85f1-e1e1-405b-bd14-b5aa068a1bc8",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "dddb3c01-5dde-4811-b5dd-a856fa1d72b1"
        },
        "item": {
          "id": "03c723df-7f65-4293-be12-665b0ca6b6e0",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "a25cb716-f478-45b2-9965-1113d78ece23",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 83,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      }
    ]
  }
}