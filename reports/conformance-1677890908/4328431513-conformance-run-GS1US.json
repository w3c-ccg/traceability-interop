{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "b6f573e6-3a81-410b-89be-521cf712b095",
        "name": "Clear Cache",
        "item": [
          {
            "id": "6cffad81-0c13-481f-8823-28fd14e34852",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9166fa6f-9d31-4586-ba50-603cc05d1da9",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "ac43e775-ed0c-4a65-ab93-688b9585c047"
                }
              }
            ]
          },
          {
            "id": "a7d5f53a-a993-4bfa-a806-a8a07c42fb01",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "62ada687-f2d8-4b19-8cd9-75e76f901059",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "03b097cb-390c-4496-9975-70951ff8903f"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "0e3947ea-987d-4a02-b657-a1f10303334d",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "51ba07b2-71fe-4d26-a286-c6b88e672b40",
            "name": "Positive Testing",
            "item": [
              {
                "id": "51fb3230-aeb9-4909-a224-7f8e417d5ed2",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c6d59796-cf2d-48b9-bd22-5900a1d2a8a1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3877ef1f-8796-4450-961c-fd4e3be6dd4a"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "39daa196-9484-4dbd-8ccd-5447ae0889d9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "170418c9-49e2-4bf9-a153-333fcd89bdc3"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c9012679-63e8-4e18-b9ed-320a79e6644d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ce311732-96e0-4230-b632-edb3fa89683a"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "212aaf9a-d681-4868-ae23-01925d4dcd6b",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "ffbcb0c3-0547-4919-b863-7f31aaf04b76"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7f2afc01-0dd0-4351-af29-7650c92a18d0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "42900aaf-7eec-4a67-9bf3-c7d3fe8fb7f0"
            }
          }
        ]
      },
      {
        "id": "d6ee0ac2-5e48-425a-9d13-d9232c832306",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "434cb6ef-c8a5-48a1-9d42-a8f85c28c332",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9e470383-d281-413a-83c1-d7cd90e892cb",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "e0428586-c4e2-49da-851a-ad947e0c90e2",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c06a4ed6-dc59-4e52-af47-6ad62de6f4f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c3c6891f-3b09-4ad8-88e7-234b3477f1ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eed01c22-3526-439d-aea4-f7f3e846f1a2",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7b6bac5-073b-42a1-8599-f9d05f3cbd6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2ef81bc1-a15a-44d4-bb2c-87fbeb4268ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fac399d7-fd75-47ee-97b7-808ea87277a9",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57aec83f-b3d4-4aec-94ec-89d3b22cfa57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f7d1ec27-9fef-4816-b54d-14ccda941a25"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "50e41188-8ef6-4da5-9f57-cb94cb1ecf7e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e89e5496-031d-4677-800f-ed43ff87ceea",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71ab90cd-bcf1-48e2-9a1e-268a0c221670",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6f64727e-e9db-43dd-a8d7-5da9f51816a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "175c7b2b-39ff-4154-bbea-d5389a0484a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e85cf244-6416-41cd-affc-43bb2ea7c1df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8eb32c87-9596-4d1d-b574-657c36cdb726",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7013b34f-71a5-4f7c-bb4c-99e70afc8f27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5a80db63-b47f-466f-bd74-6aec2fa07ecd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfdb474a-1aeb-474a-a3e1-aa83ae9c07ac",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "d3801128-499a-49f3-88e6-288e163c4a69"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "f35be399-6e7b-4104-8ae9-cff29b2a4272",
            "name": "Positive Testing",
            "item": [
              {
                "id": "8ba42cfd-5a3b-47d5-9fc9-c11c821d1429",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "774dcec6-4c06-4a8c-8edf-173ec31c61a7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "ff18988e-69f9-4ca4-8215-98fa9dd4b947"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "abc54f77-f53d-488f-b9ba-3c5f8fe4a0c5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "6617d8b2-8f2b-4c1a-b9e9-b0b4c9feb7d2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a6541a27-6c5a-4845-8643-ec139be555e7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "696fd00b-e7cc-4745-b7c6-3d91600eee0e"
            }
          }
        ]
      },
      {
        "id": "e57f46cb-b29f-424f-a38e-e1deb347fc5f",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "639753c4-da6c-481a-9958-73b91f9d8593",
            "name": "Negative Testing",
            "item": [
              {
                "id": "65cbba09-7906-46e5-91fa-8e96d64dc06f",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "a059ef0e-b1e7-44b3-9b57-a61064b67c09",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab3aa661-f94b-463e-9315-17688cb5d1b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6cea40ee-3eb7-402f-8019-6617b8109152"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5fc7a57-77b2-4419-b284-aeda96ab4a7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "21c03b96-1f27-4db0-80c4-d6270804f80e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89560b88-f7ea-47cd-976d-38cb9c024e2b",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e21658bf-a16e-45b0-8e3b-c6b31af17935",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91ca7202-a7b1-4a20-80c1-cafffdeb054e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b80e0bcc-7c51-4e19-9fd0-3517502b25f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a8be3a3a-db22-43de-b212-400834c4299c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1414dfbd-9513-4f7a-87e6-ec4d6064399e",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "718912eb-3b51-40d6-a215-7f30c70d8fc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63458f19-0dbd-43fe-9a37-7aee7d8fc1db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c209b1cf-f567-457c-93d4-aedc37f5303e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fd6f9a83-87e5-44ac-b00f-b0f33f00e1a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25e7ebe1-20bb-4fbd-b1b4-cd8e415e0ffa",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1617937e-eca9-4309-852e-f69b72bc10e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1c0644e-9aeb-40ca-84ac-ab2ce2345e28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79f9c273-0f12-47a4-84ee-b6f57348a175",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "28f76434-70b4-4b81-9db9-66099abeeadc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fab00a0-b035-44fb-ab09-46be613e5822",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "280e14e7-3f5b-42b3-9b1a-5ba8323468fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bdea205-1adc-406d-94c5-73c6cfb9fbaf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df4dd9ce-98a4-4f81-881e-b171454f6b2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d563d8b5-b3ef-4146-b369-6c1b1365db66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e6ab72f-8319-437f-977e-27250225146b",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9450225c-1704-4233-9b74-6b3dbdb8c822",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56d515bc-cf17-471f-abb1-7a510c507d4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ded07c78-d07b-427c-ba5b-df43c1456d99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "af5c6a22-fce0-48eb-9859-22af8ea5e278"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27341dae-be49-485f-89b4-cc528042fba3",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c587726-0ef2-4180-b1bc-36be32804384",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51e20aaa-9ebc-4f3d-b98a-a7551f6be840"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0a09f34-792f-4a94-a7e7-1e321f3ba667",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "976b559f-4ce4-4321-a867-c4b929f458dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6601338e-0c69-4531-b15a-4575cf797099",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64a6294d-4d05-48a4-af62-298881fe8e90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7230797e-0340-4b45-a8af-cd2bc3ed40ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5089b2e1-ef84-4323-a58d-a38259434f6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b4bd4ad3-fdcc-46ba-ac07-472ae8ac5470"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b86ba744-7018-4216-9ccf-5d909819a9ed",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc9e1eb0-8869-4a53-aaa2-9a4519512fa0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa13bbf3-18a4-498f-9823-054c9a2843df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad6e633d-015e-49f5-b154-dac2e9b100f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "24b07444-026e-4a72-b29e-ee24bfb83bd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d2ba22b-d3e5-45a8-954f-bb7e28d95c63",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab02c610-b8c6-40b3-8c01-38325de73cbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50f994f4-5233-42c0-b052-36aa28252fd2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "416e0c64-6d26-4d45-8890-a515e033d111",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cdb222ed-364b-4697-87eb-be1d90080c9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd0b8f58-2346-44a0-9e96-ab636aaaba5b",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc437947-de36-4a54-ba38-db295cf094b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f9564f4-5fb4-48b6-8423-9b085a59d773"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11d54e71-8aff-4a31-9a6d-2ee61e029b99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a4caa272-69b0-4a61-8a0e-d3ba2c323687"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b033868-8b6f-4d99-b333-9f423ce66016",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb90acb2-28ae-4bd5-996d-e9e9e8bb4f6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "196ce374-5fdf-41bd-9eb2-b9a8f10fd775"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85e3c4a2-9e93-45c2-918d-52bb36a7f4f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fce8c70e-3d1f-4304-af90-54d2e91750fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adf73984-1c3f-4bfd-aa5a-d29619c1e72c",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a35394e-32c6-4d2a-b48d-a847f46f5103",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ed0888c-8823-4af7-8934-2a368d95defb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55c13585-19b1-4b46-a772-949a8ec918f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5928b74f-b098-4afb-a3e7-3d72e871cb40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b914e81-7c20-4f13-8d86-c9380b77d124",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32570df9-3dd0-4305-bd34-94a1c17b0f10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3711f01-e7a5-486d-8c6a-72889212f902"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27d09349-0596-4292-8fec-aae5d3cbb9d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "588f2c1a-f248-4ea0-bb54-0e1589c4ac94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d15190f7-74c0-43ad-be70-cbe24f96552b",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37e0004e-d3a8-4336-9903-11b6a8f0e50f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "374b3dd6-0193-4793-9b00-f89826339fdb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a9c8927-aedb-4c45-bbe0-41f8b820c448",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a7c75e29-c358-4dd5-acd4-154d1515e09d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71857345-6ac5-47e9-b28b-5903e434248f",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dd9a309-3dd6-4508-b896-992b05b2b887",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebdd502e-fb56-4ae0-8f66-ccb1503fc39b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8184c77-2a10-4039-865b-2b5d1654a606",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9f70e7d4-ff35-4863-9477-3909af41ea7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f6bde34-cc72-4482-ae2e-f5cf5913ccc9",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c7d4862-a427-4ffb-81c3-70ae51a07b8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80ce008e-2ba8-44d4-8bf2-5e86d3e667e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32da8e52-fd40-4371-a31a-0af2212a4438",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "99bb1069-d4e6-43a8-a10f-a0d49adbf931"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54d0b5af-4ce3-4178-9b50-2303680975cf",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "312e4d25-1d08-488a-aae4-1c3d1378b4bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "341c0dee-496a-4853-b542-e395c6dc52be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dd19d08-145a-448c-829d-9acc2b4d59be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "2a38e11d-9bae-4245-a367-eab25470be3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77c06099-a124-45c4-ac59-65e377f10f6b",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b18bb45-8021-46ca-bd6c-122ae17fd819",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fa4d196-431d-4042-862e-fbed828a2f61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bb77611-dd8f-4e3f-a326-447668082cfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3886792e-d8d7-4ea9-aa71-cc509f30a535"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77e086ce-f6a0-4b01-9bbf-4c9460899b41",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9278977d-055b-4fb1-bb04-2bca2890c8f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8266236a-429c-4b01-ae34-ea5530f6dbb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b4edad8-0e48-459a-8a8d-91e75bd1e27c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "aef1707e-66db-4065-8181-9fde593f5db7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b94b6ebc-f688-4f6a-b1e6-9f522e04296f",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fff51834-0939-4056-a178-2499eda51ad1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff7db9bb-149b-4b63-a6e9-3a79e13fcad2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ac7d7de-9f84-4125-94b6-0047f85b642e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0a3eb8fa-443a-4749-85b7-b8bb23b0fb65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b629104-1546-42ce-96e8-c9dd8f509248",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5235518-ce9b-448c-ac80-7c1d195ee6ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9d0a0e5-b621-4f81-af8b-eb3f5a5b2a35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aef18c4a-df6e-42d9-b2e4-4e4c77db986e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "908c6721-ab64-426f-b7a6-8cf2afec197e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e0336ef-7857-4710-ae13-602b7d62d6f9",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02aa0b6b-113b-4202-b5df-1f2c684db62c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "234395a5-dd31-4c8c-91b6-d87b1366ef64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e091dd05-db72-4b40-b0a2-e5cd1bd266c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a6ca02c8-c8eb-49e7-93d4-cbb20410776e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "250ca82f-8825-43fb-8b31-8384690f5e42",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4aedd3ea-99ae-42ca-b367-ed22c063aef3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21729733-bf72-4fa8-b9c0-19a64154d742"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58219a4a-e247-418d-bba0-58218472a502",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "ccd51efe-9a6e-45ad-af93-fd633503e4c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f1fdc45-2ec8-4f1b-9181-f8ee1f50c967",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dd06821-8faa-4d7a-a6ce-0783d0873b26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5355faa-8778-4b1e-baac-33d903cd516b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46d0c76c-7519-44e5-a55d-b709b6336df5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "061d1a3b-7c60-4399-9380-eae2b85eec5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "848ec9db-1b17-4517-ac5c-3c315d598b53",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22e20bda-5911-4567-bf5a-007ceb640a86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed5755c1-a509-4200-8a3f-eafbb17e42cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "741a9fd2-abdd-40ae-961b-2d02a76629b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9420bebd-ff16-4bd1-945d-ebdac434fef9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb5877e4-5375-4671-9c44-8f3666201378",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83e2bbcc-98b4-469a-8c5e-a07100920071",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e27a6342-814f-44c5-bfa4-ed7a6edc059d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d507ccb-b602-4a76-a082-5b3f97fccbb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "14cb79a7-a5e4-4037-8159-ca47b4d4eb6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ded023bf-4750-4922-baee-3fa04022185c",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d987eeb-0936-4d54-8cbc-3515b616b8e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca39961b-63e7-4b8c-b84a-0e90556fd7c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "670cd514-74ac-4f97-a48e-57e7d8a87b66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "aaa1d8a0-3573-4e6e-9581-dfe76c83bdc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "749c7daf-981c-44e6-beee-51031143029e",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddaba405-372a-4eb6-95ca-a4511d8ca463",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88880720-2113-4991-87bb-f5e7d6f9b2b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "134dd240-a16c-434f-b4d7-7ba9aaf2041a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6917570d-9ee7-4d23-b98a-946bf24e89d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c24e1368-7381-4472-a31e-229c247bc3f6",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "045343a0-116a-43f9-8443-e9d04ae45607",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45e6516e-b064-42dd-9421-57f4b6ce7bce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "caff0b10-c422-4541-a284-da67009562d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "f9194eba-d935-4550-bff1-0f0777831e2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ca4b393-62fd-4559-8d4f-614ea22af550",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72e40328-f796-491c-8fe3-3261e8e5437a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e36756b6-610b-4b3f-90d8-3a04bdf29f5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3831d8d5-0fba-4b8b-bdd4-223c38ab802a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1f5a5712-786b-4117-b7a4-16315e56af86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0899e9f-37af-4928-8fee-e745c9793097",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e73c332a-087a-4372-aef3-5fbc884ce766",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52a046e8-b309-4e62-a7a6-f5d367bca0cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7066bfe9-310b-4daa-a5bc-7b51d8306a82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f396a548-6245-4a30-8882-71e51757e88a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb36e543-0979-482e-907c-43b3944e337e",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fecb2f79-a2e6-4981-b38c-8d4b29b23b34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "859c0303-f49b-42e0-aa78-49d96ffba9ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b71f82e4-3fab-4c1d-9f97-4579c3b40e34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fe95b71f-53d5-4191-8f4c-9d772f3ec5f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "496ec0df-a111-4d63-933d-8e4bc9e29c02",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf5708f1-7f03-445d-a271-413743e4bd11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4716da54-c736-44b6-bbca-aa00f9f8c9c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29a362aa-616e-4520-8fff-4d52ab68e5fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c33ed257-211c-429e-ba05-7fa90152e209"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1a8aa1f-fe25-47c9-98ff-f4ff08670668",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3cafcac-9382-4c8a-a4a1-2d441cc73de4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4540d279-9a26-4c35-8560-87551bd9da68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80811193-6135-45bb-afae-3ee7464d1851",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "4a653fb2-5a0e-4355-8d35-3bd4af9d9ecb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "800c9436-7069-4806-9818-5ae8782d495f",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e11c7f66-95a9-4303-9bf9-4d3cb3d45195",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7d90d615-e4ca-4d20-a454-8759c4bbdd63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e17bd01-a79a-4702-9894-07aeccc38c85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b61ecb88-0bbe-466a-ac22-bf092475bb06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98d592c7-5372-44c0-99cf-7bb3cb9027fe",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b5e5786-8e97-4e97-8365-4cc0420da4c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b48f58f1-e388-4cb3-a41c-0d9c481c748e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66c6454b-dd7f-495e-b450-f6071055db28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "83bcdf05-3a5f-4627-803f-76d64cba67fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97fe5439-eaf0-4430-b787-6d8ff663ed8a",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30056764-e33b-4521-b8f7-13ade1f5b569",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0bd09e8-4fdf-4fd4-899d-bfa2aa37819e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59ee7669-c142-404f-8af0-4c5d8b084768",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "f1fd2244-0249-4a63-8c67-fda6efee95b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08bc98b8-ae5b-4f1d-a9d6-37d465ccc241",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9529a20-2e16-432c-a7d5-6c7eb4260695",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d85e153a-521a-4316-9a50-55a28b9368de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4bfc771-a804-4527-ad35-ab19a2157537",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "42f642d8-9923-4b3c-b73a-d2e437e7993f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f076379f-3074-4408-b5c4-a17c1ac1379d",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f5251f2-e909-42ff-85e3-632d7d21bee0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "533fceb2-99dd-4ca9-9bbe-7e881eff5de8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1872946f-ace2-474c-98cd-4b933945360f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "74f3454b-d293-4ba1-ae8f-86d43ecb573b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5289bf0f-5036-4668-a457-9a1620a01da0",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "948d74ef-a65e-413f-aa5c-8c7f7c3a5937",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a25b03a2-de4a-4c4b-997f-476a5f144c25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee11a857-2474-4a51-bd0b-40c5174ce327",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "b259a69e-e126-4fd4-ab8c-1bfb281bbaab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "254ca54d-f7a3-416e-bbdb-0eb4c65163cb",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4eb564f-c01a-4f23-809d-49477fd69fec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4584daa-60fe-4316-9444-4c352bac0122"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cb3defb-d916-4b1b-8cce-8a17d3113c45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "7d9da926-6ec0-4619-918c-6fbd234072ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31cd4dd1-bbe4-4e2f-a952-6eb56102c9da",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f1d5190-735a-4cca-975c-903fb64cc47a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce0728f3-0b66-48e5-856d-d0b1bc1a41f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e96fd26c-506b-4527-913c-1da97d3ec9e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "c46bda4b-57b5-46b2-9f37-4f4da1f030e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1491d8ee-2004-4826-8ce5-5d4c38ffa02d",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f14a89b-260d-4e12-81b0-c2c168aad28b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55c85056-b447-4244-869d-815376889bc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e0216d4-aa38-4848-91ad-a58b00c0bf70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "ab35641d-0dac-427e-a047-cf09dbf81115"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48dae45a-c552-42e1-9233-10f3398f27e3",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a917c001-7a10-4bbc-a0c7-1d3aa37762b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "440db5bf-f8f3-4784-856a-591a48919506"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4430b90-b3d8-44f5-b3ec-4037cdeb6612",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "daa71ef3-05ab-470b-b6f6-d52cc90741fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "375e9c72-cf0e-4339-b65e-52920f556421",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ed33488-8fe8-4ba3-9765-96a3e9a90006",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fbb97b3-0c16-4be1-bca9-b3d5608c483b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7d44830-accd-4259-a3c3-78b76d078c1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a3fb4408-845d-4b3d-a31c-f3ce6132600b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e262472-0117-4556-b709-64600c6ed53e",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17a6f8a7-5f2c-4ef4-a23b-99148c26507f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c39366b7-d22b-466d-a19e-bb99658860f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd9e282a-8bfa-4ff6-9024-14d71b497776",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "61cf7734-04b1-460c-bf47-d744aade0d7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b2fa6e9-87a9-4ed9-b29f-1384286fa67d",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "373775bc-73aa-4ca3-a7ca-c7b4ea0f2024",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed6d2620-4a24-4fe7-8e7f-ba2cffd9ade5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecb0e2c0-bd83-497a-9097-9d1e223fdc00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e9e64a80-8f35-4e77-9096-6ac8ea968324"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45de2b31-774b-44f7-81c1-a31718e099dc",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf43235e-9eae-4267-94d5-f3916b302e9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7b25c71-acbb-4ff5-935a-fd96325caee2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bec57dd4-fe6f-4e6b-974a-19c1e76ff063",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2a9b7800-1eb1-4e4c-919b-6a42aee83415"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd7e4c64-1ecd-4afc-a7f9-9b72dcd832ef",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63d145c1-9bb4-46da-ac22-8997f336677a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bb714a9-661f-447e-a021-1f22a89dbe9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c576aa6-6bed-49da-948d-61f5c166d387",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4b67b107-6f72-4366-bced-e4d0ee59434a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cab9143-3789-451b-88f9-66d5188438c7",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f10bac1-98e2-4c4b-9198-1cb54e435714",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc5f3a0c-0394-452a-96a2-a0bb19daabd8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b677e3ae-863a-48d6-a305-241bd3f65f0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "11f5d1b4-938e-497e-80fb-782dc45ee879"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6108de0a-86fd-4269-9db0-fbbe088b80b4",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba931eb0-d74d-465e-a6f2-b2a7f57d3fc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f539a995-8512-4922-974a-533ff79540f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dd43abe-eb6d-48c8-b44c-631ebf24d6ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "21d4e1fe-c29e-4add-8b24-2e0c5375fb5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b4c7eab-89be-48d7-91a8-83366c515ed2",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8608caa-ca61-4354-939c-b20b2ff205c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac034eb6-e72d-4c5c-9ecc-e5e37d7418c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50904f2b-81d5-48e7-bb9b-8363b8780010",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ef7ca1b1-1f2b-4c76-921d-72f25a3fc988"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d695a94-f598-4be3-9149-14789c36b495",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df70b255-9480-4cca-b10c-c516a3f909ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31a60fc7-7109-4655-9bce-42116bb70d04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00de7398-de67-4f60-90d0-45da9aa7411d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "73188785-f0a6-4f3b-b820-1cbed48e2331"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36feaa3d-ac54-4ecb-9fec-be42d76d9887",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9199d3c0-6e11-46f1-b854-16f6fee3d5cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d376757-68a4-4439-bddd-82873a69fdd9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3be84bb-829b-4915-a964-e21bb0169180",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "eaf6aaf2-4fba-43ad-a3d3-fb65146b2c06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a94223fe-f825-4e34-97ed-3db24dfd798b",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "756ab18f-9eea-4754-a6c9-359d64d1a646",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "407c0571-b7f3-4814-b554-c7d49a0d1edb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1294513-2cf9-44b7-9b16-5433d8f68171",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "a44ca0bb-ad6b-4756-b5c5-7b2bf41c137b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19098409-a567-415e-9232-ebec17119076",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11005ef3-4078-4816-95ea-66ec215c7ba2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0300c10-aac9-4579-96f2-cf383cbb207e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8938e14-2fcc-4a0c-a0d7-5b1a9a1938fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "1efad53d-4981-46dd-bd6a-b6b58ec8ee94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eda20171-4036-42bc-9658-4738d9502f15",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75fc1a92-52ad-4ea9-8d07-8892f05f164e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e2f2408-7cc4-4150-9f1a-e9efe462204b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "591613b5-cd67-4fe4-b531-9da60295bd84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "be49da20-884f-4301-9d06-93aa989eeb1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eaadf641-3d2b-49c3-8267-fb2763ff8ebd",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4974f11-5605-4518-bc8e-4b5cbe31d342",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb2db744-793e-44ea-8306-c3ff469c4bc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8586c03c-bbd5-4d1b-9cc2-3cea3dc4448a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "c6e72013-9fec-47fa-84d4-5837b0e7cb80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0771ed14-f345-4677-8ea4-25db88457a88",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb9aee29-70b4-44d7-84a8-c1eeec6e92a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5d3932a-bbda-401a-9266-c21bbf8d51cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6a3a48c-a7c3-48d6-8761-cd19b93ffde3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "50290ddc-e658-448e-8a91-83021182f8d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6befd0a-1b28-4cc9-8687-1bb0d9bf2e1d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81fc4ce0-eebd-45a8-8649-d3664e705ded",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6dc22650-f928-4e6f-942b-4305b06bb546"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e6b8f83-2f2b-45c0-818a-58eb483bd8ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "c9c8cc56-c705-4c59-836b-1bd02a18a764"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebb0cb37-4162-4ef4-86fd-bd0e7eeb2d67",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4b1ed47-8089-4221-9ef4-3b5bc2844b1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61dfea7e-edd4-4522-aaab-a0d3d5a1457a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94de75ea-135b-48ba-95ec-3c8eb0832ad9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "abdba694-11d7-46e8-93fd-44d22e5443ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7aea4a07-de06-47d4-b1f7-642d51c23b09",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "525d6620-2dc1-4c81-a614-eeef21a2668a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d03c4948-3213-47a4-a371-be1437c655b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e7ce3ee-0de7-4e7b-9860-ecb098c317a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "aa8a04e7-1661-4a2e-8560-5dc99af3911b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5c66497-e472-4168-b3a6-5a7c0b46cff6",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7aff9e53-be76-4a7f-9433-7e396bad0dc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9834ef73-c522-4265-9824-7419bcb94905"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46392715-4d5f-4f1a-93f2-2b70b3f0eb92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "750261d3-7f37-4ea9-b462-2d655e914465"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bdfbd35-4b52-437b-a2fb-f0e3b2c97880",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ccebb4b-246b-4040-940d-4a8687ee1806",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46664e9e-ec6d-4cf9-94ea-cd1c010fef49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "681a77bb-914f-49f8-93f6-8bd370ef54ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0198723a-de86-4262-8aae-151aceb486a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9392d45-f319-4432-97f8-d543fdd173c3",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59b50fe7-6180-44ab-8cd5-77165fee061a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5efc57c3-f47c-4e1f-b0ea-b87d578abc4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a26082fa-c6b8-4e7d-bc62-dabf2f729e44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8b223a8d-3669-4e99-ab1a-b2d836dee493"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a785e6b8-ee41-4734-acef-331bc2f7542c",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a7e71a6-a5d8-4f1c-a821-273cac9dccda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2eb1617e-5aae-44fe-aaf3-d549799a98c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db0018ab-410d-41fe-b420-1cfa1c1e637e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a9f2caa1-90e3-4d1a-a487-01b5a542c6b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f99bf58e-5429-4d8e-ac71-6db4209c2633",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3746923-aac6-4dfc-b16e-b3d123e8f2de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "166c7170-db0c-40d4-8118-7b7854a12de7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93178468-7c87-473e-8323-ffb58365cbcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "14a18ef5-227c-49b4-b84d-38cbe32c78d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbc5f414-b25c-41c0-9ca7-ebb936d583ef",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e98e7bf1-0480-4121-b9b6-6b6c1c568721",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "189ec2e3-ea9e-4064-9bf7-131a65df9a7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "352bb197-ea3a-4a83-bfbb-07b33507cbc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "3cfad53f-8a16-41ad-b16a-d0c43a4d4afc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0f81303-45d8-4064-bf74-41677f4b0327",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17f25d26-99b7-4efa-a1c1-6d3c32429bc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ad176c7-6cc2-40d0-a2d2-a136b8c02b2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ac6cad0-1436-427f-a47d-a77e143e578b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8d94dc0f-796a-49b5-9ab1-a0e170470c6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4a662c4-b3d6-4429-b156-ac7c85eb15e2",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95321657-8f7c-4062-929e-2e308cfa87c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "807e0c5d-177c-47c6-b98e-a86d731c1e58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad2d9e0d-ab5c-421b-9f5b-bc97b3e906a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ed537c67-34d8-4458-9a61-29e7070e8c79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abfec5ee-f59c-4d76-a89b-bb719ba587bc",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e62a22a-05d2-4faa-b592-d096aca647b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d4c65f9-4392-49e8-ad7c-311cba53c6e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25980ffc-aec3-4991-be7e-fc1af464ccb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b4b2192e-286a-48cb-8a84-5021de7d1f81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfe5f36a-3bc2-4bca-9fdf-72d85464deab",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c46c763-0ad7-4bf5-9071-72ac702a37dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03123634-a604-443a-a383-64598addc039"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8645ea1-a563-472d-b4da-629093f6bcd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a537bab3-b407-4f35-85f8-d609060692d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50acc421-00cf-43ad-824f-7223260fa123",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8de3a185-b9d7-44f2-b8ff-16465315a101",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22ba336e-cf17-4332-9172-c11a0d1b38ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c45bd13a-1db3-40a0-b1db-8315aa9c65ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "46915244-301c-44ab-90fd-79e4d3aee0ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6e99196-d92c-49a6-8613-b8bfc765b5d9",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb844478-b16a-45ed-bd7f-64bf6a2676c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a13c901-a46b-4ba2-b30c-898f7615b66c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b6abb5c-a001-4562-8385-74283df7a58c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "29307723-9eb4-4f93-9de7-e1cb32329a80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0343662-ffed-4be6-b82c-6fd3b4f6f689",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b44d1017-0499-4c99-b6b8-b510fe1c4e8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9236115-d65f-43f1-b82f-b6e372c11167"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "960fd199-1903-4a50-923a-2536857c1747",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "beecc790-793d-4f7f-9c8a-ca5c45d58cb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88a5776f-73db-42fa-a899-a33c5bc3a7fd",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "344219b3-6552-4eaf-a819-6d44eed5aa75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "123a0354-6df7-488a-b03f-fb5a8ee1aa6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7aad4d1-dbe5-4f98-8e21-188d5389ef5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ffc19a41-e4ef-4612-b012-f757a4d9eea1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4315c49a-8461-4b0d-b64d-4bf4575d956e",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20b1a88a-70bf-4d8a-ae91-a3a4b0937e18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "317332ee-9a22-4b5f-8bbb-e9988c5db525"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84f58dfa-aae8-4d85-bf93-9c6618d3cbee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "612c5941-b8e0-4366-b89f-2b8c274a48b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4f7366d-42ab-4774-8ac6-650c516e06be",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e2d2383-2093-4288-a0bf-98162500264d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8602621-ad54-4c39-9926-908314b36427"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd1c5d41-939f-44ba-b26e-5ec6a419733a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2e00e530-e475-4f3b-9233-3bcd64124897"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80c4e189-9903-404b-92e6-7f960859afb7",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90028cbf-b3d8-4beb-b2d1-3dabfaa6a7c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7381cbe0-6afa-4fff-b56b-55bef5b66852"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32ab8599-333d-4d1a-a24f-a672e028c158",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e911e856-bff3-4141-8a70-0de2d646bb95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4c682e7-41d3-4342-b51c-01501168603f",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f42c9bb-2c4e-4f6d-b0ec-a5653072398e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51bacc45-7c0a-4078-b91f-6691930091f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6e37e5f-0d31-455d-93b3-9855fd545399",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "9fb501fe-0288-4f98-9360-b3934993e4a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29e6499e-d51d-479e-bb21-46ecb6d8906c",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f408ec25-f5ad-497f-9bfa-50abcb7b874b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7174f88c-74ba-47c7-9501-396c2deb2645"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c7d517a-820a-4102-9bf9-b9b939707ba7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "978165cc-7379-49a5-bd90-4b627dd7fbe8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6c8e56a-9b85-4881-8902-fe1e12008ea1",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77cbc2e5-153a-4861-9cbf-278613d07047",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ef6aa10-ed3e-46bd-a172-fe58411b6260"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0213561b-29fa-4f6d-90a6-d32a75e1aef5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "81e44b06-16a4-43a5-b00d-e4fadca677d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a1b2621-a493-43e1-928f-e7554cbe4627",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "328a39c7-5bbc-49db-852c-301fef894a95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fe3a024-9b47-4f12-a1df-c762fc1ddaa0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cfd6b9b-8a35-4a6d-baf0-c39802b90be6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bc381b66-6116-4b6e-80ae-21e6ce04e0c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56d2b39c-64f8-479c-a124-81cd8cd35f5f",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cd8580c-4983-4e56-a2ca-a4c018d78942",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "003fc2fb-96cb-4294-9f1d-1e7ee007a25b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cffcc637-b38b-49a8-85f5-46509d3a2e08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7278eb35-d113-47c6-9a5d-b3b3d7f5f61e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f290f8c-7aa6-46f7-9d13-b019f53cd760",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f27511a-e369-4919-974a-1407e2ea0ecb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1176934d-4d0d-4c3e-83f4-7a8d7917e49b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91c61dfc-8074-4461-a7e7-42d54ee2e229",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "eab39321-a898-4622-b5af-1605f31eacac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3845b386-639a-48d2-a922-9c64525a3de5",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "789be519-4410-423a-82be-286843c6ac67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e235a5ec-39ec-4870-952f-f575c075297b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd30d28e-022d-4df3-86fb-3ed82605c4df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "cd5e4a6b-3f17-4f82-83c7-38bfc2f28f66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42927435-8e08-4935-8102-25be5e7b08c4",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f91c83a9-28d7-4f07-b6fe-739dbdc2f67a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc18f1d0-bd89-4c4b-b79c-52102aa66d95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e2e7246-26e5-46e5-a83a-f2b9696e0211",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "d8b980e9-2d68-4cf4-a7d1-b28515f06f30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df8c2547-cc37-436a-808d-038878b7224b",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d46ee12-86cf-46e0-a55a-96ee581b0516",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a550b4ac-4cb4-4345-8e75-47c09820f72b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7edf5f02-379d-4350-afce-238b2a19b13c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "e91db751-efa8-4c4a-9f95-06c487412360"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2a2d386-2044-4fac-9cf5-b90f0022217f",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e12b92f9-f882-4627-b918-1e6601b706bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69a7d496-3c7a-45ef-b613-f486baa86d27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64d3243f-47ae-407b-a45c-43d0b52abb5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "939a1bb2-c84b-4ab1-bd34-ed2d948665d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4641bacb-5551-4c17-b94c-1cd9a29abb02",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5f2fc3a-ac45-4af0-aa31-264884b64d3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9f8dce8-fdfa-4ea8-b682-4e944bba9539"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a869d75-969c-4c2d-9880-484f5d2f055d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "d620351a-4b06-4488-af0b-b7e96d11d1ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad381f3b-4188-4099-ac53-3fb7422dd159",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5510597-ac9a-420c-970a-a6bbb1316ef6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "a0386c8b-5acb-44d4-90d2-2cf205646384"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dd9e038-6965-4ec3-94b0-98626d74b818",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "1f828f04-7264-42ec-b45a-20e9ac6a01a5"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "97a9a51c-c98a-4cc1-afc4-afd41e3c66a3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "07f29f0d-bfbb-4900-a3bc-1b3c837cf1c2",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d49c36b4-e2fe-4dc1-beab-35da9cb3d299",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0ae4fd21-b7be-4b6a-a587-c451e6d7f873"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7d20924-88cd-4825-be80-c44b551ed173",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "70fb1369-2436-4614-8d0d-c61d1b9d0a6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e347a4a7-0735-4514-a2ff-7d56c392c66a",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cebb063e-3621-4b4a-b4d0-7f327a2ebaf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0f20fdcf-bdbc-4c58-bf24-7f671ead0715"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d3189f1-a437-456e-afaf-68e63ecef8f4",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "027d8267-5996-4d9a-8d97-0bcaa57e58c5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a49f3cd0-0d91-45b3-87e5-65d0247f3fbd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d9fbe301-0b3f-4a66-8ba2-f488987c96dc"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9305b245-d9ee-45d2-9bd4-e20e1f28e78b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2ac12df6-d89e-48ab-b017-700504a9e911"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "26bf8498-cd8d-4860-8565-b3709a04a14e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9d8a28cc-d4e9-4acc-927c-070f91532183"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "3533eab4-1d43-44f7-8df6-cf5fd41f5255",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a688d109-0663-4ca5-b3dd-6bd0ea3955c2"
                }
              }
            ]
          },
          {
            "id": "766f558d-9a3a-49e2-95ad-474403ff923e",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ccbbe5ff-6160-47cc-99f3-b2a0f40914a9",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ae6ad9d5-07ae-4edb-9fee-db27a67b3022",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "adb94f6e-23e2-4d24-8f71-58e003e7df9e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b725bf2b-8ddd-431d-baf7-694512bc70ae",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "aa2e2427-79d5-4d09-ba04-1fab798d387a"
                    }
                  }
                ]
              },
              {
                "id": "9ac314de-4228-4175-896b-c20abb855143",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "916f14c8-fb46-4e62-8af7-bb40f62b7994",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d5e0bd45-4d3c-4e38-9fbe-7720fd79b34e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c546d084-45d4-4e96-8b14-8b64523c4f5a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f9409138-3826-425e-b63b-5d4bd5e1da34"
                    }
                  }
                ]
              },
              {
                "id": "e50e1bcf-8228-435e-8260-3eeb204582c9",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d5083b6c-070e-4a44-aba9-0ee80a1fa434",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2a283c1b-f2ee-426e-a259-4bb39592a47b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b2a4cd7c-a0da-4f71-82d3-4274cf726a2b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "e1be238b-d284-4fd5-b4b4-e0edd832fbf1"
                    }
                  }
                ]
              },
              {
                "id": "547e6640-db63-4976-bee3-33990339b29c",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "526c8473-3234-412f-ba7f-1060d760e3ce",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b3478386-a3e2-443b-a31a-9028976d9ec0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ca8326d9-61be-4e08-9927-9355a5d3b8f9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "221c701b-bbd4-4028-8d7d-8bd30b2b2706"
                    }
                  }
                ]
              },
              {
                "id": "e0e77046-5d50-402b-b358-2a9f824be20a",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9f1feadb-ab17-4c41-8862-3e37d846ba7e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7a7ed8b2-e9ba-4d7a-bc4c-27efa159c506"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a7752811-aeb1-4a42-8453-7bfe15651f01",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "766fcbbd-01a1-4f9c-8c85-877580eba7a4"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9eb611f9-336a-4d4f-95a4-419fc187dae7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ccf42e25-0cd3-4978-b68e-e8db0fd8fc55"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "5a7f0bd6-4b93-4c54-a727-8cbd0ee8736b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9cf20605-a0de-4ff3-a975-f39dbc234b12"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9250e93c-967b-4b64-8119-f6f75d69f784",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "2aaf20a9-2d9f-4832-a994-2150f28a508e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0a77396a-694c-4d92-b9e2-313aa04a3983",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c64376ba-78b6-45c3-be50-8071c7debea5"
            }
          }
        ]
      },
      {
        "id": "ead4c073-d832-4a38-913b-daab66ebb7ec",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "5f35285b-8f5e-47fe-9ffa-30b0574761f4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "792e4fb9-d7a8-4876-9c48-5aacd06a933e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "588920a9-c8f3-4ef7-a3b4-5ac5203d5ab3",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5909be90-3ca5-405a-8434-3e5a74627fe6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe8555f3-ca5d-461f-bff6-7dfb443e9477"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48c51d52-df4d-462a-97c7-9d0dec430e32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "24c01d3f-5418-4534-ac96-5bda6051ddea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca4c13d2-65a4-4975-ae7f-42f6a4e89949",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29870a84-6992-40ce-a412-c484a48c5d34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "277a6096-e0b2-48f9-bd81-9567759b5e25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21ce5a27-3d19-47a2-ac5d-16ffddba5e79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7b924a23-6bcb-42b8-a2eb-6772330f3bee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c892e7ca-6dc0-4c24-b8cc-bdc2bbe07d72",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31f4d999-a74d-4e28-8ad5-5925d50922f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7334b4c-a277-47f8-9f2b-ba80116beb52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f7fd349-aa44-485b-9b6f-c1b4bfec66b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b7c484aa-f36a-4c9c-862c-0595b951756d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f9577d1-7765-48de-acd3-f6019e874919",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc3dc434-ea3f-446d-b708-aeaa9af85199",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee1b11d0-c10e-46fe-a847-b1286f58c203"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3fb5db3-7ac1-417a-9ee9-46c4b2c87c9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fb0121c1-f7c6-413a-9d71-ec3539991007"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efc781d0-b2b9-40be-9263-b2447fa4d8b7",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ac0af28-d3b5-4a04-b3ab-006cc5095c7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7eb8b842-20fc-47a1-9fad-2b2d6e3d25c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3f987b9-26d9-4fea-8f2e-37c22bb2d5b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4befcc32-360c-455d-9edd-1deb341695e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c0a2591-7903-478f-ac31-6369c83bae75",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5877b0b9-75e6-4807-8f7b-e20f749904a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05572a93-4d7f-4a8f-ac87-fd04d1ae147e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d928e3f2-f7fb-4c10-b1b2-f8317ec036f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "239d5e18-05de-46fe-a8ac-4795e84d227a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f725df33-a2a3-483e-acbc-bb11727c334d",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "306f6cc5-ddd5-46f1-a72e-209fe1883889",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1be23a4b-a3e6-4858-93ed-6628ec2735f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7feeb44-9741-4937-8c99-da8033a4572d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "9810dd57-c65e-4486-b9ee-ac16a175ff2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "584d7170-2567-4b9b-ba3a-f4fb118d8ee0",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da1b9c8c-4431-458f-9be2-75caf0034e49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "379263d3-56c5-4323-a876-735d2f561960"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b425b254-dea9-433a-b20d-d425abb22720",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5034c5c4-bf94-4633-8c3d-2368b227141a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69a1ac45-bef3-4525-8e5c-7ea0e2b34afb",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a7c96d6-aa18-4898-97de-c3b8023fe08d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d54fd3d4-4331-433f-a453-c25c233ae7b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9e09ef5-38e2-4966-8353-81565fde44ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "eadcf8c3-8a46-4560-9445-66c6a24d0185"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff136f4b-6a82-430d-907a-4dff4559fc8d",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fd853ae-0ecd-4f04-8198-9b741d335866",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16c4b929-1cfe-403c-b6e6-01cef8e720c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ef4fa1c-4504-47b7-9445-55d0a52c9638",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "62edae90-56ac-4deb-bbb5-455658f66d77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92d4f008-f472-42ea-bc9b-197a996e299a",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ba88301-91ff-4734-90c1-93cf16a16601",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30f46657-6006-4586-9b4f-1d695f6f3226"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6910946b-3e37-4c8d-937d-409338658a70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "c63efd81-2aec-4d37-8991-f2e44649c518"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20721122-db13-4891-9fc2-725bd0b9a00a",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1eaaceff-a492-4348-a920-aac4ac0c3c34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a3ec196-f7c8-4915-974a-fc3c6dc028db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30fb3305-467c-4549-b6c0-4edec6ca73b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a4590a41-87d5-4de6-bdf7-7f48ce7e27c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "741b58dc-491b-4362-86bc-7dc795cb8b17",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44427259-ea27-4c1d-b35e-8bbcec8a71eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ff7637a-d19c-4708-b214-66bdfbd72e4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "582dbc6e-a45f-474b-a926-1ba37dce6033",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "61f14732-bfa3-4b33-a96f-243f69a2114a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a58640cf-5936-4452-be9f-29a4b0b67bdf",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "829052b4-4342-47f1-bb3a-665fa2067f19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10445fc8-0614-4616-a115-876ebd047432"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "640b4e2e-fa38-470b-844c-5fb1e90c2a50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "33a37c9b-a854-4f86-a2ae-20b402206e14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c7126ec-6834-4cf6-9026-d27b2c898361",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f238781-b646-4b27-a0da-1c1716e5d629",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13a7aa06-ea01-4f43-90fb-6ecb75d69f82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b22e490-7152-41d0-818d-23fdf63a832e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "d1345c0b-87d3-40fa-931d-36f13c2e0cbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d3b7374-49bc-4b18-a3e0-f7e1fb329e37",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b0484bc-50ce-4ddd-865d-a871c5ed2cf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ffda09c-5379-44ec-8d33-5eb5766c7136"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bbab3d2-59af-4ef2-83cb-4a8716355c0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "a5c673e6-3716-4d50-b2af-4d7dc130d035"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0ce3ba1-a10d-4a75-bfb6-19f419c3b2c7",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba992fc7-96aa-45e4-8f5c-e3903de1947e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36a9f3e1-b2b4-46c9-be6d-9d6ea8afc24a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67182f0a-fe4d-4621-b3b7-60d371f4b60f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "8b6bdf89-086f-46d2-8ab3-1294e0e17fdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54c8f91b-aa5f-43a9-9aa0-6d42d4ca78a0",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c976293b-aa6e-48ed-ae6f-4a00ea6db794",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ef0eb99-665e-4e09-8f2e-70b217a8534f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ce16f19-d252-4f59-afa2-fe0b5f71b349",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "0dcc76bf-db5a-49c5-88f0-58d408775f0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "750d64b0-7ce3-40e9-9fc2-b676554da6d9",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "616a4762-3f9a-4873-b0be-68a7c3f7683c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb0336dd-b380-4169-a5e1-218e2e8cb5ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ed4583e-6703-4ad6-a7cb-29a3a3af7d62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2f19d298-14fe-4ccb-a5d3-625f14f6a7d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4003295-f407-4b91-a135-5ee4cc8a727d",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39e373dd-233a-4bbf-8252-a5b68991ac8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd1138fb-678a-48ba-b1fb-436d63eedcbc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdd1e63d-7ec3-44e7-803f-306ab275c26b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b17ffa76-ca66-4a48-a655-15008f776429"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47b55cd2-979b-463c-ba02-188c1e1d286c",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "168306e7-2764-4542-bac7-7559e6df407c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b4be505-e1e0-4930-9f07-ae8f129695d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73a3f43e-4c27-41b1-8254-f79def616537",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c8fcbbbb-a9be-47e8-8849-c1372f839880"
                        }
                      }
                    ]
                  },
                  {
                    "id": "faaaa607-ff2c-4136-b6ae-befebb0ca15f",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df301bc9-ab29-433a-9081-16511bce7113",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24e1659e-908f-49aa-b633-8fde5c6d1a31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "386ce86e-b50a-415e-b027-c7cae3118fea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2f7d0e96-1733-45db-91a3-c9b8f4612541"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0e9378a-0e7f-48fb-a6ed-026ebb7fb910",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be26bc73-b1d6-479b-b179-cd9da1992d89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5e61b40-8cca-4487-8268-e0361e0cc2cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5a18549-7195-4a15-845d-e606fec09541",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1c909fad-3f52-49c7-982a-9e4db1fbcd8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2be93d68-cc9c-4d03-9935-297d6de0968c",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "795bd609-87e6-4cce-a303-9bd8b959bf71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9a37b8a-9f96-420b-a5d8-e55c23909ebb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72b5875f-8390-400f-a49f-bed4bf5fb409",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cc6e09f2-bf4b-443d-b15b-d13aeb81df7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "498b7059-1525-45e0-bdc6-c079ee2059c3",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "580d3e8e-fc44-4136-b2b9-0bd5c7a0d02c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84f80dc8-0cd2-4e31-972f-57cafbd01ac1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03952bed-d2b1-4f60-a2a5-8d199862a388",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f3d84842-ac31-4b23-a0bd-12803189d270"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b4245c1-0a77-4109-9272-8601b19c1918",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62c71b36-37b0-4957-b5d9-8bd0c5db165d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1193b85-3d8d-431f-b8a2-76863b8d843a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dcf8f80-56c2-4c06-bed7-5b4ef5493c81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4b93ebcc-c2a8-42cc-811d-e85c741f0d74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fff00ce3-b02d-4c07-852c-0e6c34794875",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abd130e1-47a4-4df5-8aa3-f9efe28da742",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98887a8a-34bb-4d94-a708-f2f3c87fd066"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "554bfbda-4d6d-47e7-ae89-d9f150519183",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3b29ad7e-0f5a-4ff2-be49-d010f1fcfb75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0aca8819-822f-437f-ab03-59badcce5bfc",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcf14e37-c999-4118-b844-2a55e66bbb68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "615e5c7e-b1f8-4c6d-bdf9-001fe9e0b001"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c3fd3ce-ad0e-4a5a-9410-8cafea010890",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a4760871-b11c-40ac-98bd-06d9644ca9e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "681e9277-53df-4ad4-b478-7f5b2824d6f7",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "727085b2-6c68-428c-b566-c3e35612397a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c61c0edb-f0d9-4917-b470-b72ea009818a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10608277-c325-4a7b-a7a7-20cdcf7a77b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0cde6baf-54f8-4d11-80eb-cae523b5f611"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69c5e7ed-5b66-449f-b788-ca0c075da86e",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4d82161-fe7f-4bd1-9d69-c94fc78418bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c96474e0-9556-4f36-820b-fbc0be8056c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6087c9f-0d0d-400f-93b3-e1c5c64b232f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d1ae6e74-187c-4fa2-9ab5-464576fb8c85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f831b87-907d-4778-9a39-12bad7e47847",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb073e42-3e9e-4fda-9ae7-e5abe746c8f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37412e22-fb63-45ce-a50b-268df42da0e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0891a845-b414-4d77-ad80-a2d6add43e19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9fe53400-bbea-4ee1-8170-d1ae3b586409"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45e3945b-ed92-4a4d-ae85-b5530c46e973",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b8c9129-15b0-45b9-861b-ec056f14d7b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "540355b5-0ea0-41dc-b04d-d68211375ae1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a65c72d2-7b5d-4398-a60f-45a4c96fd77d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "99263372-61ea-404d-a385-e7ecb2126e85"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ec95a04c-0c44-4cdf-918b-ac37229b7e5c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "fc0d7476-393e-45ab-953a-cdd4aac96790",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0302807-9029-4d72-97d2-ad5ed62adb4f",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "54a5e1f6-bdcb-4b7a-b931-a6e06061bc93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cafdebc4-6578-4f3f-83d2-d1c701028650",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "70787312-7841-4588-8d46-d968a477d713"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1fe6402-534f-428d-9525-84ebfb3e6954",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa46d171-bcb6-4705-8c36-e999f173e3eb",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "f8a83784-8885-4abb-8c07-3fa8017ca374"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7ee53f8-6be9-45c1-830b-d3ea42cbcf28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "876db537-c087-44e0-ae96-93e5415e8cea"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c6821363-d879-4a31-9198-b9787fb45b43",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "74dad6bf-e28f-4e25-b14c-5c8e0583242a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d383c76c-9d0c-4712-8082-c1abea732086",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4e3d4a82-9b44-4215-b9da-18d864c23261"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2264b2f0-5612-4c9e-a85d-eef782848318",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "be3cfad5-1caf-4f31-90c5-025a655ae9b5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "edc159bb-1c36-4580-a6c2-1e2b6a57c416",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7fec0aad-36eb-4d2f-b26e-5a948facdbf1"
            }
          }
        ]
      },
      {
        "id": "2f6cb43c-88ce-4560-b567-1e91f7738e06",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "64ff97ff-8b46-407c-aaa3-ddca46b0178f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8ba8efbe-4bbf-4166-adbb-ed123e38e103",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "bbb949f2-fab7-4655-8250-2e42fa2643e0",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a623a7e1-d3ef-4669-8b73-fec7dd9c93de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87ce45fd-90e9-4c9c-994c-d1d46ee0cdc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b102d4e-c1fd-4627-8289-1c4ada7ab7c7",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24e54c5e-aaa7-4d7a-ac0f-cef82aaab11b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0ea62ac-685f-4c64-8459-2ee1ebc971c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af10eb0e-9d65-4afb-adfd-507e75f7b02b",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "174c9389-d4a0-4b71-9ab2-dfba00577e9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5196288-65ec-4f32-884f-63ad9b4582b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa65194b-33ad-40d7-a854-166b289e3823",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c00d81c3-96bc-496e-a336-d6127fe3cd3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f2dfac8-87e4-4ad5-8afa-3638ccd95906"
                        }
                      }
                    ]
                  },
                  {
                    "id": "906eb8ae-3736-48d6-9735-cffb0203766d",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f34d4ce5-9c59-4a34-a76c-c421a4b9b6df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f9bfc75-0bb7-4cb1-9dec-0e208ce8d88d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9349d8d1-b4fc-4560-8d42-5f190b13a804",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e66b293-abaa-4d29-8f2c-42be27cb9b79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cead70f-ee40-4d4f-900d-b35be481ff3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5d23665-a2f5-4d99-8b61-42ae700c24ed",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67c220b1-837c-48a6-ab3a-c0c590a52383",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4769490f-d5f1-4875-ba90-667f5ef2ea49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1d864b8-e9de-4dee-b850-7f84f49e8752",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a1a7bbc-bf17-45ec-8301-dca6abd5eaff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5d9f722-889d-4339-aa0e-17d9c7a08646",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dace43c-d1d1-4d85-92ea-a6f51249d472",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d562fa88-7550-49c1-b7e1-0e1d759479bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ae7a718-5e4e-4fba-969e-66ec4a1061b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eea96fb3-599a-4dbd-941f-1aa99963c1ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bfc898f-543e-4d11-a711-98f97907a245",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e8a96b6-8d12-4da8-90d0-38b6243aebd1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2b937361-0ce1-494d-953b-9d4bdd143b28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a60a01b-1521-413f-9b89-3aae7aa779d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a561fa4-f3f9-4349-b2c4-700ebe6d6dd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0adc1aa9-498c-4ff0-81c1-1ce3421fd90b",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf279229-3d66-48cb-baf3-9cf65b6bcee4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9635eb20-599c-43dd-a308-0b4a94542e1b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d3249de-2f44-48b5-ac14-29b792983991",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fb381aa-d600-4a92-937b-84773e2be451"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ba963d3-ad71-4ac5-b40e-2f45b33ee237",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dcbd93d-677a-42e2-a490-af4628d85142",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35a83fbf-ea68-4cea-889e-8472deeb0a83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1122dac9-65eb-4210-9a39-366a51b02595",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88850cf0-6e60-49c7-aeec-c9978f61ff1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ad63051-b69e-4429-b9c0-60566c5bad14",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3249b77e-011c-4e61-8863-bcd588c3ecab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "488cedda-f3ea-4a89-9e36-f51168c6c578"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0974a88-84fd-4215-ae25-be1744a52935",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "723d3b21-5aa1-45e4-9df7-8bb5e596f061"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acb72ae6-cc6a-4e1d-801c-7cb1b962a0f8",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b42623cc-73bc-42cd-98a4-1972f2aaff0d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b6d0048-9ad4-45a3-b756-1473ec5a2de7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6399a50b-f983-4205-864b-5292a6c54343",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4583b152-dbf3-4a65-831e-1c53ed15ff1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a23c4e7d-0ab4-48b5-bdff-2b31c2b1f15a",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91b9392c-1b10-40f8-b84c-f7e1602966b1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0a5c5508-85f0-4274-ba95-e4c71ad49fd4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8a60eab-1d77-4a08-a9a6-296e9f26af0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9335b114-1809-46eb-bad5-8f3e64d575c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b1ce8e3-0cea-4b40-8e8c-26cfcd7ede5b",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dddf63e-349e-46b5-a81f-b2fc5e788797",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3c89e713-a713-47ee-87fb-d770c29c6d22"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f3bc04d-2bb9-44c9-8109-3301a8333ff2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cdde24e-ad65-436c-8a9d-a68c399de0f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc49543b-9d49-4e21-85d3-64ff53ca1168",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ca1a4c9-2168-4450-91d0-b7ebabcdfe97",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4ba9cac1-2515-4f8d-9d47-83b2eb9d2080"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8095a79-7b27-432d-9c19-50bccd49395f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2308f42a-e76a-4c41-8399-ab6361b76635"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abb47833-5922-4083-8679-5eb1a881e168",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0631ae4d-2ed3-4a36-adc0-11994a9ab839",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3efe5173-14f2-4954-b9fb-6f95ab0fa1db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "659e8237-0a86-4cb1-8e2a-bec9c02d4244",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45bc79fc-12f6-4ab5-86b5-402889b8d13d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d1b1322-aa03-43af-acc5-e2096b6e4323",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47727a1f-c710-466a-9796-be485450b30f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f91d0ffb-01a1-45b9-9bbb-7c765f36ba22"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6264deea-14a8-4163-ac88-6bc034faed7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4d57432-886a-446f-8d54-4573b4d28b17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38d8b6e1-8dd8-43c6-bbea-c48f6837a3ca",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98396f4d-2f32-4ace-a73a-177e4acd9071",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66349ff6-fad6-4417-9f46-ad035fe21d90"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56fdc049-74f8-4ec3-809d-a5af6530cb7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6eb0f2f2-d898-4ce6-8be6-c9bd8cf2ce83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e84eb1e8-86dd-4edc-8673-1ea3c2ce1351",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd1047cc-e993-4b69-9b49-554e7063d885",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb29d4f5-ec08-459d-a723-e5bb052bbf51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9437c05d-773d-4423-a95f-e7ac6df93be6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "209e3b43-c4f7-4f8d-9b89-5f2949467aee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d11ed08f-521b-42bc-af09-7b60797b4f5e",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9183110e-64c6-4667-8fa6-24f19046a4ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ab8db54-a71e-40aa-8565-349e692dfed7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b588ab84-dcc9-4120-8257-3f6124a4af7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38f67854-70e7-4682-9a5a-0341d2bc3b18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9728e945-f461-4d4e-a0e7-7d44fdb822de",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37cc405a-e418-4f4c-becb-599f0d1fa226",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "694fe17c-9cc9-433a-9440-79cf4be3bda0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "def362de-a330-4511-bfc4-bfb1f32077ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5c4a527-ca4f-48fd-ae3b-d7b391ebc5ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ffa4e5e-a848-4f98-95c1-18f8ad611b0c",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "953e2ae0-ddcd-4a9b-907c-ff7df22f565e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6638beb0-beef-4aeb-863c-87bf98033735"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5aecda68-1709-480d-acc9-b0dca9ed3a91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da8f37ea-f0f6-4640-aade-fe6d5fdd27c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "786ecc17-804c-4f4a-b34c-5ac9f2f3aa1a",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b769466-6827-418a-9a11-6f4a442a34f9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "38070b39-9069-46cf-aec9-111d12f0e691"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f4d4004-8ab7-41be-825b-b24e55270a92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad8a5cef-a048-467f-a7dd-d97b5145a2d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24676b12-f1e2-4524-9ddb-c6e95cbdb04b",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4178f3ae-3a67-4ec1-a006-af4c9a8add0a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c7b57f29-ef76-4276-80c7-e4eb98c77a96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "489cd765-0faf-497f-abfd-704d5da570aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fae8df24-1a03-4288-bc31-80e09eb99970"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73e5cac4-5239-4e90-be72-f1eb7601e7d7",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85a3c310-2273-4e8c-8122-97da087c3685",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dfd2eeac-94c6-45c6-8032-8340d1486987"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf3a4365-5823-4f3a-88bb-a264fa8c5497",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c285434-5eaf-43d1-9f93-1e181b65ad2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cbf0fd3-c1b1-4816-8cd3-3338779b01e0",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6d0dada-49e8-412f-b0dd-09c768e410f6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "29443cff-e37a-48a0-a543-8e03ca8aa524"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8e14d3a-c712-4701-b6b1-11eb632b72c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61023205-b9ce-4f8d-a8d3-42cb681247d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a0edcff-1627-4378-9c0e-8b35ec237678",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "197532d2-9a70-4233-ad42-9a5e45d39b00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acc81aa2-9886-445a-aeeb-650fe0e6ef1c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "662965ad-e2e7-44b5-81cc-bae977ac94bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51a04b9c-b0b7-44ee-baaf-b349e515f0cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5637800f-b4e4-432e-8533-52c96889d10c",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a84dc95-086a-43c3-b77f-9116bd69b650",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ac3df2be-9aa0-4b88-9ef2-53b8eeb0d70c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "086c379e-da20-4d8b-a34d-c582b6ed347c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ae39e52-db6a-4045-85af-0563f3767475"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2931270c-78b7-4e5a-b65e-7d0dfb7361e5",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3802350-95f6-44b1-a2fd-fcb732a798f7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3b4bd00c-cde5-41a3-a6f7-86c23ce0220d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36140f83-42fb-4f95-b423-0395b837df78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f3472f3-fb26-4c8e-af83-191abe861214"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21aa93b5-2632-47da-ba8e-78c4a286fdd3",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "965582a1-be3f-4008-83c2-95b1b2dae08f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "78c9a776-d7bb-45c9-89e6-be901949245c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c9b1686-5ea2-477a-9bb3-4b2d3dbd47b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a62381c0-3dae-4146-a84f-08a501ce0ce9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5d35e58-d3ab-443c-9321-bbe3e8fe2b15",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3d95f2f-be11-4950-aeec-5e69b92d9df2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b51da8a-a765-4a6a-af71-37ed88a906b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43fe88bd-4c7a-40a4-aed6-66b02d0eeb13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "076ad06a-8aa8-4a45-8ab5-db3362470b34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17edd31c-f3d6-4eac-810e-6c22651882fc",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55205c98-f714-4989-b2f5-b597b4d877ae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0a1ddb2e-b34d-461b-bf01-eb55dba2c956"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8fd780e-7568-4bfc-a945-10591fee0cbc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb0dc060-425f-4e9a-9e00-539ed9b82f05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b513d757-105f-40c0-9db9-179bb8b69bca",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55a16f07-72a4-4935-b94d-b249584b5220",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6cb78ce0-e471-4ed5-9e6c-3444030ff4c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "066e26fe-b50d-44db-b822-b501de52f06f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee88e778-406f-491d-9d34-168c1ea982dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1fcfb0a-f848-4215-92b6-e63c0a83a03c",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e613623-0656-43d3-967d-63d5f671e935",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb30e361-6a5f-4327-86fe-47ce21671b1c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e2400ae-0348-4639-9b5c-efef6b013c86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd7dcbd4-9e9b-40ce-ab9a-e1788ee15cf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d97aac44-6b0f-4ee1-bf64-1452bb22baa4",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af8e8770-d8f3-40c1-a331-e3698374cfb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13a7bcdb-f77c-4842-9f4a-b0db8c8b8e85"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c95dc9a-4534-4557-9bc4-05667362e7cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48eb52e9-a65b-4afd-b8fb-a1191a1bca80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f97e3c0f-aeea-4c8a-a9e2-f8a37e7e4956",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9e53bac-0194-422f-a88e-bf531f3c4e82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fffea76e-916a-4628-bc49-cac245d97dda"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd92b3ba-be4b-479f-8543-0e5cf7cef37b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce289fd2-ecf2-4305-be91-c39bf5ea7872"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0855324-b7c5-451f-935c-9876f435521d",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b32cf5bd-9329-4eba-bbfb-91db935cb36a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4de9bc47-ac7b-4214-9737-27cff77d388e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94f22369-6cf8-42c3-b6b7-24d6b04a0959",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6961914a-ef97-418a-9aab-df924be5d06e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e01c84a3-182c-478b-a2b9-524f35dfed92",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44a11b60-ba7b-49e4-a5f4-3550023bd200",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74bc3513-f052-4001-b310-93d0beeb89aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19e3545b-eceb-4f23-b9f7-d9d09f48a077",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "febf2afd-eb3a-4124-b184-9520e8bcff39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e0ccb8e-b7da-47a4-935b-9ff43c3e9225",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa2e72c7-df73-409c-80a2-874ec412fc07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57ced746-bf83-4852-b431-00197b625f65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "950deb92-8945-4c03-aeed-d5de4e76a089",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00deb533-b5c9-4529-80b1-35bead4f95c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f84afb3-e361-4dbf-897e-c0b304049235",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd363675-bfdb-4c3d-bb95-c2a43e3ad5c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "370caf11-2cd6-405a-97ea-ae601f299d61"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80f5a937-27e7-4f5b-b3c5-e4b9eaa7d23a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b504a7cd-5c4a-4362-87ee-0484907ac163"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d67dd2c-58be-4f96-b9c7-12d8ecc43a0b",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "687173a0-98e4-4f71-b353-b7c449e9fa1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ffe11dd-5f59-49aa-952c-23b280a86e38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8c9d1b3-1c11-4a2e-8884-a26d6da6d422",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf0885d4-64ab-46a7-b6c3-8b2d4dcadc75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ea2e4e2-0c47-4574-ab4f-5bb9315b7703",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b8d99a5-4cbe-410d-aa09-39ee914c85ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9dbf842-01f5-4a54-a36f-64e41f93c261"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8738eab2-51f8-4ec2-b362-59095d16de98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b32c284-4783-4127-93f3-cef24a1ecafe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a173321-0bf5-4202-8ed9-88755207a5fd",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fd80c45-28eb-4a73-90cd-811f61eee5cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84cbeee1-db90-4545-83c4-aee5e09197d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33477300-5cfa-495b-973a-46cbf547246c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95441f86-9f05-4b0f-9d38-0fa2a9d3244a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fd9731c-c9d6-4012-944a-1828bc4b42b7",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fa2f04e-0764-4ed3-905f-9d37a86ef1ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "489b16b4-ce86-4c13-b375-04ff11e27071"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a14eecf2-c528-4e61-8742-b7f2f2cfbcb5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5b708fa-4e9a-4cd7-b92d-420816089d7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ff6a840-ed4b-41aa-b4fa-1baa47f68985",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1b3d951-f055-4efa-b364-66047346e289",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "227fbf9f-ceaa-4d7a-af6c-024146f75a6f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff5e41dc-02d8-44f8-a106-c5d986318f33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a659ae24-5e64-4a1a-b39a-c5f939210e99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b41573d5-fe71-48eb-b4f2-11435358b55b",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b67fca1-e565-4a86-85bd-3cd46e668a6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2d8e0fa-c172-4856-b3da-ca86e666aeb8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6f05dd0-c334-49a6-90d8-1aa90d657c24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a2ea8f9-d8e7-4eff-a93a-cbdf9f2a9822"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4f79030-c19c-4c36-9c35-86dbc053dacb",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1fa68d6-b9d5-40d8-bd36-f39db8158633",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9344b375-d9a4-413e-843a-0351a25b8d22"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1dfb243-c41e-4445-af8f-02d31f7b2083",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4d26ce5-284e-4edf-a8e7-b4b086f9aaa9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4eaa2dad-a611-47f3-95b5-34b0a1b59f19",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d588e09-e41a-4de0-b168-d0bb1fdc1240",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f3066d8-bbab-4c58-95a4-69c90d28fa83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b88eff7-7b02-4326-8850-2f4d3ce9763b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a23decc-db9c-4881-8fc0-1815b74fcc3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e4f1d04-bdfe-4942-984a-1164b13761fa",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7d2eebf-5474-46e0-89aa-252361d75cda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f5fbc06-a669-4b2c-9cd7-2836ac2e9dee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "442bef10-e99d-4d29-8cb1-28440641f0b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d7e7c6e-83b7-4001-8696-e43a815c5a23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2390fd76-2d9e-43c3-b58e-c30d295dc644",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd28e6fb-def6-40a7-853a-1c8d8821be54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d3728bf-3db0-4a3b-baac-821651e50bb4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f7d88eb-b591-4a66-80ec-b4d07bca1aac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3cfb60d-e564-48db-a97d-3572e3d0225e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d964b070-c52e-4689-8a0f-53c60eeb9996",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cb3a1c0-198f-4a4b-aa2b-80acb3317b80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bcdc01e-a4c7-4180-8b59-91fff5a4bd98"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc0bac18-eae5-43fd-a0f3-d726e728d7e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "104026d9-b945-4b3e-8bd4-ec7c25aa470e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9527cb86-9d8b-44d4-b921-0d86d2aac9d8",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5345661b-fd50-404a-ae48-eee2af2cf7af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "043574f7-8e2a-4dfb-8d61-70f144226247"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4ee0852-03a9-4d3e-8a0f-0ab9e2a93905",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6163cc3-9142-41a1-87d7-48b0e4ebd77b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45b8d066-f1cf-4f02-9a1a-a8953cd6926f",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5462dac2-299c-4e86-b6e4-3afc9d3294d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e966ad3-1bb9-410a-9cde-911a1829eb4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e610dac3-10ae-4957-b17d-2142a48123cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ed3024a-e2cd-46de-9071-03002e2d481d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee43b34b-479f-4f5a-938b-6620f818daa4",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0c55b78-4040-49bc-b8b0-5859b76494a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0db23fdc-89c8-455f-af5b-994d8e495909"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "210d8034-e07c-44be-908f-420d803fb161",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bcc6e526-ff54-47a4-97b8-a70d64132d0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9448546f-b20f-4ad3-b564-c80c699acdc4",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df8288a9-72b2-405d-8b01-93f3f381a8c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2dce72f-9894-4363-b218-b18a2199b2a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0a3c41e-7743-47c7-a2f5-3d80be20bccc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74cff7e1-07ab-46cf-89cc-abb0aa56989a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6e3fde6-5bfe-4533-a2ce-dbe78b54f7fb",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78b84835-cbce-4a3b-8783-47e5c058c0cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a880ec2-6db4-46b2-9507-47095d9cc88f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94cc1805-6e47-49c8-bddd-5b5fa67215cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc8ed56d-4dd0-468d-9e32-88d9a03fdd5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc1234ba-5ef7-4c48-adcd-e99fb16321bf",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7944fc86-7574-4817-b180-6f70e6581666",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39b76413-3c8f-4f97-8e74-5f26ec053767"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8851ea10-da20-4b06-a703-c6fe76b8b51a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e3232eb-6911-4d4a-9bff-be22b8a15f96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c73fd48e-fef0-4a7a-a2fb-f3dfc9b5633a",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcadd72e-0185-4243-8072-bb626bd71d13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3a769e1-2801-44af-8a65-b1db106256d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd8b5e80-5349-4c11-af00-4f20298ae88d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32f9522a-1934-4c83-bad7-e228070d4ebb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d486f3b-4268-4416-a689-f5b8ec1d9eb5",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "822fa033-aafd-4a67-9858-9cd102919b35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d2453f3-93e9-4180-a71e-a3e29f4d4ab6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2bf32af-c173-43ac-8bb4-233f3a8cd627",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb4e23f1-3e56-42dd-87cf-6e5a09297e5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33acc839-5383-426f-afe4-57e5a816a76f",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a0e6780-cb0d-4194-882f-0c55f92f7931",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0809067-6ee9-440f-b2af-3ff303d94006"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6f6a1fc-7fb6-4b12-9b2b-454461d1a279",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6d74f7a-4d3e-4ab2-ac24-8594f538b953"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6ffa8b0-9562-4130-9c03-c9283e681cc4",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b082dd4-0c16-47e1-b414-a42df80c83e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a03bb2d3-c341-4d61-aff3-9ccb7c3471e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b7f6bc1-51b8-4372-8d7a-64ce209003f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c77d847-b75c-4f6e-a996-d82fee6c7adc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "573d8d37-9524-484c-aa57-65f48b635642",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ec5b3e5-3b43-472c-99d4-bbced2396f33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4382e74a-d19e-4c0a-a3f8-24f9025362b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f728c5e6-7d5b-4f99-a9df-a2a830ff0e10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c76a7c1b-80f4-462c-b1db-f681050f0b5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5806a5bc-292b-4cd5-8b82-161d3e70522c",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7e08ecf-1941-4bc8-9cfd-bc32e5426693",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e3765c2-4516-4c48-9530-49f9d4734327"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47ff1124-73e2-4b6c-b414-8c4cf563128e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30f441e5-aef5-475a-a002-38d4376e7899"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a80b88a-c030-4559-ae65-9a57420d3aab",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4108b9e-b55c-4d87-94e9-215707d42114",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "10189a83-6b80-4bf4-924e-9ed983e336c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f313b2a-54da-46e9-8954-5f41b443c9f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05284bf2-29e5-4c71-9dfd-4ec996d899ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3026fe8a-3339-4d60-8fcb-e0e10832df8f",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bf46989-ca23-4200-8405-872bdcf25be1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4bba1039-43e4-4647-bb60-47d53d4a819f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d2fb44a-9d93-4f5c-9dd1-489c49b0ef5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bae5202-29e0-4f6b-a8cc-202a47f38f21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d673198f-a681-4365-93c1-bd392c004a9d",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "759ecdea-4115-494f-853d-e983eccf9bfa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2ed20072-a250-49b9-b5fb-44da262969fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0771860-011f-4d1d-9269-8eec71122c61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8921df66-d84b-41d0-8949-dd8d18261ca2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20d0673b-9542-4070-8aaa-bff2e64ec670",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99a1f9d1-52fb-4cf0-a343-b26a7807d7dc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "92fb2988-ed20-47a6-9b21-ec19786dd3e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "acc63ad3-d4cb-423b-bb6c-d3d8d169a8d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab977abf-8bbc-4cdc-b907-6ff283a67de5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bcf98fa-3218-4fee-a16e-b3b2fc42d121",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aadf3ca2-7065-46c2-8d97-66e44a3046b8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8cf3cae2-57b3-4834-b8be-1fd9b970a64b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "909520a4-5ffc-4a3b-9916-1988d65e1ba0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39591793-296b-46a3-89d8-e3024c1d1e1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c5b19c0-20f8-45d6-8055-2dccd4accc0a",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65d1ad30-9451-4a02-8f8f-dd3bf0b797b5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f3669f32-0fc2-4b91-aaf2-d81f610bd37a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "413ac5b8-2442-4d8e-b3c7-3c477bf32b15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fdc3254e-c3d2-4c54-82c0-52e551fe4b01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c7658fa-2498-4f45-a9fa-17dcf65c99c7",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bd05c52-877f-4c12-9a09-f60a25b39085",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c49f8d73-e15d-47be-9500-bd10a7539595"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e593dd46-0e7c-4dba-9ea2-acd3ebfd9f3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea357e3d-d64d-40c0-9392-0e81591f71bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8d15b59-8a92-4799-8dfd-622923d915f1",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6871eb6a-0c46-4a54-9373-67dad885c614",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e3ec6641-989e-43c1-bfda-90b432ac51f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5faac59f-4c09-4cf0-a627-50647d10741f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c8a34c0-8204-4238-8c06-e5b8e8e898ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a906f68-cbdd-45e8-9f0d-ad5f6af4e39d",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "055957ca-f97f-4b79-93b7-3d6f1c03582d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "30dba553-cec3-4402-932a-d3d78d61b40f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c63819f-2161-4198-9f0f-a064e8e7ef73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9a09096-bb4b-4018-a5fe-01aaf6b3972a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12b68177-326a-49b3-9760-208bae7fb1c4",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80494742-9c47-45ea-a7d4-4eea42e54e71",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c42f3d42-9fba-4847-8d40-7e77f4b4fbb8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e968f1bb-6f39-4f0d-bb89-2b30c009443d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bb60025-d08b-45f8-b8b1-dc9b39798a9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e4525fb-4bb7-4cf9-aeb8-0f58f511c971",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc9cd8da-b154-4d5f-a00f-bb8f9a2f7fac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "787c0d46-c2f1-4a7c-b277-174b000d9ebe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "816382fc-6986-484d-9ff8-92a1e2cbe533",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73b4160b-e324-48be-bb02-04a85b32411c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa01e4e8-490a-47c6-8fd1-c84ed4a80cac",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79040df2-81dd-4236-b602-ab1bef15ae10",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "483ba2c2-d420-44ed-857f-650535f75a46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0afe626-67d5-4cbd-b479-27f810233af1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "682b5133-fdd7-4d04-a1f6-222e9d89be58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d64537d7-b75e-4e58-9291-2313ec4e26f4",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3541b5f7-d502-422d-9370-17d7638ed087",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "457d8165-c9b0-4979-8a51-351c9a6b5266"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c11c800-6367-42bc-990d-76ef27f1bb4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "151eceb1-f0df-4fda-b4a9-bca44cfd9f5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af814096-9e70-4fec-b546-02957a50d225",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86954dba-2ebb-44e3-981a-91a4f028b6fb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ea85854c-cd61-489b-8297-5f04097710db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b33645ab-2efa-487d-95ef-57baeadf6715",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c08f8e37-f8b3-49e8-b925-66adafd650d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f979dcc-3382-4bba-9135-07ac0d27b291",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb050059-709c-4779-a39e-de448c56390a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3c3ac298-434e-4a90-bbda-e9e12a8247c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83952efa-b525-473d-b2b9-9e570f8d6ab3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "596733cf-b604-4b3b-a4d7-ecfa8ac0eb9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d2b20fa-4253-4ce1-bccd-bc2406d926e3",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0a42ea8-fa7e-43a4-be57-cae6a4b13e6e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "593cdde7-ec4f-4652-9f7f-64777c6ce93f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f46fa9a6-52e3-4d4f-8f57-6f3e4bc2133b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "434bfe3a-8ae0-4be1-9073-5a3e4c00c200"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ed69f0d-b783-4325-87dc-9be3ffacd029",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c229397e-ba81-49e4-9e8c-71cbf5659805",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c8de931c-f383-4bb9-a8a4-0c42de0bc4eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50ee3bb2-50b1-4122-a59a-e3cc91b87fc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69d01f29-24d4-4882-9e0e-9bbefb12dc27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79efcabb-c368-435c-8e78-4c7664c51bb6",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18fde06e-28b0-4a4c-ad9c-f49aa8558395",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8ba6d6bd-7e80-44b1-ae17-e082a82fe14b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f739ebe-4e61-4164-8dec-2478d60074ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d484ea9-22b1-4dd6-8811-d4f55a11353a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3670eaa-91b1-47e0-90a2-c16125512735",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91029173-cbf1-49d2-9532-09b41d2045d1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "58a3fece-4f4a-42f5-a7e2-cb043dac70e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0366159-3cf1-4809-b40c-e35f9ee15e8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee96e40a-c881-40fd-be6c-a19f87ee6519"
                        }
                      }
                    ]
                  },
                  {
                    "id": "763557f9-e042-4e8a-a340-315e8d06bf9e",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18d58866-e790-4b42-9d08-a75ad08aad8b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "05ee90ac-099e-426c-9da0-cb8a50f7c72f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce9e0c05-f916-40c5-b64b-bf39fa06df28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7ec75b1-88ab-455f-905a-a1fe76ef7941"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5791776d-33cf-4d6f-9ca2-38e67a950a06",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4df7ea20-bf93-455e-9616-343f85bae27c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c4c8f723-7f0f-46d8-94de-e4dd2e1540a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "acfe4942-c67b-4112-b520-1acef06566f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92335280-a25b-4963-9ebc-8f247f146183"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b1bafe4-4c38-4739-9de2-9e8ed43af0e1",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb87deb3-2eb2-42b1-947f-aea326b6f6d9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b78d20e8-c1a8-4fa2-934c-fdc12ecca1ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04404c77-2aaa-455a-ac37-baaee770dba1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4076560f-003e-436a-93d5-a4308c0dc528"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c1cd415-c324-467d-a9d4-85ab56b47ae6",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb05fc65-db4a-4e11-a1f8-52b25af6866c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "684d6ada-bde6-4a45-b843-e44ac83c4323"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "adb28f1c-f215-4a9a-80ef-a0988f939ed8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e89323f3-fb04-4527-8b98-826b698f8f6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc40d2a1-41e0-44cf-84f7-fda451837196",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cedbc85f-73c0-4a50-b7f7-b9094d00035d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "85e311c5-fe79-4ceb-a4e5-a69e1e2dd0c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c68919d4-5d42-40b0-a78a-b4864ffadfb2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1f32019-4122-4373-a709-41e39cac75e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6f6867c-b116-4f2c-bcaf-3be0db065b88",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b53715c-86f1-4ecc-8836-051fc624ec64",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "45d65c62-b292-46bc-a109-a69c4acec9e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96a62d4d-39a9-4b46-b610-a1063cc2914c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6affbf53-334c-4917-a3a9-022a1019bcb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "376e258c-f180-4529-9d7f-b5b484ae49e4",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a56c8f4-84e5-4e97-b811-d87f5400cadc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6db6762d-85b7-4594-abe7-b2bf0b597384"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7436417-53df-42c0-9f96-ab82a656c433",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8d3f28c-390e-4551-811b-dc4a4a69abf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a902a7a-065b-4cc1-adcf-bd5d83ff6907",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19a21f6d-f4a0-4f4a-9930-4d20cb218aac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "85ab7b26-fd68-4da9-99a4-597e3d55dfb0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e68dca7e-53ad-40ec-93d9-dd76dffb4b74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac906f93-dff1-42f8-a36a-bdf8757ad54b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6430180-d0d4-4c0c-bc5f-b4e1833ddbea",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d8dc3bb-c76d-48a1-b4e9-500dc3bd44a8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "07c13d96-c096-4e21-84f0-5c3fa2b05669"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af73cea5-edb6-4759-a718-f36714547aad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef5dfd6a-4d29-4401-82f6-648100220fb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84073e51-3d77-4ab4-9805-7f4bb5683f9e",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fbea55a-2e37-44cb-9525-cd826e28e931",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b14642b-13cb-4d33-ac1e-00b43a7e7f0a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "271257d6-01cd-4771-8091-23ab4a368649",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d727de14-7a79-4431-bb88-dc0536aee048"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e445c740-95a3-4394-bd6d-31f6987c401d",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a860eddc-6ad8-4a52-82f2-f60dc4a33b6b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "02e08163-f41f-43ab-9ade-f386699a8d14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "843034c8-7bd8-4071-8aab-500300feb523",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76c542c7-25b4-4392-9ac1-f9abb5d2c378"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d205de5-f860-4219-8535-a6172a340151",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86f03ccf-d93e-4d00-b789-80ff720aa8fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9223f233-f919-44a6-85aa-f61a41181911"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3445687e-5859-44ae-be16-dcd2ae905e93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ffe61f3-6e15-49a5-bf71-42254f6e9154"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6760f28a-451a-47c2-9422-0805bc315fe7",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0303d228-c563-48b7-ac5e-314621bc3a75",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "29aada6f-f554-448c-a7ac-455b1ecae5ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac970a32-7a7f-4f62-8853-869a920fe4d7",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8eefe97-c46e-48e4-9fc5-56b6e2ea188a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32e3d8bf-9c3d-4159-8477-9f964fbd6db8",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c24ab81-b320-44bb-a4cf-317dd763dffe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0aad5137-eb3e-43c5-8675-7b6a3b44e8d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "151d7fa7-6a9f-4cf9-a751-4bfcbe814c5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7c06d2f-ba5c-49e8-a761-8d004feea910"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d26c1213-4281-47fd-8259-2e7f0d682b7c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bb908e04-5f64-4540-9105-7e633f21de17"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "01a0795f-61b9-48bd-b96f-bcf67063f232",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5057ec82-6def-46f4-b691-877919141e15"
                    }
                  }
                ]
              },
              {
                "id": "620fbe3f-36cb-4ee2-9c26-c7ebe35e6e39",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "fa917c8d-1d10-4322-b081-1a170c3c3d50",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b4b2f4f-842b-462b-b594-566189a855fa",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "c1488491-8fdf-4b2c-8be2-3fb50cae8ff5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3face83d-393f-4fab-b7cc-ed80debfb46c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e0ffde07-1dfa-4454-9868-520a5c9a3e2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d109493b-bb79-4d1f-aa00-ecd1933f1cfa",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92f01095-5976-4f69-97fc-a42a76dd0ace",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "f8bbea44-c3d4-4c39-a36e-7b718daa8378"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "169ab5ce-5d79-49a1-ba3d-5e3f2943c1b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a06d5cf6-d6b3-43ec-b23c-09f999739823"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "088036fa-d514-4d9f-bc1a-17d61dbcba7c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "796509ac-901d-4c52-a904-d142275e0d93"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9eabdcd3-7516-4cb3-817c-ef66a3e740bd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d035e7ea-f5bb-4f86-9570-f193960e034c"
                    }
                  }
                ]
              },
              {
                "id": "b58431c3-e7a6-46e4-999a-9ed81d97b728",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "cac41c8b-7575-404a-8046-1fb14d1054b6",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d208772-f419-4b1e-bedb-2f7c8e7aec5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "ffdc40d8-0fdd-444a-867c-fc980d7bdff6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fecaf100-868a-42c9-9a65-5a3a0b265784",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e491448-5445-4d1b-9f07-85aee2923f08"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "4a764b0e-59cb-445a-b1df-8399b7e8558e",
            "name": "Positive Testing",
            "item": [
              {
                "id": "121ba9c9-a26f-478d-8b2e-758d63f975e4",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2f942d8b-5ead-4a12-80f8-143a1ca6e5a6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "3bad27e5-4144-4119-8596-3a9de1c105c1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "56566caf-cf72-4ad1-ba31-082a10587901",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9695da29-0b5e-4e9a-a230-cabf298f4698"
                    }
                  }
                ]
              },
              {
                "id": "50f5260d-a0ad-4431-8b0b-61facef0e807",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "875cf719-971d-45c4-abeb-4b574e3cc680",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "63d5f835-502d-4587-84c3-fbf4f07ad3a6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8b5c45a1-7ad6-47d9-af17-238cec06a99a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1b701f00-c4c1-4525-b6f3-8f6bfc9c0b3c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d0b09f9f-59a0-4aed-b3f3-2d3d4affaccc",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "b5503135-3cab-4cf8-be4c-1f6e3ca65adf"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2569e018-83fd-4877-9aec-0ad2424a2daf",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "05e2190d-940c-4dea-b6e6-a481e1ec87ad"
            }
          }
        ]
      },
      {
        "id": "fa3ea5cc-50ed-43a5-b0a9-9f556c53a9d7",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "45d4978b-fad1-4ccc-a4c9-9207c5877ea2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "02b1b024-d191-4032-9c31-042e756436af",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7bbde2b8-9f3a-4fc7-939d-c762596224ad",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f258966-416c-475f-b603-16dd5027129b",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "ae92eca5-adba-4220-8308-f0b78e59eacc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63cd8cea-aa96-4e74-9d80-dbdd9b26f358",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "db649c0b-d788-403b-adcd-38e03eca6fda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbf70f36-4964-46fe-8637-c2a2129b0b96",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0b493c8-b592-4e6a-acf5-48fe416b5c81",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "baa9c8e9-2326-41f8-aab2-8774f232d95d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fb48be5-e3cb-454c-9349-418e4ed5225b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cd20d0ed-e01e-403c-a93f-6f726247b0b8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c241a570-ebac-4643-9139-d35e9ad69705",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "aae82999-881c-47d0-acdf-c294d5684bb3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "eaf5b16e-e67c-404e-9f78-aba1c55e74dc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "31f4295c-da3a-4f47-8616-56de9d2ce975"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b3d3be82-279a-48ad-8328-bcad33d36189",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "f138bea0-b741-4b5d-80c3-577b623b9dce"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3f465892-b44d-49d0-810d-957521940aa6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bb36908b-b30b-477d-a8f2-7424bd14bdd6"
            }
          }
        ]
      },
      {
        "id": "a7bb8980-cecc-4cdb-82d7-e7649e1b3526",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "d580c321-a882-464a-81ed-225478266266",
            "name": "Negative Testing",
            "item": [
              {
                "id": "50c51c4e-5a70-4975-8b6e-4e5703d826db",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2c51f4af-50ae-43aa-b45b-29fe98cc8f9e",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6abc6753-285e-4874-989e-a1ce68a50c77",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1797efa6-2ae4-4705-b9b3-c6070148e117"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccd2832e-edb4-4846-86cb-ae8f79f46bd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8868b763-bb0c-4f25-a380-b22c196f13fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54833598-9ab7-4422-b324-ec63a045a1df",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a554cd60-2167-46ac-8491-43301e60aa58",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "366d1b75-ab4b-41db-80db-e26ee5cc69a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef902175-984c-4a8c-9f43-b60d9dceb8cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "697c36c1-a0ef-4efe-a063-6d770a214bcc"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c6fd3b97-7c5a-4a69-b98e-f4ab16e3096b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "65229fe0-76f0-4008-a814-a6c92579c52a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6880a8b9-ffe9-40b7-af23-b1b5074612bd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1f0e9115-d023-44a9-9040-bc125035445a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b1b4d951-714f-46d2-8079-ce5a018a1eff",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "b2bb68c0-77c6-4804-adad-5692b53cddba"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "efa5c52e-6505-43af-8956-2988ff6883ce",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bdc119fe-d641-43a1-a8c7-27672ba75634"
            }
          }
        ]
      },
      {
        "id": "27fbb294-03d4-424a-8453-8b0fa755158d",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "d9e82d0f-dd8c-4c08-b73e-b50f4ae06f58",
            "name": "Negative Testing",
            "item": [
              {
                "id": "351cb3c8-7a2c-47d0-956d-0e790da654da",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ad8ab85d-057a-406e-89c5-f101253e0cdf",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ebc2755-e488-4f95-b6e9-841ebade1206",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "59e1a417-21eb-4efc-a967-a024a7217f9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f53241e-01e0-43fd-b0e9-42d5aad1ab0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c872af17-a354-4803-86f7-97a42aeb980b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f413cb6-32ed-45d2-898b-da7e318f27cf",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fae9314c-0344-4d61-a94f-6a698a4feac4",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "ca821feb-d8e3-42b0-8104-480520c76ff6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6ce4e07-0972-411f-b709-44b543bde992",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "89468b99-3816-453a-8815-41a672278533"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f81b909f-2793-40b1-8d60-1af2ebd44872",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5f704028-9189-41c7-b2f4-653a18e655d1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "345709e4-6110-4c11-9ba1-3417080e55e8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "87ab23bc-4a75-4705-aa17-065e6cb22e7a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e9e8b32e-2b5f-40dc-be39-385265baece2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "0d4810da-9823-4397-8e18-6500abc204a0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "480489eb-55ca-4c32-b9c4-73cf49db908d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "29d5c65c-c858-4e48-b0bc-4cd92040a9cf"
            }
          }
        ]
      },
      {
        "id": "adaf3689-c9a6-476f-b1f4-9235cd7df130",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6edbe66b-195d-4719-8474-9b3fc07821a9",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "04832a56-a8f3-4d95-ac7b-c8568eb494a3",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "120a7f75-245d-4bf3-9fe9-4aa610853589",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "91b4133e-32da-48e7-b9d7-4c5564848f50",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "eb7bf9d8-6ed2-4de4-ae0b-18f8bf5659fb",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1901,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 259,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 511,
        "pending": 0,
        "failed": 44
      },
      "testScripts": {
        "total": 955,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 946,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 343.73745173745164,
      "responseMin": 7,
      "responseMax": 7056,
      "responseSd": 893.7444292489785,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1677890391674,
      "completed": 1677890494384
    },
    "executions": [
      {
        "id": "6cffad81-0c13-481f-8823-28fd14e34852",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "fcae13d5-26c2-45f8-9d9f-7fef5ecf6ba2",
          "httpRequestId": "0323ccb7-33c1-4195-8925-47d6fb85682f"
        },
        "item": {
          "id": "6cffad81-0c13-481f-8823-28fd14e34852",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "8d0b95fd-86f3-458f-a557-8145d7f023ef",
          "status": "OK",
          "code": 200,
          "responseTime": 77,
          "responseSize": 0
        }
      },
      {
        "id": "a7d5f53a-a993-4bfa-a806-a8a07c42fb01",
        "cursor": {
          "ref": "39732fe5-0494-4dc4-a13b-79aac06ac3c3",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "ea3491c3-be74-45e7-939e-330043844f29"
        },
        "item": {
          "id": "a7d5f53a-a993-4bfa-a806-a8a07c42fb01",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "65bee453-11da-4dd3-b2c6-6c2649a6d6ec",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 0
        }
      },
      {
        "id": "51fb3230-aeb9-4909-a224-7f8e417d5ed2",
        "cursor": {
          "ref": "d949d102-1e2d-4592-a392-9a7d353f08c1",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "7b3d2423-f533-4f45-a513-3d75c105955f"
        },
        "item": {
          "id": "51fb3230-aeb9-4909-a224-7f8e417d5ed2",
          "name": "did_json"
        },
        "response": {
          "id": "df10b52a-4d77-4538-96cf-845e1bfca853",
          "status": "OK",
          "code": 200,
          "responseTime": 472,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0428586-c4e2-49da-851a-ad947e0c90e2",
        "cursor": {
          "ref": "1841d284-3d4f-4ae1-b7fc-915c5682009c",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "6a3621e9-fa8e-4ee7-9703-fa31323f0177"
        },
        "item": {
          "id": "e0428586-c4e2-49da-851a-ad947e0c90e2",
          "name": "did:invalid"
        },
        "response": {
          "id": "ec0c9436-8fa1-4f3a-9c57-de2f6cc5f614",
          "status": "Not Found",
          "code": 404,
          "responseTime": 525,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "e0428586-c4e2-49da-851a-ad947e0c90e2",
        "cursor": {
          "ref": "1841d284-3d4f-4ae1-b7fc-915c5682009c",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "6a3621e9-fa8e-4ee7-9703-fa31323f0177"
        },
        "item": {
          "id": "e0428586-c4e2-49da-851a-ad947e0c90e2",
          "name": "did:invalid"
        },
        "response": {
          "id": "ec0c9436-8fa1-4f3a-9c57-de2f6cc5f614",
          "status": "Not Found",
          "code": 404,
          "responseTime": 525,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "eed01c22-3526-439d-aea4-f7f3e846f1a2",
        "cursor": {
          "ref": "d13d25cf-7ba8-452b-b91e-c933b38243bf",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "b11dfd95-53f1-46bc-8b43-7e8c6df1d775"
        },
        "item": {
          "id": "eed01c22-3526-439d-aea4-f7f3e846f1a2",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "4458ea93-911e-450c-be06-7ef7fbaaa25f",
          "status": "Not Found",
          "code": 404,
          "responseTime": 65,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fac399d7-fd75-47ee-97b7-808ea87277a9",
        "cursor": {
          "ref": "1e609cd7-3ee8-4ac7-ac3e-fb35f4f3f659",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "bae8b5a7-2e0d-4d18-a87f-4b43c497f533"
        },
        "item": {
          "id": "fac399d7-fd75-47ee-97b7-808ea87277a9",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "bbd3aee1-2c3b-4630-9053-3ddf388a592e",
          "status": "Not Found",
          "code": 404,
          "responseTime": 67,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e89e5496-031d-4677-800f-ed43ff87ceea",
        "cursor": {
          "ref": "b3b79653-ae62-4dfd-9d31-03ee8d4a20e1",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "685a6445-21c5-488d-a68b-901c09ce07b6"
        },
        "item": {
          "id": "e89e5496-031d-4677-800f-ed43ff87ceea",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "7db7b2ab-0d52-4904-8613-c0c9e3e7cf5d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 113,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "8eb32c87-9596-4d1d-b574-657c36cdb726",
        "cursor": {
          "ref": "f38622e1-6b52-447a-b1ed-ef89ecdeab2a",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "43a9e2ec-7547-429a-8adc-bd3c27697792"
        },
        "item": {
          "id": "8eb32c87-9596-4d1d-b574-657c36cdb726",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "732e388d-84f4-4d92-946c-f5ba8829aa82",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "8eb32c87-9596-4d1d-b574-657c36cdb726",
        "cursor": {
          "ref": "f38622e1-6b52-447a-b1ed-ef89ecdeab2a",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "43a9e2ec-7547-429a-8adc-bd3c27697792"
        },
        "item": {
          "id": "8eb32c87-9596-4d1d-b574-657c36cdb726",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "732e388d-84f4-4d92-946c-f5ba8829aa82",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "8ba42cfd-5a3b-47d5-9fc9-c11c821d1429",
        "cursor": {
          "ref": "29ca0d53-54c1-47e2-8f89-029e697ea3af",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "f8e4a583-c7ca-45e5-b43d-f86cdc20090b"
        },
        "item": {
          "id": "8ba42cfd-5a3b-47d5-9fc9-c11c821d1429",
          "name": "identifiers"
        },
        "response": {
          "id": "2a3f1bbd-85c2-4dfa-af49-ea6da9c7b293",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a059ef0e-b1e7-44b3-9b57-a61064b67c09",
        "cursor": {
          "ref": "ddb07fb1-1aa9-40a1-8b63-8f12815a901c",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "af77e9b8-952b-4b37-8e1b-a0f911cbe684"
        },
        "item": {
          "id": "a059ef0e-b1e7-44b3-9b57-a61064b67c09",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "4033cd66-c61c-4764-a05b-41bfab1e5209",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a059ef0e-b1e7-44b3-9b57-a61064b67c09",
        "cursor": {
          "ref": "ddb07fb1-1aa9-40a1-8b63-8f12815a901c",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "af77e9b8-952b-4b37-8e1b-a0f911cbe684"
        },
        "item": {
          "id": "a059ef0e-b1e7-44b3-9b57-a61064b67c09",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "4033cd66-c61c-4764-a05b-41bfab1e5209",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89560b88-f7ea-47cd-976d-38cb9c024e2b",
        "cursor": {
          "ref": "e6d3ae84-d7c3-4ef6-9779-ac29641c4a53",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "96f3affa-f76e-4161-a4a4-3267a1c1109b"
        },
        "item": {
          "id": "89560b88-f7ea-47cd-976d-38cb9c024e2b",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "c351f3a2-6886-4608-8f12-10acbe992d8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1414dfbd-9513-4f7a-87e6-ec4d6064399e",
        "cursor": {
          "ref": "517b02b1-4b50-4517-b145-579fcc6416f5",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "afa93ea0-83f4-43f7-af27-ef2999b3be30"
        },
        "item": {
          "id": "1414dfbd-9513-4f7a-87e6-ec4d6064399e",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "30b0b003-4b5c-4463-8e42-cd3db0506423",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25e7ebe1-20bb-4fbd-b1b4-cd8e415e0ffa",
        "cursor": {
          "ref": "a7a0fac3-99bf-460d-a66d-f468e8ee2548",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "17f66d0b-6a38-4326-890a-ecb00e010d14"
        },
        "item": {
          "id": "25e7ebe1-20bb-4fbd-b1b4-cd8e415e0ffa",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "ea0d0d38-8427-4c84-8fb4-d178c1da8262",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fab00a0-b035-44fb-ab09-46be613e5822",
        "cursor": {
          "ref": "ad177396-880f-421b-bdeb-a8709c972472",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "4739b191-fabd-4983-9188-451ff6cb2b78"
        },
        "item": {
          "id": "6fab00a0-b035-44fb-ab09-46be613e5822",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "5b0cbf02-fe6d-4759-81ab-fbf10468cad3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e6ab72f-8319-437f-977e-27250225146b",
        "cursor": {
          "ref": "efa81b21-529f-41e9-bba9-f17f53610910",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "69edd5e6-1ea5-4a27-937a-d448c4dc007d"
        },
        "item": {
          "id": "9e6ab72f-8319-437f-977e-27250225146b",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "e1718deb-0f8f-4501-a8c4-680416db9c37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27341dae-be49-485f-89b4-cc528042fba3",
        "cursor": {
          "ref": "87fed378-7583-4350-a952-8fa310bea032",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "4c3157f4-3732-49d3-8a1d-f118e372b38c"
        },
        "item": {
          "id": "27341dae-be49-485f-89b4-cc528042fba3",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "9d3ccae2-2a2d-45c9-83ef-86ef5cbd070d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6601338e-0c69-4531-b15a-4575cf797099",
        "cursor": {
          "ref": "fb216cc3-9ae7-4f36-a21f-c72b91420640",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "1a4b6aaa-41ef-46da-b38e-7048e1560eed"
        },
        "item": {
          "id": "6601338e-0c69-4531-b15a-4575cf797099",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "ed8e6a5c-0bf3-486a-a4f9-dd7ad9a72a44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 119,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b86ba744-7018-4216-9ccf-5d909819a9ed",
        "cursor": {
          "ref": "06c716e9-ea0b-4cf9-b98e-4f6ef4fd40d3",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "fac563f2-66dd-46f1-ab29-413d8d075c10"
        },
        "item": {
          "id": "b86ba744-7018-4216-9ccf-5d909819a9ed",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "3fa4cb40-b9ec-405a-be1d-d855105379fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d2ba22b-d3e5-45a8-954f-bb7e28d95c63",
        "cursor": {
          "ref": "086fb830-203f-45b1-9c79-55e845916bc1",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "6d36eea6-732a-47ed-9a0d-7e65c1c7382b"
        },
        "item": {
          "id": "2d2ba22b-d3e5-45a8-954f-bb7e28d95c63",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "ae2091f5-3640-4280-b0d1-d45f3abcc586",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd0b8f58-2346-44a0-9e96-ab636aaaba5b",
        "cursor": {
          "ref": "dfa8a046-92e4-44e6-8ac2-9de2fa082f9d",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "4b9c7c7a-bd1e-4bd2-8d62-c9a1cb5ea462"
        },
        "item": {
          "id": "bd0b8f58-2346-44a0-9e96-ab636aaaba5b",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "c0391854-3ceb-4df5-a641-c077b175870c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b033868-8b6f-4d99-b333-9f423ce66016",
        "cursor": {
          "ref": "26c1341c-95f7-4c96-a9a7-26194b69f606",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "833549bd-0780-4d0f-a7b5-85efb99e74c4"
        },
        "item": {
          "id": "2b033868-8b6f-4d99-b333-9f423ce66016",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "d8f30da1-77a2-4963-a056-36069c83c7aa",
          "status": "Created",
          "code": 201,
          "responseTime": 1124,
          "responseSize": 996
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "adf73984-1c3f-4bfd-aa5a-d29619c1e72c",
        "cursor": {
          "ref": "d44681b7-4161-4b08-8416-2e66567c41cb",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "966111d2-defc-4c77-bc5e-3c1bdfd4bbbe"
        },
        "item": {
          "id": "adf73984-1c3f-4bfd-aa5a-d29619c1e72c",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "1112ef10-6712-40ae-8878-07e103bdf33d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b914e81-7c20-4f13-8d86-c9380b77d124",
        "cursor": {
          "ref": "4a47a9d1-6bfb-45ba-8b39-e001e34360ee",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "6bdd6290-b7a1-4f36-9afb-0beb2fac5188"
        },
        "item": {
          "id": "8b914e81-7c20-4f13-8d86-c9380b77d124",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "a3a5d066-c3ad-4e22-834f-f953a4814309",
          "status": "Created",
          "code": 201,
          "responseTime": 7056,
          "responseSize": 972
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "d15190f7-74c0-43ad-be70-cbe24f96552b",
        "cursor": {
          "ref": "4d619737-e138-4afb-ae65-1e90e65a4bd7",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "97d41c10-c6bb-4704-8f54-61663a7496ae"
        },
        "item": {
          "id": "d15190f7-74c0-43ad-be70-cbe24f96552b",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "f0566380-98b2-4741-aa83-fdd39496ba85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71857345-6ac5-47e9-b28b-5903e434248f",
        "cursor": {
          "ref": "b6242ba4-987e-43c6-a1c9-55ea200d2837",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "4afc3643-0562-4168-8842-65c842f5f91f"
        },
        "item": {
          "id": "71857345-6ac5-47e9-b28b-5903e434248f",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "5c187c25-fad5-4348-965b-ed09155deeba",
          "status": "Created",
          "code": 201,
          "responseTime": 3325,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "2f6bde34-cc72-4482-ae2e-f5cf5913ccc9",
        "cursor": {
          "ref": "00002656-641d-4dfb-aa55-364046b10517",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "aeb6925a-5da3-487a-9a60-3e251e791063"
        },
        "item": {
          "id": "2f6bde34-cc72-4482-ae2e-f5cf5913ccc9",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "8ae41fb4-a744-4453-9398-d202c7b26755",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54d0b5af-4ce3-4178-9b50-2303680975cf",
        "cursor": {
          "ref": "814d6e57-41f7-48ce-9925-79f6e2a9cf1a",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "b481d715-8013-45e5-8272-78d041fb95b9"
        },
        "item": {
          "id": "54d0b5af-4ce3-4178-9b50-2303680975cf",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "bfe1d0e8-f2da-4634-a98f-4741e612ddff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 193,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77c06099-a124-45c4-ac59-65e377f10f6b",
        "cursor": {
          "ref": "77ac327b-5f82-4aaf-8ab0-0ff85c390bf9",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "b5a2a847-0dd7-4883-98a8-17113485a8b9"
        },
        "item": {
          "id": "77c06099-a124-45c4-ac59-65e377f10f6b",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "aab2d8a8-e963-4b9a-a4c3-60e152b47e3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77e086ce-f6a0-4b01-9bbf-4c9460899b41",
        "cursor": {
          "ref": "f9cf3ebf-01f9-4b89-8b8b-4316d67526b8",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "06354971-84bd-4ad2-8a96-df2065b39334"
        },
        "item": {
          "id": "77e086ce-f6a0-4b01-9bbf-4c9460899b41",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "c6c0e784-ca0d-4ac6-b2f3-517b4c2a2f93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b94b6ebc-f688-4f6a-b1e6-9f522e04296f",
        "cursor": {
          "ref": "b5ee7f71-6340-43f6-b27f-83d1bf5e16fd",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "a221ca45-c484-4534-9329-51f771b6710c"
        },
        "item": {
          "id": "b94b6ebc-f688-4f6a-b1e6-9f522e04296f",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "599e15f0-5c2a-424b-9609-bd884f20426c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b629104-1546-42ce-96e8-c9dd8f509248",
        "cursor": {
          "ref": "a86bc802-7d9c-41a4-965d-a38001d1824f",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "9a77523e-201f-445e-a4c0-51eb071a4c28"
        },
        "item": {
          "id": "9b629104-1546-42ce-96e8-c9dd8f509248",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "d47d7a9c-e1d5-4972-beba-737ea5109a59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e0336ef-7857-4710-ae13-602b7d62d6f9",
        "cursor": {
          "ref": "b8bc603f-0225-448f-992a-744bba23e7e0",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "e4150b59-e5ba-43fd-b230-e26164016b8f"
        },
        "item": {
          "id": "6e0336ef-7857-4710-ae13-602b7d62d6f9",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "05aaa596-ecb7-47b9-b736-515033ec5208",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "250ca82f-8825-43fb-8b31-8384690f5e42",
        "cursor": {
          "ref": "91a7a951-9792-45dd-8600-00364cc18872",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "7198a4ef-0ffa-44f7-8785-6fa243c177c7"
        },
        "item": {
          "id": "250ca82f-8825-43fb-8b31-8384690f5e42",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "1f23e519-1800-4d29-b647-79f0b4b4e3c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f1fdc45-2ec8-4f1b-9181-f8ee1f50c967",
        "cursor": {
          "ref": "e6b0e385-14b6-4c72-b982-f4804ed818d5",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "420a2235-6f1b-42e5-9166-b215cd41fb83"
        },
        "item": {
          "id": "1f1fdc45-2ec8-4f1b-9181-f8ee1f50c967",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "1f7a0d18-9766-4b3f-97d8-b1180ddce05c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "848ec9db-1b17-4517-ac5c-3c315d598b53",
        "cursor": {
          "ref": "6353bd80-d1c1-4855-9d5a-30a191a26042",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "cd9e88fd-65ac-4c04-9dfd-ef69a44465f9"
        },
        "item": {
          "id": "848ec9db-1b17-4517-ac5c-3c315d598b53",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "9442b1f9-4f57-4316-9abc-79a58ae6e2d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb5877e4-5375-4671-9c44-8f3666201378",
        "cursor": {
          "ref": "bb5914f9-2c2a-49fa-a9fc-b29bf6d67d65",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "cfaf3f0b-f0c6-4e76-8f9f-661b1f10c999"
        },
        "item": {
          "id": "cb5877e4-5375-4671-9c44-8f3666201378",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "7fae30eb-8e02-437c-84c0-7a31d3a8d047",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ded023bf-4750-4922-baee-3fa04022185c",
        "cursor": {
          "ref": "b46644fd-e06d-49c0-90a9-d4ca63ee5fc3",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "594a8a94-94f2-4327-90ec-df60f569d008"
        },
        "item": {
          "id": "ded023bf-4750-4922-baee-3fa04022185c",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "10478139-c174-42cc-a6f7-d3d63ed50539",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "749c7daf-981c-44e6-beee-51031143029e",
        "cursor": {
          "ref": "fb3130a7-5550-4df9-bead-87e9c2e39604",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "5782ff93-6f66-4cf6-bf69-e9bacd87a6df"
        },
        "item": {
          "id": "749c7daf-981c-44e6-beee-51031143029e",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "512b16bc-23e2-4ca4-86c0-70c9568c06e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c24e1368-7381-4472-a31e-229c247bc3f6",
        "cursor": {
          "ref": "db05a831-9d37-4da9-b464-458169f78dd9",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "4468a736-84d1-4b78-9f54-e32c4227aebf"
        },
        "item": {
          "id": "c24e1368-7381-4472-a31e-229c247bc3f6",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "0d3a2f44-6a86-4eab-9423-005f79469868",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ca4b393-62fd-4559-8d4f-614ea22af550",
        "cursor": {
          "ref": "21a25752-3263-4613-9c86-bf2576617d8d",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "6fe467f1-e347-471c-a4fc-dc410218e272"
        },
        "item": {
          "id": "0ca4b393-62fd-4559-8d4f-614ea22af550",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "1868cdbe-2e86-4f65-9234-34eafcafd222",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0899e9f-37af-4928-8fee-e745c9793097",
        "cursor": {
          "ref": "5ae6c8e1-ceee-40b4-89cd-22eedf58e59b",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "18f2191d-20f0-4b47-8654-d48f7a9037ec"
        },
        "item": {
          "id": "c0899e9f-37af-4928-8fee-e745c9793097",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "2932272e-7c3d-49aa-8ee7-7ef7f7fb04a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb36e543-0979-482e-907c-43b3944e337e",
        "cursor": {
          "ref": "f4f9b54c-c95f-4c17-b5a3-585377594a5e",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "c0a25e19-20f4-4301-bf6b-2396573c55b1"
        },
        "item": {
          "id": "fb36e543-0979-482e-907c-43b3944e337e",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "f84c7885-d1f5-44de-9a10-c2ebe9410bb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "496ec0df-a111-4d63-933d-8e4bc9e29c02",
        "cursor": {
          "ref": "513fa1bd-ba54-45e6-8b67-f42f68639471",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "b851d966-8eca-4eea-89c9-1f429e416b2d"
        },
        "item": {
          "id": "496ec0df-a111-4d63-933d-8e4bc9e29c02",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "130e5b9f-e495-48ef-a20a-4442b481339f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1a8aa1f-fe25-47c9-98ff-f4ff08670668",
        "cursor": {
          "ref": "23e52add-83f5-4032-9d6d-aa8c718bbd03",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "46f04e59-814e-47d4-a806-e51a4ed37c36"
        },
        "item": {
          "id": "c1a8aa1f-fe25-47c9-98ff-f4ff08670668",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "114b6494-6837-4c02-9afd-5320c3e8d5d4",
          "status": "Created",
          "code": 201,
          "responseTime": 3510,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "800c9436-7069-4806-9818-5ae8782d495f",
        "cursor": {
          "ref": "82cd2edb-f864-478d-a6a2-f1784bfb60f2",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "1d0a53e0-a041-4930-92f8-9d0294200485"
        },
        "item": {
          "id": "800c9436-7069-4806-9818-5ae8782d495f",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "f537504c-145a-4140-b05a-eec924b2efe8",
          "status": "Created",
          "code": 201,
          "responseTime": 5179,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "98d592c7-5372-44c0-99cf-7bb3cb9027fe",
        "cursor": {
          "ref": "adfc78ab-ce87-41fd-9e93-0dd149651440",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "16554748-7b72-48dd-9519-51b2594f79b4"
        },
        "item": {
          "id": "98d592c7-5372-44c0-99cf-7bb3cb9027fe",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "4e9434e6-dce6-4a58-a80c-eaec613d3218",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 245,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97fe5439-eaf0-4430-b787-6d8ff663ed8a",
        "cursor": {
          "ref": "e4d350be-0d5b-4020-84cc-cc2140a129a1",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "b86e6a8a-100d-4960-9cb9-10240e71949d"
        },
        "item": {
          "id": "97fe5439-eaf0-4430-b787-6d8ff663ed8a",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "6a62c159-1675-4846-b55c-15ec378f407d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 277,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08bc98b8-ae5b-4f1d-a9d6-37d465ccc241",
        "cursor": {
          "ref": "d30a2d81-f3b5-4f34-baaa-52a75ceb5576",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "7fd82f46-b1bb-4127-8c44-7034b22aaadb"
        },
        "item": {
          "id": "08bc98b8-ae5b-4f1d-a9d6-37d465ccc241",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "61e1de42-d44b-4965-a1b9-94f12bb36278",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 165,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f076379f-3074-4408-b5c4-a17c1ac1379d",
        "cursor": {
          "ref": "fc5b1897-e998-423c-89e3-fb7365352782",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "79d35387-88ba-4b61-9bbf-906b02395106"
        },
        "item": {
          "id": "f076379f-3074-4408-b5c4-a17c1ac1379d",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "0528202a-f1dd-457a-a36f-0da8705ce378",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 187,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5289bf0f-5036-4668-a457-9a1620a01da0",
        "cursor": {
          "ref": "eb94f000-3588-4642-97a8-44872779fdd3",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "cb456be9-67d3-4a10-831c-c6a000f85fee"
        },
        "item": {
          "id": "5289bf0f-5036-4668-a457-9a1620a01da0",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "867bea7e-b833-47dc-ad6f-9a9a4ec82d24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "254ca54d-f7a3-416e-bbdb-0eb4c65163cb",
        "cursor": {
          "ref": "9c3a1b9b-d9b2-4da6-a5ec-c61a6d273544",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "7280e794-a4d3-46ff-86f2-12c2d1c473b2"
        },
        "item": {
          "id": "254ca54d-f7a3-416e-bbdb-0eb4c65163cb",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "9e02bd79-ecfb-4680-ae60-a5a186ab5991",
          "status": "Created",
          "code": 201,
          "responseTime": 5927,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "31cd4dd1-bbe4-4e2f-a952-6eb56102c9da",
        "cursor": {
          "ref": "7402846e-6ce9-4881-96b2-7c1f6454b91c",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "31bd55b2-ce40-48ef-ab97-b6d05dc080bb"
        },
        "item": {
          "id": "31cd4dd1-bbe4-4e2f-a952-6eb56102c9da",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "de8e13f7-10c4-42e3-8f5d-169c8fcd7223",
          "status": "Created",
          "code": 201,
          "responseTime": 5256,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "1491d8ee-2004-4826-8ce5-5d4c38ffa02d",
        "cursor": {
          "ref": "d4299227-bb30-4acf-ad4e-48c7a68018d7",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "c9c97f47-b968-46e7-9f13-4467fda20f50"
        },
        "item": {
          "id": "1491d8ee-2004-4826-8ce5-5d4c38ffa02d",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "a242c14b-e010-4b85-8ec5-f5dc6fe2d3c6",
          "status": "Created",
          "code": 201,
          "responseTime": 2349,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "48dae45a-c552-42e1-9233-10f3398f27e3",
        "cursor": {
          "ref": "2ad27721-2a5d-4ac7-aced-0fcc490c9ef5",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "5c49b934-9bc4-4d8f-a0fc-cf39070d625e"
        },
        "item": {
          "id": "48dae45a-c552-42e1-9233-10f3398f27e3",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "2d49f6dd-a555-4e9b-86c7-3eb5f9874b6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 291,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "375e9c72-cf0e-4339-b65e-52920f556421",
        "cursor": {
          "ref": "76edab18-0e0d-4dbb-96e9-770dd921c966",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "2575fc94-d1dd-4a99-98a8-2ee09da772ab"
        },
        "item": {
          "id": "375e9c72-cf0e-4339-b65e-52920f556421",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "9a3d3d7d-54fd-402d-b511-86de78895028",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 118,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e262472-0117-4556-b709-64600c6ed53e",
        "cursor": {
          "ref": "d45cb1d5-d192-45fa-9fee-9f97087e507f",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "5bd2195b-e0fd-4732-9b2a-359e1e527fdf"
        },
        "item": {
          "id": "1e262472-0117-4556-b709-64600c6ed53e",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "d66f9dc5-6250-4cfe-b0c5-58fa1fec7a9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 782,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b2fa6e9-87a9-4ed9-b29f-1384286fa67d",
        "cursor": {
          "ref": "f6b9d939-9d09-4c86-a71e-b84c4287bc08",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "a0169182-e356-4d3d-aa40-4197501c6914"
        },
        "item": {
          "id": "2b2fa6e9-87a9-4ed9-b29f-1384286fa67d",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "dfc5fe30-12f7-4333-a709-440a3ed1356f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1461,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45de2b31-774b-44f7-81c1-a31718e099dc",
        "cursor": {
          "ref": "20e67031-b858-4463-9f2b-eef3dfec6815",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "d31c86c2-e576-4e41-8c76-b82f94546da4"
        },
        "item": {
          "id": "45de2b31-774b-44f7-81c1-a31718e099dc",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "1abb2f11-a331-4646-bf81-f3497ce35a40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1635,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd7e4c64-1ecd-4afc-a7f9-9b72dcd832ef",
        "cursor": {
          "ref": "13dfe176-aa14-4e36-b53d-cc0ff04c62f0",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "448455b3-072c-455a-8b70-b8f64eaf4f34"
        },
        "item": {
          "id": "cd7e4c64-1ecd-4afc-a7f9-9b72dcd832ef",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "3d6f74de-d321-4143-8cb1-b4243bbbbb53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 975,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cab9143-3789-451b-88f9-66d5188438c7",
        "cursor": {
          "ref": "7f5862a3-f548-4a85-a735-31024f4b0c1b",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "94dd8c7b-0ca2-4de9-a6a6-6d1dd439fac5"
        },
        "item": {
          "id": "5cab9143-3789-451b-88f9-66d5188438c7",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "d6201368-9f4f-4ca6-a2f9-016e6b3bdd7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 982,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6108de0a-86fd-4269-9db0-fbbe088b80b4",
        "cursor": {
          "ref": "f38c5b38-3d3d-4e01-8456-7a0117472001",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "36d3cbf0-bce5-4971-a77e-9e0819ce4b2b"
        },
        "item": {
          "id": "6108de0a-86fd-4269-9db0-fbbe088b80b4",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "ecca832c-1b1f-400e-8470-62ae20bf19b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1086,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b4c7eab-89be-48d7-91a8-83366c515ed2",
        "cursor": {
          "ref": "ecbc6537-9210-4fbe-bf22-db6acd289975",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "869c5289-8cbc-4ead-a8c4-fe21f507122d"
        },
        "item": {
          "id": "5b4c7eab-89be-48d7-91a8-83366c515ed2",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "4e6adc3b-3b17-4263-8ae5-5867ee1f3635",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1077,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d695a94-f598-4be3-9149-14789c36b495",
        "cursor": {
          "ref": "9b525b0d-fe46-4495-bc31-29b011920c47",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "d26cce96-1e97-4b81-a9a5-6aca9f04db62"
        },
        "item": {
          "id": "6d695a94-f598-4be3-9149-14789c36b495",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "d812eaa4-c35d-4e7e-a695-f3e185d64b43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 474,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36feaa3d-ac54-4ecb-9fec-be42d76d9887",
        "cursor": {
          "ref": "7569178b-4675-4bb5-afb3-f6591a048500",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "04f2297c-687e-4d19-b2fd-fe89bde65b7d"
        },
        "item": {
          "id": "36feaa3d-ac54-4ecb-9fec-be42d76d9887",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "0f35e738-0274-4513-afdf-a86c791f7d30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a94223fe-f825-4e34-97ed-3db24dfd798b",
        "cursor": {
          "ref": "c2475b36-5308-436f-9e47-eb9a19502e84",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "bba4e304-af60-4bc5-b72c-3c658d3056b3"
        },
        "item": {
          "id": "a94223fe-f825-4e34-97ed-3db24dfd798b",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "99de6815-6653-4c1b-a6ba-e56484381a14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19098409-a567-415e-9232-ebec17119076",
        "cursor": {
          "ref": "e7115ee0-9e0f-4ad1-a794-b910526fd8de",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "b3633ff4-c81b-4fe5-8bb7-b3f09db0cb3e"
        },
        "item": {
          "id": "19098409-a567-415e-9232-ebec17119076",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "953c9f65-66dc-48e2-8dc3-e38447941061",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eda20171-4036-42bc-9658-4738d9502f15",
        "cursor": {
          "ref": "fee3266e-7e67-4163-bc47-53bb835bcc13",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "190341d2-15f1-443b-86cb-68a5e3ce32cc"
        },
        "item": {
          "id": "eda20171-4036-42bc-9658-4738d9502f15",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "040d0641-36b7-41b0-8546-65f47f1b7888",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eaadf641-3d2b-49c3-8267-fb2763ff8ebd",
        "cursor": {
          "ref": "5163f7e9-d551-4bdf-a72c-24b27c495258",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "f1aafa3f-fdea-4931-954e-37d51b016a23"
        },
        "item": {
          "id": "eaadf641-3d2b-49c3-8267-fb2763ff8ebd",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "a2b1097a-7794-4a66-8370-9a61ba12c495",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 141,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0771ed14-f345-4677-8ea4-25db88457a88",
        "cursor": {
          "ref": "10cdf922-57ac-412b-bba6-9ff00d853059",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "8c93dae4-e8a4-4f7a-947a-6a056bb2c7a6"
        },
        "item": {
          "id": "0771ed14-f345-4677-8ea4-25db88457a88",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "ae94abc0-e5c2-464d-b5a0-b42b5074d12a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6befd0a-1b28-4cc9-8687-1bb0d9bf2e1d",
        "cursor": {
          "ref": "9d37f8c5-58d5-4285-9556-5804ee3cab4d",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "d1e9549a-d700-4301-a13f-bffa51e83ed8"
        },
        "item": {
          "id": "a6befd0a-1b28-4cc9-8687-1bb0d9bf2e1d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "e94d6399-4ef4-4b9b-bc2e-3bdb011d11bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebb0cb37-4162-4ef4-86fd-bd0e7eeb2d67",
        "cursor": {
          "ref": "7fca45ab-f79b-40a3-910d-bc5c0c8cb87b",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "a4c65757-d3fc-4474-8d33-4a85816c5da8"
        },
        "item": {
          "id": "ebb0cb37-4162-4ef4-86fd-bd0e7eeb2d67",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "c107ce60-f655-439d-86c8-a359c650e9dc",
          "status": "Created",
          "code": 201,
          "responseTime": 1939,
          "responseSize": 992
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "7aea4a07-de06-47d4-b1f7-642d51c23b09",
        "cursor": {
          "ref": "5a2fd693-2cf5-4be4-a1c1-1de6f9aae02a",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "70ca4e7e-c9b7-40dc-a3ca-d17e569135bf"
        },
        "item": {
          "id": "7aea4a07-de06-47d4-b1f7-642d51c23b09",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "0416ccba-d71d-4d50-9812-4a499adc627b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 160,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5c66497-e472-4168-b3a6-5a7c0b46cff6",
        "cursor": {
          "ref": "ba8cf884-cbf1-4e8b-9aa1-1d6da7e1a737",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "4fb41416-70cc-40d2-81a3-71aea220a9f4"
        },
        "item": {
          "id": "e5c66497-e472-4168-b3a6-5a7c0b46cff6",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "2d271c72-37c8-47c5-8e82-c4c12ce0204b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 176,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bdfbd35-4b52-437b-a2fb-f0e3b2c97880",
        "cursor": {
          "ref": "d6ee44c2-276b-4662-b5b7-9359526e98b6",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "56462968-f712-4a9d-9ced-59b741f5dd32"
        },
        "item": {
          "id": "3bdfbd35-4b52-437b-a2fb-f0e3b2c97880",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "94565ecf-f294-4d07-aade-e4de449bbf1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9392d45-f319-4432-97f8-d543fdd173c3",
        "cursor": {
          "ref": "43052edb-9b4c-454a-985e-a509aa0e5300",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "c2184964-2710-4f71-9d65-f1347723dc89"
        },
        "item": {
          "id": "c9392d45-f319-4432-97f8-d543fdd173c3",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "6d0c378e-66bf-40c2-a848-173a7aa8e75c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a785e6b8-ee41-4734-acef-331bc2f7542c",
        "cursor": {
          "ref": "71160ebb-da28-43bc-bb6a-d82589aad30c",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "6adc1ba6-1f96-42de-b6b3-bd47c6b64993"
        },
        "item": {
          "id": "a785e6b8-ee41-4734-acef-331bc2f7542c",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "3919e2d5-4feb-4eb8-bb08-b713f6a505a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f99bf58e-5429-4d8e-ac71-6db4209c2633",
        "cursor": {
          "ref": "388712bd-4b6f-4f5e-891a-fbc689c40932",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "c9faf462-7a5e-4235-8845-e91716077cf7"
        },
        "item": {
          "id": "f99bf58e-5429-4d8e-ac71-6db4209c2633",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "6421185f-e25d-4f0e-9c4d-3df0300f5865",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbc5f414-b25c-41c0-9ca7-ebb936d583ef",
        "cursor": {
          "ref": "d12cbd65-2061-4cf7-9b47-c1958a11577b",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "c1c16241-a9ff-410c-bbbb-d172f577f84a"
        },
        "item": {
          "id": "fbc5f414-b25c-41c0-9ca7-ebb936d583ef",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "9f769555-55b0-404e-adc0-e685b654a777",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0f81303-45d8-4064-bf74-41677f4b0327",
        "cursor": {
          "ref": "ac675855-2b12-4333-8198-b263b8841f6c",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "9bb95b94-8c69-47a0-837b-33882bc1b313"
        },
        "item": {
          "id": "d0f81303-45d8-4064-bf74-41677f4b0327",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "275ff24c-c0f2-4c8b-8890-717f24380bff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4a662c4-b3d6-4429-b156-ac7c85eb15e2",
        "cursor": {
          "ref": "6e057654-e6f0-4f36-89c1-bea88bfa9327",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "10a60b78-e75f-4784-9e82-c9bc98a407c8"
        },
        "item": {
          "id": "b4a662c4-b3d6-4429-b156-ac7c85eb15e2",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "4d1074ba-f9dc-4aa8-a47c-4885fe10c92b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abfec5ee-f59c-4d76-a89b-bb719ba587bc",
        "cursor": {
          "ref": "f7e058ed-91b5-4146-ae04-877b482c8a9b",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "f3a7c093-f3d6-46a0-a261-870555ad0fcc"
        },
        "item": {
          "id": "abfec5ee-f59c-4d76-a89b-bb719ba587bc",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "bc2098fd-24c3-46d1-b1b0-07fff62eaa5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfe5f36a-3bc2-4bca-9fdf-72d85464deab",
        "cursor": {
          "ref": "2a33f361-696f-4212-ad97-6d714847d3c9",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "7034de25-80b2-4f21-a215-a8b9b384bfd9"
        },
        "item": {
          "id": "cfe5f36a-3bc2-4bca-9fdf-72d85464deab",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "67d76a65-d869-44f0-987e-6142bccdfa31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50acc421-00cf-43ad-824f-7223260fa123",
        "cursor": {
          "ref": "9c9b98a2-836d-4b99-94d4-43ff29d2efc2",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "833bd5c0-5be1-4827-a3d3-0711a04a3db4"
        },
        "item": {
          "id": "50acc421-00cf-43ad-824f-7223260fa123",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "9bb529bb-eeca-48f9-bcd2-d07dc560dea3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6e99196-d92c-49a6-8613-b8bfc765b5d9",
        "cursor": {
          "ref": "4be1fbcb-7d24-4136-9705-27ac603d8c04",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "9e24e36f-6154-4812-b1cb-1448cb106d7d"
        },
        "item": {
          "id": "f6e99196-d92c-49a6-8613-b8bfc765b5d9",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "816d2149-29ce-432e-9fc2-006fa13f8835",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0343662-ffed-4be6-b82c-6fd3b4f6f689",
        "cursor": {
          "ref": "ec7579f7-8407-4354-a9d3-d3c11c7919d4",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "efd5a50f-62d4-4ef3-b6c3-e78582febc21"
        },
        "item": {
          "id": "e0343662-ffed-4be6-b82c-6fd3b4f6f689",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "0d1158b2-19a8-46f3-bb10-8197cdbba9c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88a5776f-73db-42fa-a899-a33c5bc3a7fd",
        "cursor": {
          "ref": "bc7715d6-9043-443d-a879-7b7dee5965f1",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "81e2c34b-489b-4020-97e0-50983937afce"
        },
        "item": {
          "id": "88a5776f-73db-42fa-a899-a33c5bc3a7fd",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "103a8efc-acae-462f-b6d5-afab4ffedc1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 175,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4315c49a-8461-4b0d-b64d-4bf4575d956e",
        "cursor": {
          "ref": "782dc283-dd5b-4848-86d2-80ecca3defda",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "ade0abf7-8123-445c-aca1-5aee0057869a"
        },
        "item": {
          "id": "4315c49a-8461-4b0d-b64d-4bf4575d956e",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "8cf894be-a835-41bb-891f-c695549745fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 182,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4f7366d-42ab-4774-8ac6-650c516e06be",
        "cursor": {
          "ref": "2f1cabc9-6905-4369-9d97-17be1f886940",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "730347bf-9cb0-4230-9492-d1093b4583ce"
        },
        "item": {
          "id": "e4f7366d-42ab-4774-8ac6-650c516e06be",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "92650e7c-a3af-4c01-9d89-f126c0bbc199",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80c4e189-9903-404b-92e6-7f960859afb7",
        "cursor": {
          "ref": "05258cae-410a-4a47-8f33-8b981f384857",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "eaa6c42e-ed1f-4ad1-8f08-60438107cac7"
        },
        "item": {
          "id": "80c4e189-9903-404b-92e6-7f960859afb7",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "c031214a-725d-4557-8236-a5f34bb4eafc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 132,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4c682e7-41d3-4342-b51c-01501168603f",
        "cursor": {
          "ref": "83aa60f1-c12d-4b69-b6fd-4b04e839ea8a",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "a3b6fbf8-72af-489f-a329-de31ad486730"
        },
        "item": {
          "id": "c4c682e7-41d3-4342-b51c-01501168603f",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "584e39d1-0edd-4636-80c5-c01ff042bb83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29e6499e-d51d-479e-bb21-46ecb6d8906c",
        "cursor": {
          "ref": "c54f45b2-17bd-4dfd-af76-e71e2e4e5215",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "e8812fe1-7607-4cc6-81b8-a4539ee65813"
        },
        "item": {
          "id": "29e6499e-d51d-479e-bb21-46ecb6d8906c",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "fe83a110-ec84-405d-a61f-ec574e9c47bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6c8e56a-9b85-4881-8902-fe1e12008ea1",
        "cursor": {
          "ref": "0e516b68-969e-4f03-984a-5af9a689f773",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "343815f0-27ec-49e5-9fae-e7355cab3eca"
        },
        "item": {
          "id": "c6c8e56a-9b85-4881-8902-fe1e12008ea1",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "c3494214-ae0f-440d-8b26-57946757fb90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 140,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a1b2621-a493-43e1-928f-e7554cbe4627",
        "cursor": {
          "ref": "b68e33c9-4318-414e-90cd-35df17c34f79",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "0acc896e-0d13-4056-a4ce-bfba68b3f737"
        },
        "item": {
          "id": "5a1b2621-a493-43e1-928f-e7554cbe4627",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "69330b78-fc17-4307-86f2-8f5c669a7d8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56d2b39c-64f8-479c-a124-81cd8cd35f5f",
        "cursor": {
          "ref": "7d212988-d5b1-46e1-8562-8c8f394cb8cc",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "bdb014df-8c71-497f-a54d-7cc1f6215844"
        },
        "item": {
          "id": "56d2b39c-64f8-479c-a124-81cd8cd35f5f",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "9a9f2bf7-603b-4454-a57a-489a7376b13f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f290f8c-7aa6-46f7-9d13-b019f53cd760",
        "cursor": {
          "ref": "c515edac-1bff-4b86-9d08-bef5e8f5845d",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "8a6040ab-665e-4886-bff4-4240a3964ee0"
        },
        "item": {
          "id": "4f290f8c-7aa6-46f7-9d13-b019f53cd760",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "71463780-b1be-4bfc-8322-5fa32bd4ce6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3845b386-639a-48d2-a922-9c64525a3de5",
        "cursor": {
          "ref": "bea2369f-7758-4808-bbbc-76120062c01e",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "d12d3171-990d-449f-9223-2b8a0afdcabd"
        },
        "item": {
          "id": "3845b386-639a-48d2-a922-9c64525a3de5",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "e24c47ff-b473-44b4-ad64-bf58a14458c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 130,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42927435-8e08-4935-8102-25be5e7b08c4",
        "cursor": {
          "ref": "e4ba6f98-3b0e-4e39-8170-7dae69a4d244",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "4028d82a-3d2c-4874-90de-b5106da61c26"
        },
        "item": {
          "id": "42927435-8e08-4935-8102-25be5e7b08c4",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "8ce87690-8848-49ee-8ece-f73b113abc97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df8c2547-cc37-436a-808d-038878b7224b",
        "cursor": {
          "ref": "6863ed52-ec20-4190-bb30-9d4c5b2fc79d",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "00be41b8-4ff6-4873-b630-c666c77c8f01"
        },
        "item": {
          "id": "df8c2547-cc37-436a-808d-038878b7224b",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "75db1c1f-80d5-4745-b6bb-6ec39eab7d9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 118,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2a2d386-2044-4fac-9cf5-b90f0022217f",
        "cursor": {
          "ref": "dc726535-dc3e-4315-aeb2-4a075f5d3456",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "f0bfb2de-2255-47b4-8734-c914180bf0a8"
        },
        "item": {
          "id": "f2a2d386-2044-4fac-9cf5-b90f0022217f",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "67da00af-6742-4779-84b6-4f4b39d1f7dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 128,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4641bacb-5551-4c17-b94c-1cd9a29abb02",
        "cursor": {
          "ref": "ad9f040e-333f-44b9-8536-f6d6105db5cd",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "d01c77fc-1722-48c4-84f2-28e6da6a6865"
        },
        "item": {
          "id": "4641bacb-5551-4c17-b94c-1cd9a29abb02",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "94ec2733-738f-4849-baed-edf78c29de64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad381f3b-4188-4099-ac53-3fb7422dd159",
        "cursor": {
          "ref": "528c36a9-3ad4-4f23-a91c-ba1bc4721043",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "a6ca8e16-fd27-4d50-9fcd-cdfb2457a5c2"
        },
        "item": {
          "id": "ad381f3b-4188-4099-ac53-3fb7422dd159",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "a01ab0d6-b2a4-41cf-941c-15e85f94b29b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 128,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07f29f0d-bfbb-4900-a3bc-1b3c837cf1c2",
        "cursor": {
          "ref": "f8cfdeb0-390a-45ba-84f5-9922a3fa67d6",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "cd1fc7e5-3207-4abb-80c5-1b4ef593eb2b"
        },
        "item": {
          "id": "07f29f0d-bfbb-4900-a3bc-1b3c837cf1c2",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "5f927d0d-fbc1-487f-9d61-4a5b26c14c5e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "e347a4a7-0735-4514-a2ff-7d56c392c66a",
        "cursor": {
          "ref": "f7aed4b1-a578-4666-aed4-282b49bddb0c",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "d0072fe5-093c-415f-845b-5e9c4b3f60e7"
        },
        "item": {
          "id": "e347a4a7-0735-4514-a2ff-7d56c392c66a",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "31536581-a620-4268-907e-85cf4cbc8f53",
          "status": "Created",
          "code": 201,
          "responseTime": 2681,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "ccbbe5ff-6160-47cc-99f3-b2a0f40914a9",
        "cursor": {
          "ref": "ef2962d4-ab4a-4064-831b-d80483d5981f",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "c6e91ec5-fe6d-429b-8c10-9cf2d06bfa6a"
        },
        "item": {
          "id": "ccbbe5ff-6160-47cc-99f3-b2a0f40914a9",
          "name": "credentials_issue"
        },
        "response": {
          "id": "c54cd942-6180-4528-8c27-f0d173574ffb",
          "status": "Created",
          "code": 201,
          "responseTime": 2231,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ac314de-4228-4175-896b-c20abb855143",
        "cursor": {
          "ref": "e0c0d1c2-3d87-4c4d-92ae-4bd69bd7fa17",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "2515ceb0-f0b6-466e-854b-1a4e40dc33c8"
        },
        "item": {
          "id": "9ac314de-4228-4175-896b-c20abb855143",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "5f58c3a1-e37a-4083-b53e-67da66fbb009",
          "status": "Created",
          "code": 201,
          "responseTime": 2288,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "e50e1bcf-8228-435e-8260-3eeb204582c9",
        "cursor": {
          "ref": "961d719f-26dd-403d-983d-e5603bef3ec4",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "c80b9b9f-88dd-460d-a59b-40a04e607c7d"
        },
        "item": {
          "id": "e50e1bcf-8228-435e-8260-3eeb204582c9",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "63358368-133f-4d0c-abd2-6300dc92509b",
          "status": "Created",
          "code": 201,
          "responseTime": 2423,
          "responseSize": 1007
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "547e6640-db63-4976-bee3-33990339b29c",
        "cursor": {
          "ref": "d8ffd4ec-3ed5-4e5e-b0f3-4f370e995b33",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "7a62098d-0567-4f83-855c-f100c02313ef"
        },
        "item": {
          "id": "547e6640-db63-4976-bee3-33990339b29c",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "abc31901-ac03-4309-b585-58e551058d7c",
          "status": "Created",
          "code": 201,
          "responseTime": 2674,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-03-04T00:41:03Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-03-04T00:41:03Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:4:107)"
            }
          }
        ]
      },
      {
        "id": "e0e77046-5d50-402b-b358-2a9f824be20a",
        "cursor": {
          "ref": "34ddb23e-b29f-4489-85d3-8a667baa997e",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "8c47259c-32c9-4de3-b383-fc5be1198b54"
        },
        "item": {
          "id": "e0e77046-5d50-402b-b358-2a9f824be20a",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "9c21134b-b7a4-4a3c-93e5-6519f0dc8743",
          "status": "Created",
          "code": 201,
          "responseTime": 2817,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          }
        ]
      },
      {
        "id": "588920a9-c8f3-4ef7-a3b4-5ac5203d5ab3",
        "cursor": {
          "ref": "a7fe3f44-db2e-4dd6-a2b8-debe141594b3",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "e3f9bc65-b5ce-487d-a57e-2a41922e7a71"
        },
        "item": {
          "id": "588920a9-c8f3-4ef7-a3b4-5ac5203d5ab3",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "a045dc51-ca23-4a8d-9f46-d1d2ec242876",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "588920a9-c8f3-4ef7-a3b4-5ac5203d5ab3",
        "cursor": {
          "ref": "a7fe3f44-db2e-4dd6-a2b8-debe141594b3",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "e3f9bc65-b5ce-487d-a57e-2a41922e7a71"
        },
        "item": {
          "id": "588920a9-c8f3-4ef7-a3b4-5ac5203d5ab3",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "a045dc51-ca23-4a8d-9f46-d1d2ec242876",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca4c13d2-65a4-4975-ae7f-42f6a4e89949",
        "cursor": {
          "ref": "88d7f829-d00b-4c81-90a7-7a046daaf005",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "fa3eb9a5-39b3-449b-8639-8774a6b6efd2"
        },
        "item": {
          "id": "ca4c13d2-65a4-4975-ae7f-42f6a4e89949",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "bb307293-25f1-412c-ba18-94da5925a063",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c892e7ca-6dc0-4c24-b8cc-bdc2bbe07d72",
        "cursor": {
          "ref": "3fbd3aa5-8abe-4374-8001-9c00ae6a9a34",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "cc5297e9-90a0-48d1-af8d-89b761e36e3a"
        },
        "item": {
          "id": "c892e7ca-6dc0-4c24-b8cc-bdc2bbe07d72",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "094d7a58-0119-4b18-baec-dd3f648d7b4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f9577d1-7765-48de-acd3-f6019e874919",
        "cursor": {
          "ref": "ad093d7c-bb34-498d-9c02-830dc1c76b79",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "edc04bf0-32cf-4b68-beae-664dc7e9e180"
        },
        "item": {
          "id": "7f9577d1-7765-48de-acd3-f6019e874919",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "2fa5a0d9-a756-428d-a9fb-068ec68ff688",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efc781d0-b2b9-40be-9263-b2447fa4d8b7",
        "cursor": {
          "ref": "450296fe-4fdc-4e07-aa15-600d1657b5a5",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "e413637c-1aa1-4058-9fb5-158075e72549"
        },
        "item": {
          "id": "efc781d0-b2b9-40be-9263-b2447fa4d8b7",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "00ff18ab-bd0e-4066-bf9b-37ab54a1c247",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c0a2591-7903-478f-ac31-6369c83bae75",
        "cursor": {
          "ref": "12d08760-f726-4c3c-9304-48ca4bbb02b5",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "b9848aaf-fc50-4985-841c-4c5a79329940"
        },
        "item": {
          "id": "8c0a2591-7903-478f-ac31-6369c83bae75",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "df5d3401-70dc-4c9e-b80b-57f7a08108a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f725df33-a2a3-483e-acbc-bb11727c334d",
        "cursor": {
          "ref": "d5dc7f96-55e9-4e58-831e-d8a26b4e03de",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "b14f438e-db8c-4970-a34f-ae4a7247ae35"
        },
        "item": {
          "id": "f725df33-a2a3-483e-acbc-bb11727c334d",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "41f8c192-a086-4443-bb08-ba7d39e1a655",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "584d7170-2567-4b9b-ba3a-f4fb118d8ee0",
        "cursor": {
          "ref": "f0edb23c-c60c-4a33-bcae-3fb16cdced57",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "debc6ee2-d415-45d4-af72-e5a8556e9557"
        },
        "item": {
          "id": "584d7170-2567-4b9b-ba3a-f4fb118d8ee0",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "e256dbb9-1eeb-4f9a-a4a2-3879e0285f34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69a1ac45-bef3-4525-8e5c-7ea0e2b34afb",
        "cursor": {
          "ref": "90905b58-866f-4e21-a7f5-9218ba6e99dc",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "35efa270-ee9f-4d00-93ea-fdf457b6b16d"
        },
        "item": {
          "id": "69a1ac45-bef3-4525-8e5c-7ea0e2b34afb",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "a5953df8-e406-4503-8c2a-3ec0b5faaa0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff136f4b-6a82-430d-907a-4dff4559fc8d",
        "cursor": {
          "ref": "5cb88082-33c3-4749-9694-9081ba9af3ab",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "991c8ea0-ce1b-448d-a500-e5d4115ec06d"
        },
        "item": {
          "id": "ff136f4b-6a82-430d-907a-4dff4559fc8d",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "54503fd1-e3af-411a-b338-65a11788880d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 265,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92d4f008-f472-42ea-bc9b-197a996e299a",
        "cursor": {
          "ref": "b95eaecb-3eb1-4a4f-9299-3c6fe095505b",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "4964f3cc-771b-4dcc-8130-982a8decbc77"
        },
        "item": {
          "id": "92d4f008-f472-42ea-bc9b-197a996e299a",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "d25256c8-219f-4157-8f24-3f3f03b7bc64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 121,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20721122-db13-4891-9fc2-725bd0b9a00a",
        "cursor": {
          "ref": "08512e94-f00d-4d5b-bf44-62d7a7c3cc6c",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "d19f54e1-de23-4cdf-b3cd-82ebfbafff6c"
        },
        "item": {
          "id": "20721122-db13-4891-9fc2-725bd0b9a00a",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "e74e1462-1f40-472f-98eb-1541f45aedfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "741b58dc-491b-4362-86bc-7dc795cb8b17",
        "cursor": {
          "ref": "c8275c9a-4815-457b-a078-9c4604f9b712",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "41110b7c-e179-44b6-817a-db07df201928"
        },
        "item": {
          "id": "741b58dc-491b-4362-86bc-7dc795cb8b17",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "b61dc1d4-5201-4bbb-9081-2820107a56a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a58640cf-5936-4452-be9f-29a4b0b67bdf",
        "cursor": {
          "ref": "d503878a-afb8-43fb-b8b5-b25a4eddd5b0",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "bce5dacd-757b-4ba8-97ba-db06ee6aae2b"
        },
        "item": {
          "id": "a58640cf-5936-4452-be9f-29a4b0b67bdf",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "7f5fe4b1-d856-4aaa-90d8-7567d33772f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c7126ec-6834-4cf6-9026-d27b2c898361",
        "cursor": {
          "ref": "30c53695-e4b4-48fb-ba48-b0579093a47d",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "d7917b11-9b64-4e84-8c2d-a4ffff580936"
        },
        "item": {
          "id": "4c7126ec-6834-4cf6-9026-d27b2c898361",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "07dec9e1-804a-4874-a2b7-3edf5ea9f7b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 133,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d3b7374-49bc-4b18-a3e0-f7e1fb329e37",
        "cursor": {
          "ref": "4e4ebd2f-3df9-454b-b074-b747e80a01cf",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "d6887070-6523-4717-8b50-1ff860145afb"
        },
        "item": {
          "id": "2d3b7374-49bc-4b18-a3e0-f7e1fb329e37",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "c2330f76-115c-4651-bb59-e9c4b667d2a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 233,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0ce3ba1-a10d-4a75-bfb6-19f419c3b2c7",
        "cursor": {
          "ref": "7ab0c917-20cd-4e24-b326-f13448c08c94",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "f504d0bf-49ed-4e38-800b-257dbae36f13"
        },
        "item": {
          "id": "d0ce3ba1-a10d-4a75-bfb6-19f419c3b2c7",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "be5f1537-3d20-44e8-a664-5d2a7992047f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54c8f91b-aa5f-43a9-9aa0-6d42d4ca78a0",
        "cursor": {
          "ref": "49ba2ce9-8c5f-45e1-b208-0923886fee35",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "622fec93-2374-4d27-9638-6a1c11447b5d"
        },
        "item": {
          "id": "54c8f91b-aa5f-43a9-9aa0-6d42d4ca78a0",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "4caa2be5-f23c-4618-a29f-39bfbb984d64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "750d64b0-7ce3-40e9-9fc2-b676554da6d9",
        "cursor": {
          "ref": "57b0ae03-f45c-4d4b-b061-7205d274a1d7",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "0ce06b1f-9fc6-4bf3-b220-e004bbdaca06"
        },
        "item": {
          "id": "750d64b0-7ce3-40e9-9fc2-b676554da6d9",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "cc78f947-3c7e-42ca-ac44-cb8b0e95c6e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4003295-f407-4b91-a135-5ee4cc8a727d",
        "cursor": {
          "ref": "7333c3af-e51b-4839-8773-7a5cc76e0bac",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "fd5302ba-e478-4696-8fa6-b98bf237376b"
        },
        "item": {
          "id": "f4003295-f407-4b91-a135-5ee4cc8a727d",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "ea60c9ae-f56b-46ab-90da-c41a126eda3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47b55cd2-979b-463c-ba02-188c1e1d286c",
        "cursor": {
          "ref": "1b5e2f13-4e14-4a86-ae51-89018525f997",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "dcb6964c-1f05-4fe0-bd60-9e5fbc47cd41"
        },
        "item": {
          "id": "47b55cd2-979b-463c-ba02-188c1e1d286c",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "a4a858d1-d3ee-43bf-bf6b-113e28e99ddb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "faaaa607-ff2c-4136-b6ae-befebb0ca15f",
        "cursor": {
          "ref": "9201fff4-9c5e-4523-a69d-037bdbfb871c",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "a86913e1-7dc8-4d01-adc7-7b9c82f12337"
        },
        "item": {
          "id": "faaaa607-ff2c-4136-b6ae-befebb0ca15f",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "1d8f45aa-4315-4237-809c-9ee8698e9025",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0e9378a-0e7f-48fb-a6ed-026ebb7fb910",
        "cursor": {
          "ref": "76f10a24-364e-4022-b210-540d8e2b6bd8",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "c697134a-4981-4bbf-beea-8ed17e354d3e"
        },
        "item": {
          "id": "c0e9378a-0e7f-48fb-a6ed-026ebb7fb910",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "1628c9a3-0d53-46a2-8a63-ca19f086b1f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2be93d68-cc9c-4d03-9935-297d6de0968c",
        "cursor": {
          "ref": "08896ea6-431b-4764-a807-a375987c33a9",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "6d58b313-bfe5-4132-a782-b59272d6094f"
        },
        "item": {
          "id": "2be93d68-cc9c-4d03-9935-297d6de0968c",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "048ce65a-0a5e-444e-bdef-9bbeb2d52b40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "498b7059-1525-45e0-bdc6-c079ee2059c3",
        "cursor": {
          "ref": "713618eb-4b9f-4f3f-b46b-ad4fcfc82fb6",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "85258e15-0e82-4303-8ba9-5219fef30aec"
        },
        "item": {
          "id": "498b7059-1525-45e0-bdc6-c079ee2059c3",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "65738d33-5e76-49d1-8675-6dd4e282ad13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b4245c1-0a77-4109-9272-8601b19c1918",
        "cursor": {
          "ref": "f86be78b-f763-4319-b4dc-acd5fc1e2395",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "e6364580-5c7b-464f-8447-730a2771912f"
        },
        "item": {
          "id": "0b4245c1-0a77-4109-9272-8601b19c1918",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "9af203e0-dd85-4b65-a4d5-4397d1134203",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fff00ce3-b02d-4c07-852c-0e6c34794875",
        "cursor": {
          "ref": "65b0cb81-177b-49a6-8c7c-d1eb72999124",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "66379fee-04ec-4499-ae31-8a9bfe6587e5"
        },
        "item": {
          "id": "fff00ce3-b02d-4c07-852c-0e6c34794875",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "e4568105-de7c-48ac-9b44-3e53030db21e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0aca8819-822f-437f-ab03-59badcce5bfc",
        "cursor": {
          "ref": "a116cf56-3f6c-4b76-8f3b-55773adacbd8",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "97e948d8-4d91-4fa4-8eee-884d87159c1e"
        },
        "item": {
          "id": "0aca8819-822f-437f-ab03-59badcce5bfc",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "cfc29e98-0b84-4e50-80be-45f1be45f71c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "681e9277-53df-4ad4-b478-7f5b2824d6f7",
        "cursor": {
          "ref": "8fdd42c9-d5cd-42ce-af10-2b0a9dfca269",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "7d963eea-e37d-4782-84f2-57a3438b0f4d"
        },
        "item": {
          "id": "681e9277-53df-4ad4-b478-7f5b2824d6f7",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "ee3edea9-117c-4b9d-8756-784edc016028",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69c5e7ed-5b66-449f-b788-ca0c075da86e",
        "cursor": {
          "ref": "c60db51e-7e1f-4624-8959-c6117531dde4",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "622cd8a6-db1f-48f0-9822-08e055984923"
        },
        "item": {
          "id": "69c5e7ed-5b66-449f-b788-ca0c075da86e",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "b2a9c50f-ff46-4b7f-b90e-3ee67d439001",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f831b87-907d-4778-9a39-12bad7e47847",
        "cursor": {
          "ref": "1a0a132b-c50b-465d-9975-bab619d0ad7d",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "622df2a6-0e73-40a5-8228-acb8090d34d1"
        },
        "item": {
          "id": "1f831b87-907d-4778-9a39-12bad7e47847",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "99af8738-005a-46d9-b66f-e4a18f646fa3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45e3945b-ed92-4a4d-ae85-b5530c46e973",
        "cursor": {
          "ref": "98eb4396-dcef-4fd4-9cda-5e65b3dec182",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "68f70b84-3c3c-4048-a0f2-2d8424054fd5"
        },
        "item": {
          "id": "45e3945b-ed92-4a4d-ae85-b5530c46e973",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "0c19d687-5b4f-444b-995f-481dd852656d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc0d7476-393e-45ab-953a-cdd4aac96790",
        "cursor": {
          "ref": "5ee52be5-c779-4aba-aaab-4a34ae817752",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "66653e13-6df3-4386-b1e3-bbe7fbddcafe"
        },
        "item": {
          "id": "fc0d7476-393e-45ab-953a-cdd4aac96790",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "daa9ef29-97a6-4876-aed5-46b5bb485cb5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 332,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "d1fe6402-534f-428d-9525-84ebfb3e6954",
        "cursor": {
          "ref": "b1a12332-80eb-4f1d-9cc0-58e85d028983",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "eceb8b0a-7caa-4dfc-8eee-0b7efd878c82"
        },
        "item": {
          "id": "d1fe6402-534f-428d-9525-84ebfb3e6954",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "3568d0be-481f-490b-bffd-a797f67f545d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 357,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "bbb949f2-fab7-4655-8250-2e42fa2643e0",
        "cursor": {
          "ref": "0a663c0f-9516-4d13-ac21-bdf7b4e67361",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "1d3ead3d-fef0-4ab8-bc9b-384c39639877"
        },
        "item": {
          "id": "bbb949f2-fab7-4655-8250-2e42fa2643e0",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "9340c483-49f1-403d-8814-da606e63cd7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 190,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbb949f2-fab7-4655-8250-2e42fa2643e0",
        "cursor": {
          "ref": "0a663c0f-9516-4d13-ac21-bdf7b4e67361",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "1d3ead3d-fef0-4ab8-bc9b-384c39639877"
        },
        "item": {
          "id": "bbb949f2-fab7-4655-8250-2e42fa2643e0",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "9340c483-49f1-403d-8814-da606e63cd7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 190,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b102d4e-c1fd-4627-8289-1c4ada7ab7c7",
        "cursor": {
          "ref": "43202b9d-165c-4e97-88cd-e1ea878122ff",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "ccf6bc3d-449b-401b-9cd4-447591445618"
        },
        "item": {
          "id": "1b102d4e-c1fd-4627-8289-1c4ada7ab7c7",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "7f889917-5bce-477f-84e7-c04383991f18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af10eb0e-9d65-4afb-adfd-507e75f7b02b",
        "cursor": {
          "ref": "4fb2a236-7c9b-4ba5-9994-7a873658990b",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "8579a3a7-340c-446c-94b9-20913d870ab7"
        },
        "item": {
          "id": "af10eb0e-9d65-4afb-adfd-507e75f7b02b",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "3ef50ca8-1205-48bd-8f21-fa8e3938769a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 128,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa65194b-33ad-40d7-a854-166b289e3823",
        "cursor": {
          "ref": "5a235822-eac6-47a8-8e3e-71fce8709c7a",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "72de7234-48bf-44b0-8d79-25d593d8ef8a"
        },
        "item": {
          "id": "fa65194b-33ad-40d7-a854-166b289e3823",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "641bf06b-f03e-4325-93da-9ec616ece10a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 328,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "906eb8ae-3736-48d6-9735-cffb0203766d",
        "cursor": {
          "ref": "89003c20-7904-4349-a49d-f7c49a36b3d9",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "7a05d58f-bf88-4100-94be-03312715fa39"
        },
        "item": {
          "id": "906eb8ae-3736-48d6-9735-cffb0203766d",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "5da2bfc6-f253-4ffd-92e0-9fedf1662229",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9349d8d1-b4fc-4560-8d42-5f190b13a804",
        "cursor": {
          "ref": "fc3fd25a-cd3d-48d6-b9a0-fe3898cd1deb",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "801187b3-e888-4cea-8d5c-d996fba79276"
        },
        "item": {
          "id": "9349d8d1-b4fc-4560-8d42-5f190b13a804",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "80aa8419-9829-4a9b-a89f-84b2f4530caf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5d23665-a2f5-4d99-8b61-42ae700c24ed",
        "cursor": {
          "ref": "af47d11a-8281-4822-b823-569ef596d542",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "e963ed5b-ae6d-4881-b030-ae6ac0e13c47"
        },
        "item": {
          "id": "a5d23665-a2f5-4d99-8b61-42ae700c24ed",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "7178feaf-b47d-408e-99dc-b27eabf50cdd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 535,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5d9f722-889d-4339-aa0e-17d9c7a08646",
        "cursor": {
          "ref": "3a990b1f-3fd2-4080-b876-5c5efb6872d5",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "0630c244-68f3-40e9-881b-f641e1af630e"
        },
        "item": {
          "id": "f5d9f722-889d-4339-aa0e-17d9c7a08646",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "57f25fb0-3c7d-49a8-bdca-3a89e8b533b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 268,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bfc898f-543e-4d11-a711-98f97907a245",
        "cursor": {
          "ref": "0add4f2d-2699-47d8-a822-07a77d7bc349",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "2cf8f00d-62ac-4788-bb0d-ea235a8e906e"
        },
        "item": {
          "id": "2bfc898f-543e-4d11-a711-98f97907a245",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "8275e12e-885f-4d43-856f-0fcd72d9acc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0adc1aa9-498c-4ff0-81c1-1ce3421fd90b",
        "cursor": {
          "ref": "bcac80e8-4eb9-4e9d-bbb6-27e395c80f78",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "205face1-737c-45b3-8bc8-e5351cd767be"
        },
        "item": {
          "id": "0adc1aa9-498c-4ff0-81c1-1ce3421fd90b",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "9078c3d6-8c44-4392-987c-8eb173470bb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 155,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ba963d3-ad71-4ac5-b40e-2f45b33ee237",
        "cursor": {
          "ref": "7affadcf-346e-4cf8-a0f9-e720fdf3ae7e",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "611e3df8-fbf9-4cfe-958f-3e9eaf0d1d85"
        },
        "item": {
          "id": "0ba963d3-ad71-4ac5-b40e-2f45b33ee237",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "106658e0-81da-4483-9fce-fe5f25d51025",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 675,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ad63051-b69e-4429-b9c0-60566c5bad14",
        "cursor": {
          "ref": "dfaced40-37c7-42df-bbcb-3a2ab8535cbb",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "1991dcc0-d483-4d55-80c7-98198b777ca5"
        },
        "item": {
          "id": "1ad63051-b69e-4429-b9c0-60566c5bad14",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "39989b87-5318-42ed-9c20-e12394f347e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 226,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acb72ae6-cc6a-4e1d-801c-7cb1b962a0f8",
        "cursor": {
          "ref": "ea6aac15-66df-4234-9ab7-0b62603f8494",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "1cd4dda1-9b5d-45d6-ab4f-18bce2227af3"
        },
        "item": {
          "id": "acb72ae6-cc6a-4e1d-801c-7cb1b962a0f8",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "02c3a4dd-46f0-4c69-9747-3d27533ebf2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a23c4e7d-0ab4-48b5-bdff-2b31c2b1f15a",
        "cursor": {
          "ref": "93d7dd8d-2f30-4a5e-bdfd-075be594407b",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "c3a0823a-90db-41bb-8af0-bc6d44d0bc78"
        },
        "item": {
          "id": "a23c4e7d-0ab4-48b5-bdff-2b31c2b1f15a",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "b1c383c2-1b4f-49ca-9f8f-951932d63bc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b1ce8e3-0cea-4b40-8e8c-26cfcd7ede5b",
        "cursor": {
          "ref": "3c576a0f-9a1e-4681-b05d-6fc49f33688d",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "6c5158b0-6a6f-4a21-8734-c9874c5586ea"
        },
        "item": {
          "id": "5b1ce8e3-0cea-4b40-8e8c-26cfcd7ede5b",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "40b8f670-95ea-4584-9d32-4e6df612d1c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc49543b-9d49-4e21-85d3-64ff53ca1168",
        "cursor": {
          "ref": "e910f5ef-b3ee-4151-aed8-c8670f490f80",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "efabcb0e-efa9-424e-a0c0-5e501340ebd0"
        },
        "item": {
          "id": "bc49543b-9d49-4e21-85d3-64ff53ca1168",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "6bf0984b-2f3f-4ff5-a995-90f26f6cf67f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abb47833-5922-4083-8679-5eb1a881e168",
        "cursor": {
          "ref": "ca95f3a6-99e5-4c7e-a3b2-f5fdf6033c74",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "15a9db24-4131-41a4-8faf-4171e50d5624"
        },
        "item": {
          "id": "abb47833-5922-4083-8679-5eb1a881e168",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "79a3c6db-7fe6-4b66-a9f9-9ea0684c82fe",
          "status": "OK",
          "code": 200,
          "responseTime": 257,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "0d1b1322-aa03-43af-acc5-e2096b6e4323",
        "cursor": {
          "ref": "f7369c41-86fd-4d11-9b17-b91e470195a9",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "b9652f49-9c03-4d3e-99b9-1cf02fafab8b"
        },
        "item": {
          "id": "0d1b1322-aa03-43af-acc5-e2096b6e4323",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "1290c24a-cbe9-466b-bd1d-6005a051e45e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38d8b6e1-8dd8-43c6-bbea-c48f6837a3ca",
        "cursor": {
          "ref": "b63913b9-7ac7-4286-adcf-b8a924a3439d",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "efb828d1-a623-48b7-acd4-2719a085ba88"
        },
        "item": {
          "id": "38d8b6e1-8dd8-43c6-bbea-c48f6837a3ca",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "1ab4cf21-5178-40d3-8bcc-3c8c3860a7f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e84eb1e8-86dd-4edc-8673-1ea3c2ce1351",
        "cursor": {
          "ref": "a34ba2f5-b334-4bcd-a308-df15b8f58fe6",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "df8bbfbb-b8c2-46e4-85b3-01f542d42742"
        },
        "item": {
          "id": "e84eb1e8-86dd-4edc-8673-1ea3c2ce1351",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "318ca6a9-7b25-4547-ad99-9af4dcc9ddf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d11ed08f-521b-42bc-af09-7b60797b4f5e",
        "cursor": {
          "ref": "c63f3cb0-88b8-4577-8dba-8a034a36880b",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "e9b26447-7410-4d69-91c8-46ba604e77ef"
        },
        "item": {
          "id": "d11ed08f-521b-42bc-af09-7b60797b4f5e",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "05d95b73-882c-4ea2-a2e9-f7034883df14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9728e945-f461-4d4e-a0e7-7d44fdb822de",
        "cursor": {
          "ref": "2f053e46-530f-4423-abdb-e26e18449bfc",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "3db75e7e-ea69-4819-8a00-3d386bdc9f34"
        },
        "item": {
          "id": "9728e945-f461-4d4e-a0e7-7d44fdb822de",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "88380b34-1deb-4e72-91ce-24bc9a332a88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ffa4e5e-a848-4f98-95c1-18f8ad611b0c",
        "cursor": {
          "ref": "8145a985-60d4-4055-aee1-37499ad0bbdb",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "93d23fca-ed41-4614-b867-f3d5ce01b8f3"
        },
        "item": {
          "id": "7ffa4e5e-a848-4f98-95c1-18f8ad611b0c",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "716f6931-a744-4f9e-a5ae-6c9ddd76cb17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "786ecc17-804c-4f4a-b34c-5ac9f2f3aa1a",
        "cursor": {
          "ref": "6f246b51-4b0d-4aa7-89f9-6813997f953c",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "3aa55f9c-54fc-4f95-a8cd-adb9da8c8658"
        },
        "item": {
          "id": "786ecc17-804c-4f4a-b34c-5ac9f2f3aa1a",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "1450cfb8-3583-4d12-ad95-b46088e759f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24676b12-f1e2-4524-9ddb-c6e95cbdb04b",
        "cursor": {
          "ref": "eff64b47-40d3-48ae-8ee0-3ffbf088625b",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "e0ebe4e3-de2b-4a94-b98b-cf3dafdb275a"
        },
        "item": {
          "id": "24676b12-f1e2-4524-9ddb-c6e95cbdb04b",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "391e8141-d867-4ee2-8445-3c46e21749d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73e5cac4-5239-4e90-be72-f1eb7601e7d7",
        "cursor": {
          "ref": "575d206f-eb38-4cf4-81e0-b30dfd3031f0",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "c42f5a04-5604-43d6-a893-69e9f2dc26f9"
        },
        "item": {
          "id": "73e5cac4-5239-4e90-be72-f1eb7601e7d7",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "3ad1bafb-6c88-47da-a99f-55e1407969f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cbf0fd3-c1b1-4816-8cd3-3338779b01e0",
        "cursor": {
          "ref": "ccc932eb-43b1-4195-a68d-36f79bbf1a25",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "e3a7493f-c02f-4dc5-ba06-1a24767e1f09"
        },
        "item": {
          "id": "3cbf0fd3-c1b1-4816-8cd3-3338779b01e0",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "2d0b5c4f-246c-4b64-8661-a093789649e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a0edcff-1627-4378-9c0e-8b35ec237678",
        "cursor": {
          "ref": "55100ced-8d77-494b-94e1-3f0a1aca9268",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "0805a3c5-30c8-4f73-964f-305f9acce2a0"
        },
        "item": {
          "id": "2a0edcff-1627-4378-9c0e-8b35ec237678",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "4ef99562-3f8c-4285-aa02-ba5cf6d81eed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5637800f-b4e4-432e-8533-52c96889d10c",
        "cursor": {
          "ref": "2661a836-987d-4c3e-be22-163e096b563d",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "5b968fed-372b-4768-b036-97222d87b56d"
        },
        "item": {
          "id": "5637800f-b4e4-432e-8533-52c96889d10c",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "584f10b9-ea11-452c-80cd-6eae65d51f08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2931270c-78b7-4e5a-b65e-7d0dfb7361e5",
        "cursor": {
          "ref": "e5109c42-7fd8-4499-8fc2-b8efd7e3d92b",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "8c161d3d-b9d6-463d-baa6-765b292e97ff"
        },
        "item": {
          "id": "2931270c-78b7-4e5a-b65e-7d0dfb7361e5",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "101d7f6c-e24c-4431-be02-d2e4d13f1a99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21aa93b5-2632-47da-ba8e-78c4a286fdd3",
        "cursor": {
          "ref": "0506607b-f256-4b00-9fa7-5a2e7677bf22",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "b5e6773b-70f4-4a86-a191-0e08080c4d46"
        },
        "item": {
          "id": "21aa93b5-2632-47da-ba8e-78c4a286fdd3",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "b99930f4-73fa-494b-a50b-11a147e42e1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5d35e58-d3ab-443c-9321-bbe3e8fe2b15",
        "cursor": {
          "ref": "93b8b3a2-bcdc-4481-83b9-ec9007e4cfd2",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "4b4bcfba-2025-4ce1-a12b-4c5c94147065"
        },
        "item": {
          "id": "c5d35e58-d3ab-443c-9321-bbe3e8fe2b15",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "4307577d-b65e-49a9-8287-3853155af39b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17edd31c-f3d6-4eac-810e-6c22651882fc",
        "cursor": {
          "ref": "9c84ca34-211f-4c66-86f9-def9cbbe29e2",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "4d1ee237-c3b1-4e79-9adb-d546a2ec9020"
        },
        "item": {
          "id": "17edd31c-f3d6-4eac-810e-6c22651882fc",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "d3c3b533-2953-4a26-b4a0-9bafdc8dcde5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b513d757-105f-40c0-9db9-179bb8b69bca",
        "cursor": {
          "ref": "546f8b7d-7f02-4942-be1e-8bb56e7deb34",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "e4bfec88-c469-46aa-9bce-844926daef11"
        },
        "item": {
          "id": "b513d757-105f-40c0-9db9-179bb8b69bca",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "56ceb374-61d1-4545-93bb-9e41f4066b89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1fcfb0a-f848-4215-92b6-e63c0a83a03c",
        "cursor": {
          "ref": "8e2e32c0-148e-4662-8f0a-32731bfd2b73",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "001f5731-c744-432f-a5ca-df0db120c2c8"
        },
        "item": {
          "id": "a1fcfb0a-f848-4215-92b6-e63c0a83a03c",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "e4cb954c-8e04-4c56-829e-4ccc5e8d27a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d97aac44-6b0f-4ee1-bf64-1452bb22baa4",
        "cursor": {
          "ref": "ba4ed391-4c2d-4409-a121-260227d4be3d",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "b4ae4f70-33ed-454f-9ebe-37c1d4f6df7d"
        },
        "item": {
          "id": "d97aac44-6b0f-4ee1-bf64-1452bb22baa4",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "7a9c7ad8-1ab8-45ce-9f09-8ecc529032da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f97e3c0f-aeea-4c8a-a9e2-f8a37e7e4956",
        "cursor": {
          "ref": "372611bd-6172-4624-a795-07425cec20b1",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "1829f401-365a-424b-8307-2d6eb89b5859"
        },
        "item": {
          "id": "f97e3c0f-aeea-4c8a-a9e2-f8a37e7e4956",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "ab030537-0147-494a-8136-6063f4fe88d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0855324-b7c5-451f-935c-9876f435521d",
        "cursor": {
          "ref": "32067ab6-766d-431f-8c49-f85afa269146",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "42223aaa-c89b-43dd-80b1-6a609cebc30f"
        },
        "item": {
          "id": "e0855324-b7c5-451f-935c-9876f435521d",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "049bf182-c7f4-4840-9e20-3a11f3dcb4ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e01c84a3-182c-478b-a2b9-524f35dfed92",
        "cursor": {
          "ref": "6a1a9f8e-3941-4c4c-a25b-8f745390bfe5",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "c6bf7f59-5379-47e5-a990-d9c5528be6a0"
        },
        "item": {
          "id": "e01c84a3-182c-478b-a2b9-524f35dfed92",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "a36ed456-b9f5-41af-9d96-8ffe73a05293",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e0ccb8e-b7da-47a4-935b-9ff43c3e9225",
        "cursor": {
          "ref": "33ec3992-a0cd-4d0f-855f-1acb78961ab0",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "3cbd5e55-f261-4c24-be15-e24163786bf8"
        },
        "item": {
          "id": "3e0ccb8e-b7da-47a4-935b-9ff43c3e9225",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "5ffe021d-3c9a-45e9-bfb0-e7200328d671",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f84afb3-e361-4dbf-897e-c0b304049235",
        "cursor": {
          "ref": "18b11787-f8df-4427-a0dc-3cc4a3f8e7a4",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "2a7f0050-4a83-4f47-a2c6-e69d090204c7"
        },
        "item": {
          "id": "7f84afb3-e361-4dbf-897e-c0b304049235",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "49a48465-1ae8-4c73-89c9-660cd03c07cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d67dd2c-58be-4f96-b9c7-12d8ecc43a0b",
        "cursor": {
          "ref": "6540914a-43fe-4bfe-9c71-28e5e4d97833",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "0387f908-e74f-4412-a009-3e91f1485c73"
        },
        "item": {
          "id": "0d67dd2c-58be-4f96-b9c7-12d8ecc43a0b",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "ade701d0-d5b6-4a20-996d-1e2dc35eef9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ea2e4e2-0c47-4574-ab4f-5bb9315b7703",
        "cursor": {
          "ref": "31f587e2-de65-49f6-996d-aeca3fdb291b",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "636ea9e1-26dc-4fcd-b856-b57e3d44bbda"
        },
        "item": {
          "id": "7ea2e4e2-0c47-4574-ab4f-5bb9315b7703",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "aa574cb2-8911-4242-b601-670912b5e26b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a173321-0bf5-4202-8ed9-88755207a5fd",
        "cursor": {
          "ref": "c6ef6bfc-c2eb-4cd6-8e01-9814a4f2f93c",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "fa5563d6-1956-48ae-8d08-8da53b7ec205"
        },
        "item": {
          "id": "4a173321-0bf5-4202-8ed9-88755207a5fd",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "e7a5d2c4-8e82-4818-85ff-e2121e537cc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fd9731c-c9d6-4012-944a-1828bc4b42b7",
        "cursor": {
          "ref": "dc8760ca-8653-4551-9f00-b310925377e5",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "4d5189b5-7df4-42fb-adce-2e94bd8c06b2"
        },
        "item": {
          "id": "4fd9731c-c9d6-4012-944a-1828bc4b42b7",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "6276281d-09be-4674-a97b-1e33b77b9ffd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ff6a840-ed4b-41aa-b4fa-1baa47f68985",
        "cursor": {
          "ref": "d8dde2b2-350a-4601-b093-c09b876172ed",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "df65a919-f7fd-40bf-8f24-fe0ed135f6e4"
        },
        "item": {
          "id": "1ff6a840-ed4b-41aa-b4fa-1baa47f68985",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "5e2e2f0d-6eb8-4f97-905d-54a85f3c6852",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b41573d5-fe71-48eb-b4f2-11435358b55b",
        "cursor": {
          "ref": "09a90330-e3a5-4e99-822b-5048bdfd51a9",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "70369c81-eac4-42c7-bac1-3e8fae3860be"
        },
        "item": {
          "id": "b41573d5-fe71-48eb-b4f2-11435358b55b",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "f2a239f1-b86e-4bf5-b673-141193329894",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4f79030-c19c-4c36-9c35-86dbc053dacb",
        "cursor": {
          "ref": "8f710bdb-3052-41f3-a9f3-14f922b7b96a",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "8149ac61-10ac-47a4-8750-8319944b5c8d"
        },
        "item": {
          "id": "c4f79030-c19c-4c36-9c35-86dbc053dacb",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "9cab7473-fdad-4900-ba9d-7fc5ff672b1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4eaa2dad-a611-47f3-95b5-34b0a1b59f19",
        "cursor": {
          "ref": "97f473e3-644e-4fdb-8005-bff0a42457e8",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "74a85c7f-ede8-48c8-b3ce-4f5f22674c1a"
        },
        "item": {
          "id": "4eaa2dad-a611-47f3-95b5-34b0a1b59f19",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "0ec13d8e-dd4b-4862-bf72-d4212f88ecb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e4f1d04-bdfe-4942-984a-1164b13761fa",
        "cursor": {
          "ref": "79959d1c-3b07-4c4e-80c9-2aa3aa193e74",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "0a1ec9c0-8a74-4b4d-b8e4-6f00c26e6d4b"
        },
        "item": {
          "id": "9e4f1d04-bdfe-4942-984a-1164b13761fa",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "1329cc71-4598-4229-be8c-9003eb7ba96d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2390fd76-2d9e-43c3-b58e-c30d295dc644",
        "cursor": {
          "ref": "e4df50da-8acd-4f0f-955d-3cbc8ff5b1f3",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "d5f515d6-e98e-4c44-97b7-e27bb7073abf"
        },
        "item": {
          "id": "2390fd76-2d9e-43c3-b58e-c30d295dc644",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "744ebde4-1805-4780-9e0a-73a1dff50ced",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d964b070-c52e-4689-8a0f-53c60eeb9996",
        "cursor": {
          "ref": "0158b9dd-28f9-4994-bff7-1b22757e7b53",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "45d2b287-e1b8-4d00-a6c6-004522a2a026"
        },
        "item": {
          "id": "d964b070-c52e-4689-8a0f-53c60eeb9996",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "e7bda689-2547-4e11-bae1-3a55bb1735b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9527cb86-9d8b-44d4-b921-0d86d2aac9d8",
        "cursor": {
          "ref": "31e10e1a-60ae-4331-998e-3c9c07eb29c0",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "10a143ad-51ce-4f8a-826d-fe0176a64bc9"
        },
        "item": {
          "id": "9527cb86-9d8b-44d4-b921-0d86d2aac9d8",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "f6f9881d-2060-4688-8eaa-3497be5c8555",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 144,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45b8d066-f1cf-4f02-9a1a-a8953cd6926f",
        "cursor": {
          "ref": "74f4de79-0946-4946-a0e2-12a566f08589",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "bdfbf8e4-54bd-4d18-b4a5-b80d8f95cd37"
        },
        "item": {
          "id": "45b8d066-f1cf-4f02-9a1a-a8953cd6926f",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "252f50b2-a8d3-49eb-b248-c28338a68ea0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee43b34b-479f-4f5a-938b-6620f818daa4",
        "cursor": {
          "ref": "22cf30f6-f4ad-4ce6-b8b5-c8c00d221454",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "7a63bf64-f897-4485-9355-8a139175498c"
        },
        "item": {
          "id": "ee43b34b-479f-4f5a-938b-6620f818daa4",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "e686ffd4-33c2-499a-95d3-6aa97e94f68d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9448546f-b20f-4ad3-b564-c80c699acdc4",
        "cursor": {
          "ref": "aa0ae6f9-d83d-422f-8c0c-a76e26c73a8e",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "94921a06-4613-498a-afc1-4c1e57beac50"
        },
        "item": {
          "id": "9448546f-b20f-4ad3-b564-c80c699acdc4",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "77515134-34b8-474a-8e95-bb60e2bf3a24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6e3fde6-5bfe-4533-a2ce-dbe78b54f7fb",
        "cursor": {
          "ref": "7bc68017-d807-4202-b74b-dc7fa162f7cf",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "0a3c3a7e-4068-4982-8a27-bc319ff06077"
        },
        "item": {
          "id": "b6e3fde6-5bfe-4533-a2ce-dbe78b54f7fb",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "70f9b819-7f22-454b-9250-cf7b17fe7ce7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc1234ba-5ef7-4c48-adcd-e99fb16321bf",
        "cursor": {
          "ref": "7df948bd-3158-480f-9c10-f4d519c4d9f6",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "be4f5b0e-a633-4a42-a204-1f7dbcb59246"
        },
        "item": {
          "id": "bc1234ba-5ef7-4c48-adcd-e99fb16321bf",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "a9926855-1868-46a5-af86-d89e38d7cca9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c73fd48e-fef0-4a7a-a2fb-f3dfc9b5633a",
        "cursor": {
          "ref": "4983904c-1bdb-4661-a1f8-7655aa9dfd94",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "418fedce-6096-4887-97d9-d235588ebad5"
        },
        "item": {
          "id": "c73fd48e-fef0-4a7a-a2fb-f3dfc9b5633a",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "5b3d137c-4c99-401e-ad22-d65f34fb75d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d486f3b-4268-4416-a689-f5b8ec1d9eb5",
        "cursor": {
          "ref": "3c4d5783-863f-44ec-b5d2-a901803aa78c",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "0dec3712-ad54-4ea3-b324-d601af99620d"
        },
        "item": {
          "id": "5d486f3b-4268-4416-a689-f5b8ec1d9eb5",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "1fcb9a1f-976d-40a4-ab09-4bb1f812f8ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33acc839-5383-426f-afe4-57e5a816a76f",
        "cursor": {
          "ref": "27eb7b0c-cea2-48c3-87de-77c44cade068",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "7cce19ba-99fd-415d-afda-16d6143e0e77"
        },
        "item": {
          "id": "33acc839-5383-426f-afe4-57e5a816a76f",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "add7657f-ac9a-4665-9c10-bf0922c99304",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6ffa8b0-9562-4130-9c03-c9283e681cc4",
        "cursor": {
          "ref": "51857bf7-fafc-4582-a00c-7df93b1d47ab",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "01ab7e6f-5ec8-40bb-a263-efe24be0052c"
        },
        "item": {
          "id": "a6ffa8b0-9562-4130-9c03-c9283e681cc4",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "cf8d2333-56f4-4d35-9cdc-bb212667d01b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "573d8d37-9524-484c-aa57-65f48b635642",
        "cursor": {
          "ref": "6b62abfd-42e1-4502-ab69-ea61e68fbab7",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "c4891326-c8c7-4aff-9b94-c11e40baf340"
        },
        "item": {
          "id": "573d8d37-9524-484c-aa57-65f48b635642",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "4f2d2ea9-9e12-45fa-91d5-cd025496937d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5806a5bc-292b-4cd5-8b82-161d3e70522c",
        "cursor": {
          "ref": "87937611-00f8-404d-9d89-91a87d7f3066",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "34ba94c0-c788-411c-b686-d9dfdb209709"
        },
        "item": {
          "id": "5806a5bc-292b-4cd5-8b82-161d3e70522c",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "6ac8e467-f191-4d9a-ba07-d7dcf25c93e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a80b88a-c030-4559-ae65-9a57420d3aab",
        "cursor": {
          "ref": "3e56577c-c345-4020-9ef3-e0e889e56916",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "70127848-a1c0-4454-a084-bbbd56dde59c"
        },
        "item": {
          "id": "1a80b88a-c030-4559-ae65-9a57420d3aab",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "18dba150-4fb3-4e34-a500-a1add118d4a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3026fe8a-3339-4d60-8fcb-e0e10832df8f",
        "cursor": {
          "ref": "18aa56d4-7c4f-491a-a166-bdad8c75b899",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "657b2d6c-b313-4732-b866-28f957dd8af5"
        },
        "item": {
          "id": "3026fe8a-3339-4d60-8fcb-e0e10832df8f",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "246f173d-2f9b-4c11-8cf2-812eb12878ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d673198f-a681-4365-93c1-bd392c004a9d",
        "cursor": {
          "ref": "469bdd07-2a6c-4a13-8e30-6aa1989ed7f3",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "5d00c2b5-599e-4c91-9c7c-f0dd486a487f"
        },
        "item": {
          "id": "d673198f-a681-4365-93c1-bd392c004a9d",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "d56f969b-c333-46b3-af00-20d4926798a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 132,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20d0673b-9542-4070-8aaa-bff2e64ec670",
        "cursor": {
          "ref": "1c657949-f1d0-4eaf-8bef-c72374bd0a7d",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "9960b569-a866-4990-8f38-c3fe9dc5f4d6"
        },
        "item": {
          "id": "20d0673b-9542-4070-8aaa-bff2e64ec670",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "b35a8f0f-9350-446c-bf28-69777e54f937",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bcf98fa-3218-4fee-a16e-b3b2fc42d121",
        "cursor": {
          "ref": "3d303a23-0945-4f55-8c3f-4d71bda8af8d",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "084e89d5-15c8-470a-bcf5-aa1d6030c434"
        },
        "item": {
          "id": "1bcf98fa-3218-4fee-a16e-b3b2fc42d121",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "4b412bef-eb1a-4514-a931-052d10fe96ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c5b19c0-20f8-45d6-8055-2dccd4accc0a",
        "cursor": {
          "ref": "8a42102a-fe2b-4010-9c64-4b71fd74e2d9",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "9699fe18-cfb0-443b-801a-63a1a2f2a69f"
        },
        "item": {
          "id": "2c5b19c0-20f8-45d6-8055-2dccd4accc0a",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "6956d39b-9715-41b7-b064-589fca29880b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c7658fa-2498-4f45-a9fa-17dcf65c99c7",
        "cursor": {
          "ref": "784c22b5-6f0f-433b-a761-2da7d1ab5963",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "c5cf3bc3-b5ae-4b77-b44e-3868b4fbf33c"
        },
        "item": {
          "id": "5c7658fa-2498-4f45-a9fa-17dcf65c99c7",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "127fb63b-5813-4135-a16d-42db5e9b546f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8d15b59-8a92-4799-8dfd-622923d915f1",
        "cursor": {
          "ref": "657b60b3-ade5-4891-96f0-aa25367654ee",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "e35bd528-fef2-4cdf-88c4-520137af617a"
        },
        "item": {
          "id": "e8d15b59-8a92-4799-8dfd-622923d915f1",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "77380777-33b7-495d-9aa9-9bc5d9d38d43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a906f68-cbdd-45e8-9f0d-ad5f6af4e39d",
        "cursor": {
          "ref": "7a3962ee-3d43-4779-ae96-c8d1614e6ad0",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "a28aff13-095a-4dbc-b17b-6c7bb6e5582a"
        },
        "item": {
          "id": "2a906f68-cbdd-45e8-9f0d-ad5f6af4e39d",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "39fc4adb-1405-4157-af48-11db6615b441",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12b68177-326a-49b3-9760-208bae7fb1c4",
        "cursor": {
          "ref": "1dd68b04-83fe-47c4-a7b1-a5179b49d176",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "7919686c-17d7-4785-b4e4-36ca0aff53e8"
        },
        "item": {
          "id": "12b68177-326a-49b3-9760-208bae7fb1c4",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "362fc615-9151-43b0-a92f-148b02b2954b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e4525fb-4bb7-4cf9-aeb8-0f58f511c971",
        "cursor": {
          "ref": "98bdac14-ff3e-4e56-a6f4-e32ba1d71f1d",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "957647d1-d5ab-4062-863a-9ba1554722bd"
        },
        "item": {
          "id": "9e4525fb-4bb7-4cf9-aeb8-0f58f511c971",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "93239846-9f18-49cd-afe5-99bf9bdf7926",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa01e4e8-490a-47c6-8fd1-c84ed4a80cac",
        "cursor": {
          "ref": "0f0aad04-c1b2-4d72-b18f-9458e1728d15",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "b0d0bec6-08a3-4392-857a-5c58fd46cb98"
        },
        "item": {
          "id": "aa01e4e8-490a-47c6-8fd1-c84ed4a80cac",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "162dfe1c-ae97-4927-aadf-3f65654fbd14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d64537d7-b75e-4e58-9291-2313ec4e26f4",
        "cursor": {
          "ref": "6e066926-729b-4ae7-899b-086dc8f7274d",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "f2bc1120-7736-455d-bb93-5e3286905b13"
        },
        "item": {
          "id": "d64537d7-b75e-4e58-9291-2313ec4e26f4",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "0e533de8-a363-4fcd-b6dd-750a7769c8d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af814096-9e70-4fec-b546-02957a50d225",
        "cursor": {
          "ref": "fb018fc8-0060-4379-9808-fc51efcdf863",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "73f1b7d9-9884-44fc-9851-46cbec2e7d09"
        },
        "item": {
          "id": "af814096-9e70-4fec-b546-02957a50d225",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "4e0064bb-2af9-4c6d-ac2d-c01c4b15f324",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f979dcc-3382-4bba-9135-07ac0d27b291",
        "cursor": {
          "ref": "5bf28629-1bd9-45e0-9a17-039311e12e33",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "d4aefe3f-e966-4650-b44f-db2e1848107c"
        },
        "item": {
          "id": "4f979dcc-3382-4bba-9135-07ac0d27b291",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "1c696f8d-a3a9-47fd-a13a-0d6aea5898c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d2b20fa-4253-4ce1-bccd-bc2406d926e3",
        "cursor": {
          "ref": "b614de3a-02b7-4b94-b09b-98fdec4fc06b",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "b24d88b4-00a5-4505-af68-353d8ed23451"
        },
        "item": {
          "id": "6d2b20fa-4253-4ce1-bccd-bc2406d926e3",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "25ab4d2c-f0be-4666-b189-0aa84b185202",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ed69f0d-b783-4325-87dc-9be3ffacd029",
        "cursor": {
          "ref": "c410da45-6e9e-43b0-9417-bfa163f075fd",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "ba30a25a-b48e-4f53-8d66-e28b93c76169"
        },
        "item": {
          "id": "2ed69f0d-b783-4325-87dc-9be3ffacd029",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "ae751fdb-ee95-4430-8f25-27664c99af4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79efcabb-c368-435c-8e78-4c7664c51bb6",
        "cursor": {
          "ref": "ac37b99c-aeb4-4553-8a63-5917ea37ea7c",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "91649cfd-c88a-47b7-b952-224035e40b94"
        },
        "item": {
          "id": "79efcabb-c368-435c-8e78-4c7664c51bb6",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "ded98aae-f863-4809-8007-c950abde70a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3670eaa-91b1-47e0-90a2-c16125512735",
        "cursor": {
          "ref": "f83df2fb-5a8c-4b02-947e-9b9137c97227",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "ba749e1d-2823-4d54-99b8-f582df986bbe"
        },
        "item": {
          "id": "d3670eaa-91b1-47e0-90a2-c16125512735",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "ffcbbb20-99c6-4911-bfed-443b7df16820",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "763557f9-e042-4e8a-a340-315e8d06bf9e",
        "cursor": {
          "ref": "dd62f6f3-dd93-466a-b22b-6075429d5f55",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "9271f085-359f-4931-a4b5-8a72efcec90d"
        },
        "item": {
          "id": "763557f9-e042-4e8a-a340-315e8d06bf9e",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "6503519c-f538-4936-bdb0-57ee28740ca2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5791776d-33cf-4d6f-9ca2-38e67a950a06",
        "cursor": {
          "ref": "ed5285be-1809-4533-9f6d-1760398a42b3",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "f08b4860-f182-4621-93fa-313e1a4ad331"
        },
        "item": {
          "id": "5791776d-33cf-4d6f-9ca2-38e67a950a06",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "33007fac-af20-4801-ba83-6fa988254f43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b1bafe4-4c38-4739-9de2-9e8ed43af0e1",
        "cursor": {
          "ref": "745d3182-5af4-460f-b661-169d3d34e47a",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "675a1580-30aa-417b-9cc5-1b3718e78406"
        },
        "item": {
          "id": "4b1bafe4-4c38-4739-9de2-9e8ed43af0e1",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "baa6dec9-643c-4aba-9f0d-a640876c20f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c1cd415-c324-467d-a9d4-85ab56b47ae6",
        "cursor": {
          "ref": "faf449b3-0f61-48a2-92c9-61ece0dd33d0",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "d0872c10-876e-4165-89e4-1dd984eb4db0"
        },
        "item": {
          "id": "8c1cd415-c324-467d-a9d4-85ab56b47ae6",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "6bd1e1a0-8b83-4b5c-83d5-abb20557bb6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc40d2a1-41e0-44cf-84f7-fda451837196",
        "cursor": {
          "ref": "0f558b13-f48c-473c-b51b-11be3003e98b",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "6c266667-d8cf-47ca-b323-19452e088517"
        },
        "item": {
          "id": "dc40d2a1-41e0-44cf-84f7-fda451837196",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "2a2c10a2-7384-478b-8e0e-860b6b4614ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6f6867c-b116-4f2c-bcaf-3be0db065b88",
        "cursor": {
          "ref": "d404858c-711b-403a-841f-b1ee290e75ba",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "4a49b8ce-4b5d-4e4d-af2e-1f9ecf3075ab"
        },
        "item": {
          "id": "d6f6867c-b116-4f2c-bcaf-3be0db065b88",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "a491778e-77f4-4d90-a056-ad3702966697",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "376e258c-f180-4529-9d7f-b5b484ae49e4",
        "cursor": {
          "ref": "c6dd5242-c46a-45ad-89ce-597b61d40e72",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "456ab530-3cc1-4337-a284-2890bd2fe6b3"
        },
        "item": {
          "id": "376e258c-f180-4529-9d7f-b5b484ae49e4",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "fee7916b-84ad-4fd6-80c8-a96e5b8a52ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a902a7a-065b-4cc1-adcf-bd5d83ff6907",
        "cursor": {
          "ref": "fcfeb82d-77c6-4a16-b459-1aa031b2790a",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "59051627-dd1e-4890-8768-0e7ee39f98f6"
        },
        "item": {
          "id": "7a902a7a-065b-4cc1-adcf-bd5d83ff6907",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "739348dd-f1c9-4b38-8a10-a030f64033f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6430180-d0d4-4c0c-bc5f-b4e1833ddbea",
        "cursor": {
          "ref": "2ab55e8c-7a49-453b-b0dc-32a98b6d3f85",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "0ae0660b-79a1-49d8-8e7a-e104bbfa7d28"
        },
        "item": {
          "id": "d6430180-d0d4-4c0c-bc5f-b4e1833ddbea",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "5b3ce307-bd87-425a-9c02-0296387bc3fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84073e51-3d77-4ab4-9805-7f4bb5683f9e",
        "cursor": {
          "ref": "3220404c-9df3-4886-a4a0-fc8ee3c0fc9b",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "4db12835-9314-446e-8ab2-cb349882acf5"
        },
        "item": {
          "id": "84073e51-3d77-4ab4-9805-7f4bb5683f9e",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "06aea1b5-a8e8-4641-8e68-667f8d40ca8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e445c740-95a3-4394-bd6d-31f6987c401d",
        "cursor": {
          "ref": "8562a8d5-e046-412a-aa8a-bcdadf84ffa4",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "b3e5fcc5-dd12-458b-95f8-e0e137681bcd"
        },
        "item": {
          "id": "e445c740-95a3-4394-bd6d-31f6987c401d",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "06920c38-80a6-4e57-b676-07f78b78a243",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d205de5-f860-4219-8535-a6172a340151",
        "cursor": {
          "ref": "82aea346-b7b4-4a7c-b076-9e0bd8fa5bad",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "748f6e89-a20a-47b4-ba26-3da58d26f249"
        },
        "item": {
          "id": "1d205de5-f860-4219-8535-a6172a340151",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "7f5428ab-9748-4ada-9709-e391d5866ebe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6760f28a-451a-47c2-9422-0805bc315fe7",
        "cursor": {
          "ref": "028f9707-8509-441d-a3ce-892eaded7374",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "82bee3c6-b9e4-49ad-8243-b4d57a24ddc7"
        },
        "item": {
          "id": "6760f28a-451a-47c2-9422-0805bc315fe7",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "2fa703d1-b80c-472c-bd8f-1f95781a264f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32e3d8bf-9c3d-4159-8477-9f964fbd6db8",
        "cursor": {
          "ref": "60c178ee-5dba-4246-bc42-f181eb638993",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "ae47d1e7-2df5-42ff-b9dc-9d5176b9d9c4"
        },
        "item": {
          "id": "32e3d8bf-9c3d-4159-8477-9f964fbd6db8",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "46457ee9-8208-4de5-9ced-fd3ffdca520f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa917c8d-1d10-4322-b081-1a170c3c3d50",
        "cursor": {
          "ref": "ac7c52f3-b72c-4e77-a33b-0671c1896798",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "5c9d2c44-3d76-434e-b4ee-77304e596462"
        },
        "item": {
          "id": "fa917c8d-1d10-4322-b081-1a170c3c3d50",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "8db0186b-7050-4e64-a847-f94b777fa229",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "d109493b-bb79-4d1f-aa00-ecd1933f1cfa",
        "cursor": {
          "ref": "3436fd1e-508f-4960-86ee-99a349f03266",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "74cf0386-5443-48c8-8bc7-c10c33ce15d9"
        },
        "item": {
          "id": "d109493b-bb79-4d1f-aa00-ecd1933f1cfa",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "0b743c5f-ff8c-4288-85eb-ac0ac9099cd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 111,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "cac41c8b-7575-404a-8046-1fb14d1054b6",
        "cursor": {
          "ref": "c321f2c2-666e-4ce1-8be9-4416859899df",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "bfda2b57-58ec-4890-a6b4-594b46284449"
        },
        "item": {
          "id": "cac41c8b-7575-404a-8046-1fb14d1054b6",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "b2c4847c-2840-4f08-af7b-9c7dd6e1d468",
          "status": "OK",
          "code": 200,
          "responseTime": 89,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "121ba9c9-a26f-478d-8b2e-758d63f975e4",
        "cursor": {
          "ref": "45ad914b-ed65-4f3e-a833-e5c91e151756",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "b85aae7a-86a1-4bb8-85ab-bd96410f2871"
        },
        "item": {
          "id": "121ba9c9-a26f-478d-8b2e-758d63f975e4",
          "name": "credentials_verify"
        },
        "response": {
          "id": "a9fff5e2-70fc-4625-961b-d390abdccb8f",
          "status": "OK",
          "code": 200,
          "responseTime": 2232,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "50f5260d-a0ad-4431-8b0b-61facef0e807",
        "cursor": {
          "ref": "c8c41aaf-d6e8-42b3-b1d1-11b3559e22e0",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "ca0e1fdb-0eaf-4656-8534-04bd7147ac9b"
        },
        "item": {
          "id": "50f5260d-a0ad-4431-8b0b-61facef0e807",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "a9c21b51-aeee-49fc-a82a-bed6fea3389d",
          "status": "OK",
          "code": 200,
          "responseTime": 2222,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bbde2b8-9f3a-4fc7-939d-c762596224ad",
        "cursor": {
          "ref": "e1d0fe9f-6bac-4b13-9578-717b2156cfcf",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "b46e30d1-4bdd-48a6-9123-89afe99002ad"
        },
        "item": {
          "id": "7bbde2b8-9f3a-4fc7-939d-c762596224ad",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "b7b2fe48-b344-49cc-a168-56e8aad13602",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "7bbde2b8-9f3a-4fc7-939d-c762596224ad",
        "cursor": {
          "ref": "e1d0fe9f-6bac-4b13-9578-717b2156cfcf",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "b46e30d1-4bdd-48a6-9123-89afe99002ad"
        },
        "item": {
          "id": "7bbde2b8-9f3a-4fc7-939d-c762596224ad",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "b7b2fe48-b344-49cc-a168-56e8aad13602",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "7bbde2b8-9f3a-4fc7-939d-c762596224ad",
        "cursor": {
          "ref": "e1d0fe9f-6bac-4b13-9578-717b2156cfcf",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "b46e30d1-4bdd-48a6-9123-89afe99002ad"
        },
        "item": {
          "id": "7bbde2b8-9f3a-4fc7-939d-c762596224ad",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "b7b2fe48-b344-49cc-a168-56e8aad13602",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "bbf70f36-4964-46fe-8637-c2a2129b0b96",
        "cursor": {
          "ref": "4b1aaf68-0faa-405f-b092-c6e37f4dbfdb",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "b8679420-30ab-4c34-be5f-ae5a09e68a73"
        },
        "item": {
          "id": "bbf70f36-4964-46fe-8637-c2a2129b0b96",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "70a0e899-45ac-469d-b66c-f513bfbd6606",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "2c51f4af-50ae-43aa-b45b-29fe98cc8f9e",
        "cursor": {
          "ref": "a257697f-ee6b-45a2-91d2-12f9eb978092",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "765163e1-d508-4973-a345-fff37baca5c1"
        },
        "item": {
          "id": "2c51f4af-50ae-43aa-b45b-29fe98cc8f9e",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "525e7d2e-12be-4d60-a50b-5681a0e7e136",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "2c51f4af-50ae-43aa-b45b-29fe98cc8f9e",
        "cursor": {
          "ref": "a257697f-ee6b-45a2-91d2-12f9eb978092",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "765163e1-d508-4973-a345-fff37baca5c1"
        },
        "item": {
          "id": "2c51f4af-50ae-43aa-b45b-29fe98cc8f9e",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "525e7d2e-12be-4d60-a50b-5681a0e7e136",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "54833598-9ab7-4422-b324-ec63a045a1df",
        "cursor": {
          "ref": "1ad20773-14e7-49fa-ae1f-53d5281a0c47",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "41337509-13fe-4dfa-8f22-32c586b1b8ce"
        },
        "item": {
          "id": "54833598-9ab7-4422-b324-ec63a045a1df",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "62f4c2ca-999f-41ad-9ef6-c22b648242ac",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 87,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "ad8ab85d-057a-406e-89c5-f101253e0cdf",
        "cursor": {
          "ref": "2fbb8cfe-7083-4c41-8845-9f75c35ff0a3",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "77a3cf09-a4b5-4c0b-9e14-6f90b522bac7"
        },
        "item": {
          "id": "ad8ab85d-057a-406e-89c5-f101253e0cdf",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "1cb366f1-b41e-4e87-a984-78181736ecac",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "ad8ab85d-057a-406e-89c5-f101253e0cdf",
        "cursor": {
          "ref": "2fbb8cfe-7083-4c41-8845-9f75c35ff0a3",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "77a3cf09-a4b5-4c0b-9e14-6f90b522bac7"
        },
        "item": {
          "id": "ad8ab85d-057a-406e-89c5-f101253e0cdf",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "1cb366f1-b41e-4e87-a984-78181736ecac",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "0f413cb6-32ed-45d2-898b-da7e318f27cf",
        "cursor": {
          "ref": "a9c0fff2-1ad0-4be9-a871-92d05540d4cd",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "fccf8259-ce70-4bde-8960-ace6dffef67d"
        },
        "item": {
          "id": "0f413cb6-32ed-45d2-898b-da7e318f27cf",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "f83e4fce-8d04-47d3-8263-8985c77540b4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 106,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      }
    ]
  }
}