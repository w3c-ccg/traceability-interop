{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "3a5e9b0c-3e2a-4057-972d-82c451266734",
        "name": "Clear Cache",
        "item": [
          {
            "id": "74353d5e-049b-43f7-acc0-801d100e1903",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "613fdd07-e7ce-4e36-8f9a-df77b5da2f84",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "25e48941-56a7-47d9-8656-464aa03048b2"
                }
              }
            ]
          },
          {
            "id": "f1323f00-ff71-41b9-92ee-3c48e1f793bb",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3f9112ed-266b-4edb-a56d-e4a39d09ca91",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "4d73ba27-192c-47f3-b1e7-79b18ed8cb14"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "1454455b-ea16-4434-81a7-608cdcf943dc",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "829e4dde-a357-4bfa-b5eb-dac1da2823ba",
            "name": "Positive Testing",
            "item": [
              {
                "id": "87f26e01-3e95-4b57-8da9-cc6fb2033d96",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6d9e9cbf-f94b-4d90-a5b9-9ff74d6de041",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "09148b1e-555c-4703-9e86-fb78c75e8de9"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1d52281f-0b95-4993-ae04-c39c31dab5d9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4f59cb69-95fe-42ab-a36d-fa9d3dffd9ca"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c5d93152-bf49-4ddc-a08e-38989cfe3c39",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f9617a2f-cbd8-43a9-bca0-5ce2b582a12b"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "39d5496f-4815-43b2-819e-405e1b7a7a35",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "7c2b5554-8c8a-4a33-9739-3f0aea33555b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "364570a0-386b-4fe7-85e8-e6ffbad144bd",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f451c19f-efd9-4175-b5b3-2a0f68f66dc5"
            }
          }
        ]
      },
      {
        "id": "c8a03298-3863-4d9a-9c24-66e6ebeb230b",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "3157cc33-d221-4423-ae7d-d615a6b9a629",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d0f18718-1cc8-407a-b121-47532ea10c45",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "a790f2bc-c970-4e18-ae4b-007037fbf467",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4bb2e15-a526-4c8a-9e7a-5d7e0012c022",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2365fb0a-bf61-4f94-b3b5-df1ea14f0a11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aef12490-57e4-4b7c-aacb-133e2fe329bb",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee9b107c-c1c7-4ba3-a99b-0412edbff2a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b340a653-1403-431b-b85e-49be752b5426"
                        }
                      }
                    ]
                  },
                  {
                    "id": "293e8151-471e-4ff8-adef-5118f3cea4b4",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5acc5cc0-c235-446f-b9e6-a09d3416ffed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1046aba4-3ddd-417b-8b38-94fb3e53c383"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a6c979cf-0598-403a-9935-a8be3f362ef8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9bfa3c0e-c3bf-43c2-a09b-e55c8f563792",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07e31e2e-3825-4fd8-9dba-4db12bfa0619",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1d7e43bc-f153-4702-902b-10b9adc57ca2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e3bca85-5549-4157-922b-d76dd68f0f14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "952498e8-c1c5-4906-afe6-7826ce978050"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "74fc9e20-b075-469b-83b1-13261b7472ba",
            "name": "Positive Testing",
            "item": [
              {
                "id": "8dd03888-2b2f-4797-936f-5dd7e4fabf91",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "01804c18-a207-4a93-8037-1491dbb8ba24",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "26e2ffd3-782b-4b98-885e-4cedf23b34e9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "44bef4db-a209-465a-8de4-800fb0567385",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "1167d647-786f-4e55-ba64-f42dcd45ba9c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "dc944f6a-5a1c-47c0-803b-f87bd59ea419",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d65d5979-2eab-4d23-a308-fb7317adb96e"
            }
          }
        ]
      },
      {
        "id": "23dd6b9a-7801-4f63-82c2-43e2057b54f3",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "d5d0699b-ee70-41b5-840a-3d347bd5d59f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "72462e5b-888e-493f-9889-ca5f0e5b8a50",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "770206d8-8aae-4b82-9786-e0f1ec6bb017",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70d424ba-cfad-4e11-b8dc-3bb417258693",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c175f18-0ca9-47c4-9f81-ef5b20802416"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95289cd9-85d9-4bee-949e-ac1b0b409ba2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "76bd59dd-00ea-4948-8d0d-0c8f2bdbdbbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7d68645-9cd7-4695-a868-06565c361978",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c70a0ac9-3cab-40a3-b68f-0cd99d7f3e8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3732fce8-ba4b-4eda-92fe-117b2dd3fc5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6446967d-e736-4715-8bc3-41db29de8f2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c2587790-abd5-4204-9cf8-3deef7e8f0e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5eb80c1-d166-4056-9b55-1b334be5442f",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edd1b3c3-03b6-4c17-8f63-2e30acee0dff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d38df659-bc03-4e96-865b-4da6df91f8ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6abe021c-da88-468c-b864-bb19fa828845",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c257abaa-9727-416b-a1df-38e8cf155fe7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2dba427f-8a5f-4ac2-981d-99f17a0440c2",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d530b62-89fe-4674-bcc9-b599f8b8340c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c735fd58-63a9-403b-b657-f826d56447a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02385f94-2351-49a7-9862-5cc2c1422b95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "680c54c9-0c00-49ea-9038-8ac77fcda06e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ef9e292-c6a9-4db4-b442-81b56a1dd58c",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08a732aa-14c3-45f5-a0ce-6dd4908227b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "226951c0-c3fd-4ef6-b9db-00887664e782"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6171b50-efd5-4d1e-9998-54d2798af610",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1ca987a0-da5b-4920-829a-31632b7e00bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3335cbac-3df7-4d48-b3e2-bdef22d9c080",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b35c31c4-edfa-46dc-8be4-61477c1345cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b70435dd-bd5b-4c83-8bdd-ce555c85d69a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e072c11-ccf2-4934-8500-ac78e0a1fd0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "be38fec3-0d84-4376-9437-ebe7a82ba6da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c50009f-08e8-43b1-843c-9e08cc1fcba8",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0b9ea3a-31d3-4ea5-a247-49dd676fb876",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be2a4f0e-da36-46cc-8778-8ac1a8a97f29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53355208-a485-420e-8ae0-684b39184699",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c146e3de-dbfd-409a-985f-a968f5fe8f43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b50d6dcf-ced1-4df0-8c23-39029f7475aa",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6e43462-e9f6-46fd-848b-96dec56977f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73940021-b6e6-446f-93b6-93e9285045e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac5830d9-e7bc-4ada-813b-0b6964401e9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ea24d598-2d30-4935-8abe-b9af70b4671f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "112d9402-3513-45d3-83be-8fe65ec33292",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d03166cb-f1e0-4f15-a03d-77c20c45790f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c54bbb66-8746-4d4c-a8fb-c45ca8b9c267"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5db3f573-0a85-4a48-8966-21dcfb438b55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ad653808-8ff7-41cc-b9c6-889536b8b94d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9401c187-ec4b-433a-aba9-0f05d0f3cd52",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17ef2504-f250-4f45-a8d3-8f76c4c5e416",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "230ce7a9-9ec4-4ed5-94e0-485b318f4b28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cd1fd3d-3fe1-4c0c-9293-f52a252daaf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "58eb7390-6827-461a-b9aa-f297c5eb2cec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e9a9954-5259-49a0-a46b-2da61782dfa9",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d20bb1d-14b5-4119-8940-abb178604db7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b07d363b-b5df-44c0-a20f-9f006665cff0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43054863-80bd-4be5-b039-5604e54599c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8e0292e9-d32c-42c1-9624-e3430b9a381d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7b1d057-5511-451a-a5ff-bf215ecd5591",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8b3136b-0af3-41d2-8388-e19d5ab112e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bae9374c-c4f3-4f4d-a3bf-bdff7dd07e4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9aade1a9-a83e-43cc-808d-646a233effda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bd215b20-017f-4c4f-aa0f-2f290b6eb3e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30585e09-6850-4b13-a13d-2acaf8c03eab",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffc821db-810f-47e4-bd67-297e29205897",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d7b3611-a41c-4165-817c-03648be087e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a48fc154-2109-42d6-a785-d84b64c4edf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8eaa2870-db15-4326-93aa-675018394f5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65c4aea9-8a81-4266-96c6-d1a004edc90f",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e7589af-33b5-41f4-9f20-b06e395af86a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08902806-8fa5-4b6c-973f-c432c62fae1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "458c3a7d-e10d-4c23-93f7-74d4a4964294",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7715f070-6af8-4976-a177-465b91c7b8f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "009f478d-f24c-42b3-87cb-33c9c720a1f8",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f990506f-ec79-42e5-9746-07d846b665cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "933521e0-4e0a-4f3d-8107-0104484eac81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af8a8d91-37bf-4768-9388-f7aaa91b2b64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "252f6422-e261-4abf-bc6d-8d104ae55980"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8a94758-87f7-46b6-a8d0-c5258234d6dd",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "117942b2-d314-4418-81b6-57bad41c20f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "137c5597-4740-46cd-a506-bd41761e8fff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4551dbf-fe8a-46a8-a84c-d631ea12e222",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "504488b5-92f2-42ee-ada1-d0f741f7d706"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22fe203c-60c3-495a-9ff4-33d6f9bdf37a",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "820bff64-3bae-4e40-a2ca-01be414d2700",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb6d35e8-b727-4b6b-b468-b33a3ede57f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b737e782-7fd1-437f-857f-31e1b65debdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "178b6036-0986-46ec-8336-2829d5a0e910"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b416e25-e7a1-4fc7-afa2-58eea80907f6",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4fd07f7-0f1e-432d-8ae6-d242c8702896",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec811a4d-4327-4ac7-bab7-8d17bedd3fda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b800c34-b3a4-4ee5-a57f-14fc9e0dabbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "72c09e6a-bd27-4944-a384-8149019a6a6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a2e6270-6496-4df1-befd-abadd00c8805",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "960c6a6c-f9d2-4836-8395-48b182c04bcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "564f39ff-3f8b-41e8-ac60-64e7f03b679e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5c8a6c0-6170-4349-af66-886945bbaa50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "50fa6bc7-0da1-489c-b321-31159bafd46d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e08c7bc5-a3ea-4e01-a38b-cb6ef20e883b",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c16e1157-1f5b-497e-94b6-9bfea53bcaf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90cfe354-7389-46e3-890d-0f7fca3778c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6acd16f0-fd2f-4573-9e76-b60cef6210c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d443a467-3167-4db7-8d28-749ee369c925"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b961f82-c3c2-4940-b3dc-26beef0b5e34",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcab3e36-1ac2-4833-8cc8-516982738bb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cba7429b-0a5d-4005-8c48-c89234d4f3b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d28bda5-9c26-4313-a0ac-66090aba7dc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9f227737-c8ac-461b-813f-9053e38a92d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5d16d0e-0eb0-4411-8db8-3fa4c050e960",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4236fb00-35c0-4f64-bc8a-6f1f44bf29be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1804bc12-7a7d-4990-9bcc-84c0617d1615"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d22b5fa-8bf6-4854-8a31-dbd0f287a537",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1baece9c-fa46-4b81-8c39-1c7324d3a915"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05278fe7-2814-49cf-86f2-de5064a6f80f",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb062442-e2ff-424b-a92e-a3e9d832a4d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4709c28-b2fe-453a-8e3d-47d90b09a7fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f260617-a658-425c-8a83-b76822d055f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a93b1de4-e9c9-4d95-afc1-dff6c7dd9f87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d60c8cac-0fd9-4f38-a40d-093d6a536bc9",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4181483f-ec7b-445c-aaba-561e0c69e613",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71dcff48-1ce4-4a79-bcd6-d527fe0ee217"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05827541-e44e-4f3a-9e4d-fba755abe629",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "135c7342-6e7f-44c4-8d7b-b287c9ef6b3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c623b80-fac5-4929-8eb0-a758c07170d7",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b908779-a2d5-4259-a63a-f3d58e1fbe8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e2a058a-2a30-4252-8787-5d8e7c5fd709"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7ab9fe2-9827-4377-ac95-079d17c515c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5651db9d-4a62-4116-a44b-576009d66fb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbac3a19-2542-42d4-925c-b2d0c93461db",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52b27cbf-739b-47fa-8d07-5a1289629c49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e116965-0f3a-4ad8-b691-95e0152de848"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98ae52c6-55b8-4bc1-b5e2-f7f6f2ff72c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e4a761b7-5786-4fdd-a35b-58507380255b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae45fd17-6b6c-4313-a37f-d96743b0c49a",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b87a53d-2c2c-4337-a49a-849ebcca5a0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "080de394-05b2-40a7-94a8-ab5d5d870627"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "632ddfc2-1b6b-459e-9ae6-2ea5966f522a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "908984cd-2972-4d30-a2c6-01d15ff7df73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c62873a6-bfc5-4837-b19f-f71efe7caf27",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "562df38c-7745-4e76-98e5-fbc7e58f9a7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40475c4a-11a8-43a9-9052-f314a5b33557"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef1cd9df-ed81-44b5-8620-6a0f825b9fb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0272808e-d1e1-402c-927c-bd5d147cedd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2751ad55-ec0b-4b11-97e1-4ddcca9e46a3",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b1d88e6-94cd-4c84-ae4d-7de3fe37ff78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4433f16b-92b5-4d41-826b-ce7230152001"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cc33f92-d43a-4535-9e47-903751705987",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ed29ad13-5f8a-4ce6-852b-3d153e423a37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23de7d01-bf6c-41cb-a594-e1b8e1edc0e2",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "443f372d-7e90-42b0-b32b-96a6658b7539",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee8382d8-cefe-4e6e-8282-b226a2136929"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8492416d-bb35-4d9d-917a-05920253c82d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "b229f841-94a8-47ba-85e0-e8ded9e10dc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d47ce6a-5e4d-47d3-b608-9512820865b1",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a734fca-19d4-4810-9e21-d5033e746dc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00d3560c-4ee4-41e8-a390-27b3d0c06212"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb4a8d05-54b0-49e6-8551-4e4ae9c03778",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "45d7b512-9686-4101-831c-0771455781fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bfdb9fb-215a-480a-be91-21ed4a79b536",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "baf8ac77-7a83-4137-aa13-2cef96a8b8c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "112f5089-57da-4aa9-bac4-6e3c9fb5e5cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7703cdb9-ac79-4405-9372-5ca13692be23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "13965e47-654b-4d35-adc9-4db5a92d5bc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffbafc66-b68a-4d01-919c-a164304194e6",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8df3f7d4-9065-4a4a-a093-a1c50d47352e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4dde8fa2-a3ae-4554-807d-106b007f2462"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9099c979-ca05-4a2e-9396-9f3deb3a9c88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b817949e-544c-40f1-8561-6eebe5fcaef4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0106410b-ed4e-467f-99e1-26fa9dd5ae15",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71e3bca5-ccd1-4257-9894-bc646f4d8a12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72463533-eccf-4466-9575-46eb88e886b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c6d5d12-6586-4e18-848b-ff2a1e94ca9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "601277f6-dd4b-4f5b-8c80-5fca2c8d45b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dd6f143-a0ec-44ee-a6bd-db42a4c689c3",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e20723c8-fed4-463a-9cf1-76620c08c7f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8103ab6-a89f-47f4-8b27-db0d69dc6333"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fab19eb0-f68e-4017-836e-1a769075d310",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "d4c246f3-71be-4658-907b-7488b814b40a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61e20b99-6929-4b5e-a58a-bc76483b0dc6",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0e18495-4432-4ff2-a7e7-60d9746bbf27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9d1cc5c7-4c97-427e-9c29-94c7fc2ce73b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "291ee49d-62a1-479d-b64f-1ef55ce22e2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a28e6f68-555a-42b5-a41f-1d1ef5b97210"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e0ce65d-9dd0-426f-8793-979c6a1b5985",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec38c76d-e959-4cec-885d-f810e3c3f0f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf15d6bc-09ae-4738-8294-b1bcdf256991"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b03ae7b4-d5da-4d1c-a42c-3b3089df757f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4678fdd6-03db-427e-8e44-07ec410c9f46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc2ed6f8-7c06-4217-a1d6-15b4497b27a8",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04dc287f-2742-4787-8b2f-d52726179b6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aede485f-1c6a-4f57-b7c9-8da992573d8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e8975f3-7366-4bbf-bcf8-ece3a56442ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "7c06c7a4-9dbb-45f7-a7cc-817717839d2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df434a37-20bf-4377-9c60-ccb2d2439496",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57554bc4-a908-488f-b7e6-75cb4bffb93c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc3664cc-e84c-4f1b-8ff9-9db774aecf6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "497dedf5-659e-4668-b88e-d68be1a2a15d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "3a270b7b-cea1-411a-afdd-a608bc6d12ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adff50b4-a0d9-4073-8011-d85e306d955c",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d67708d-8b34-490b-b488-a727a520974a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25adce8d-ec29-4238-9607-b28aff663775"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44b4d2cc-4eb1-4e81-a096-31dad5659bbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "6f24de17-3e1b-4af4-aff6-41cf279f2a3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22f39d5f-a97f-44a1-8772-6ad852b11240",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bebdad1-fee3-4633-9d4f-a19c94f599eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31442c82-7faf-4715-b016-b4f30e009755"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "755a7640-4fea-4470-b197-3107d8b77e3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "9b425fa2-d394-4d3a-81ae-d7cd2f771f6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7075fa4f-f8b9-44d5-849f-b918aa1b0361",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c197454-4277-4d42-9e0e-a6c90e3cdfb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c6322d3-7ec7-4f94-91c3-17c3c92d8c99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87ce7b5d-f1b7-4662-b2f9-bba284e98771",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "c68989ce-1f43-4687-8041-908ede7ca335"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94170851-ba0c-44f4-9ba9-ab87f4cf72a0",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a1ca883-8ada-4985-8f70-355aa1f7249b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a19e7f79-93d4-46fb-bdee-bc546e93c591"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35db8151-7030-4d4f-ae23-aa93dc8e4edd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "83e0321d-dde8-4fe0-8f3b-d94ee58fc273"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91f32dba-26b5-4c70-b375-40dedc8be5d9",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ac736c7-e142-46bb-8929-4c33b5c6d5bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "029d3386-a0f2-4c7c-9827-f4ab0cffd54a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "873c00e8-28b6-4af3-bab3-02d09d377a0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "3f5e4959-75b1-42c5-bd14-0c7bc2e407f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8b5f99c-e57b-4745-ba98-aacfa0af4475",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "337938e8-3c2a-4a22-8d51-ccb356bb2509",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebd093a3-857c-4af8-b38a-0a18c70dcf4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcf8a5c3-9e6c-4d98-89b3-efabf0d9e405",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "071b50cf-50c3-4cab-a611-a1c82a264b0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26afbc72-ea17-4973-9908-acf55b868dad",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7385aad0-5216-4dd5-a90e-520b82f6161d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e098b1d-29ce-4572-b916-aef43be33801"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2234b273-b8b9-4ac3-af40-6957199d5d22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d71e8e17-6086-4e5d-a113-8c8ba7feb8c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bc6f316-1d95-4fc2-8bfc-f84061364575",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba5d08e1-c064-43c6-9c72-3cfa58c6f728",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8a38192-a343-4596-81eb-9d5da3d16f9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96c8b84e-ed5b-4df1-8cfb-4f3280b6913a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ac331776-55c2-4fb6-bfb0-dc5fbafe0b73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa34c691-d9e7-4bfe-9ab9-a4273ffbcc1a",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "911d1e54-a4dc-4cc1-9908-8723c77b7360",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81d3e8c7-6056-41bb-b6df-6a68d864495d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01ce994e-bc92-4b95-8fac-81c3b8e23785",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f090460b-4694-4c4f-9994-c1ef31a7a368"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bca63f6e-7aca-4636-83eb-d79a472c5052",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "823d189e-6c95-47f6-84b5-061ff862be6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7a70966-35e2-41ba-93f7-78f86cf1cf1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8561e051-d75d-42a6-af67-02ae6beb7734",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f2b0d767-7efd-4d84-b563-89e1e22770d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb96d06e-4359-46ca-a25e-73739186d0b4",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13f8d65d-404e-4724-9ad1-108f8357c18e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d152bfd0-fe40-4101-ad42-02199d1dfe01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edbf00d9-f42f-44e2-b318-6b361003804c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6425bb5c-3d4c-4098-b5bd-c1a4c1c1f5a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9064b371-8302-4bae-9904-beef248b51ac",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1662cbb-f6fd-4f65-9d80-adf3b36d1298",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78da06c9-1439-4e9d-8f58-0e73fe156489"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5eb7da03-faac-4538-909b-7b3e99fd0d08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "23cad631-e90a-455b-9b34-44d1e8a4f6aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e233fb4c-9818-4735-a20f-c25ce5dc3b66",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1029b3ba-b5c0-4cb2-8fba-1768f69bb091",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45fff5d8-e9fe-44ae-8221-78d66a9edcfa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cadfbe82-2b21-4a0a-8b97-dcd2261c2d34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "17a3ccfd-9fa3-46d9-9b77-f0f813482bd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b4c74c2-d4e2-4112-9898-c970f45037d1",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba261cec-6c9c-4873-93eb-95adca3ec0de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "627c5ba7-652f-4296-b5bf-897dce40871f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e103fb62-4f86-498e-8ec8-5783b996a9da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a2c6fc9c-cd03-461a-ae06-3d09ec2d0c58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f1f5f41-96a6-4cc3-be05-ae24b6ab730f",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4afd378c-0e37-4ba6-ade0-fc906decd9c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d86c69e2-638a-4769-ac03-9951b6414722"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2d775ba-fe4c-4273-b4b8-c50c970b9567",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e84c6395-310a-4f75-a679-3a117cec4418"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35fe584d-30fa-4a2e-928b-b2642ca318a4",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a303d82-dc89-4429-8232-a16a98b33f4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df49efb3-d5ff-4422-8626-5b9fac55d0b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5dc365a-159b-40c2-ab8b-82fe84a48728",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "468a1c93-ac42-4709-a701-38a802559bb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30dad803-180d-4d5a-bf20-14873afdd7ac",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "062f8a74-f2dc-4e5f-b682-c4fd0c9bf567",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea4e364b-4ce5-4002-b0e1-b39ae73639b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a29e86d-9904-45b4-b0dc-00c2226b0904",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "24eced27-b7ab-4772-89a5-87295530308a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99acd94a-5b60-4a7d-9e55-cc53808c731e",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6053aa4-5f34-421d-a57e-c7e67e0304a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e903227-3644-49c3-a4f8-36dae78a8ac2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8657eead-da1f-4102-a609-a80a5fc74648",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "96da266d-9014-4a2e-8ca8-f8a82c554ce3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee130393-1c12-40cb-8ad2-d50c4f83122a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c3dfb74-95a9-4c5c-9cae-888d2095b521",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09390d60-45e6-4624-8db4-8ac46b2af18b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "953026ab-d314-4c8d-95a2-f552d353896b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "4b3fade6-76b8-40e8-a0e1-95dcb168b007"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50fa137d-e36f-469c-ae90-d7e870733ad9",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27afd62f-1efc-4c7a-ba08-ea13b0041e8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a806861c-336a-47b8-a7b3-8cad7dd5f1e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2146583-ec26-4858-9f1d-dc607a8c4b63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "96696aa2-cb4c-4fac-82b5-529fbfdcf928"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5b3913a-0358-48ac-93ff-84fee024cb54",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5f158b7-0e29-41f4-970d-c2aa9de11791",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85138c40-1afb-427f-8af9-64467aac1c9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cadb8714-ac01-494e-b5b2-7d04b2c523fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "67b14cc8-cb5a-45e9-9403-c9a1afa64577"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3703d2bd-74b8-4a43-bd39-522e183ddd4f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb63b939-069c-4511-b862-c64f2795ad7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "431cc25f-34d5-4962-8e4b-080c06da84d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93cc76f1-678e-4c07-80ce-7a2873268824",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "9f661c63-8dd1-4ecc-89bd-d3acb47a6655"
                        }
                      }
                    ]
                  },
                  {
                    "id": "919b5ea8-24fd-4407-a35f-d41e3368ad51",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9abfa90-e43f-4232-8ab0-98bb3227d4f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "583100ff-d5b2-46aa-80f2-2fa5d12db27b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3d57e31-b932-433d-83b3-37282c5b2066",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "01361149-48f0-4e54-8dc2-2ccb5aff2bf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e0e2a4e-4c2e-4866-85f8-d11804285316",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c39ac7f8-0e11-4b8c-968a-154fb62a9199",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96d5f285-7d43-4fa9-b2aa-22dd3b3a6515"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fada8530-3377-4432-9f2e-ebed722e16d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "3da79031-2c44-44a4-add9-ad7605f0dad1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8e9078a-04f1-41c3-ad44-07616f409ce4",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79a47020-8c61-4a53-a919-5e4810272f77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30141d50-0c5d-4d6c-9e4a-98ce0666237b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97480261-dea7-4ead-88d1-b5f38626f427",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f248ae70-3346-4886-b9e5-f9a2f7750959"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de259b90-4847-47d3-8794-2810aabb0c71",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a55bf22-6659-4b8b-bf6e-37b9bb2a6ca9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13251ec3-b377-49ac-b3b6-927ac8552804"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a319906-af4a-4252-a0c5-1d5875d795b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2ae0f946-c73c-41be-b14f-031e519bf596"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98dcf07a-42a7-44c2-8d08-bb94a45969e4",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "136735ab-10d8-444b-b810-630a53d6d795",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbb8cc0d-9370-4b3c-8438-a929a9e3a8e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0695e86-a74c-4706-8f08-27e144d92ef8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a74007df-fcb9-4435-a96d-1cff7dae8e62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d17b161-2c3f-437c-94cb-cb0dbf7f5e29",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5210c167-2f94-4633-9c09-5932d1b9a166",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a47ca430-2df1-4ded-acfd-6c03b3b1b15a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e90afad2-326c-4407-b548-16ca08672df4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0ab632a7-424a-46c3-9d4a-8257bc882fc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59cf2d15-cf5e-4aec-9c64-4f8b26038416",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0634d5ba-ba79-4152-85e0-7f9747a312ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f17e1461-d146-49c0-96d9-9ea4cc86e4a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b1aff75-138b-4b73-916b-30458b905561",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "98b6a397-8444-4005-9854-0c07cc5bb348"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4e7c52f-493c-49f0-8be2-c0a66c8102a9",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0036686c-fec9-4b97-b1f4-02a3864cfe1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2a342ac-6d8b-48e0-8b5e-7d236ddbf952"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa92d524-d780-4ea1-9b95-14fcce93bdcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "7be86333-54a1-44c3-a3d2-13e2679c1860"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb705261-608b-4c75-b174-0788818c901c",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b5a2b1a-cd30-48dc-8820-3442e920a756",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a4297cf-b66a-49dc-901e-428495ecff6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e1e5ff6-3150-4dbe-92e0-ef46e40bee6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "11cf997c-8d23-4149-a06a-75c48215601b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f41679a7-a16b-4778-8a34-adb65ecf362a",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6aff7ea1-5962-4ac9-931a-992f3ae5a1ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb846bad-dc82-41a6-861e-e71febf18eb4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea37610e-a7b9-4fdc-a3dc-b33a52b50118",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ae5939fc-fd9c-492b-a950-516345a462a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "958a7eed-ed4a-4d78-ac8c-33d767311696",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c59336f-711e-476d-b424-b77e8d1b453b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5c2d2fc-ce99-4ae2-b1e8-69bb8ba372a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5adf108b-4c78-4a99-9ddc-49d1189f5cdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cbed6fd1-dd4f-41f7-84c2-4c3c2dbe9364"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fe8b450-24be-45bf-a427-b278df4b797c",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb226f93-9e7e-46d6-a1d4-2d4eb86b68c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54e9a292-241c-436c-bb4c-436102f05b4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31475907-31f5-4bc0-af68-644fafa2daa9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0e733c9b-3310-4bfe-b240-566b4451d6b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2e2db07-7dd0-48b2-8964-adf14c0bd1ce",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6610d8e-7a42-4bf5-9dbc-a03258f36b44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7172e44-9ac8-4961-8b65-97e54e21e6f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14984194-cc8c-46d1-85bf-e25aab40dacf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5ee3628d-c3a9-4d31-8a0c-62db7700cced"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4640ad09-4ed4-439f-917d-d6f1cf91a936",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9af8cd1c-f61e-4f82-9b3d-0cf011c3f543",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ef44516-7341-4acc-b008-d3038711fa47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6a163fc-ce63-4a7c-8492-dee76c39600c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "dd1c7f3e-b768-4685-998e-cb8ff8ca2e1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "277c0165-c549-468a-a715-98b76b89940e",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3926610a-f0b6-4974-9cb0-ed0e8ce43810",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a17c31f6-32d9-4688-a2d4-8c87df68ba3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3713d1cb-d82e-4554-b5dc-c38bbb9c5312",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "56ee89bc-880e-46f2-a9b7-fe5483f1cb57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2be4297d-7fd8-47a1-8d6d-0f69b2f34d73",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fb98df6-057f-4cc5-af9f-c72cdecd7279",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "188d4d00-dd1d-4ced-af58-33b4589ad9ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f25e24aa-1178-4589-9cd1-8c66441826fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d19c8673-213b-4ae1-b3b1-9223297de8ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dd6dd8c-4dd5-474e-acff-bab88d0abd24",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4658194b-b26b-473c-b747-2601a427f0f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1eaa0ecb-ef4e-46ad-ac25-c4291944d948"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c006d821-daf3-4016-bd12-2fe0a2047476",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fb4ee73b-053c-4735-824d-9bec82a1992c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3adb1405-e54b-47cd-8adc-36eec03b438f",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16a45461-2fc2-4543-821c-83f29731ee12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04d1b454-18e6-41d0-beb3-e998166f2e2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b4c08e6-95c6-4599-add7-1fcb3708172d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c7f56146-5672-45bd-9895-e0e425934176"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ef7e57c-6a20-43af-a2b8-56b8c114f43c",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e102ce0-fb2c-4992-9743-3a9bd9adb39d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c9b418d-9b8b-4d4c-8a74-381f7546bac8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6fc3579-7f57-4af5-abc0-74b8344095d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f11f3eda-d58b-4b7e-9131-3f0eab0b897d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60508b07-8597-405a-be55-cd603e98d627",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cce9b8f-3bfe-4990-822d-2b1d7f33eb17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fdc6a64-0801-4d1d-80e6-7862fce8e172"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83532772-0283-4e97-8f4e-0b0f89a1237f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "3a52e8eb-78c5-40cb-958b-30b8c80a97ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62aebc3e-c531-432b-9468-a6cdbfa2d007",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e086f7a5-12e5-468d-a85c-6cc1b1e9f28e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e456a21-2065-4f45-843f-2f7619f0fea5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cf8597b-04c5-40b2-8e8d-e47d191f81e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c7efc599-bf74-4452-a49f-d2f9e5a30132"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5293e0ac-8fa0-475c-aa1d-047202fd6781",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "659fe1c8-64d5-4552-9f86-31eb6ccdb748",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "630027b0-4f95-48b1-b549-6d8bffc00217"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17b60f8f-d1b8-4db1-a53f-a1c8035396b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bfad8294-132a-4fff-88b2-e665b513eb57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45288590-c60d-491b-bff8-e34c6f427734",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "935c669d-9e9c-4363-b7cb-292205d136d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3231354e-4ed5-4526-b451-e10ac7158cc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e731c34-6b9c-4df7-b2a9-d728044dc6c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f57d8036-c02d-479f-bdad-e51837888eaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01741d10-c963-49c1-b772-1de699d3cce6",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "456e1a62-ff31-4a33-99c8-30fb35f84683",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf17511b-9c73-4c87-923f-8ab4dba6b10e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b2b7c1c-2d44-42f7-9952-961cd8fc8ca5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "db3cd902-e127-4e89-be42-c282a71fbd22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd398c6f-af36-473a-9061-37db32f8d2c8",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a86db508-b66b-41e6-825e-e3ce609d52e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "767d58a4-5b2b-4547-a2ec-cd812cbbb1ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7b92ec1-d469-4d91-8cf2-f1e28829af43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "09eed78a-c536-42b5-aef7-dca44111c651"
                        }
                      }
                    ]
                  },
                  {
                    "id": "670e49c8-59c0-4af5-9496-97ddf667c128",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d68d2b7-fbc7-4058-b03e-374c3bdca712",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83fe6dd0-d030-431a-a7c3-69caa30fd666"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a61048f8-b446-45ed-8d94-7b69ca002608",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "7c707c7b-cb4a-48a3-a920-213c12636798"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14d420e3-e801-4f0e-8ced-715e8e54deab",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "517dd6bb-3332-4e06-9d1b-f00f6e67f507",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a2cda0e-43c2-4081-acaa-ba7fd2c4c9c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d0ffef9-ec43-45be-8470-83f378132fdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "c804a538-ed5b-46f7-a09d-5a1d6ec3c3d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9d4aadf-500f-4e7a-98b6-3bba80a2f389",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdcbacea-0735-47b9-9299-b03088b074f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d39d0871-f595-4c8d-90da-5cd2499226ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4216ca02-37b6-4796-b1e9-17596d8415b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "e8583b3c-e20f-4614-b4b1-31efb2ff357b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6a7a04a-b78b-4c89-9881-68a7f2cb733a",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "200795f9-5b7e-49d7-910d-8a9a3ee1013e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da06212e-54a5-407f-ad0e-f89b9479cfeb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ae3b5ba-05af-40d1-b17e-b36abf3a2c09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "ef43a3bb-d8ee-4c95-b52d-74d71c2a34a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47497ca9-8bba-42a5-929a-c178fd286930",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f95bcde8-1aa4-4f0f-b757-cd7dc0f2ae76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f433fd3e-670f-4800-a0b8-6d3cc0fdfdfe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdc1fe57-bb0b-4aef-92b8-b35567105801",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "3a07be2a-ffc7-4b5f-9bf1-667a38b2aca4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c047f8b7-c14f-4582-a9ab-f93e8b1357e5",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9529599b-fc5d-4eb6-b716-b6d5c0f9367f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "65ccacb8-7e6a-4137-9dfb-a27b923f786e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5928d50-5fbf-4013-86b3-925141dfc04e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "cc0bb8c8-969c-429c-9bd9-33eb8eace0aa"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "4f445b04-bb6e-4f56-a3d2-8af807a4d0f5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7b58857e-1f94-411b-a5f6-70c497541928",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "689c8692-8c36-45f3-8133-8f7c5b8d901a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "205fb928-54a7-4ae4-8770-060cb3bca8bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7935a527-772e-4ee7-ac80-6f24df554408",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "31d625e8-5341-4f1b-98c0-fdaee5bda598"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6618706a-cc31-486e-89c4-f9033abbffe8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9fb657bb-1726-4923-bcb2-072e62bb7be1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cde2aa5a-35d9-4003-9e80-0d7590c6da6b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e5b707bc-b889-4e2f-a951-bcdd0151d6f5"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3038fe3b-4e08-4377-a62c-4d733d44fe25",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f0a7906f-f6c3-442f-9958-e8823b027c65"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "493599fe-a3e6-4e6f-b6f0-0d81e0bd3537",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9047fd6a-f2ab-4c45-8803-5ff83451018f"
                }
              }
            ]
          },
          {
            "id": "1cfea6d3-192c-49e3-818a-4ce80d429c7d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "349478a0-30ec-46da-a36a-e3e3e256ed4d",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "ea796210-3abf-4aa0-a87d-dbdcf4c8625b",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc616ab8-00e6-4d5c-ba0a-fed46f781bcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "d27c5362-2315-40ab-9d41-b15ad16bd05d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16ed3b80-1458-475b-a91f-f407f53f7254",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec04ae6f-d482-426f-aa29-a74ca53d771d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "527ba757-cd38-4ec1-81b2-a41c196b73d0",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "71c3d07f-356b-4986-bf50-2d786d6ba1ef",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f224112e-dfbe-4d73-908d-169fa05c53f5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "12800cbf-f051-4bbe-bbb0-b7db38912169",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "85eb370a-da47-4b80-8d60-4df8856ccac7"
                    }
                  }
                ]
              },
              {
                "id": "d34ab7c8-b368-4471-bcf4-038783b848d8",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1c6dfab0-e7d8-4293-bd36-ebce7d9f1c9a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3c731f9a-7b08-40e6-bf33-5ca8d7bf41ee"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6974c82d-e96b-4f67-82f9-89a664990372",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "45f9c8b4-958c-4fa5-8559-d8a31e14e436"
                    }
                  }
                ]
              },
              {
                "id": "57d03ab2-23b3-440c-8c5a-bec2496ff18b",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "62674402-a4f4-48d0-ab53-3ea1543ac009",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b732e1a3-01db-4201-ab7e-a80a576eb69f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "54196f75-e844-4978-aa43-ae1d04590684",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "326cfd4d-93e1-419d-98be-a07a6f2b7028"
                    }
                  }
                ]
              },
              {
                "id": "b7f836f3-445a-46b8-b050-180fb8525c1d",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ed024572-0281-4db3-9dc7-cf58ddc02096",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d92d9da5-1838-4793-825c-3f6ab21ad9d6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3cf4c76a-3f0e-4cd5-a7aa-cda64d45dbdd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "d4774d93-070c-4aac-a1bc-431d7dc7cd15"
                    }
                  }
                ]
              },
              {
                "id": "a68b557c-ce89-4874-8533-d63a2389e0cb",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6ae35ca0-b223-458b-8f52-d0cd5bd35f9a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d26ed4a4-fbd9-4d70-a1ad-767ddcc38ef5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f1a2e4c1-5704-4778-af92-4893acfce2a1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "4f51c7da-ce11-4b29-b3a6-934ed2c20fc1"
                    }
                  }
                ]
              },
              {
                "id": "59d17ba4-893d-416d-9a05-6ddf1a2a615b",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0b5deff3-19ea-4c51-9847-c2a864f1d4a3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0fda4b2a-e6c5-4b17-8ac1-3652b46ec87b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6a3e3ad0-eaf3-4db6-b3bb-2ec8ee8f1997",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "857f4e4a-4b36-4c82-8eca-8add6330dda7"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "82c08731-5834-49ae-93b2-21bb9daef967",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0a736451-51f9-4c1e-b872-0e01a40f4cad"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "6d763160-7a4b-4ad6-93b8-38e84f12faf9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ee1d7e5a-18d3-44ea-9c08-f8a67846c38c"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "47c1852b-7e56-46e5-bb70-07167ca86faa",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "722dd9d9-f467-47e5-a2b6-e5aa20a3c104"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "54c4d013-b2ca-4d00-b1b9-2fb9c28abe15",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "aeadea5f-1fd9-4f43-bb3b-71d5ba6e3be0"
            }
          }
        ]
      },
      {
        "id": "e61dc702-c30a-4aee-9ee8-623700e44046",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "28551ac0-6a81-4ecb-a01e-535f14cb95ca",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7d1ec02c-ca85-4b5a-aa9d-412d922384b3",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "d47e3b9c-3625-4a54-9be5-8cdaa46c3577",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18bb1468-719b-4c8b-ab8a-f220542cbdaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fdb6117-93f0-42ea-a138-27ea4803c0a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2e68faa-9288-4a63-80f4-968626acc435",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "a33c7537-3ea2-4951-81ff-f5a231e12a0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27e4e8fc-431e-4e1e-adee-241ab01d6855",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04e5f33b-da96-4d9f-be7a-405e503373b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "038f6b8b-6dab-4e92-8ba5-3728663dd04e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d79d834e-ad8e-41e4-a218-18b43bdc2e7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f3bcf0c6-ec7d-46cb-afee-cec7bbb04842"
                        }
                      }
                    ]
                  },
                  {
                    "id": "939e480c-0c47-4214-addb-d20441c59a9a",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6049e743-a2e3-467f-95cc-c26df199128a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8f13d2d-4610-4880-9553-b63a42cfead6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b41f8ade-9ce6-49ad-80ce-3c9185794aad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5d3faa88-c290-40ae-806f-f99af5680645"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25a2e6d7-09cb-4f1f-a8f3-469f492cc91f",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3618be2f-bd4b-4580-b343-451353232aae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94074a53-0cef-4621-b629-d95d7e39fd76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bbd818c-3587-4a7f-b313-4f19ee9fdaae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a6697dab-5c31-4ab4-bea0-9e6cb632fd5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "096b8e42-7847-4ddf-ab3a-7c0d9ecb99eb",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7566fdac-510b-4aec-950a-b5bddfaf1dcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78cf5232-6369-4268-8dc2-a6c4a7ecf853"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53f6b335-98f2-4e73-96d5-1d1b0fec9808",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8c531dcf-e27e-4aee-b2fe-ba4cf7c1ce43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6a4ac50-dc1f-477d-9475-a6ffcf854498",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a6564ba-b20f-4846-a2f1-e8589fd53856",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46be1d0e-e226-4361-a4cb-2c5728ffda9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61afcfee-bb38-46c5-b786-07d9448317dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4fe97da5-e1bd-4b64-af92-bf29435ebd4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "139ba366-41f2-4e42-ae08-ac2171638e83",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6353f4e-018e-41ed-b057-2711cf990228",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a725f340-95d4-43e5-a0da-4bab16dd3dbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bf5ef74-2ffa-45f1-ad63-c4f8dcef684c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "ecec9ff4-f8d6-4824-bcc0-af2757d576ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0dd50bc-3472-4027-880d-c3b05c1d1b07",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d2eaa2f-bf15-4c1f-b116-cacdd95c3abc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a59ea250-8491-4b24-9b88-1c216f74ad86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f782a57-920b-4f60-b70f-8b6c51d9479d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c6f47fe3-ab8d-4bad-83c5-05f60d822984"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41fdf229-9263-42b7-b577-84782ee2068a",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "535a34eb-c214-4614-b454-9b12cce8e422",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c30f1ead-7515-41bb-8ead-483d92abde9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2df3786-43f0-472f-b4e2-b16734535a09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7ebddedb-f70c-4b14-a4ae-765b0adb6d16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2563c8f8-c8a5-461b-b5a7-fca2b5ff1c9a",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "269f870e-414e-4bae-b4f9-df2e5d90fe78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b84786df-ff91-445d-8d2f-5e5189fecafd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3054e792-9605-45fb-8229-b5771f3bd891",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c2048663-aa98-4fe2-9db5-a7a7b196922e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9b46d6e-a269-42c7-97fd-3bd3ab2d51ff",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e9dd46f-b26e-4dd2-b898-a5cb8f185b1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4230b52c-45a2-4692-8f4f-7dc34945b9ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "300160f1-bb9b-4d74-989e-952bc88f13aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "cf010c0f-256d-4eb5-9c88-7d0a354cf13e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bedf3db7-fd43-4b9f-b956-8f1a15ae800b",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db6b878b-b218-43e0-8d49-ae62c7560984",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eab9fabf-e6d9-445c-bb93-2e67593cb873"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00c34452-da96-4d0d-9dbd-5679c6b40bcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "09f410a3-15a7-4ad0-96b2-001a5e25309f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8707ff51-93fc-42e6-943a-4970d306ab4d",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43b0c2eb-e195-43ba-a5a3-4cd0d7d5810a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8dbb17bf-c13d-498b-82d5-c58ba8c30d6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5eea3c6b-d307-4c2e-96aa-2bae7b08a7f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b80947dd-7f05-452a-8029-e2d11716ccab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c9cf7e9-1680-4966-8ca2-88999b1cb1a6",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "513ae922-9189-4cd0-99d4-75948aecc8cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a13c411-0e61-484c-9b45-12aad2f7bbd6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c88b1f50-1796-4ac7-946a-c69f4afed5c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "7c68ff33-94d2-43ce-b6d4-580d1a166d15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "869211b9-69f2-449f-84c7-ac8a1410be11",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74322ac9-ca79-40ea-950a-cfe685bea47b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7679c0a2-14f4-4e34-a0d7-dd6902232b0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8d51238-4bb8-43bf-92d6-14555b9967bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "a9ec7e00-d93c-4f25-b3c1-b6a1acd64f49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e801ac4a-51de-4eb2-9989-12f8a376985e",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cdf1e6d-acc7-4554-8705-b22245b28eed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a9ec80b-aca7-4dc2-afa3-8fbe6d1f36e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ece819ff-c877-4efb-97ca-4ccf3a67dee2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "86669318-ed38-4501-adce-aefa3d7bdd69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e89ef06-f4a3-4494-804c-5b7d4b39f104",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0960005b-0f6b-4a15-a75c-f33be2e2cd24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38e7dc0b-a035-4a79-8939-71791462cec5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dbbf88a-9c85-4886-9b4c-e9e7ed9c3382",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "5fcc514a-ca02-4263-acba-1b32ebd85820"
                        }
                      }
                    ]
                  },
                  {
                    "id": "883adbd0-0fc7-440a-8c9c-962c7ffb3c0e",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c584e5ea-9534-46eb-98da-b0426d69872b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52c68cd6-7402-4067-909a-88231619b256"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2425034-377c-4909-b92a-d3fe18cbfc95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "f95ccd0d-6a4e-4021-94ff-939d9c3baaa4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e506b991-c5ab-487a-b714-4c2754ff021e",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dea0e69f-d82b-4aff-84b0-33823dc8230a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cb4fbed-3624-4c8e-9bd3-c15d47e7b73b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7f5e25a-da8c-42ee-90b4-82cec62713a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "86c315fc-a121-47d3-922f-53049240a289"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7faf3b4e-2cb7-49c1-9e67-000cd5158867",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaa5c6bb-c126-4bdc-87b4-3aba7e77595b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f73abbe-d5a4-473d-a043-776535cfa456"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0eb02e8-4501-455e-8c86-8eae2bf88fdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "de3511a5-8265-4bcb-b4cb-75530c545f83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c32814f-debd-49f1-9c66-3426cf251275",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76f32947-91ce-4348-bd63-4dda9a9c7b5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8ab63ca-6c4a-4288-8916-0cf6b0761945"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63e0347a-4c76-4952-adcb-c7ae10bbe1f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "35209851-dec0-4973-a3c8-e174337bdaa6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2b2267d-1a27-4dc9-aeac-bd8168baf035",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "175855dc-3e40-4da5-8892-7aff71198763",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f9f9d36-ad11-474a-9748-f2e605c9a851"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d97f8a9a-ed87-4afb-a998-332de9cfd786",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "71ba5ba0-3a6f-44a8-ab8b-53aa39aad8a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "263c05cb-17a5-4a3d-bedd-8675d011009b",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a062a0dd-4417-4ef8-9be7-e06deacd7006",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7a179b0-c7d1-4eaa-9ecd-7948a9abfaf5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83ec7567-04dc-4996-863e-057ef1cbe5e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dac7a1d2-bad5-4eaa-91a0-92ed446a7235"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0cd5536-ea16-4bfa-9ad8-42b8e8e2cc1b",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4da8e660-9364-4495-98b4-3791d90a49d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6d00a2b-9ffe-4589-9cac-17dc132f4716"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b022f37d-24ea-4632-ac9a-64cc82465b23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a981fc7b-85c2-4ecf-898b-7701d4005e97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b33c354c-33c5-4802-b59c-e05161d79f6f",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81ad8341-1c21-4aff-af88-1f50767b6db4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "276ed94d-7fee-4383-a954-bc802f3a19bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dcd3525-b48d-47a7-b16d-143605d19346",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f79f725f-81c6-49c3-9abf-73de328267ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4882203a-2ab8-4f9d-9b6d-f105f9080fd7",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09a79cc6-1d9b-43a2-82dc-87d1297dfac5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff135c99-a020-480a-b33b-48ea38ad4bea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c9ae17c-8e6a-45cf-847b-01fa7c9beefb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5a588436-2f8d-45a1-89bc-26440ae0738a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "beb368e0-948e-4275-b4f5-10add48bbda2",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81c038dd-cd03-46a0-ae0d-82e726159a07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b395250b-89a4-40ca-aaa1-397d78d547ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd55071a-c848-42c5-a6d5-40f1f4bfc987",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a71f7467-1cd7-4248-aec7-52ea9f42df48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86f54fda-7dc7-4131-8a60-12385d208f92",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "172d116d-34db-41d1-bbd9-c13eae24eab5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92a138a4-224c-476c-8295-e09ffdac0fdf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c0c5e76-7f69-44dc-bde0-69e63410f6bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f29e6502-b80a-46ac-9b15-4b3f4df285d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f70fef7e-8ed9-4b9d-852d-3e1d5cd740bc",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7ed1a55-47d0-47b4-b23b-7ee841a68cd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a17023b1-72ad-4c48-8fff-6373d630504f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d00e80a4-da3b-4243-ad75-44424b7526f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "39b41f6d-953e-4fcd-b397-5e2dc371e839"
                        }
                      }
                    ]
                  },
                  {
                    "id": "912952ef-2575-465c-a105-ea973abfbf26",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d4152f4-ac45-4214-adf0-7048214c662e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "259987b0-1fac-4437-842f-1c4da18048f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "164470e9-9172-4685-a1de-0daaad7400d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0d961729-8c9f-4cdc-9209-7887e6ae8bf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83cd6b49-05c2-4f9e-961f-4b7426f200e2",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c82ca98-c317-4b5a-8198-c0ff24c19557",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34091f42-02f0-4e01-97d7-cd59e1115464"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "847c8b64-1d8b-4ddf-89f9-e2c5d1d20b3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f08cf68c-bb78-48f7-93dc-0ebeb47cec9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5e9eb1d-5ce3-45a8-afe6-ddfd76762921",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0961c24b-2ac9-4a82-9765-749625e3c36f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d07ebe85-e447-4c42-8277-20432a0ea3c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cac70032-c7ca-4121-b3cf-d40e8afd8b55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c0338a9a-bbf0-4bdf-a794-48195eecea08"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ce5906f5-c390-4544-bd82-c40292ed0b4c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "016b06eb-00ac-4f23-8767-2df11ab2a1cd",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19d5b912-c9cc-4517-9489-41d3e600d8dc",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "29e4de83-3aff-45a2-affb-52f7f1db448b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89f6090b-eee7-4c88-870b-563ee2729a00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8b3ea115-9e5e-4e3a-83e7-dc2c0326d7a6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8c34ed48-2182-42a5-9581-c994e7dcbf75",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7a6af0f5-c4c8-4030-b3c0-bf89c30ed178"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c57702e1-9fd0-4086-8300-07ffde8ae339",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "10c15908-17ab-4a8e-b065-57af5e7df2e9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e8be413e-3af5-4501-a318-93d108ffba2b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "f360ec2f-0ed9-40d3-bd44-6b65b1eb17e1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "01637b4c-4c54-4ef8-aee6-3578274ad5dd",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "90817853-38d7-4f0d-9222-9265956a8424"
            }
          }
        ]
      },
      {
        "id": "002d5647-d601-4446-bdb9-570e37348945",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "e51d1cb5-1be5-4bf8-87e1-474cb4d86e34",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2a842dab-80a0-4d05-997f-6a06e1e91989",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "c249f060-1793-4c18-816a-300c91a98658",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c95e1645-48de-46a8-b8e1-3a4639f0a244",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a31288d6-ede5-4d43-919b-9353bcc674b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "536cdc5a-79aa-46a2-bfd7-129c9dce907e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "b58972ad-638a-4108-abf4-8b0fe64e0796"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9241af9-ebb1-4cf0-9323-23ef18878ec4",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2601dc28-4756-4e01-97be-3c5ffeb480ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62d64fa3-2c8b-4a98-b62c-f4957bf2298b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59d5a595-7f4a-468b-aea6-5d0346d33f8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "421af7e3-e73c-4d25-b970-d6065febb71c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f819ed7e-fc51-4340-89ef-0c1e6a104078",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e817afc-4c97-4689-aebf-330ac96a3f4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da0dd1ef-03cc-4faa-92b0-f2b17feee419"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26857bd0-66d3-40f5-9c6f-008f9661bfb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2cd54200-53b5-4dfe-98c9-e3d900647da1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3169a50b-bd45-44ea-83f8-ffae5616bb49",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5acc6e5-c4bf-47ad-b66a-10f18540b905",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "974bc1f3-0776-4179-837b-f5f11e7d8b7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34f29242-daea-494b-a2d3-d73ca5bb720a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2007557b-5ac2-4ae0-be3e-e2d3f4c47faf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6d4e0e6-bb78-461f-b796-69082f685f55",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d033a563-afe6-4c88-aeb6-1b4ce93f2154",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fb8378f-5d61-4450-8c86-cd4c9b7c70f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22f52da2-af03-4add-bd0f-a67af52e1480",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "43bf779e-eb3f-42ff-8956-491f1fe674da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f025f274-0570-432a-a295-d7db1759a587",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11836e3c-8b3a-4aed-bd7a-a56ef681fcdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb10fd39-60b1-4a9d-b0ef-1a133b0adfb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b04ae762-cf9f-401c-9d3b-6a7d8b5f3694",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "56b52224-ab1a-4318-b05c-f409776cc355"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5df24060-4b57-4f8a-8b7a-a2f0bca77448",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4005ff6d-70ca-41c6-80e3-ce0b6750c1b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5de03760-7273-4c26-a5dd-53f2aea3b0c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4f991c7-a238-4374-aee7-a9db520fc333",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "27d9f80c-b24f-44d6-867a-d3e6ff6eb15f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ec233bc-314a-4072-ab6f-690803a5781b",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88026936-2228-420b-840c-61db2550f289",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bce82195-d1fd-469b-a6d5-bc58d6abc80b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "971e91ac-06a5-4f1f-ac57-3b7aed9ec559",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "566a153e-8907-4da1-9f9a-29d3c15f43b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4545d639-0c4c-41fb-8229-0257a7988df6",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6a01d91-731b-41fe-9123-136d66d4c090",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "783612a6-eae7-4340-8105-cb2c09a353b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e11442b0-af09-4d0b-8932-5cf7580b1d22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6a28bd6f-cd10-4b3d-a71e-7a27fa4ef7c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8225f328-d5d3-41c0-9298-2ff9fd902641",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36330594-7183-41dc-94cb-014eb1a2c942",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49174d59-3efc-469a-a24c-49213b50d573"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "189d96cf-c964-4020-a3df-228ebfcf5069",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "93443277-f1b4-4a38-bc37-faef81f72f9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96ec4bba-c2ba-4777-a963-bb18bf9abc44",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "336893b8-fc44-4271-b39c-3a20b6730065",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93efafde-de9b-4efc-9814-b979a6074257"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cae7532-09b9-47a4-b0f2-2204051c58a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "44c0bb10-6857-43f2-b6d3-aac357195d51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0061cad6-9155-451d-9955-4250775f5e42",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "965e5e5d-9dae-476b-a3bd-92a0e7d8880a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8490b2f9-b0cd-44be-ae47-f5e54eba7eab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfe565da-39df-477a-8792-e57a19c04323",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "778c608f-b94e-43bc-9f13-1ce39da54953"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b9f1bc9-838e-4ab6-961a-4524fca01548",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59c9c174-625d-41e8-b2bd-92bacee218dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75f4a0d0-ca12-4b87-a4f5-77ffcf9fd169"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db84ab02-50db-470f-9061-4e7b089aabe0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b7bd68ef-ec34-4ffa-b219-f34a61e6bca4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc74855c-59e3-4a68-bdc5-d43561cc013e",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89a68f41-1b46-48f2-bb20-e86bbb6eabee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7d8c8e3-e431-47fd-b4cf-7fc5d006840b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38bd9caf-af35-4632-9597-f09bf9806d0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "8af37673-5a57-48f1-a300-64fe0e35338b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85490bfc-3c61-41c4-b5f4-57924087ccdb",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb889663-8df0-46e4-a622-eb98aec80f2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecdcf3dc-846b-4c4b-9aec-077787b24f29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d13cb9d-da51-4049-8529-281eb13118d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "8ffa8f0f-e75e-4c13-8150-71e3b64b8436"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c616580-d8c8-4204-bb5b-c3590f8cf038",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "852c786a-93d8-405f-b0e8-0454d06a074a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04752bf3-0cec-42e5-aac6-8559a6bb0e39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb259fcf-d5a8-4f22-9642-259d654ab096",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "c1940939-1143-4ff6-a9e6-db283a9556d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4c9dc85-6432-4876-9586-355441ada15e",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16ab6723-934f-4c97-92de-86e5bf7e9cb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54562754-f774-43f9-bdc0-ed84b7d3b80c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca76fc93-bab6-4551-9d4f-f5f2ebff22a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "95528ab8-8ca6-4ef4-a52b-b60a3c7dea5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e70882d2-11fa-4382-8efc-d40c04f6b7f7",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "850796dc-49dd-4a05-9646-65b9b6949ba5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc73dca5-ffd7-4ee5-9e3f-15b13f8b4091"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa381aa4-f0bc-4376-9320-c4b4c1156bcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "94795653-161f-4fad-95e3-fb55397006cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "976eb0ee-7d7f-4f2c-ba30-f8401ab8248f",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04c2cc0d-26fe-46e6-b5da-106684fbdfcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "925eb80d-47d5-408e-949b-6728c37ba2e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "892d232d-b15e-4d10-a9ab-da372cb79419",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8838a458-a6b7-444f-85e7-6c37c82d2019"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc3dffdd-e27f-408c-8a89-8346468fd482",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55d6f454-f133-48fa-a00e-67f45a81718a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1c01daf-06c4-49b7-b7af-fad601f19d81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b4c1e67-358e-44d1-aafc-4fa2c01f2b1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3f4c056b-3575-47b1-8fa0-60faa73057e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8bb8f56-6101-40c3-98dc-61710d63b4bb",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dccc240-4e42-4910-aab7-318e0d25d18c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "750ef73c-8332-4e75-90b9-2abeb0f812ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f038717d-1637-4ae1-902e-47c632e73e61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "66e3f81f-35a5-4d1c-82f8-21733968c424"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16670ceb-f5c5-4ff2-b91b-fcc7d1d4e7f3",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "236c6f97-32da-4ee2-8ff1-2911470dc765",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf8c1173-0443-4cf2-88e6-f61d0a35da4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86eb0f44-13e8-4cd1-8c78-0e1e0767221d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d232ce17-6c58-40a0-a403-0868a9d2f814"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1e6e1ef-524d-4ce7-851d-419c3e6c9b3d",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92ce651e-28af-4102-bee2-f71a53571991",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "736cdf96-c4e6-48d3-b029-6688012794f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58843cde-be4a-49c3-a6a7-03bdaa5d5221",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e778fcfd-572d-498c-9157-56a76e16b573"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1fc6066-0d51-44dd-a535-658095978eb2",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e91aee2-323f-4096-89e8-ad75b8e5d63d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12291226-9a55-462b-ae7d-a027f0168fc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c22dea17-c439-46fc-979b-115d0735486c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b161432f-31cd-4dd3-b44d-b5679415d3f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d11e7474-ed6a-41fa-8b99-cab3c69fbd6e",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fa8d912-b477-4648-9087-8b86b49a25e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff0fd599-6500-4e89-849e-dd2948ff4c3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a448a445-d93e-423e-99c2-454d9779ad28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4ce48ac0-0b0e-461e-a5be-f6821c5fc857"
                        }
                      }
                    ]
                  },
                  {
                    "id": "217a5c4a-557d-40bc-8d15-bcd872b1faed",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32741f61-e752-4da2-b93a-ef00b90a18ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cdc7759-de29-43ba-8c26-36a17445fc19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d2d43c8-f239-4493-89cc-7aa11b4f71b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b3729647-427d-4c57-9f44-5fd021ac33e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9511fff-a399-40a9-b061-512b7b86c100",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1aed3d9b-0d44-4c8a-bda6-031a6686db13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc6a6d1e-6829-44b2-8ef4-63fc634ee734"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f036d55-6f0f-40a9-a803-04e0dd09555c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "11f1563e-0a4c-4985-8d07-f48a845e0deb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5f7a7e8-6f3b-4b06-90ae-3800de325429",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "794de850-426f-4cfb-8ef3-c73e3d7b88fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5c135b3-14b0-4ded-8e0c-0d2becb3c51b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "839781ab-9785-4850-8e15-06214994a9a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ed809c27-9b0b-44fa-909d-950d64308bbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79443970-d201-45b0-8164-8a5ab9348f21",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "939fb54b-7195-4550-9c4f-6438334726a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e5acc0f-e6ee-4712-aacf-f8b45ec37889"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d096d67-7ab5-4be4-820e-b1bde9b5c24f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e24a5a54-ffe2-40e9-b5ec-879d7046c77e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aeb0c3d7-c98d-4491-9f95-958e63ca3d5a",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd70e027-987c-4e5e-b72d-cc7528f5ede1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfd40806-d94f-422f-a92b-593ae48813fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9a88cbb-7891-41c5-9ad5-db8ad48d55b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "88f48d9a-f59b-4765-8960-4187890eba6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3379f244-f88d-4b41-872e-244841b64653",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f0f5b43-75ac-410c-8183-6aa9f04bece3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fe7e15c-f94b-4bd6-8120-b7325d8a93c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a27e8d68-f58c-435e-8a70-3d14a13f2255",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "300bee9c-676e-4bd7-a470-9a67706a1f05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8ff65c3-b3cb-4fd2-ad00-2eb40b9e60a8",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a0a1911-a655-4a62-b41d-e8cfeca7e7d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cff29377-3fc5-4e4e-9cdd-dc4a3fd7c85f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "222e18ca-b220-48bb-b0ab-8a8a834b6cb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6beb3551-da85-4f92-87a7-816cf968d285"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80982cc5-2213-4757-993d-650cb16ed855",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b82a193a-a687-423c-b5f6-4b0b896bd018",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f12d09e-0eaf-48f8-9413-15fc2433f380"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48ea699e-ec02-42ba-a9f5-77af9f50cf3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e50e1f25-008e-42ce-82bd-249bc40966c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84b55eb5-b274-4749-b434-3f626b1ae70b",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "472b291f-b792-4685-988a-5bcf6930efc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f71f8bd-6e0a-4b09-9397-107281a39291"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10885ef5-8f4d-47fe-8e60-e02fb3966a73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "10f46d7f-77b1-4028-8c4b-9ddfed1b0da7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b68eb701-6720-4d5e-b18d-a0e28944007a",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97a90104-e2b6-4a4b-84da-f12e0e93a78c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab604a48-259f-46a0-b22e-175757965cf7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7202fcb1-501e-4990-816d-dab36a9eef67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4d45b6bb-5f2f-4c30-84fa-5893e291e01b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ac3b95e-0c48-4363-ac16-5ac32be5bb03",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f302b19f-191e-4003-b40d-e57a953fa85d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf6e4e55-d513-40bc-a08d-11b074a7d390"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d20e3807-be65-4fd1-b1b8-ace8bf4e1ccc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6eefcb25-c0f3-4825-9c2f-95deed3b563b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5b40146-930a-4de3-8a33-f5117e923b3f",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a898c54-42a4-4e8d-8623-16610d53152e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ef7cd84-841e-40cd-8e61-71ff8716df20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcac042a-a9fb-417f-b428-3c6d596e16fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a813a990-18a7-42d5-961c-7ed85a4a44de"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d4f50db3-ea96-4c8e-9f20-fc0b1cce34c3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9e75a360-f0da-4dbb-9ca1-1b189842dfe0",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32b12420-5cc8-4183-b441-d5882309eaec",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "c074eaad-2944-473b-ab75-b3a042ce1331"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51405a46-dbe6-420c-bd51-cd8b6f0afd30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d8041cbc-92d2-46d1-87a7-d52b3f2aeef7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3f9e9a2f-481c-4d79-84c1-01cbe1d75393",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b6d2a7ca-87e0-449d-8b52-2b114e351192"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b7412565-e174-4ae6-af2c-c2f868115520",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bae6decf-96f9-4625-b2fe-4c63f7d1387e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ebd002fb-9d68-4601-83d2-6af0748fc992",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "1ac2122f-2e0a-46d0-88a7-3942fe4cdd5d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "35c20628-1c84-4b06-8a1c-dcd6e303b575",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "476b5601-d352-4dd4-9474-74c34eb51356"
            }
          }
        ]
      },
      {
        "id": "9d3c49bc-d53f-4b36-9f68-ec49e0580f07",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "e1dd15dd-d9ec-4bf8-9efe-92358d949636",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e69aad31-633d-4dbf-bb6b-ae8ee1442e4e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "1f20e2ce-8551-4dc3-bfcd-2fd4d677fad7",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4586aa2-af70-4a9c-88d2-0995ee381834",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03c2e1ed-560d-4b9a-8ee6-91507c7a414d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae5f2513-1b8f-4196-8fbc-c78896ed83ba",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3f4d28a-4cdd-4583-a224-35aeaf386c6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcff4aa4-e902-47fe-8682-c865f2953393"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a9f3f43-4e36-4561-9d4c-70b9d8ce6a08",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe151351-5baf-48e6-bb83-6bb4a50f4d4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d8eaeb4-71ce-486e-aa28-f522e2131f27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfc16136-da2c-4837-8d93-93729443f947",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40d349bd-092e-43fd-9814-b6ad162f91c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5348a12-6951-48d9-8e1e-775b48dd4282"
                        }
                      }
                    ]
                  },
                  {
                    "id": "536f8a3f-8991-443c-8fab-2846005e2e55",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cb5ca89-6b0b-4e13-acfa-6734ece2d362",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ec8dbeb-6b21-457d-b146-89c5af164efa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03678e04-6535-460e-892c-2078551bd03e",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "549f80ff-d4fa-4408-ba81-6ebfbfc457e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37f2359b-b498-475c-8d59-a1fe3e539b9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "956329fd-cc7f-40c2-8ea7-ce7ad85e8d2e",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "439a0b74-d7cc-4ebe-a830-911fa8124515",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e961d0bb-4870-4a8c-8ec0-47c2c51a6f1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9178eb81-5504-445d-baec-bb7d6432f1a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b9216ac-c7ec-4429-87b3-e7b325feb254"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02fca5bf-0ea3-4605-8954-a228fe6817a2",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ae20a92-1d72-4a84-9303-6fd85492340a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "07a68379-1922-44cc-9877-2b8cffa45ab3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a0c53c7-129b-4425-b7e7-84883add985f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4be1c748-2c2f-4599-911e-9090d55c21fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2051648-e025-4f55-9716-92c34cdcb4c7",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f11d4c2-3af8-4000-94be-d59bfa088f04",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7e69857c-38fc-4fda-9427-a2fdd6b3d9c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "293e42d2-d199-496e-9e87-be7037e91d70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be47dfc1-bb9b-460a-9d3c-df7bcdaf0dc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83eca7a6-289b-4940-8998-c96dfc21df66",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a0698f2-e5de-43ff-bc7e-4d6ebeac674f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9e376f73-806e-498b-a6e7-863e3896678c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98a8a9f4-47e1-40cb-95d7-fc3b5650ecba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef06337a-9139-4899-a312-293a2b263de9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9bdd926-ea12-4256-b094-563d24450271",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42670b40-0f2d-48d2-af25-59df53d3a6d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "334c2015-67c9-4b41-bf1d-fbc64760c573"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "916d4090-2f09-43ec-bfa2-d9f3f9d12304",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3c9638f-90f2-4a1a-9dea-741569daaf90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93839dc9-fbb6-4c76-9cf5-1794a6f003dd",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d67ebf4-c2f8-4368-84ae-be1684b889f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b8a2345-a610-4672-8836-4f00007e9cda"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf25f1ac-3ff2-40f3-b59c-7646ac3bd7f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8704752-fda0-45fd-b5b7-16195d737983"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0784097-c85c-4d55-8d21-f71c6189efbd",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46d18242-e08a-4c62-8ac4-2f27ce9990a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e20a1c37-6595-4164-a552-07aa49eaaef7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e4ac56f-9e42-4c64-b8b2-3fd9c4f78895",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6f15b00-cb90-4afa-b704-adf9f4497e34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e869281c-1fc0-4a06-88d9-2303d4334b65",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "283f5c69-bcd0-4444-ae1b-bc34aee8c364",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2c986815-80a6-4470-840a-f10a3b0b6ea7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d7bed86-ca8e-42ee-aa99-697911139c3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecd1d669-2a29-4e51-a6f2-1f5f7d96d36d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "838a54a4-4a74-4adf-8ab7-8aa0153c3960",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb8836cc-a906-473e-8486-57ef16df7e69",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b68921f1-bdda-47d9-a4f6-1f207170544f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9848e006-b582-4fd0-92be-90e673ebf1ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "508e1002-9f0e-4971-b09b-552412345ef8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f56b2c0-4973-4371-83e7-76d04980ad78",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ce80eac-b052-48ad-9d7e-7e16328efe0a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ad190055-7645-4655-856d-eed64f31b18a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2ead958-6760-4fcf-86d2-b8e49770feb2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70f7d4eb-3b47-4570-ba88-93a86d9f77ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1132c925-1160-463a-bd1f-8e4014fadab4",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99979da8-8be9-4fe7-9a00-23be710cf4a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bfdf7f4-8ebe-4408-942a-c7d5381cbe20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79a45fd2-ceea-434b-9867-571eeb08d530",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a76b4f5b-23e7-42f6-bc97-cfa3e88df40b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59d6d812-a76e-4743-8e04-221bb4098cdf",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b1866e2-5fe9-4d3d-9320-8b45d84fbb77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee4bd464-77ac-44ef-86ba-c3517c3169d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39caed2c-c09f-40b0-b4ed-fc6384b6fd4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bbab683-440f-4ace-b111-a64c9464ea03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2acf160c-69fa-46cc-ac32-7f6f33206b67",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de30bb55-9c56-4cf7-aa2c-86999b2ec7b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cd9f1a5-f018-4fea-b238-270c64ca51ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b183a5d-f1ec-4bb2-8357-c42fdfbdf2e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e384e6c8-25fe-4dd0-abe9-b0b9a32418b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1f23653-e7b9-480c-b28c-ee2e102d5120",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1609682-2a4c-4bcb-a1e3-c57840124166",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a3fa9a7-e88a-44be-9df8-275f911ad7b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6521501e-fa76-4528-92d7-9077c2f7a139",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a60110aa-5435-47ac-aec4-48ad9e16d8dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fd603ab-7082-454e-81e2-f54dbfe868d4",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "853f75fb-dbfb-460e-918a-0501f2fb86b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa69fc7d-15c2-4585-8110-6124fd536d69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb7d5744-8ae2-4913-ba7e-8097a1ac7b47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ec8bfaf-2273-44e5-8222-15e3c06997b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b086241-9ce6-4a1c-ace1-5ccc818112ec",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50c4f15f-5bc9-47b8-bc96-c058b814e7e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49871e53-d9c8-426a-b64c-8aae8c606ed9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b2bd26a-74d9-4225-97fa-201f09d5e7a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "446d883c-f9a8-43ce-be3a-5fa9ff2f8d4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "756a500e-1055-49a7-a3b5-7f447c58e252",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbca8204-ac5a-43fc-beb3-d17490a9e858",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edc349e8-593f-4ee4-bc8d-29f6be67e26f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a60687b-cc57-48e9-8830-6c036551ac6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "391ee747-6ed5-42ef-822d-ad0df9b3236f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55658b88-6ccd-47b6-877f-8e2510161a01",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00189e7e-d7f3-4977-a9be-2b1ea7e595ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "87eb5cc1-d4b7-4a92-8681-d27a4a469d55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0131ed50-3242-434f-8b0d-ca46c6c5e243",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ec925ec-f1dc-44df-96d5-f89db811782b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6b2b0ff-cc0a-47e3-a069-d1b4feaebf34",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50319532-0986-4e3c-875a-0c60e1b36bd5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aa9fbf2e-7dab-46d2-a1d8-86b4e17745f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5575cb5-6412-4364-87c3-d24e6123209a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08395719-341b-4a5e-8ad1-edfee578632b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "107031ab-0ae1-4838-baab-d4fb1895deb6",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "440a696f-b925-4a93-8915-b8dc28e40aea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2d4d03da-7716-40be-8e08-1de948b7a15f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2ff54f2-6691-4676-adc0-e5518145a165",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3aae7c1-293f-4095-919f-d69f1ee248a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bacdee31-4c69-42e8-b5a0-ec61296d4da1",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e26d4a1-947a-4df1-9881-3f75dc1d4c38",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9a37587b-b616-42ca-8093-dc03a7aee479"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0215639d-0e37-4565-9ecb-0677a05ff97a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85116d49-8798-4996-a6c4-51b14fccbf3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05256fb1-04df-4b65-a6ec-f58319e68fff",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15c93011-b49c-411d-9630-bf934d9b2df5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0c5055d-ae22-4c9b-9ab0-def43508821d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "843c5885-272e-4aed-8d81-605a2f74f2cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4844a289-ad6f-4846-81b0-53a25e46ccf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bb9e0dc-f689-475a-bcf0-7be89440dfb7",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12906435-76e8-4c00-8549-f347e421456d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8034baab-1fe9-4779-b665-3e7c39ddd432"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b41ec11c-7a30-4edd-bb0d-62d46e5b06e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfab2ef3-29ad-4713-b623-83f63ba2f2be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0db973e0-6711-45ac-b0e6-a2da84dfb983",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2405b503-27c7-4090-9afe-53e9a01a15f2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8567bee6-83bb-4895-aae6-72366e7000c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bc20ea4-3028-4ad6-b129-ac325e1d3f80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fca3dc42-e6f2-42b8-9b8a-34c755320130"
                        }
                      }
                    ]
                  },
                  {
                    "id": "055df11c-e9b6-4ffd-acf0-412f43f607da",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2177a24-b1c4-49aa-b918-f768d017c30a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "17b6b8ee-858f-4296-85a1-d972d71d9ea3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbc22802-0605-45ae-bb55-7853ae74ba78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a4c8e19-c65f-4693-8193-7fabeafaa839"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9534d1a-028a-493f-9aa3-8109105ec444",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba508f5f-b0ce-4568-8c10-ae22c55a6deb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bf019393-e601-4fe9-a38f-c37f0f7574f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "810cfe54-1c5c-4eea-9f20-ca78cb525352",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f704a8bd-3ee1-47b2-a85c-7c825158af55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "138a985d-a505-4a7b-a51a-95ded4b66acf",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcf7df39-8733-4bab-8147-73cebe443f2a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4921ad1f-28c7-4190-9927-eb9f5898bf72"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f94eba27-1ad9-4d08-8410-713525916371",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6cb4f475-7f40-4053-8b61-b3b84b190269"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcee2a2c-3d2f-4595-9fe9-89efcd4098a9",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a148a24b-71da-4946-9f5b-04439e1d52e4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2f985e4f-2082-404f-9953-5ff0d9b5ed71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86c665dd-9bbf-4605-8ce8-d1f83c2bd599",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f9f6040-e0cb-4e48-b8a9-48c2cf1ceb46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d49c4fd2-f271-4a06-983b-d8b62ca1fb12",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efd91abb-b210-4026-a05a-d7c8aed30f9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f280d770-7d60-447f-9481-8143739a9578"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0277999-ead6-4389-9f20-013aef90e740",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67036231-295d-4e0a-9dc4-4e8499a83cea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ce13f68-cfbf-456b-9e2f-159f6c639985",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55e3e88e-7bbc-4553-8c6e-e1d0cdd59cb4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd4c9c29-4ba1-4a96-aaf5-4b6e334c9548"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b936f8fd-6742-40ff-a226-05466b533bfa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a459cb2e-f8b6-4fff-85c4-2c96b1a6827d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dba5e04-3f26-411e-90a2-c6eb9c15f664",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95aaf49e-41d2-4c39-82ee-775c9c25b6ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a4a618b-1647-4c77-93c1-d143660ac589"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a712185d-2199-4c90-92c3-563a6a92bb84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cb9e2b8-3450-4187-8aa7-12063edc78aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e90074ca-0bc9-42e0-ad64-fd2ec0655ad5",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "424b96b2-9707-4109-976e-8c5f5ff8272c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f822f8f7-7db1-4e04-915e-15da7a26c699"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2ae998b-ed9e-451d-8dd5-77258451c9ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0914fe4f-808f-4883-8f03-38995d8dce77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3db248b9-ee12-4ad5-a14b-a13623210765",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17625193-8275-4a37-b3f8-fc990ff44dab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa1a5889-141c-4cab-a886-708326ec6dd4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff082eea-536e-4256-a603-8ff97e6941e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2fbbdba-f175-4d52-8d0a-adf202c09381"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f6224df-b63c-4063-abba-d8d29413bdf0",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b559ddd-9a3b-4714-b71a-989040740476",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "249303a3-625a-4949-87ec-3472a7b76665"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b44b64d9-8aff-4752-a316-77f0a6713a25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1371421a-121d-4627-980c-a5ba3985e7b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11e3398b-86c3-416b-9911-4f1f67a54371",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1c7d824-691b-49c9-bb06-7c3da5f2ec81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7086808-9ab6-4b8d-9466-7b61a1eb6248"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3950e980-70d6-4294-a954-843f8028b2a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd58f187-609d-42a1-89de-9813f28decc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a316479b-4ddb-4527-a2ca-50e2c25678da",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44dfe9e5-47ce-4abb-9bf3-921acb1bb91e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec0c5378-3d2b-418e-b1d4-b59635e511c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3bd9dc4-d68a-49ff-8a7a-0abe326e4feb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "138b9ac5-8670-4a2d-8acc-a907e22307b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57d63ec6-fab9-4ec8-b3bb-b34dbc0d226c",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78978617-e75a-42a7-be3f-9dc6b790f72b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "677a684b-05b4-4dfc-840d-2acdb555f6f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2189197-4075-4d4e-b71c-46506c257681",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c985ad49-bc23-44d4-b17e-a33efea6fa20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ac1f9ad-1651-41e3-aefc-f1816b6446e1",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3794872-a1bd-4e32-8ccf-2fd8d40c6e39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97541157-7a10-4b2b-9016-15ea96493352"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ced488e-e328-4285-b9a7-7de782267949",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1343c8fa-96d0-41d2-a720-7cbbc611757a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6be64652-a5d8-4a72-a88b-6741803369cb",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2087f2b-285f-4a50-a95a-7a507ef17d36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "158371a5-e662-4f54-83ec-91807743a814"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa00cbf8-daa6-43f7-aead-2fb086b44929",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2b821d8-0561-49c5-9bc1-c2cb94651d21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4f593b3-68a7-46f4-9065-2a8fe29cafdd",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6efd6a6-7f1d-4616-8f7b-8cc3a49afaeb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed646b7c-155c-443d-885d-f45f20f9cfc4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d556cb5-57d2-418b-8635-c38dd8157008",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f0c411c-d01a-4eca-ba76-d83a7e11297a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bf16107-3417-4ff3-b5c1-fc6dfb95f590",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0064823-bde1-4f68-be71-b1a79ddab209",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7fa3427-6b2f-4915-9360-f343e3b01178"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "175748b5-f988-4e97-94fc-fdbc4c062075",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50860261-4548-4719-8663-651d94563ec3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e87fdd52-3687-40de-bfa9-930d623132cd",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f452d9f-b41a-418a-863c-c1b1dd8315cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3660aa03-8a4d-44bc-99a3-9e1514660044"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da659157-ee49-418c-a37c-2011ba01d807",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c118cfb-7d4d-4a77-ab39-08b383fe5cc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b106aa1-97c2-45fa-8bd5-44a4120bc9b3",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a96345b1-ca93-4e18-b99f-c5fcde4c131f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1002bf2a-0e32-4bd5-937f-c24e90debe78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b484a804-11e1-4003-9f0d-cc6a8767543e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e8ee8a9-d693-468a-b04b-c1d8db518096"
                        }
                      }
                    ]
                  },
                  {
                    "id": "373a78e0-d84b-4302-8c84-a6f532871cd7",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5b8ec17-f080-44b7-ba6f-3bc22e7ddab8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3759af94-ff21-4a92-915b-7291f52af382"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bb0bab2-0c91-4db6-b318-856c8f4e974e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0da663ee-bb7b-43e1-a28f-d8aff5ed73cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0e4a21b-7d86-4d75-ad10-bfa3653d4843",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dae84b37-b69e-4a8a-ba3e-4b78213b1f4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bc379b2-03a4-4f46-a0ee-5c718e59876e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b763a76-e382-41a2-812a-6be93955bfc8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d07d7a38-a937-4fb9-926e-61074b55582a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb795498-3fd1-474d-802e-aeb92b4cb965",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e08b2460-05a9-416c-ae2a-e6a084708b8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "084780c2-98e3-47bd-9e44-c96337ba0a32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f997487b-bb7f-491d-80f2-ff82dd92b7d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a547590-226c-45a5-99af-9430a8a5e226"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1fe66ff-c831-4dae-9381-86323c0eb4a4",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "855ab76a-22b8-4a47-9fba-b145a62b906a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18d76aa1-ac4e-4183-88b5-5c0e49c03e1c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dace0c3-7932-464b-bf4a-1652dc129a98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1f1f713-b2ef-4ad4-8ecd-63e520344c38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d26a0c3e-5f89-4e40-b232-e7f70afd1b90",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff719196-7cb6-4dc6-9495-731758268df4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e559dee0-d107-409f-a34b-c671ac8e7405"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5a965f3-36ea-45b6-b21c-d1306acb5f23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "122350ac-c16e-43e6-ac57-5d0af08b3715"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6512ed5c-f4d3-4c2c-b28b-fc88def7c948",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a37d1ad-969f-4e29-a05f-deac9a4f0b86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2673da65-86cb-48c3-a9d6-ebbd21075f17"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2414802b-1a66-4b18-87b3-bd691b58ae7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db1a50f6-5a41-4c09-a353-0b7098855285"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2674b6e2-5645-4734-ba17-095fa5d48e86",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bef363cc-22ca-4db6-b65c-580c0ab64996",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f12d27ba-5683-4d43-b966-1a05ec277f40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3adf8999-c042-4c31-b0ab-79d3816fcb84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60e1de90-e644-47aa-9a2b-912ac7870a8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2a059a8-6f94-4b5e-bda1-9e0a173066d7",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7c947ec-32bb-4e89-bafa-8c2a335a986d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32918a7b-3ccf-4270-9362-d0845e70f56f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8d3afc8-1c4f-463e-8827-bfe12cd7081a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32874dc6-9517-4390-be03-ef4bee3ac3b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33a3a416-0f7a-4512-b695-3c3fc44b6d35",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35846523-788f-42fb-b2f9-1c1b99bac588",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d7885c6-1d58-4181-b857-6e402f313414"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00478021-0e19-4d54-ab53-1973e170fe9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9192bae-6bc6-41ed-bbf5-79457ba962a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4b8ea04-3066-44c4-b9b4-a1fcb5261101",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21565a17-f990-4006-be74-629fc04a1719",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5278d3fa-65bd-4aae-a870-b0cf34a74405"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "900fcaaa-22a9-4488-a8f0-005b50d8b4eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b73c271-5617-4a49-9f20-c41ae2fb1b17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9ac5a29-141b-4c4d-8757-0b6d2bd41296",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffec8037-797b-48e7-81ca-c4c51d0f04f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f72d58d6-09cc-49b2-9407-51c6907935c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c9625bf-d2bd-4931-9a6b-23557a13c267",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "008538a7-329c-478e-bfdf-a65b412259ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "035a6924-15ee-4014-bf81-5cfe4e1cc24c",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "633d3d8d-f3f6-46a9-9f70-b51e0235880c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34e18288-6d19-4493-898e-6ff732cf4d18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38f38a56-05de-44b0-9e85-ce25e0b45f29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e30a6719-4cb0-4ab6-904e-1f7017409589"
                        }
                      }
                    ]
                  },
                  {
                    "id": "590f660d-0afa-4a52-a3be-8f7a83f7d0ae",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57e67e27-4b6a-4fbf-ada7-c06a810c7b43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39a0d7e4-f08a-405e-93e5-a9a97c1bb10e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b16f1cf8-26a3-4f74-9ec4-b4c8c8746696",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "019282e8-f1c3-4228-9c4f-f52b83ffbd8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2442a3bc-3358-4e4e-96d8-462e02c7087d",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49d7ece4-3ce1-4989-b73a-858fb39f6b34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a3ca42c-ca9c-40e6-8790-9531c261161d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4987a9e6-6c40-4008-8b51-81fd933e65b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01731b2d-f1d7-459a-b625-45448adc3c97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fde00d2d-9a31-4dfc-97ea-61a91ae8c64c",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23a7aa2b-b6be-46f2-b078-a21d85f97a30",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b980692-dfad-450b-9381-d661257fda03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4460af76-397e-47fb-a82d-ba8aa879d3ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1a34eda-ab8a-4bcd-93fc-abcbc5f5756e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2dbd0d6c-8182-43c7-9f94-6cc5c8f3f329",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86acaed6-9c6c-4bea-81b8-23eab31f4c4a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "17fb5cc6-f8a1-498a-b9dd-b2dfe07d58e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25822156-5d85-44f7-9e20-e2eee6b333eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1368c2d-f6c6-457e-9328-519aaef39543"
                        }
                      }
                    ]
                  },
                  {
                    "id": "246849a2-56f6-488f-8734-6c12da6aca4b",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9506c322-d1fe-4766-b46d-431fae17a675",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a3d7854e-f00c-4d8c-bf1d-007aa1c781ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c7449de-1e34-4b98-b81a-efe971736bb4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "803d78a4-e4f8-4fb7-84f2-9b39cfc84b37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26878d19-3dfd-4d28-a08a-c939d41bdb88",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10dfe209-51be-47e9-92b1-ee85fc7febdd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8c628824-16dc-46a6-9c29-3fabffd1dcfc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f59aaf9-d143-4252-9e17-1a27d0d043ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "630bb865-30c6-4bf5-81be-8a6ac8d5b187"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16a13246-9667-46cb-ae78-4720266e066d",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b1b10d4-c84a-41ab-a53f-8e73a8eb4050",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3017e32b-084c-4f87-adeb-889d9a899826"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "619b75d4-7a01-493b-b304-115b2623da0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a44b1b58-69a8-46b7-b15e-67e4c26326b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f31cb2d-6456-40ab-a0c6-1688e1679f5b",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c588a1c-5f40-4430-b7c1-f431c2a09958",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "426bb730-365f-48e8-ab1b-be663a12923f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "063842ee-1051-4852-b68a-df6b220a9a01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3713ac9-94b6-40ca-9aad-d68d9396f3ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dedfaa8a-ce65-49be-9302-283df1eaf244",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecf459fa-c697-4668-86c0-da91ce3e251f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2d315c89-08cf-43a2-8de4-3f177388c019"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb4052e3-8841-48c2-9c71-e3273155007b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa1e8989-07fa-41fd-8522-0e40055ddc1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "409e0596-de3b-4b44-8a9e-9a00d73301f0",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e3c22c4-763c-463b-a904-1cb4d1d2934c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2e9c4df9-2c10-4e51-861f-d69f46567577"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "612aeb8a-3a6d-47a1-aa14-6c4b574dbcec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "292349cb-978e-487f-a34e-b161b8991647"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c57b0eb-782c-487f-b66e-5d536bfb5ece",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c145bb9e-985d-482f-b303-2c8cdffebab6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1300a71e-1ac3-4c4d-b42d-8dd134f695cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "796b0984-68db-40ee-89dd-f92899f2f978",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d1f3aba-6dc8-461b-98f7-c14f83af2de4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80cac49d-c2bf-45b6-bddf-3351498b8480",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8fa9254-06db-47e8-bb65-bd699b32a22f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b9a42487-e40b-47ee-a3f7-bd76664cbba2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ba8db42-7668-435f-bf03-bfa0b8a0acc8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22337c1c-6dfc-4100-a949-1da694faa575"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ca48bb8-15c6-42c3-a9b3-be9ef89af3d4",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaf16869-7ce6-4b55-99bd-c9f0614772fc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bea927c6-dd66-41cb-be8d-87812a176529"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e56aaee-1359-4ddb-9615-84fcb53bc8c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0422b6ac-c8fa-40e0-859d-233162a742d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22b7b7a0-1818-4abb-9d75-dc5e1a7b4497",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e96e3318-9a71-4b9a-8466-7859a275a613",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4e0ff292-c52c-4d9d-97db-81c6348a0a15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9d553ae-8520-42dd-a886-e26661b0c5e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9700a60-bbc6-4a86-8f36-c4d15f3a0472"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b19da480-e394-4c41-93da-abe2cff4a162",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db8719fc-a995-4b2c-9c27-bf3f9eade708",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0eca39c3-cf61-4f85-b3a5-61c9199f311f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cdc8364-b9ca-49f7-888a-c3f69a9d855f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0b79674-d032-41ea-a198-c1b90d7971b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fccba27-a836-453d-acac-ddeb09719650",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a61bb76d-cc23-4127-963f-4dfbdb72f1fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f800699c-8d04-4162-a658-b0f809ae38b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f2b6dde-8da1-4330-ad4d-d72ef00daf56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d4ce8cd-a5a4-4476-b5c7-d94b148a24a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e55c69b-9c1a-4c59-9bf1-ef0f9ca49974",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "379edfc9-bfea-42ef-9723-0677aca8c89e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e8344875-07aa-417c-96c6-d05c86920022"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6534a460-a66c-45ad-bf36-460603ac0ffb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d823b74e-58f5-4120-bd3d-61e05f045ace"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a7ca39b-66ea-41c3-952c-ca3714b7d6da",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc6863be-fbe2-4aca-b998-00c22ef923fb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "beae716f-fb78-4075-8871-64ea8a783b94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9555368f-1ca4-4d90-9a94-590a7523f6cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e9d3b5e-20ef-4585-ba2d-0a6c1930682e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d74f1252-1ca1-4624-a3ab-272bd34b0c05",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "937eb8cf-6238-4737-a3f8-607710c9d9fc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bde321d7-5006-4dd0-ac59-e2c46c9f5b06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d857c0ed-c3bc-4f90-8315-1a4bcad8260b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9868c405-bc8c-489e-90ca-b3c8ac834a6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91cbfd10-8ac1-42d7-974f-962459e3c312",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ac3270c-23c2-4519-b523-50c3648f064a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e1fddcb3-495d-4fea-b261-9e727fa6b270"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eed98303-38cb-4235-8247-4327a8e3bdec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d50dfe1-c3cd-4bbe-adf3-cd976943d124"
                        }
                      }
                    ]
                  },
                  {
                    "id": "951d5989-f15a-453a-afa1-26581e6775b9",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0c15a7c-2819-4cb1-a3bb-e391c288b8c8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "048b355c-c158-4a7e-ad10-b2c77fa0ff83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea752ec9-43fb-496d-8198-773f4cf14432",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb4bd581-1889-4722-8c13-1a63b92634ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcdbb2d5-ed3d-4dda-b1a5-ade5cfa6024a",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e977f90f-26fd-48ad-8a58-0a5be54efff4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4dbd9b99-4a0e-4913-b7d1-ca4b32292a04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db83ff55-e519-4298-a16e-c923c70a1d95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b112840-6a4b-41b5-a86c-6dd889635ed6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0ff2017-01c1-4030-b901-f5c3302bb426",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48dd25f4-9450-4afd-9999-7be624aa2c91",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b9e22348-2d35-4665-89ca-a87bac4c76f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcb98604-ecda-4971-aa94-6e163d55217c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6866ab8b-cae0-4c43-8f10-07406f10e563"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83b14083-81c2-42ff-9524-b187e7592a7c",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ff90d40-1da5-4b13-98dc-a3f5cafbbf6b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5c1ebb83-a470-4fbd-bbfa-6e9b34b1114d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ba694fe-96b1-4aef-8407-6ef09ab2aefe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa1a4cd6-2f11-44d2-9996-f288b4a49a5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3751eec6-5f94-49c4-9c7a-80b12be66867",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f10ac10-3b73-40a1-95ff-586795578065",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ebd573ad-0d34-4ec4-857a-c87c058a5ab9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df66839b-c4b0-4bb2-a3d3-dfcb4e45861d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c0cc278-a861-49a8-acc8-7d5baae12aec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd013dfc-aa21-412e-be85-80fb1f574d35",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e38008e-bddc-441f-9bc8-c2828e0fb843",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cce90054-4c0d-49f6-afcd-931d091b8618"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f807533-11fc-483d-ad15-b97db330f939",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d804c79-38fc-4afe-a644-38cef34886c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41ffde2f-83c3-41e3-abf6-ffcd63554b06",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b23dce2-c88b-48c7-b945-159c405bf223",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5b58a6c6-029d-49ab-91a6-ede7955f2833"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58cde3db-f156-49a9-8f27-22910e637504",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "769842f0-6525-4ac9-a703-e1b73dd18814"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2e7e727-feeb-4293-a349-14dc68fd346a",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dc113c3-583c-4876-8df2-ccb7dfb27231",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1a0d1c01-4f33-4eb2-ae84-28c4b6afd95a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dea318f3-1272-420b-b793-8275fb76573a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bd82a3b-f03b-402e-8451-81bcdfada0f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37f243e6-f866-4849-9e64-6e1a91739334",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "795f3ffa-b57c-4340-8980-65d95ae8531b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bcb8019d-d458-4dc5-999a-f739a0788119"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d29615d2-9cf8-47b5-85d9-cf77868df322",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c97c6e2-6228-408f-ad6b-d19330635466"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66bb5ec9-9c96-4641-9e39-3f3c97b6a677",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac8c7e65-73d6-4292-be0a-940478119cf9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "68a06eec-6eec-4086-90be-87dc847ecbf9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b3deb3c-a820-44c3-b06d-68dde8133a90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1898a05a-b0b2-42f7-8495-6ee9de0ffd25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65e4f9e9-54fa-4fa9-9509-ca5df315f467",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c9d4278-ff8e-45ca-8a78-878769d9b14b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bdb16bd1-b987-4958-9905-0fb59fb16d58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2eddfff9-a84f-45c4-9007-b3b3c8845f2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "348b1575-105f-4a5c-a1ee-c8c7954e0240"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42b011ad-c4f2-402a-b3cf-036fe1840254",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9814226-2aaf-436e-80ab-33f9b73daeb8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9f050ab3-ddc6-484f-9a1c-4d4d49c6a7d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e87148a3-9917-411a-8db6-d6357000d883",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60e252cb-81d1-408a-aa7f-75e0250ca9ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecb2f4ce-3862-4d87-82f2-5f4893edf81c",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "766d9c02-5c72-4799-a89e-91f27a202f55",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4af66a96-2efc-439a-a6e6-04dca96f74b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42ed4a74-3f6a-4d8e-acb5-fc9ad27ba777",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35ac3ccb-53dc-4827-9390-9748eb155c1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8aad2dac-2b0c-4f9e-9f79-a703fc60b03b",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f253121-cc1d-4788-bb2e-541504749aec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "089e4aa0-9c99-4695-829a-74774849488f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cd103d7-9274-499a-a827-538451f5c164",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db0ae964-5b6c-4af0-b6c8-23d06bbaab70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dc10296-54fd-48ee-8ed3-4fd0808d2aff",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1759e33c-c5d4-4e49-a701-69f1204c93b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f58f0c55-88d9-4c56-b298-9a14f66fa021"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "815a2a0a-3146-4486-9266-2b72099f536d",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0ac0a2f-9ac3-4974-b719-5bd84a4401b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a99d900-bafb-41c5-a893-93a13b9d8d96",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61a2f740-f775-4e04-9721-98d110c977e1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c7842f5a-81b0-4609-aa68-c007920593ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a44825e5-813a-4356-8356-4b7a667b6515",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47f24668-4642-4f1d-aabb-cec87dc8f708"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2123e778-802a-4860-8b40-6c2f49e4d38c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0efa1763-d176-4d64-9b3b-d8e1dd0b566f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "72eda531-1c2c-4bb8-9f1c-efb9d7cb8ec1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "16930e41-dfa9-47a2-9b78-f1f1fd549d4a"
                    }
                  }
                ]
              },
              {
                "id": "dd639682-8f84-4361-9192-4140fa22865a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "fe5d0c36-1bf2-46dc-b5b0-f788fbba7738",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b9ae2cc-aa29-4f91-b69e-35ffa796d7bc",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "6ec0320f-2960-44e3-850a-ef4c00a552d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe9ed8f9-b39f-4656-b0db-6bcd98a0f2de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "70120fa0-83f3-4adf-91df-1c1c3dfa46f3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8bec5e8e-8a7c-4456-979f-dc604038c99a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3f7e01ec-e1bd-4f31-a965-18f640008569"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "71db8e8d-4fc4-44a9-a813-a50b540bb717",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7bc83a07-2259-4592-8370-fae8b81ede31"
                    }
                  }
                ]
              },
              {
                "id": "488751af-fe5e-4718-b998-ecae78e80a0d",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "44e56b1c-be1d-4b9b-95b3-a956b7f68096",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9ec5a4a-92d6-4003-9a00-876cd1105469",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "89300b53-b99d-413c-b593-9be433c9df23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8738726-7eb4-4cb1-b398-fd848b75daa8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f4d2f32-6d01-4891-b690-0f0fc4ec456e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "f1ababaf-4b85-4a3e-9e8b-60937af45029",
            "name": "Positive Testing",
            "item": [
              {
                "id": "9c1c8ea2-edd9-4706-a58a-1b79f7f0cb6a",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0f8dbc3b-1437-4b9d-b8af-d410ed9a77ca",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "6c0fd085-0865-481c-95ee-350d5716fd3e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1bf5a5cc-fa53-4552-8fae-7f24e017d99b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "59116c1f-cbd6-475b-8ed6-c4d4b3215401"
                    }
                  }
                ]
              },
              {
                "id": "8396c5b1-a1c9-41a3-8ead-13697aa5cc12",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fdc58470-b585-4f9e-bdc2-4162e6f63698",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "7b5d0dcb-c675-40fc-9cb1-aae0c8932413"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "04329dee-3d00-4d8b-838f-0c6b2bd81394",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f69b834a-7d31-4992-a904-5fa5ae570835"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f30e386b-37a6-4c52-a26e-b9cda94fd234",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "8c34798a-de9b-48a1-8f52-429fc45233f1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a12df283-e05a-4d0c-96fc-7dc631562286",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5cab32a2-4f91-44c9-9acb-24f56ffaaa2c"
            }
          }
        ]
      },
      {
        "id": "f09bda1e-ef1c-4fc9-bc23-fa13848ead3e",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "5edcb18f-beb9-45f8-adfd-019ef1d5773d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9a1d54a5-1a1f-4f8f-8806-9c7742fbb21f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "fa014171-0906-47c5-aa74-b760204fa800",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc863807-6218-4d87-9d25-4887ce86218c",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "4a08c42a-4e6e-445e-945c-3dd6ce115fd8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbba0834-d239-42ec-945f-471be49602e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d979aaff-cc81-4e8e-99b9-42d80661bd66"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5f8a55ac-74b2-464d-af3f-060cef0152f7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "78f794c5-c1cf-43cb-8eff-9c1c19f41418"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "543b097f-9f4e-4534-beee-6f951d09d140",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e7b5edc8-3457-4a1f-a86d-ea0ad1caf856"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "528cb358-8f66-48d8-a8be-4e90bdf40e52",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "9a39b8bd-805a-4fa1-94e8-56e32bb4d335"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "dbbf8a45-36bc-4393-8faf-6c35fa010a09",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f78d9b57-413d-4727-8443-c20d908f7f4a"
            }
          }
        ]
      },
      {
        "id": "622470a3-9c81-4555-ae86-cd1702379a19",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "beff5526-35c7-42ee-af1c-f2fc075d1444",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2cf24f06-8b9d-4954-8de1-18dd687e60d0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "fc168fdd-27db-419b-b73a-5bba2556e097",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6d0eced-08ff-4412-a6fc-3ed66e3ab7c2",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "20592184-00a1-42c8-b71c-0f1a00ece575"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce5ee105-ee73-4e36-b095-8a8ce78cec3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8bec8bd6-7b8a-48cf-80e5-11f19f1a7783"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fae3bfc2-4953-44a5-a9d6-88ab4f273c9c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a99b78ee-7f71-4bea-b767-8a86f2ceeaf0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9bbee0a2-ffe4-40a7-9783-911096ea3a7b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c400dbc4-b6b7-47f7-8c5c-a21f5afe4c1f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "03f9d5fd-ec01-4765-940b-8d498a492ba1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "81c9d59e-0c3e-4441-baab-7a46db7f9e35"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4315ff33-3db1-4d95-8c96-acf517fa5292",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "12f678cc-21e8-4345-bcc1-d577950116e4"
            }
          }
        ]
      },
      {
        "id": "a2bed603-fb5a-407f-b454-bee3901e6d52",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "ac3b3a9a-9f02-42ca-906f-ec1d07d49a58",
            "name": "Negative Testing",
            "item": [
              {
                "id": "695121c5-57b1-4745-bf4d-df23a3ce8c13",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d42d0036-99b5-4c9e-b998-7a81fdd773a5",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7f43f73-c560-4d32-bd94-1ac2c7144631",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5a224858-2bb8-4daa-9436-40b114c7bb06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "caa1f7f7-3458-4a75-8571-d34b2857f40b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a05fcd6c-f71e-441d-8379-820ec692122c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e1fbbd79-494a-4573-8fbc-721b723f7d61",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "60dde414-119d-4ea8-831f-719bd0c671c3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5d6e50d0-1de9-4c46-9794-4042b339f727",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "88e055b1-e598-4d4b-8086-7bcd8792f71b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "348491e9-4641-4aa3-bdc4-9f95fcb7b1ba",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "989f4d5f-4989-4357-8c55-51c793ae514e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "03814f81-f2ff-43b2-8c38-94ca647f4ad5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "67fd37ef-ac76-4035-b513-01490f2d4a98"
            }
          }
        ]
      },
      {
        "id": "ea6c4c88-a6ca-4a75-b353-6adfecfca7a6",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "68e0c4cf-c875-4f0c-9c96-169f9f7bd7b3",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "633ceedf-58ff-49ec-8221-2148e4f12d9e",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "271b689a-d4fa-4528-8566-d77c927884ad",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "71cf4e7a-dfb7-4881-a46e-59aab3f10b59",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8e2b6b85-b380-4a84-bfa8-b21dde3fbdd3",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 69
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 88.4842105263158,
      "responseMin": 19,
      "responseMax": 693,
      "responseSd": 76.60115841154604,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1698453144469,
      "completed": 1698453186565
    },
    "executions": [
      {
        "id": "74353d5e-049b-43f7-acc0-801d100e1903",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "623a6d96-74ac-407b-8891-109b21cddb36",
          "httpRequestId": "1812eec5-9a8d-493b-8ae2-47f97a1aa628"
        },
        "item": {
          "id": "74353d5e-049b-43f7-acc0-801d100e1903",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "5c2dd695-1b4a-4060-a236-869ce9b11c0d",
          "status": "OK",
          "code": 200,
          "responseTime": 102,
          "responseSize": 0
        }
      },
      {
        "id": "f1323f00-ff71-41b9-92ee-3c48e1f793bb",
        "cursor": {
          "ref": "66ed9ac6-bef8-4dd5-8406-0f760686768b",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "4624d87f-f72e-4236-bb23-592bd4ff33e0"
        },
        "item": {
          "id": "f1323f00-ff71-41b9-92ee-3c48e1f793bb",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "cfa516f0-a0ed-4406-bd4c-e3c8045a42ae",
          "status": "OK",
          "code": 200,
          "responseTime": 19,
          "responseSize": 0
        }
      },
      {
        "id": "87f26e01-3e95-4b57-8da9-cc6fb2033d96",
        "cursor": {
          "ref": "0e7c65ea-fed6-4d8d-9767-78a063a9f068",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "a7963155-e6a6-4ce0-a55a-1343e7bbe676"
        },
        "item": {
          "id": "87f26e01-3e95-4b57-8da9-cc6fb2033d96",
          "name": "did_json"
        },
        "response": {
          "id": "cf090227-4ea0-4b1b-9196-63ce4446431c",
          "status": "OK",
          "code": 200,
          "responseTime": 357,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a790f2bc-c970-4e18-ae4b-007037fbf467",
        "cursor": {
          "ref": "9dbf4001-c1c9-4777-8bbd-8f5523cdcc24",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "c860834d-7161-4e55-8eaa-782f3b611fe8"
        },
        "item": {
          "id": "a790f2bc-c970-4e18-ae4b-007037fbf467",
          "name": "did:invalid"
        },
        "response": {
          "id": "5e426a2c-7359-45d1-9e79-8b8374833174",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 353,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a790f2bc-c970-4e18-ae4b-007037fbf467",
        "cursor": {
          "ref": "9dbf4001-c1c9-4777-8bbd-8f5523cdcc24",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "c860834d-7161-4e55-8eaa-782f3b611fe8"
        },
        "item": {
          "id": "a790f2bc-c970-4e18-ae4b-007037fbf467",
          "name": "did:invalid"
        },
        "response": {
          "id": "5e426a2c-7359-45d1-9e79-8b8374833174",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 353,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aef12490-57e4-4b7c-aacb-133e2fe329bb",
        "cursor": {
          "ref": "3d03c1f5-2aa5-4186-ae45-106ae4f74f7e",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "b2f309b9-5c65-4e7a-8d13-5122e41beafb"
        },
        "item": {
          "id": "aef12490-57e4-4b7c-aacb-133e2fe329bb",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "abed2ea0-0845-45cf-b0a6-ca6024a868b0",
          "status": "Not Found",
          "code": 404,
          "responseTime": 119,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "293e8151-471e-4ff8-adef-5118f3cea4b4",
        "cursor": {
          "ref": "fb190f85-3b14-423d-b284-b6c1cec1970f",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "5230d734-81a8-4779-a4f6-005a4cb64a99"
        },
        "item": {
          "id": "293e8151-471e-4ff8-adef-5118f3cea4b4",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "a080ee3e-be94-40bd-ab4d-9e9b069cf5b3",
          "status": "Not Found",
          "code": 404,
          "responseTime": 62,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bfa3c0e-c3bf-43c2-a09b-e55c8f563792",
        "cursor": {
          "ref": "0073b708-cb68-43b3-8e2d-839ee213db55",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "700bb4e0-fc22-4f4d-aaaa-eab7d0aab404"
        },
        "item": {
          "id": "9bfa3c0e-c3bf-43c2-a09b-e55c8f563792",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "dd889c66-057d-4fb6-b9b6-0841a11a9458",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8dd03888-2b2f-4797-936f-5dd7e4fabf91",
        "cursor": {
          "ref": "3daa0816-f437-4770-97ef-9d5916f02b19",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "1a583846-82dc-4624-89d6-6c57d4ccd810"
        },
        "item": {
          "id": "8dd03888-2b2f-4797-936f-5dd7e4fabf91",
          "name": "identifiers"
        },
        "response": {
          "id": "5c50da86-23c0-4858-b411-9645d93358ec",
          "status": "OK",
          "code": 200,
          "responseTime": 96,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "770206d8-8aae-4b82-9786-e0f1ec6bb017",
        "cursor": {
          "ref": "13e23775-05be-4fd7-ad63-a838a2d2a419",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "94087dbf-712c-4e92-b0aa-71c56cd2118c"
        },
        "item": {
          "id": "770206d8-8aae-4b82-9786-e0f1ec6bb017",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "c884f1a6-4d30-484d-b9b5-ebb0a90d164f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7d68645-9cd7-4695-a868-06565c361978",
        "cursor": {
          "ref": "857e17f0-3972-41a0-a47c-75a07dbd5e35",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "88998287-5e2d-400b-813d-d4e357227706"
        },
        "item": {
          "id": "f7d68645-9cd7-4695-a868-06565c361978",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "73baaa8d-93f8-4bc1-91c5-150be98aeea6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5eb80c1-d166-4056-9b55-1b334be5442f",
        "cursor": {
          "ref": "0ffc80ce-fb1d-48d8-bfcc-c270674ddefa",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "80248dde-9a84-41db-b581-cda965add819"
        },
        "item": {
          "id": "b5eb80c1-d166-4056-9b55-1b334be5442f",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "e5ea7e6b-e61f-4676-be57-a7def5b364fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2dba427f-8a5f-4ac2-981d-99f17a0440c2",
        "cursor": {
          "ref": "9f9d9aab-aa41-48a3-a30b-95e39a28bba6",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "84100209-ffd9-4d0b-9758-9204361a5ca8"
        },
        "item": {
          "id": "2dba427f-8a5f-4ac2-981d-99f17a0440c2",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "dce50923-c85c-47bf-918a-02a9fcfabe3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ef9e292-c6a9-4db4-b442-81b56a1dd58c",
        "cursor": {
          "ref": "75a0d312-0b6f-440d-9976-190a5c6af62f",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "4b94255b-6611-4422-a739-597225aaeea4"
        },
        "item": {
          "id": "9ef9e292-c6a9-4db4-b442-81b56a1dd58c",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "63d6a824-1be9-4373-8cc8-ec01c98d0940",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3335cbac-3df7-4d48-b3e2-bdef22d9c080",
        "cursor": {
          "ref": "15d86fdf-fe44-4026-a486-395e91576f1d",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "fbe67096-d766-4869-93d6-bea40854bf62"
        },
        "item": {
          "id": "3335cbac-3df7-4d48-b3e2-bdef22d9c080",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "f27f5f35-091f-4ccc-9245-4e6ad9437a68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c50009f-08e8-43b1-843c-9e08cc1fcba8",
        "cursor": {
          "ref": "1ce516fe-2862-423b-97e1-6f039ca64db8",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "78377198-4685-41c6-a156-f9728a703f93"
        },
        "item": {
          "id": "1c50009f-08e8-43b1-843c-9e08cc1fcba8",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "11a536f9-af7d-431a-b385-bafa1b94e954",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b50d6dcf-ced1-4df0-8c23-39029f7475aa",
        "cursor": {
          "ref": "69e161c4-9b49-4a2f-81d7-635606ec64c6",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "1b78f578-e8eb-4542-acc5-3de05bf70ff6"
        },
        "item": {
          "id": "b50d6dcf-ced1-4df0-8c23-39029f7475aa",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "859b4977-1b9b-47ea-86ac-d9a49ae626ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "112d9402-3513-45d3-83be-8fe65ec33292",
        "cursor": {
          "ref": "f956b909-d66d-4a69-94d0-365c66a2dbc2",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "24370ead-8fd4-4a94-8671-0fca90d05c74"
        },
        "item": {
          "id": "112d9402-3513-45d3-83be-8fe65ec33292",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "f40707d6-ef70-4931-82f7-087f0fd6a287",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9401c187-ec4b-433a-aba9-0f05d0f3cd52",
        "cursor": {
          "ref": "1f8afdb8-2583-4cc3-9955-d8d23585e7b4",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "b801d177-0cf2-45e9-b7c3-2e45acd8d879"
        },
        "item": {
          "id": "9401c187-ec4b-433a-aba9-0f05d0f3cd52",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "da174f3c-ee17-4603-828a-b86ef4d43344",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e9a9954-5259-49a0-a46b-2da61782dfa9",
        "cursor": {
          "ref": "fa17d892-dbe0-4a6f-89f4-d506799f83cc",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "715bb822-3e1a-4c26-824c-0eeaf8092557"
        },
        "item": {
          "id": "9e9a9954-5259-49a0-a46b-2da61782dfa9",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "f9c3d6f3-391d-4b72-94dd-daddfa7c815c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7b1d057-5511-451a-a5ff-bf215ecd5591",
        "cursor": {
          "ref": "a1610bb1-ee1f-4636-b087-c6a9a5a0a3f5",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "5e2cf3ca-1079-4680-b549-0f0d5b02845c"
        },
        "item": {
          "id": "f7b1d057-5511-451a-a5ff-bf215ecd5591",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "35ce1043-3be4-4d81-9ad2-9d0d6e3b7d3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30585e09-6850-4b13-a13d-2acaf8c03eab",
        "cursor": {
          "ref": "3199c9c2-cd3d-4364-820a-f02f6f26db90",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "739b22a6-1ccf-43ce-b8f9-feda91d75b01"
        },
        "item": {
          "id": "30585e09-6850-4b13-a13d-2acaf8c03eab",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "4c89b51d-f10d-455e-9a3d-9f19a30fd913",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65c4aea9-8a81-4266-96c6-d1a004edc90f",
        "cursor": {
          "ref": "51108459-b71e-4641-90bc-8e1dd08d0845",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "23079f66-17b2-44ea-989b-919a15ad5d25"
        },
        "item": {
          "id": "65c4aea9-8a81-4266-96c6-d1a004edc90f",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "ed5fd9ef-163c-4af2-a2ff-77dff4fd9101",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "009f478d-f24c-42b3-87cb-33c9c720a1f8",
        "cursor": {
          "ref": "456c4997-f0bf-4f85-8bd5-305020f57a69",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "6b7b1a90-9189-4ffd-9eb1-8cc9b7439378"
        },
        "item": {
          "id": "009f478d-f24c-42b3-87cb-33c9c720a1f8",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "1eff310c-d347-4ebd-80cf-e19f7d9432eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8a94758-87f7-46b6-a8d0-c5258234d6dd",
        "cursor": {
          "ref": "2f99b033-f3d1-4a28-be85-d24f54157b41",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "50f4b37e-1dc7-4aae-860c-f86cebf01851"
        },
        "item": {
          "id": "e8a94758-87f7-46b6-a8d0-c5258234d6dd",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "c6720462-d689-46ce-b523-c05abad75be2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22fe203c-60c3-495a-9ff4-33d6f9bdf37a",
        "cursor": {
          "ref": "42789909-429d-4567-85b3-60d3b926e10e",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "3cde0fd2-a352-402e-90e6-9332c773aad2"
        },
        "item": {
          "id": "22fe203c-60c3-495a-9ff4-33d6f9bdf37a",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "3eca62bb-a8eb-4326-b59b-bb06f3b4a7ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b416e25-e7a1-4fc7-afa2-58eea80907f6",
        "cursor": {
          "ref": "ee0d2145-edd4-4ce6-a92b-11f988272991",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "9ea7d0db-251b-4d26-b7eb-c5df82ef5615"
        },
        "item": {
          "id": "8b416e25-e7a1-4fc7-afa2-58eea80907f6",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "f7ab0aca-35e3-40fe-bb36-c730b8d5c936",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a2e6270-6496-4df1-befd-abadd00c8805",
        "cursor": {
          "ref": "36dbb049-fb87-4728-b2f3-edcc24b7a3a6",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "cf0238fd-3882-4309-95d4-a97088def78f"
        },
        "item": {
          "id": "3a2e6270-6496-4df1-befd-abadd00c8805",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "5d9121b2-d73f-459e-886a-df0d69e9c726",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e08c7bc5-a3ea-4e01-a38b-cb6ef20e883b",
        "cursor": {
          "ref": "a75f8a22-ee84-4a19-9ff1-c967a4dea0c9",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "06509819-f427-47ca-9238-263d6a4e4818"
        },
        "item": {
          "id": "e08c7bc5-a3ea-4e01-a38b-cb6ef20e883b",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "59b96baa-5495-47b0-b04b-15270110deb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b961f82-c3c2-4940-b3dc-26beef0b5e34",
        "cursor": {
          "ref": "62866395-15af-4006-b4db-f5ecb5874f6e",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "e7c01741-68b1-46da-8860-a698a14c7a99"
        },
        "item": {
          "id": "4b961f82-c3c2-4940-b3dc-26beef0b5e34",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "382173c5-005a-4617-8bd8-3b84986bd1b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5d16d0e-0eb0-4411-8db8-3fa4c050e960",
        "cursor": {
          "ref": "7c081271-6589-451d-b80e-389d284a8f7c",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "97db255d-6a78-4fe3-9d5f-b17d34c2ade6"
        },
        "item": {
          "id": "a5d16d0e-0eb0-4411-8db8-3fa4c050e960",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "2e913961-340b-4f45-9b47-c9cc3a467316",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05278fe7-2814-49cf-86f2-de5064a6f80f",
        "cursor": {
          "ref": "74dc1d45-234b-40e7-85de-b22ef0bcfacf",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "32b0cbfc-fced-47e5-b18a-c017c10d8b17"
        },
        "item": {
          "id": "05278fe7-2814-49cf-86f2-de5064a6f80f",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "b2354c6a-e7d7-4067-9853-b841ca2dc7c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d60c8cac-0fd9-4f38-a40d-093d6a536bc9",
        "cursor": {
          "ref": "9d2b6336-8dad-469a-92a7-a48d8f5956ce",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "b6b50de1-0489-4df9-902a-f39bec97c45d"
        },
        "item": {
          "id": "d60c8cac-0fd9-4f38-a40d-093d6a536bc9",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "452414e9-e06a-488d-b16d-764704bb1e0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c623b80-fac5-4929-8eb0-a758c07170d7",
        "cursor": {
          "ref": "e58d3017-c886-46af-a5b0-c9e677a4a276",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "15c2e439-8e6e-4ae1-85bc-bad733f30800"
        },
        "item": {
          "id": "7c623b80-fac5-4929-8eb0-a758c07170d7",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "cda5f7ff-0cf2-4064-9c08-0b9db32c2eae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbac3a19-2542-42d4-925c-b2d0c93461db",
        "cursor": {
          "ref": "7385c430-b586-48b3-8b7a-7fda81e070a5",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "67793d85-f8f3-45a7-8c33-08afea220cd5"
        },
        "item": {
          "id": "dbac3a19-2542-42d4-925c-b2d0c93461db",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "31b5b4f9-14d6-493d-bbd6-c279170b6c55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae45fd17-6b6c-4313-a37f-d96743b0c49a",
        "cursor": {
          "ref": "85c11889-72f2-4a16-b237-eb1cf91c185d",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "3598b99d-51fe-464a-afd1-151ea89a4581"
        },
        "item": {
          "id": "ae45fd17-6b6c-4313-a37f-d96743b0c49a",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "679ca9a2-057d-426e-bc36-692312ba52d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c62873a6-bfc5-4837-b19f-f71efe7caf27",
        "cursor": {
          "ref": "fa89f253-834e-4a5d-9d8c-79757542a666",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "06db7ade-1856-492a-a260-1cc20af57dc2"
        },
        "item": {
          "id": "c62873a6-bfc5-4837-b19f-f71efe7caf27",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "304d593e-4858-40ac-a827-59c543109727",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2751ad55-ec0b-4b11-97e1-4ddcca9e46a3",
        "cursor": {
          "ref": "26b797a1-e60a-4983-b58d-add16aa733ee",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "3be42bd9-1342-43ba-9e53-304fe27a4d8a"
        },
        "item": {
          "id": "2751ad55-ec0b-4b11-97e1-4ddcca9e46a3",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "92bbfaf2-c967-4d72-aebe-89f3e50a6c5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23de7d01-bf6c-41cb-a594-e1b8e1edc0e2",
        "cursor": {
          "ref": "d78ab3b3-e3ac-4dc4-ad57-861f08e1e926",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "66a29971-0563-40c5-a7ea-f9475a132043"
        },
        "item": {
          "id": "23de7d01-bf6c-41cb-a594-e1b8e1edc0e2",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "05e4e415-df7b-465f-869c-a572f2de15dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d47ce6a-5e4d-47d3-b608-9512820865b1",
        "cursor": {
          "ref": "a9fda5cd-f2b3-4aac-81b6-37d1f1f34b70",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "2ee38259-4452-4009-8f8f-c746e2290ea3"
        },
        "item": {
          "id": "4d47ce6a-5e4d-47d3-b608-9512820865b1",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "975c49d6-a943-4d89-a953-0a16ea7a6ebf",
          "status": "Created",
          "code": 201,
          "responseTime": 693,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "4bfdb9fb-215a-480a-be91-21ed4a79b536",
        "cursor": {
          "ref": "c7d16cb7-fc74-4764-aeb2-0e0d75f719c0",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "9e85624d-78a5-4b29-87ff-9b1edfcf8dfb"
        },
        "item": {
          "id": "4bfdb9fb-215a-480a-be91-21ed4a79b536",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "edc71775-6815-4d21-aa4a-a85842363299",
          "status": "Created",
          "code": 201,
          "responseTime": 328,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "ffbafc66-b68a-4d01-919c-a164304194e6",
        "cursor": {
          "ref": "4f1d1957-317a-4509-9278-1040c36d5036",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "70649819-bb3a-4d4c-816e-fe07caa09b2c"
        },
        "item": {
          "id": "ffbafc66-b68a-4d01-919c-a164304194e6",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "8835e159-c423-44ea-9f66-db9d8552b659",
          "status": "Created",
          "code": 201,
          "responseTime": 285,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "0106410b-ed4e-467f-99e1-26fa9dd5ae15",
        "cursor": {
          "ref": "661eb167-a62a-4262-bce1-e1d48cb874ac",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "b0576570-0d01-4de8-82de-fe403a7e411b"
        },
        "item": {
          "id": "0106410b-ed4e-467f-99e1-26fa9dd5ae15",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "78dbecfc-6564-41c0-9d4f-d08bbb5be101",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8dd6f143-a0ec-44ee-a6bd-db42a4c689c3",
        "cursor": {
          "ref": "e195f03d-f22f-4b85-b1ba-6de30f8461c8",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "40ccc13e-9440-4133-a703-638d576a7d5e"
        },
        "item": {
          "id": "8dd6f143-a0ec-44ee-a6bd-db42a4c689c3",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "8e620f27-0e3b-47b9-8cfb-b06b8ed9bffc",
          "status": "Created",
          "code": 201,
          "responseTime": 502,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "61e20b99-6929-4b5e-a58a-bc76483b0dc6",
        "cursor": {
          "ref": "a05ce5ab-6654-4381-83ad-5947ad4a8959",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "c1f85774-e97f-4903-8c27-af674e5242b0"
        },
        "item": {
          "id": "61e20b99-6929-4b5e-a58a-bc76483b0dc6",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "5ee8cfca-f32f-45fe-8310-c20a18b3079c",
          "status": "Created",
          "code": 201,
          "responseTime": 246,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "8e0ce65d-9dd0-426f-8793-979c6a1b5985",
        "cursor": {
          "ref": "dad417fb-bb2d-4920-bc10-70571511aa70",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "b8340197-61db-4bde-a414-0ac0ab475498"
        },
        "item": {
          "id": "8e0ce65d-9dd0-426f-8793-979c6a1b5985",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "cb844cfa-f560-4c0e-a672-47d590a1410f",
          "status": "Created",
          "code": 201,
          "responseTime": 253,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "cc2ed6f8-7c06-4217-a1d6-15b4497b27a8",
        "cursor": {
          "ref": "3f2df13e-c9ab-421f-a7c3-c9f81d338755",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "ddb59474-4576-457e-92f8-9b0ca906e00c"
        },
        "item": {
          "id": "cc2ed6f8-7c06-4217-a1d6-15b4497b27a8",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "058392be-00f3-45b7-b7ab-a501c00806a6",
          "status": "Created",
          "code": 201,
          "responseTime": 299,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "df434a37-20bf-4377-9c60-ccb2d2439496",
        "cursor": {
          "ref": "5a22a955-4fa2-4cfe-85e5-79de6aff1dea",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "07986ad2-f807-46f3-8558-f6238164484c"
        },
        "item": {
          "id": "df434a37-20bf-4377-9c60-ccb2d2439496",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "5176998a-338f-4189-a6ac-16e2a3819152",
          "status": "Created",
          "code": 201,
          "responseTime": 248,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "adff50b4-a0d9-4073-8011-d85e306d955c",
        "cursor": {
          "ref": "148b8b63-bf4e-4a62-b92c-4485b303181d",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "20fa849f-1de7-4c65-9f64-6181043b2244"
        },
        "item": {
          "id": "adff50b4-a0d9-4073-8011-d85e306d955c",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "e8a8e7ec-7faf-4fed-a2e5-5f555f520b1f",
          "status": "Created",
          "code": 201,
          "responseTime": 278,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "22f39d5f-a97f-44a1-8772-6ad852b11240",
        "cursor": {
          "ref": "70865c17-30f7-4dec-8362-6a4505609f26",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "37e0cfcc-21ac-453a-a25a-22ab3af2e232"
        },
        "item": {
          "id": "22f39d5f-a97f-44a1-8772-6ad852b11240",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "45271874-9f95-4c40-a747-30ea833f47bf",
          "status": "Created",
          "code": 201,
          "responseTime": 263,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "7075fa4f-f8b9-44d5-849f-b918aa1b0361",
        "cursor": {
          "ref": "be15b945-c86f-4ad1-ac39-d364acf6509d",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "75480b0f-9853-4e28-8c1b-41f9008e4292"
        },
        "item": {
          "id": "7075fa4f-f8b9-44d5-849f-b918aa1b0361",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "29b35b5e-7d89-4dd7-ba01-e41d23230e77",
          "status": "Created",
          "code": 201,
          "responseTime": 276,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "94170851-ba0c-44f4-9ba9-ab87f4cf72a0",
        "cursor": {
          "ref": "45827cd7-7e05-4d0c-b582-1be9f7926744",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "8e3870b4-94fd-403e-b836-0a020245255c"
        },
        "item": {
          "id": "94170851-ba0c-44f4-9ba9-ab87f4cf72a0",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "f5b46181-09f6-47d6-ba94-242525158806",
          "status": "Created",
          "code": 201,
          "responseTime": 266,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "91f32dba-26b5-4c70-b375-40dedc8be5d9",
        "cursor": {
          "ref": "a0e7d657-9597-4ef9-9857-c2c21c435b55",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "2db1e130-4d15-4097-a98b-f75713da12dd"
        },
        "item": {
          "id": "91f32dba-26b5-4c70-b375-40dedc8be5d9",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "1798c350-0421-447e-9f50-1ace1cceb2a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8b5f99c-e57b-4745-ba98-aacfa0af4475",
        "cursor": {
          "ref": "74883cb9-aaf2-4f12-8800-d9dc917a3ccb",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "a65183d1-2f32-4cd3-a5b3-507f385ffc9b"
        },
        "item": {
          "id": "c8b5f99c-e57b-4745-ba98-aacfa0af4475",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "389b5627-eec5-4391-b395-15d13d853e96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26afbc72-ea17-4973-9908-acf55b868dad",
        "cursor": {
          "ref": "9b2f2309-cbef-47a3-81c0-e4079e57ac5a",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "8d0e7645-1aa2-45a1-b451-2d859be3f7ed"
        },
        "item": {
          "id": "26afbc72-ea17-4973-9908-acf55b868dad",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "6907ec2f-0d02-4b81-bfa7-fc9d2e2000e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bc6f316-1d95-4fc2-8bfc-f84061364575",
        "cursor": {
          "ref": "2b98615f-8fd1-4fc4-a99f-b7ff3660e47d",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "7a81be48-6771-4ce7-88db-d4bebdb3fbda"
        },
        "item": {
          "id": "2bc6f316-1d95-4fc2-8bfc-f84061364575",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "cc820c6e-93fb-444f-8d74-bc8081cac94c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa34c691-d9e7-4bfe-9ab9-a4273ffbcc1a",
        "cursor": {
          "ref": "7907a66f-24b9-41d5-b632-d31b4814e969",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "3af0f77e-56fc-47ba-96a6-2afdef81d487"
        },
        "item": {
          "id": "fa34c691-d9e7-4bfe-9ab9-a4273ffbcc1a",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "2bd0dfc4-1097-4d98-8d39-adb4650ce54c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bca63f6e-7aca-4636-83eb-d79a472c5052",
        "cursor": {
          "ref": "a94adfda-1ef4-4a25-8520-473131422f5e",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "3c6afc74-a333-45e2-b69a-db6e90aeb1e0"
        },
        "item": {
          "id": "bca63f6e-7aca-4636-83eb-d79a472c5052",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "c0d752df-bd8c-46c5-a1b4-52a96df21f8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb96d06e-4359-46ca-a25e-73739186d0b4",
        "cursor": {
          "ref": "57f80864-6af5-48a5-a04d-aa368906fda6",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "d90ff57c-29b4-4865-b1a8-b3484c2aea86"
        },
        "item": {
          "id": "fb96d06e-4359-46ca-a25e-73739186d0b4",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "31a44b31-1300-4a3c-bf81-f969cbeffe4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9064b371-8302-4bae-9904-beef248b51ac",
        "cursor": {
          "ref": "e1d550f2-14d2-47fc-9d89-dcb611ad0ee8",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "59a88bd3-0ce3-48e8-9f9b-9f9cb3694ff0"
        },
        "item": {
          "id": "9064b371-8302-4bae-9904-beef248b51ac",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "9b178304-9f7b-46a5-9cf5-5a5c1761021f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e233fb4c-9818-4735-a20f-c25ce5dc3b66",
        "cursor": {
          "ref": "a203bffb-2277-417e-aa92-6d3181f32e90",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "b0d6c67b-b59f-49aa-8d91-884f190cce79"
        },
        "item": {
          "id": "e233fb4c-9818-4735-a20f-c25ce5dc3b66",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "f4186bd7-8980-4dce-a07d-18fd129dca8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b4c74c2-d4e2-4112-9898-c970f45037d1",
        "cursor": {
          "ref": "d9ff43ae-0092-4bf9-9757-c6e357325aad",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "ba38cd7a-0074-4712-95c3-a10baef2a86a"
        },
        "item": {
          "id": "3b4c74c2-d4e2-4112-9898-c970f45037d1",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "a9937537-88a9-4bb5-abb2-dba74e3d6267",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f1f5f41-96a6-4cc3-be05-ae24b6ab730f",
        "cursor": {
          "ref": "fbdab69c-663e-4ad7-8a21-d1dfeebbd4bf",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "7fcf2ff5-40e5-4be0-a372-304ad36c5edf"
        },
        "item": {
          "id": "1f1f5f41-96a6-4cc3-be05-ae24b6ab730f",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "066b7bba-16af-4d56-b0ac-816e904f2273",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35fe584d-30fa-4a2e-928b-b2642ca318a4",
        "cursor": {
          "ref": "70b278f8-900b-4b78-a122-d679a08242b7",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "66e52758-923e-4f0f-a3d0-361679bb0e0e"
        },
        "item": {
          "id": "35fe584d-30fa-4a2e-928b-b2642ca318a4",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "d3c105b4-2f05-4228-8f07-063665917cc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30dad803-180d-4d5a-bf20-14873afdd7ac",
        "cursor": {
          "ref": "7c26590d-9cdd-471b-a4b0-c068959ac206",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "6735aa8f-17dc-43ab-a2b6-8532b322052d"
        },
        "item": {
          "id": "30dad803-180d-4d5a-bf20-14873afdd7ac",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "f96c3429-3854-404d-b75f-a0bcb43e69c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99acd94a-5b60-4a7d-9e55-cc53808c731e",
        "cursor": {
          "ref": "1e4b0fe1-eccc-4058-b0ab-191949261569",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "1c9eef5b-1044-4bc3-94f0-a588557df018"
        },
        "item": {
          "id": "99acd94a-5b60-4a7d-9e55-cc53808c731e",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "361ad0ef-67fd-4b90-8ff2-acf717b9ad90",
          "status": "Created",
          "code": 201,
          "responseTime": 247,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "ee130393-1c12-40cb-8ad2-d50c4f83122a",
        "cursor": {
          "ref": "18dbcfe5-5bc4-4a2b-b951-9529005e62c5",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "48104b11-e339-45d8-8c99-b464298e93b4"
        },
        "item": {
          "id": "ee130393-1c12-40cb-8ad2-d50c4f83122a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "40a0e42a-3268-442b-a379-cb690915f432",
          "status": "Created",
          "code": 201,
          "responseTime": 294,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "50fa137d-e36f-469c-ae90-d7e870733ad9",
        "cursor": {
          "ref": "1b123177-5a2b-43b3-b695-25084aeb1a6a",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "9883c370-0ac2-4a7e-bd18-99b6ecb9c806"
        },
        "item": {
          "id": "50fa137d-e36f-469c-ae90-d7e870733ad9",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "89a0a30b-f1d7-40ae-8cc4-692d74e610a3",
          "status": "Created",
          "code": 201,
          "responseTime": 263,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "f5b3913a-0358-48ac-93ff-84fee024cb54",
        "cursor": {
          "ref": "de2919ec-ba32-49f5-86dc-39bd490224dc",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "d036a960-b851-4b46-b4e5-ba5d6554e6ed"
        },
        "item": {
          "id": "f5b3913a-0358-48ac-93ff-84fee024cb54",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "729db0da-77b2-4997-b96b-1aea47daca55",
          "status": "Created",
          "code": 201,
          "responseTime": 379,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "3703d2bd-74b8-4a43-bd39-522e183ddd4f",
        "cursor": {
          "ref": "a806bfd3-465a-4828-8dee-c8db43fb657f",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "a0ccd1e0-90ce-449e-8dba-81715e3b5a13"
        },
        "item": {
          "id": "3703d2bd-74b8-4a43-bd39-522e183ddd4f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "6a9e7607-95fb-4b0b-9dc2-05d3f34f5d76",
          "status": "Created",
          "code": 201,
          "responseTime": 261,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "919b5ea8-24fd-4407-a35f-d41e3368ad51",
        "cursor": {
          "ref": "72f39ee2-8dda-4a34-ae97-5ab5075e6b13",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "a4404e08-3e16-4efd-a8d0-13bc9d76cc54"
        },
        "item": {
          "id": "919b5ea8-24fd-4407-a35f-d41e3368ad51",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "e2fd9746-b5d0-44e9-a507-388c13adc186",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e0e2a4e-4c2e-4866-85f8-d11804285316",
        "cursor": {
          "ref": "f69214e9-cd8e-437e-af16-97731cc60983",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "51ec1cad-2436-4a3f-b66b-0bacb38a7d1c"
        },
        "item": {
          "id": "8e0e2a4e-4c2e-4866-85f8-d11804285316",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "b0d9d224-d666-41a3-a00f-7da7a6a8e4f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8e9078a-04f1-41c3-ad44-07616f409ce4",
        "cursor": {
          "ref": "94687679-2793-4cb6-8b06-2171b593b74d",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "f47a2728-900b-4a5e-a770-f8eb949f5437"
        },
        "item": {
          "id": "a8e9078a-04f1-41c3-ad44-07616f409ce4",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "ecd58646-b161-46f7-aa14-7a987757cbf6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de259b90-4847-47d3-8794-2810aabb0c71",
        "cursor": {
          "ref": "992e49a8-ef48-4e2f-a91f-e9370acf0264",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "0d56c157-6bb0-42f5-8e97-8842ae4e014f"
        },
        "item": {
          "id": "de259b90-4847-47d3-8794-2810aabb0c71",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "757c8657-364d-48c3-8f37-c4e5b129dfef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98dcf07a-42a7-44c2-8d08-bb94a45969e4",
        "cursor": {
          "ref": "0b415c13-f077-458f-b5d1-e36c57f833d0",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "03b228e0-ab90-4749-b493-ac3091291d80"
        },
        "item": {
          "id": "98dcf07a-42a7-44c2-8d08-bb94a45969e4",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "50093cd8-4d1d-4734-8083-fda50a77543b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d17b161-2c3f-437c-94cb-cb0dbf7f5e29",
        "cursor": {
          "ref": "5c8d4f3b-0133-4285-b145-258da5dcc461",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "73d79230-27df-4215-8ded-86fa02250dc5"
        },
        "item": {
          "id": "8d17b161-2c3f-437c-94cb-cb0dbf7f5e29",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "d1e702fe-eef8-4f23-81e2-92aab68054a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59cf2d15-cf5e-4aec-9c64-4f8b26038416",
        "cursor": {
          "ref": "04ddefe8-4b1b-46d4-bdc0-3f56fa60dc2b",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "f2fd7b2a-2e5a-458b-949b-a3dbf4bf2d73"
        },
        "item": {
          "id": "59cf2d15-cf5e-4aec-9c64-4f8b26038416",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "067d108b-b7a5-4eb1-a9d0-c27e44732101",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4e7c52f-493c-49f0-8be2-c0a66c8102a9",
        "cursor": {
          "ref": "3fcf48fc-e59c-49f4-af54-65b10ed386b1",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "a75f87b2-bc01-4167-86ca-0767fe75d46a"
        },
        "item": {
          "id": "d4e7c52f-493c-49f0-8be2-c0a66c8102a9",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "910c1c69-7016-49a3-a621-cb0cb90ce48a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb705261-608b-4c75-b174-0788818c901c",
        "cursor": {
          "ref": "c25ec732-5d73-48b0-a357-bca1338918d1",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "a4188744-c196-445a-a76a-c2a316a3f946"
        },
        "item": {
          "id": "fb705261-608b-4c75-b174-0788818c901c",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "78c9378f-f9be-41bc-9dfc-a82682e7773a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f41679a7-a16b-4778-8a34-adb65ecf362a",
        "cursor": {
          "ref": "176e409d-9292-477a-a588-5903134203b9",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "f4736792-dd7d-45b9-a26e-d95713351e38"
        },
        "item": {
          "id": "f41679a7-a16b-4778-8a34-adb65ecf362a",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "fa9bc347-c941-4645-adf9-ab592760a17d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "958a7eed-ed4a-4d78-ac8c-33d767311696",
        "cursor": {
          "ref": "d5a9cb98-f5e2-4286-b617-5bee2bb3bdf5",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "171af529-a4d9-448f-9788-f13f7babe39b"
        },
        "item": {
          "id": "958a7eed-ed4a-4d78-ac8c-33d767311696",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "620a5f08-447c-4f71-9a2d-77f677edd79b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fe8b450-24be-45bf-a427-b278df4b797c",
        "cursor": {
          "ref": "b2477da7-e8dc-46ed-9093-15a1caba83e8",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "156a32e4-bd82-4180-acff-50ae6bc70d90"
        },
        "item": {
          "id": "0fe8b450-24be-45bf-a427-b278df4b797c",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "54014ea5-a6ca-432b-9ca6-44c81ae0b303",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2e2db07-7dd0-48b2-8964-adf14c0bd1ce",
        "cursor": {
          "ref": "4f8bcc44-166a-4463-9bf9-f2b71d78c5c1",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "d2427ea5-f5e3-412f-a903-1764eb187812"
        },
        "item": {
          "id": "b2e2db07-7dd0-48b2-8964-adf14c0bd1ce",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "24a9280c-4385-4ff1-802e-a9d548beefeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4640ad09-4ed4-439f-917d-d6f1cf91a936",
        "cursor": {
          "ref": "9e6bdecf-7bc3-4ac3-b94f-9a0c1e73bc96",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "a5059fa4-9d98-4158-9c07-8b737b105f41"
        },
        "item": {
          "id": "4640ad09-4ed4-439f-917d-d6f1cf91a936",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "b40e892c-4f21-406b-9b84-abe585788de9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "277c0165-c549-468a-a715-98b76b89940e",
        "cursor": {
          "ref": "a7ba95ee-66f3-45a1-be08-4afcf9b17074",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "467dc29e-f7e7-4277-941b-9fbb8bb9508b"
        },
        "item": {
          "id": "277c0165-c549-468a-a715-98b76b89940e",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "15f42cb9-4987-4a37-a389-c0503d425cfd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2be4297d-7fd8-47a1-8d6d-0f69b2f34d73",
        "cursor": {
          "ref": "25ece518-7e9e-458c-b1b9-e4ea77e97177",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "f80cc4f6-e2d7-42ba-a160-063273539608"
        },
        "item": {
          "id": "2be4297d-7fd8-47a1-8d6d-0f69b2f34d73",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "b840a00f-8494-4c9c-b37e-9808b759bd3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5dd6dd8c-4dd5-474e-acff-bab88d0abd24",
        "cursor": {
          "ref": "8bb7f468-410c-4acc-8971-4bfcdeb16fff",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "3cb3b98a-296d-4dd5-b155-d23416a4d93b"
        },
        "item": {
          "id": "5dd6dd8c-4dd5-474e-acff-bab88d0abd24",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "5aae9f17-7f86-4765-b711-a8aac0e72493",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3adb1405-e54b-47cd-8adc-36eec03b438f",
        "cursor": {
          "ref": "12746042-115e-4077-869b-9707b29153fc",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "2602d7e4-697e-4563-9654-775f88fe886e"
        },
        "item": {
          "id": "3adb1405-e54b-47cd-8adc-36eec03b438f",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "75055c5f-92ad-4f5e-b0d0-0253c1e5ea6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ef7e57c-6a20-43af-a2b8-56b8c114f43c",
        "cursor": {
          "ref": "30a84e0f-bc0b-4df7-86de-06615ccd3e84",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "a2172b9e-94d1-4c5a-955f-d7ca7fdef73e"
        },
        "item": {
          "id": "4ef7e57c-6a20-43af-a2b8-56b8c114f43c",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "b08fe8e8-9e66-4a4d-a2fb-d584e3efaf71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60508b07-8597-405a-be55-cd603e98d627",
        "cursor": {
          "ref": "d617b5fa-dcf2-406b-9980-5e57234c6c78",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "917365b5-3d72-41ea-bb46-bb8ca34d40c3"
        },
        "item": {
          "id": "60508b07-8597-405a-be55-cd603e98d627",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "b1c8716b-68f1-4809-ad1b-b00c5d263a2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62aebc3e-c531-432b-9468-a6cdbfa2d007",
        "cursor": {
          "ref": "74b2d186-4c84-4794-a2bc-a34c2943bd0e",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "5653654d-1628-4113-ab25-feb3b57ba59a"
        },
        "item": {
          "id": "62aebc3e-c531-432b-9468-a6cdbfa2d007",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "b8bb5d95-36e1-4929-a146-6007b1e61491",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5293e0ac-8fa0-475c-aa1d-047202fd6781",
        "cursor": {
          "ref": "1af97c31-c1b0-4455-a3b1-c692b8b2486a",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "6f0676b9-d612-4360-92b1-96bb080cc7ca"
        },
        "item": {
          "id": "5293e0ac-8fa0-475c-aa1d-047202fd6781",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "c525e16a-a5ef-4563-97be-3a6f9eb43e2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45288590-c60d-491b-bff8-e34c6f427734",
        "cursor": {
          "ref": "4f1b87bb-d71d-44c9-80a8-0ba644ef41ac",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "7b6a8d7d-fa72-4568-9bf0-991ce3c3f981"
        },
        "item": {
          "id": "45288590-c60d-491b-bff8-e34c6f427734",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "112a7ecc-d0fb-4e5f-821b-33534d33308b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01741d10-c963-49c1-b772-1de699d3cce6",
        "cursor": {
          "ref": "b695ace8-eb8c-4252-8651-6845a3999807",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "3a464d5d-634b-4d03-8997-438a38645ec1"
        },
        "item": {
          "id": "01741d10-c963-49c1-b772-1de699d3cce6",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "605b8613-e1ef-415f-93f4-7f674103cd22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd398c6f-af36-473a-9061-37db32f8d2c8",
        "cursor": {
          "ref": "8f2a08cb-900d-43e7-a0b5-32d47e0f87da",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "e0fc51b5-5a22-4e43-aa5d-efcdd7fd48af"
        },
        "item": {
          "id": "cd398c6f-af36-473a-9061-37db32f8d2c8",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "c36f91b9-6339-4a9d-a4c9-990e6445bbe3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "670e49c8-59c0-4af5-9496-97ddf667c128",
        "cursor": {
          "ref": "1f3a5bbb-f8f1-4bad-80d2-7fc56a2c174d",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "3297a590-aced-4e39-b228-3009abf011a2"
        },
        "item": {
          "id": "670e49c8-59c0-4af5-9496-97ddf667c128",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "13d0e5a8-8ef0-4bbd-932a-12c5bf00cfdc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14d420e3-e801-4f0e-8ced-715e8e54deab",
        "cursor": {
          "ref": "70a2d6ea-59f9-4f12-aa79-feeeff5a59df",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "e28baf69-4f1b-4e08-ae19-14abb21523cf"
        },
        "item": {
          "id": "14d420e3-e801-4f0e-8ced-715e8e54deab",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "943916dc-7522-481e-a3f8-f8b52ca53a31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9d4aadf-500f-4e7a-98b6-3bba80a2f389",
        "cursor": {
          "ref": "5377ba74-571f-481d-a008-a87f6fe6a592",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "a359046f-6a4b-4c18-8ecb-5d5455cd3989"
        },
        "item": {
          "id": "b9d4aadf-500f-4e7a-98b6-3bba80a2f389",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "e507e630-5c99-4eab-bdfd-512b7f8f1bee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6a7a04a-b78b-4c89-9881-68a7f2cb733a",
        "cursor": {
          "ref": "ec389986-25c1-4de5-befe-7ebd38e659e6",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "d37c035a-e355-47e3-8db7-689be110e1aa"
        },
        "item": {
          "id": "e6a7a04a-b78b-4c89-9881-68a7f2cb733a",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "8aa1a6c7-45ab-4c37-98e7-bc452a393e43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47497ca9-8bba-42a5-929a-c178fd286930",
        "cursor": {
          "ref": "78a9f702-1a18-4b63-859a-7d9209c2fe7f",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "1c29e45e-2c90-4450-9ecf-8364fc0c6312"
        },
        "item": {
          "id": "47497ca9-8bba-42a5-929a-c178fd286930",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "0eabea61-49fa-49ad-afe5-6e68d719913e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c047f8b7-c14f-4582-a9ab-f93e8b1357e5",
        "cursor": {
          "ref": "91febc3a-5075-4c6f-a2cc-3d5e36465be9",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "723cc609-6adc-474b-bd74-edcbc5a64f8e"
        },
        "item": {
          "id": "c047f8b7-c14f-4582-a9ab-f93e8b1357e5",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "fcfbdd3e-f698-4063-9602-4de9003d8bb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b58857e-1f94-411b-a5f6-70c497541928",
        "cursor": {
          "ref": "cb447c14-8d3c-4d17-a1c4-1e86382c0178",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "ee1d16e7-1402-4823-94b3-ced3a9028d1a"
        },
        "item": {
          "id": "7b58857e-1f94-411b-a5f6-70c497541928",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "6a2f6126-2539-4ffe-be17-e142e2ddb930",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea796210-3abf-4aa0-a87d-dbdcf4c8625b",
        "cursor": {
          "ref": "1d0cbfcf-df5a-48ba-a513-2f915275a07c",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "ebf4719a-364c-472a-be07-20d5801c50c0"
        },
        "item": {
          "id": "ea796210-3abf-4aa0-a87d-dbdcf4c8625b",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "9e114727-2f79-4bce-92ea-fc8957085b85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "527ba757-cd38-4ec1-81b2-a41c196b73d0",
        "cursor": {
          "ref": "8539a31d-3ae5-4922-92fe-266f37cffddd",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "b57c5398-7a42-4e0c-a15c-e057a681693b"
        },
        "item": {
          "id": "527ba757-cd38-4ec1-81b2-a41c196b73d0",
          "name": "credentials_issue"
        },
        "response": {
          "id": "d08991c0-2ef8-48b7-8a1a-4ab6c880cf49",
          "status": "Created",
          "code": 201,
          "responseTime": 246,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "d34ab7c8-b368-4471-bcf4-038783b848d8",
        "cursor": {
          "ref": "d67a29f3-9c33-4a60-85c2-65c0e9beec02",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "f1bb0ce4-28a1-4e1d-92fc-d948fe0726c4"
        },
        "item": {
          "id": "d34ab7c8-b368-4471-bcf4-038783b848d8",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "fdcf7ece-2c47-4aa3-aa0f-9fc1b6e18e55",
          "status": "Created",
          "code": 201,
          "responseTime": 254,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "57d03ab2-23b3-440c-8c5a-bec2496ff18b",
        "cursor": {
          "ref": "bbf3cb2f-3db1-4c18-9c02-e9fd702ed920",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "67170ab5-469b-4b6c-aa2b-42fb5cbbf618"
        },
        "item": {
          "id": "57d03ab2-23b3-440c-8c5a-bec2496ff18b",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "6ac5c9d2-2529-46bc-9fb1-cd75413ebd2f",
          "status": "Created",
          "code": 201,
          "responseTime": 247,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7f836f3-445a-46b8-b050-180fb8525c1d",
        "cursor": {
          "ref": "691c1767-3f0a-48d4-ac8f-ea024dc0b9eb",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "ffc17e17-ea26-4a61-8300-2c63a3e35db1"
        },
        "item": {
          "id": "b7f836f3-445a-46b8-b050-180fb8525c1d",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "e38c67b2-28ac-429f-bfc5-b9b2a1f99644",
          "status": "Created",
          "code": 201,
          "responseTime": 276,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "a68b557c-ce89-4874-8533-d63a2389e0cb",
        "cursor": {
          "ref": "44f477b4-bf9d-4fb2-9c7d-3dc0e48b71e1",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "b77f9304-3a01-42b2-84fd-a064e1f87692"
        },
        "item": {
          "id": "a68b557c-ce89-4874-8533-d63a2389e0cb",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "491d29db-de44-4297-b813-69873c419a25",
          "status": "Created",
          "code": 201,
          "responseTime": 348,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-10-28T00:32:44.364Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-10-28T00:32:44.364Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "59d17ba4-893d-416d-9a05-6ddf1a2a615b",
        "cursor": {
          "ref": "31927f9d-52fe-4440-8187-77d6c343b295",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "4693f71e-1691-4ab4-80f1-13435132e8b9"
        },
        "item": {
          "id": "59d17ba4-893d-416d-9a05-6ddf1a2a615b",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "0b8033d6-2baf-41e4-a22a-de5f771fb47e",
          "status": "Created",
          "code": 201,
          "responseTime": 268,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d47e3b9c-3625-4a54-9be5-8cdaa46c3577",
        "cursor": {
          "ref": "15762b71-4730-4139-8794-276ff65b3225",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "78421d11-6060-46bf-8552-359f3f3bf2e7"
        },
        "item": {
          "id": "d47e3b9c-3625-4a54-9be5-8cdaa46c3577",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "ccd690fb-866c-4de6-ba9c-7b7ee8022b35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27e4e8fc-431e-4e1e-adee-241ab01d6855",
        "cursor": {
          "ref": "e0752a20-514a-4351-86b9-16582398b2a1",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "4ec0cb47-e21c-4bac-8d4c-4f5b95660927"
        },
        "item": {
          "id": "27e4e8fc-431e-4e1e-adee-241ab01d6855",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "7ab3ff95-c4aa-429e-92f2-09ec82798d60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "939e480c-0c47-4214-addb-d20441c59a9a",
        "cursor": {
          "ref": "0084f13c-6220-4fe3-a5d4-5a4e3aa3e6e6",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "8a06ad3c-85f9-44bb-832b-5e0bb3919e5d"
        },
        "item": {
          "id": "939e480c-0c47-4214-addb-d20441c59a9a",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "b8362876-6e69-44e9-b620-0c0976b46210",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25a2e6d7-09cb-4f1f-a8f3-469f492cc91f",
        "cursor": {
          "ref": "6850c6cb-8829-4c77-b9d5-53ab18331929",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "06c2d4d5-daa9-4c6a-bd1f-62c6b51bf9b6"
        },
        "item": {
          "id": "25a2e6d7-09cb-4f1f-a8f3-469f492cc91f",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "1121ba5f-fb7d-4ccc-a257-915711d3ff30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "096b8e42-7847-4ddf-ab3a-7c0d9ecb99eb",
        "cursor": {
          "ref": "8b318417-c802-4631-86e1-4067d9406050",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "752cd5d5-af7a-4aa0-a9fc-bde8e2f14e56"
        },
        "item": {
          "id": "096b8e42-7847-4ddf-ab3a-7c0d9ecb99eb",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "b1374f1a-e600-4e59-8152-3cf5f9865d0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6a4ac50-dc1f-477d-9475-a6ffcf854498",
        "cursor": {
          "ref": "21797187-d3ac-4288-a63d-de190170d9b5",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "7f5d8c3d-70fb-4b8f-ae78-ae80b747739e"
        },
        "item": {
          "id": "a6a4ac50-dc1f-477d-9475-a6ffcf854498",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "beb5fffe-4aaa-407b-9357-8c4ec7e56183",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "139ba366-41f2-4e42-ae08-ac2171638e83",
        "cursor": {
          "ref": "b4192912-c1f5-472b-8baf-23718114555b",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "1969c843-d06a-4431-8587-98d4a72e9760"
        },
        "item": {
          "id": "139ba366-41f2-4e42-ae08-ac2171638e83",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "8cef3be2-da98-4623-9a50-9a1dfb78a94c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0dd50bc-3472-4027-880d-c3b05c1d1b07",
        "cursor": {
          "ref": "ed212fb1-f483-4beb-a1c6-5c965799a80b",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "3e22e6fa-5635-4f54-8156-4542306dfcf6"
        },
        "item": {
          "id": "c0dd50bc-3472-4027-880d-c3b05c1d1b07",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "b19c5fbf-54e1-4d8a-8422-357b54e3952c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41fdf229-9263-42b7-b577-84782ee2068a",
        "cursor": {
          "ref": "861d5652-49ac-4919-8b8f-85df26b08cf4",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "6760037c-0c46-4369-80f5-b3d589c4663f"
        },
        "item": {
          "id": "41fdf229-9263-42b7-b577-84782ee2068a",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "7a0b2b9a-cb16-4487-9d44-f0171ba61910",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2563c8f8-c8a5-461b-b5a7-fca2b5ff1c9a",
        "cursor": {
          "ref": "dbf6ffd1-6205-4c66-b78c-2ef44c6028e0",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "6a4357a7-5080-4811-890c-cfc465e782c8"
        },
        "item": {
          "id": "2563c8f8-c8a5-461b-b5a7-fca2b5ff1c9a",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "ee5f554a-f5c2-4c01-a2b3-aa0f6d776ea9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9b46d6e-a269-42c7-97fd-3bd3ab2d51ff",
        "cursor": {
          "ref": "6ebf336e-7d51-4b80-abf2-d0b2cd2d471e",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "f8c4e965-ceea-4396-b4c8-f85a13723f57"
        },
        "item": {
          "id": "d9b46d6e-a269-42c7-97fd-3bd3ab2d51ff",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "5cc81b3f-a4f2-49f3-b7a7-a38b5ea0a641",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bedf3db7-fd43-4b9f-b956-8f1a15ae800b",
        "cursor": {
          "ref": "841958d9-71dc-46ef-8766-7902d19eee03",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "a338a6b5-145f-4b97-8778-6ea988bbbf98"
        },
        "item": {
          "id": "bedf3db7-fd43-4b9f-b956-8f1a15ae800b",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "5b167ce9-d5d6-40fb-ad51-baffaf051778",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8707ff51-93fc-42e6-943a-4970d306ab4d",
        "cursor": {
          "ref": "cf9a9ae2-b3ed-4b93-aed2-1590ba320bcb",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "6022ff62-1117-4c86-a6d3-aa6bf18f319d"
        },
        "item": {
          "id": "8707ff51-93fc-42e6-943a-4970d306ab4d",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "0dac99e1-8160-4bc0-8227-c1e48ef8c38d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c9cf7e9-1680-4966-8ca2-88999b1cb1a6",
        "cursor": {
          "ref": "b0a3af24-d1a7-4f3f-8697-6e3eae350dfd",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "d49b996f-fcd1-41cf-9693-0e1b112eafe1"
        },
        "item": {
          "id": "9c9cf7e9-1680-4966-8ca2-88999b1cb1a6",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "3862b7f2-5cdd-4cb1-92f1-d41a69733382",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "869211b9-69f2-449f-84c7-ac8a1410be11",
        "cursor": {
          "ref": "4541d44f-b7f0-4318-bd70-51c3e15b2142",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "e7d1401e-605a-4703-8131-351be1e0a10b"
        },
        "item": {
          "id": "869211b9-69f2-449f-84c7-ac8a1410be11",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "16380b5d-7a80-4a72-994d-ba93aabaf295",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e801ac4a-51de-4eb2-9989-12f8a376985e",
        "cursor": {
          "ref": "ec63812a-1d81-4bf4-84b7-2f8953ea71af",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "8dd514de-bc16-4429-9662-b6f2bb0ea4c4"
        },
        "item": {
          "id": "e801ac4a-51de-4eb2-9989-12f8a376985e",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "978094cf-a8fd-4659-952e-cf9dfa5b1968",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e89ef06-f4a3-4494-804c-5b7d4b39f104",
        "cursor": {
          "ref": "1da3e538-87a7-46a2-994f-16b9dfbd0835",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "9ac6babe-f304-41c8-8d33-7b8bcd6f28ed"
        },
        "item": {
          "id": "4e89ef06-f4a3-4494-804c-5b7d4b39f104",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "80d3858a-c8a8-4964-a55b-0bd63b00e1f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "883adbd0-0fc7-440a-8c9c-962c7ffb3c0e",
        "cursor": {
          "ref": "2799b70e-0151-4758-af93-5caa7c224ce0",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "928636d1-e81a-4998-82d6-801aa84b7f9a"
        },
        "item": {
          "id": "883adbd0-0fc7-440a-8c9c-962c7ffb3c0e",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "613c8ba9-1559-4eb6-ab74-9aa1849dd103",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e506b991-c5ab-487a-b714-4c2754ff021e",
        "cursor": {
          "ref": "25803141-bfc9-48f4-8bbf-bb59dd0d4c77",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "4b6db444-814b-4cc6-ad3c-598a5fff2733"
        },
        "item": {
          "id": "e506b991-c5ab-487a-b714-4c2754ff021e",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "ec934e28-e7fd-4ae9-8881-f0bea57d7472",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7faf3b4e-2cb7-49c1-9e67-000cd5158867",
        "cursor": {
          "ref": "51e9244e-a98e-4581-b154-33063c04d79b",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "fc7ada86-14b9-444d-8c3b-32fc86518d9f"
        },
        "item": {
          "id": "7faf3b4e-2cb7-49c1-9e67-000cd5158867",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "83990d8b-99ce-470d-83b2-a754ece13b97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c32814f-debd-49f1-9c66-3426cf251275",
        "cursor": {
          "ref": "ef28211a-fe22-4b01-b29b-4615acd42364",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "915b737d-d082-4495-b15f-e53bb5b23415"
        },
        "item": {
          "id": "7c32814f-debd-49f1-9c66-3426cf251275",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "1a1fe11c-0b76-4543-9d43-c7bcd3656e18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2b2267d-1a27-4dc9-aeac-bd8168baf035",
        "cursor": {
          "ref": "d59c3f06-1282-4e99-9585-fa9ffbd37ba5",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "46379cf1-8705-482f-8158-c824d7718bb6"
        },
        "item": {
          "id": "b2b2267d-1a27-4dc9-aeac-bd8168baf035",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "c28f8cee-d474-4a33-bab6-e955f8a1236c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "263c05cb-17a5-4a3d-bedd-8675d011009b",
        "cursor": {
          "ref": "a1ad4504-6ae0-4b39-bf0f-5df4e292cf55",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "0262f269-fa38-45fe-800f-0621b83bb3b8"
        },
        "item": {
          "id": "263c05cb-17a5-4a3d-bedd-8675d011009b",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "bee3a9fa-d622-45c7-b35d-7c5092f60b08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0cd5536-ea16-4bfa-9ad8-42b8e8e2cc1b",
        "cursor": {
          "ref": "3e9471c0-5065-4470-8110-4ed2285f06c7",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "801b963f-ffeb-473f-a667-0908005fc792"
        },
        "item": {
          "id": "e0cd5536-ea16-4bfa-9ad8-42b8e8e2cc1b",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "48edda30-7330-4066-bbf9-061ffc0b938f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b33c354c-33c5-4802-b59c-e05161d79f6f",
        "cursor": {
          "ref": "f51b9dc9-d421-4157-8ef4-289f64577b17",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "e9b4c2d2-a5a3-4778-9314-4bbb404ff447"
        },
        "item": {
          "id": "b33c354c-33c5-4802-b59c-e05161d79f6f",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "d70e3149-6a85-4c43-8997-c6c9dd889c23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4882203a-2ab8-4f9d-9b6d-f105f9080fd7",
        "cursor": {
          "ref": "f06152a0-05fd-45cd-98cc-dbd1012ddc71",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "ba19b08a-347c-46cc-96a4-460d2323f416"
        },
        "item": {
          "id": "4882203a-2ab8-4f9d-9b6d-f105f9080fd7",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "4b632935-ba2c-4fba-a000-458eae81e38b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "beb368e0-948e-4275-b4f5-10add48bbda2",
        "cursor": {
          "ref": "cb05a867-d924-47a1-8201-459679a108c2",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "b7637254-119d-4f43-be6d-b21fa2420475"
        },
        "item": {
          "id": "beb368e0-948e-4275-b4f5-10add48bbda2",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "ffed9eac-4eb9-4a2a-b402-e75bcffe1ba4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86f54fda-7dc7-4131-8a60-12385d208f92",
        "cursor": {
          "ref": "f6ca44dc-d12e-4b98-b097-a1376fbe00dc",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "dc4b7aa7-c9a0-4cd4-b20d-3898a4f6f0dd"
        },
        "item": {
          "id": "86f54fda-7dc7-4131-8a60-12385d208f92",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "97d54551-d4fe-40d0-ad1f-031410bd0019",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f70fef7e-8ed9-4b9d-852d-3e1d5cd740bc",
        "cursor": {
          "ref": "b557d26a-92a7-4922-adbf-dff4659fd957",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "a85c048f-401c-4461-b777-3cf6334cb750"
        },
        "item": {
          "id": "f70fef7e-8ed9-4b9d-852d-3e1d5cd740bc",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "445bfa0e-8475-42f8-8dd9-d74259119af9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "912952ef-2575-465c-a105-ea973abfbf26",
        "cursor": {
          "ref": "5ee5b305-85f8-4426-9b99-0ec29717b973",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "4e5c297b-38fb-49a0-aee5-4fd40d75eb11"
        },
        "item": {
          "id": "912952ef-2575-465c-a105-ea973abfbf26",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "dfab7ea7-240d-4b56-82d4-90bacb051bea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83cd6b49-05c2-4f9e-961f-4b7426f200e2",
        "cursor": {
          "ref": "2934aedc-b5d4-49c0-a1d5-34566c9dac57",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "078b7ae2-1a4a-4972-992f-9d71b99c8178"
        },
        "item": {
          "id": "83cd6b49-05c2-4f9e-961f-4b7426f200e2",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "11703caa-a302-4fb3-a46a-d428e5d580b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5e9eb1d-5ce3-45a8-afe6-ddfd76762921",
        "cursor": {
          "ref": "744e9e0f-43d7-4e79-8c79-8dee14288241",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "1ccc9e2c-a04b-4218-bf5f-db8671329c71"
        },
        "item": {
          "id": "e5e9eb1d-5ce3-45a8-afe6-ddfd76762921",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "64f2ee8f-392e-46c2-9a78-7bdfad2200b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "016b06eb-00ac-4f23-8767-2df11ab2a1cd",
        "cursor": {
          "ref": "51bf0410-fc47-44cc-acb9-0a70e941b8d9",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "0392cfa7-ffa9-4680-a6e6-c1da46745e03"
        },
        "item": {
          "id": "016b06eb-00ac-4f23-8767-2df11ab2a1cd",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "9c242adb-a0c6-4942-a50f-b737d2f9d06a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c249f060-1793-4c18-816a-300c91a98658",
        "cursor": {
          "ref": "edda20c3-8ed4-4042-a21e-b6af9682e6d6",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "eb5a3069-08c8-4db1-aaa0-bb4200738a7f"
        },
        "item": {
          "id": "c249f060-1793-4c18-816a-300c91a98658",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "9108f213-3a78-4c8b-91bf-1026f59ff6d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9241af9-ebb1-4cf0-9323-23ef18878ec4",
        "cursor": {
          "ref": "44446fcd-7298-415d-b68f-92391b49db77",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "db42b81f-469f-4dc5-9f82-17f8200283b0"
        },
        "item": {
          "id": "c9241af9-ebb1-4cf0-9323-23ef18878ec4",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "4f4a3cf2-f78b-40c2-b21d-c1a0cf56da0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f819ed7e-fc51-4340-89ef-0c1e6a104078",
        "cursor": {
          "ref": "1f1b540b-2681-4d14-b5ed-55b9fe109a5c",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "321555ea-b72f-4ee2-a4ba-5892cb58d229"
        },
        "item": {
          "id": "f819ed7e-fc51-4340-89ef-0c1e6a104078",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "be369ed0-5697-4afd-af5a-1b7ba51398f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3169a50b-bd45-44ea-83f8-ffae5616bb49",
        "cursor": {
          "ref": "db311c31-573f-46b2-93e9-9b87c31b0324",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "ac0782ae-e61f-422b-8a37-f330533645dd"
        },
        "item": {
          "id": "3169a50b-bd45-44ea-83f8-ffae5616bb49",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "7a78d827-0ce1-4026-a56c-2e304c5e877e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6d4e0e6-bb78-461f-b796-69082f685f55",
        "cursor": {
          "ref": "cf68084a-a372-4d7e-a718-aa249e01582a",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "9e400cff-fdeb-41c6-b415-bb88b7a3dadd"
        },
        "item": {
          "id": "f6d4e0e6-bb78-461f-b796-69082f685f55",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "fbb7e1d9-df3c-45d4-9413-61529bd19716",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f025f274-0570-432a-a295-d7db1759a587",
        "cursor": {
          "ref": "b857d3cb-f9ca-45d0-8864-565f1c8f1456",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "dfee661d-159f-40b0-84b1-fd2ae98a44f5"
        },
        "item": {
          "id": "f025f274-0570-432a-a295-d7db1759a587",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "0c55f341-678e-43af-b626-714cbafc1320",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5df24060-4b57-4f8a-8b7a-a2f0bca77448",
        "cursor": {
          "ref": "55c67b09-3877-491d-9037-be91382b1b9f",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "758e981d-fbf2-4688-9b4a-609c2c9ef5a1"
        },
        "item": {
          "id": "5df24060-4b57-4f8a-8b7a-a2f0bca77448",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "a9f5f981-f2fc-4623-be24-d34ee9ae1c22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ec233bc-314a-4072-ab6f-690803a5781b",
        "cursor": {
          "ref": "e84a79a4-23c4-4529-9cb4-255b07730ea2",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "bd1cf29f-c006-4545-a9b3-2f53c37eeca3"
        },
        "item": {
          "id": "4ec233bc-314a-4072-ab6f-690803a5781b",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "f358eb7d-f168-46db-941c-570e79203afa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4545d639-0c4c-41fb-8229-0257a7988df6",
        "cursor": {
          "ref": "583cc51d-90df-4fe4-b89e-94a495bb1f40",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "944da38f-19c3-4fb9-81b1-174015abb2b5"
        },
        "item": {
          "id": "4545d639-0c4c-41fb-8229-0257a7988df6",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "4dc8a4d7-43e1-4e9f-a484-f666673a3d0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8225f328-d5d3-41c0-9298-2ff9fd902641",
        "cursor": {
          "ref": "89efa83a-8a6a-42ed-bc4d-2b8c2bea1e1e",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "ac01303d-32e9-4df1-9bc3-ae862186628b"
        },
        "item": {
          "id": "8225f328-d5d3-41c0-9298-2ff9fd902641",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "9c010655-a6cb-4f77-80c8-2e42be0c026a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96ec4bba-c2ba-4777-a963-bb18bf9abc44",
        "cursor": {
          "ref": "0bb3f3ec-ed41-4cf4-8303-7fe5c556fada",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "6add4504-8046-425d-8aa9-baf8e83b3a00"
        },
        "item": {
          "id": "96ec4bba-c2ba-4777-a963-bb18bf9abc44",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "3ddd7186-7714-4757-a5e1-5887f5fbcb5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0061cad6-9155-451d-9955-4250775f5e42",
        "cursor": {
          "ref": "d1a9f558-d60f-404a-b1e9-42bdfd5cba63",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "8517c2c0-28e9-409e-a140-706ea92716cf"
        },
        "item": {
          "id": "0061cad6-9155-451d-9955-4250775f5e42",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "4c7beee0-3f88-4a76-b72b-9f615a212df3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b9f1bc9-838e-4ab6-961a-4524fca01548",
        "cursor": {
          "ref": "81d679d2-0930-411d-a1c2-4a9e637cbdaa",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "8979aebc-6b1d-4d33-ab3c-1b4ff708224d"
        },
        "item": {
          "id": "3b9f1bc9-838e-4ab6-961a-4524fca01548",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "64a258c8-064a-4a61-8d2d-2c10d91f47bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc74855c-59e3-4a68-bdc5-d43561cc013e",
        "cursor": {
          "ref": "462e8438-b6aa-48a2-8b19-6522a2c8cb40",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "8984c2d0-4a43-48d5-9fce-aad0fb5b5d9f"
        },
        "item": {
          "id": "fc74855c-59e3-4a68-bdc5-d43561cc013e",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "c3b9cf86-42f5-47de-bbe3-31cd924e23ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85490bfc-3c61-41c4-b5f4-57924087ccdb",
        "cursor": {
          "ref": "4442682f-8072-4948-a084-5ba738dfb0fb",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "6337999c-084b-4162-904c-eb313c01d851"
        },
        "item": {
          "id": "85490bfc-3c61-41c4-b5f4-57924087ccdb",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "4a285836-351b-47af-8380-170b6c54c800",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c616580-d8c8-4204-bb5b-c3590f8cf038",
        "cursor": {
          "ref": "ba2c47cf-0ce3-4687-a965-4f905c43da24",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "43dac63d-f8eb-4153-90ff-4d40c3551367"
        },
        "item": {
          "id": "5c616580-d8c8-4204-bb5b-c3590f8cf038",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "78bdcbfe-5965-4864-b7c9-8eb5b37d3e1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4c9dc85-6432-4876-9586-355441ada15e",
        "cursor": {
          "ref": "dcb39d87-7a38-4944-b476-d870348b4941",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "6ed626fc-28f6-4f43-a8ea-d8aa3cd71cd8"
        },
        "item": {
          "id": "f4c9dc85-6432-4876-9586-355441ada15e",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "8e74a969-f689-441e-9edd-f1b8cfecab03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e70882d2-11fa-4382-8efc-d40c04f6b7f7",
        "cursor": {
          "ref": "3bbf41d5-0071-4f8e-8cda-7bbeb6e5b6b4",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "23b64797-8349-4153-8f11-e5172a6defcb"
        },
        "item": {
          "id": "e70882d2-11fa-4382-8efc-d40c04f6b7f7",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "b90be9fd-6f3d-4177-b898-c317c2978810",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "976eb0ee-7d7f-4f2c-ba30-f8401ab8248f",
        "cursor": {
          "ref": "3384473a-b80f-4309-9444-55cab0219d67",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "3a497f6a-40f5-44a7-a014-f4d3c1f92a37"
        },
        "item": {
          "id": "976eb0ee-7d7f-4f2c-ba30-f8401ab8248f",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "d1f4592a-1e24-4abf-b3ae-2a01981b9654",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc3dffdd-e27f-408c-8a89-8346468fd482",
        "cursor": {
          "ref": "c1f88320-81e5-4974-a8c9-0e966e122940",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "ab9d514f-d2d1-456d-bd8a-e5ffcc3ad20e"
        },
        "item": {
          "id": "dc3dffdd-e27f-408c-8a89-8346468fd482",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "29291582-5dc1-4d86-bbf2-dec7049f7f11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8bb8f56-6101-40c3-98dc-61710d63b4bb",
        "cursor": {
          "ref": "acbd91fe-c258-40b4-8a76-8bedbeafdd70",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "38256fbc-3da4-48a8-8ff7-16e1c4bf2763"
        },
        "item": {
          "id": "c8bb8f56-6101-40c3-98dc-61710d63b4bb",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "02f98785-d35e-48e7-8309-1eda389d6474",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16670ceb-f5c5-4ff2-b91b-fcc7d1d4e7f3",
        "cursor": {
          "ref": "f9a5f148-7844-4538-bdcd-2b360daa5b95",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "b3bbb220-4f81-4adc-bd69-47229ac6d385"
        },
        "item": {
          "id": "16670ceb-f5c5-4ff2-b91b-fcc7d1d4e7f3",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "d5f8ef22-6b32-4449-bdd3-12fc07597ce6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1e6e1ef-524d-4ce7-851d-419c3e6c9b3d",
        "cursor": {
          "ref": "491a9c69-dd13-4b83-a997-0631fb248913",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "4373f240-2f57-40a4-9952-01dfd23b6d60"
        },
        "item": {
          "id": "e1e6e1ef-524d-4ce7-851d-419c3e6c9b3d",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "9368bafe-6154-4630-956a-dc9d09da2ec3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1fc6066-0d51-44dd-a535-658095978eb2",
        "cursor": {
          "ref": "13f58366-bf3c-405e-baeb-3fdb4735406d",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "1d54a197-cfc8-431b-a3a4-2c62f5db91cb"
        },
        "item": {
          "id": "a1fc6066-0d51-44dd-a535-658095978eb2",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "81f366e4-cec7-4546-9180-8554f2e71fb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d11e7474-ed6a-41fa-8b99-cab3c69fbd6e",
        "cursor": {
          "ref": "e4d45051-dcb9-477d-83b3-71e5d6ad8014",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "eb59bef1-7e0d-4f9f-bc89-0e039d9ae123"
        },
        "item": {
          "id": "d11e7474-ed6a-41fa-8b99-cab3c69fbd6e",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "8e97e007-d5b1-4128-9a25-cfeab26e7fc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "217a5c4a-557d-40bc-8d15-bcd872b1faed",
        "cursor": {
          "ref": "a1a197f1-7bc1-41b0-bf4b-27ecc72d12ec",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "44040256-e7d8-442a-a574-d7fdca24e177"
        },
        "item": {
          "id": "217a5c4a-557d-40bc-8d15-bcd872b1faed",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "abec81b9-9da4-4d0c-8184-8977be2eb8ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9511fff-a399-40a9-b061-512b7b86c100",
        "cursor": {
          "ref": "d8c8c445-cf9e-405b-afd4-b69606104aaf",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "0a8727bc-08c8-4e13-bf48-c45ed41daa42"
        },
        "item": {
          "id": "c9511fff-a399-40a9-b061-512b7b86c100",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "d51be4cc-dcbf-435e-92bf-5bf1ebf00fea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5f7a7e8-6f3b-4b06-90ae-3800de325429",
        "cursor": {
          "ref": "8692579e-ce1d-4def-bcd9-9e08bc2df95d",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "df39a38f-fd7a-461b-8c4e-11cd6d4670db"
        },
        "item": {
          "id": "d5f7a7e8-6f3b-4b06-90ae-3800de325429",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "2fd71aff-8eda-4e6e-9975-d82d5d2a493a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79443970-d201-45b0-8164-8a5ab9348f21",
        "cursor": {
          "ref": "5bf08c47-4efb-4c18-be14-7e904511d5db",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "71d528e1-7fc4-4c97-a32d-b6f6d6af8955"
        },
        "item": {
          "id": "79443970-d201-45b0-8164-8a5ab9348f21",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "59dacfd1-7dba-474d-8998-71d1af3c835d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aeb0c3d7-c98d-4491-9f95-958e63ca3d5a",
        "cursor": {
          "ref": "580ecb90-acb5-461b-8e3a-415178c4bcd7",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "b4ae28c3-c7a8-4b20-81df-22602b796139"
        },
        "item": {
          "id": "aeb0c3d7-c98d-4491-9f95-958e63ca3d5a",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "e289103e-45dc-4b26-8aae-29837f098f1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3379f244-f88d-4b41-872e-244841b64653",
        "cursor": {
          "ref": "ba6eb131-5251-4872-bc61-405a154f82e0",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "fe9ea816-d666-407c-84c7-740122f680df"
        },
        "item": {
          "id": "3379f244-f88d-4b41-872e-244841b64653",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "404070e8-4ffd-4100-92e1-69e3f5d78530",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8ff65c3-b3cb-4fd2-ad00-2eb40b9e60a8",
        "cursor": {
          "ref": "f75da637-c94f-4db6-be30-7f3d34e6ba12",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "e742dd1c-ca8d-4527-9143-0a5198f9644f"
        },
        "item": {
          "id": "d8ff65c3-b3cb-4fd2-ad00-2eb40b9e60a8",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "589df4d8-2aeb-4c3f-a991-df5d5e378117",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80982cc5-2213-4757-993d-650cb16ed855",
        "cursor": {
          "ref": "b983c183-023c-4510-814f-3237083a040c",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "d198e9d6-977e-4a35-80e0-1a16295f7000"
        },
        "item": {
          "id": "80982cc5-2213-4757-993d-650cb16ed855",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "df714b1a-92c9-4a14-a6b0-739589dc0b7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84b55eb5-b274-4749-b434-3f626b1ae70b",
        "cursor": {
          "ref": "3d9f0a26-4419-41b9-8562-de8d958c31fd",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "c305479d-7005-4d54-bedc-5f91d19ce7d4"
        },
        "item": {
          "id": "84b55eb5-b274-4749-b434-3f626b1ae70b",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "1e235e93-6404-4220-b737-3797c8375b77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b68eb701-6720-4d5e-b18d-a0e28944007a",
        "cursor": {
          "ref": "1ca7fd8c-82ae-4fe3-8dd8-58b87536fe15",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "73dbabc9-a032-4dbf-b2fa-6c107b5d9c68"
        },
        "item": {
          "id": "b68eb701-6720-4d5e-b18d-a0e28944007a",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "5b197142-da73-45f4-8bf9-8d4fe475584e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 133,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ac3b95e-0c48-4363-ac16-5ac32be5bb03",
        "cursor": {
          "ref": "6c61f7f0-5d93-48f5-b36e-1775fe904ff2",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "ffba44f6-eee6-4b76-ba29-def7d2a72d9c"
        },
        "item": {
          "id": "1ac3b95e-0c48-4363-ac16-5ac32be5bb03",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "7a87f627-23b0-4a1a-ba54-fda900f7c547",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5b40146-930a-4de3-8a33-f5117e923b3f",
        "cursor": {
          "ref": "0956e6dd-12eb-4936-8724-c701e384bffe",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "9cd7abff-36a6-43a1-8d84-9fcc672b7493"
        },
        "item": {
          "id": "f5b40146-930a-4de3-8a33-f5117e923b3f",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "206b7012-4fac-4951-9c11-b62e95414451",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e75a360-f0da-4dbb-9ca1-1b189842dfe0",
        "cursor": {
          "ref": "f4a256c5-6159-4952-aac1-ceefecb257f9",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "fddec738-f5de-4b9a-b29d-e720b07d1e22"
        },
        "item": {
          "id": "9e75a360-f0da-4dbb-9ca1-1b189842dfe0",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "800349f9-ce49-4ce0-8bc4-eadfd983d3e8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f20e2ce-8551-4dc3-bfcd-2fd4d677fad7",
        "cursor": {
          "ref": "63a5649d-0919-4c2e-84b2-f5d351f93462",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "c9deb894-e64c-485b-8044-f9bba3a5ba03"
        },
        "item": {
          "id": "1f20e2ce-8551-4dc3-bfcd-2fd4d677fad7",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "2fbdf7b7-dfa7-40c3-a304-8451c464954c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae5f2513-1b8f-4196-8fbc-c78896ed83ba",
        "cursor": {
          "ref": "9d704a67-cdab-4e6f-aec5-95125ddfeb58",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "d1b4d61f-8006-49c7-aeb6-581aeebdce23"
        },
        "item": {
          "id": "ae5f2513-1b8f-4196-8fbc-c78896ed83ba",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "836d09da-f25f-4c15-b6f2-d99c9a7f91df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a9f3f43-4e36-4561-9d4c-70b9d8ce6a08",
        "cursor": {
          "ref": "9f3a9b7b-d989-45cb-b44b-bf3f55652fe7",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "31283b2b-249c-4835-9a6c-b04d900a8ed0"
        },
        "item": {
          "id": "5a9f3f43-4e36-4561-9d4c-70b9d8ce6a08",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "cd012cdc-783d-4c3e-ae8e-04ce8fa3898e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfc16136-da2c-4837-8d93-93729443f947",
        "cursor": {
          "ref": "5cfb251c-52c7-4879-af28-daaa3d68e5b3",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "514cfd9b-9c34-4b30-9eda-b7873194bc77"
        },
        "item": {
          "id": "dfc16136-da2c-4837-8d93-93729443f947",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "63001b47-6d80-4e70-b052-b01372e78b87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "536f8a3f-8991-443c-8fab-2846005e2e55",
        "cursor": {
          "ref": "d259e71f-7d98-4eae-a4f3-fa88f57abf70",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "dd0c8aec-b4a5-4a28-a09e-73de4c5fcb24"
        },
        "item": {
          "id": "536f8a3f-8991-443c-8fab-2846005e2e55",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "ffa4f570-31df-4bbb-821f-39bd8027ea05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03678e04-6535-460e-892c-2078551bd03e",
        "cursor": {
          "ref": "7ea0590b-cb99-4b59-a9b8-c52413d603b6",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "7d66d9b6-ca3e-4730-89ad-ddf66b437680"
        },
        "item": {
          "id": "03678e04-6535-460e-892c-2078551bd03e",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "9a739124-41e6-458e-a4e8-6ed345699ee3",
          "status": "OK",
          "code": 200,
          "responseTime": 175,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "956329fd-cc7f-40c2-8ea7-ce7ad85e8d2e",
        "cursor": {
          "ref": "6d0d5949-8f3c-43ae-b858-d863d6d57a88",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "18736a0b-30a9-4d40-8d12-5708a8075ac4"
        },
        "item": {
          "id": "956329fd-cc7f-40c2-8ea7-ce7ad85e8d2e",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "22ce506a-6356-449e-9679-57e959cc50db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02fca5bf-0ea3-4605-8954-a228fe6817a2",
        "cursor": {
          "ref": "e13f277c-7f06-4b12-b15e-81167cc4621b",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "6644b977-0425-4d7a-998e-c2a2a5b06e76"
        },
        "item": {
          "id": "02fca5bf-0ea3-4605-8954-a228fe6817a2",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "022bc11f-645c-48f0-93f6-5c85895dcea2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2051648-e025-4f55-9716-92c34cdcb4c7",
        "cursor": {
          "ref": "c11a8784-955a-4960-b878-ea8dfc23b7cb",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "3338b9bc-9b45-411c-9d03-3d2097a88ba3"
        },
        "item": {
          "id": "f2051648-e025-4f55-9716-92c34cdcb4c7",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "a2f3b0bf-ca14-42d4-ba64-8e6521e0e277",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83eca7a6-289b-4940-8998-c96dfc21df66",
        "cursor": {
          "ref": "a9d93b4e-717a-40f0-b7cc-a9d68353eccf",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "60a51ef3-2a47-4a29-9171-7509affa439e"
        },
        "item": {
          "id": "83eca7a6-289b-4940-8998-c96dfc21df66",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "36c2fa29-140f-4f6d-82f3-4d0d718e0289",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9bdd926-ea12-4256-b094-563d24450271",
        "cursor": {
          "ref": "231c7323-a91b-49a1-9b0f-efd5a637ae5a",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "720f1a58-b59e-4af4-a59e-98e27f2f789d"
        },
        "item": {
          "id": "c9bdd926-ea12-4256-b094-563d24450271",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "841e0af4-8001-4594-9075-03b9752739fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93839dc9-fbb6-4c76-9cf5-1794a6f003dd",
        "cursor": {
          "ref": "02bb2293-d085-43b2-a786-d9aaa80da1b0",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "e30d113b-036b-42b1-b08e-5fd7ef3c76c1"
        },
        "item": {
          "id": "93839dc9-fbb6-4c76-9cf5-1794a6f003dd",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "09ca5b4b-cb61-412e-a504-fa74aef8d62e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0784097-c85c-4d55-8d21-f71c6189efbd",
        "cursor": {
          "ref": "4cace1ed-d2f6-48e8-a8a1-707768f13cf2",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "78d9da0c-1b97-4deb-9f42-3306a9a1518e"
        },
        "item": {
          "id": "d0784097-c85c-4d55-8d21-f71c6189efbd",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "31886a2e-a2d5-4598-ad4f-b034a0bc363c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e869281c-1fc0-4a06-88d9-2303d4334b65",
        "cursor": {
          "ref": "8b14f7d9-3902-439f-90d7-58506aa5053d",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "34dc781d-89ec-4ebb-b418-ca652079aecb"
        },
        "item": {
          "id": "e869281c-1fc0-4a06-88d9-2303d4334b65",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "5a38dcac-e57b-4b77-81fd-d38de1736295",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "838a54a4-4a74-4adf-8ab7-8aa0153c3960",
        "cursor": {
          "ref": "36af9497-3842-4d41-ae1e-0ffd275e3694",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "b2889269-749f-42b9-b5c1-9aceb8a9225b"
        },
        "item": {
          "id": "838a54a4-4a74-4adf-8ab7-8aa0153c3960",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "5cffdb2c-0065-4da3-a910-845f3fe6f5bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f56b2c0-4973-4371-83e7-76d04980ad78",
        "cursor": {
          "ref": "f25e5c6e-4729-4668-aa79-8fab869bc10b",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "2b31b605-916d-46e6-af20-f0ca23ca28c1"
        },
        "item": {
          "id": "9f56b2c0-4973-4371-83e7-76d04980ad78",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "f09e68f8-c84b-463f-9cb2-1e759422fbcb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1132c925-1160-463a-bd1f-8e4014fadab4",
        "cursor": {
          "ref": "2b8de843-752c-4c52-8618-705984b2f64d",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "bfad5b39-06d4-41b8-a7d5-767fbb8de388"
        },
        "item": {
          "id": "1132c925-1160-463a-bd1f-8e4014fadab4",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "480a28bd-5b53-4e98-be81-685ce14f0fb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59d6d812-a76e-4743-8e04-221bb4098cdf",
        "cursor": {
          "ref": "4dd13e4a-8562-497d-9d6a-3e0224a53415",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "8b3fb6aa-ad68-44bf-bf49-6f01f8b6a1a9"
        },
        "item": {
          "id": "59d6d812-a76e-4743-8e04-221bb4098cdf",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "1665ed66-380c-4126-83ca-331c582720f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2acf160c-69fa-46cc-ac32-7f6f33206b67",
        "cursor": {
          "ref": "1bdb82ce-54d8-4993-88f7-d5ea9a0b267c",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "4106c254-6d87-46d0-a6c7-8a38e7347217"
        },
        "item": {
          "id": "2acf160c-69fa-46cc-ac32-7f6f33206b67",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "3e363fa1-552e-42ef-891e-b3a2505e2362",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1f23653-e7b9-480c-b28c-ee2e102d5120",
        "cursor": {
          "ref": "6e8d91cd-642e-4724-8522-b4285c74a450",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "384a953e-0837-4467-8a8b-ba3ed5f3c850"
        },
        "item": {
          "id": "d1f23653-e7b9-480c-b28c-ee2e102d5120",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "c85b3226-0441-48f8-91ca-f487bdfb64b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fd603ab-7082-454e-81e2-f54dbfe868d4",
        "cursor": {
          "ref": "d78f4901-2676-4009-b7d1-9ed34bf597ef",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "3d6c5092-2ea1-41e5-9116-ab44f0c73b03"
        },
        "item": {
          "id": "7fd603ab-7082-454e-81e2-f54dbfe868d4",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "5d037ab5-ae19-4566-95b1-0a40e45c52a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b086241-9ce6-4a1c-ace1-5ccc818112ec",
        "cursor": {
          "ref": "4bfe2bc1-7921-4155-b87b-6e8dce772106",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "5e337735-5602-48da-94e1-cda16530153d"
        },
        "item": {
          "id": "8b086241-9ce6-4a1c-ace1-5ccc818112ec",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "9ddb02f1-ce68-4707-b8d4-d5f8309d58d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "756a500e-1055-49a7-a3b5-7f447c58e252",
        "cursor": {
          "ref": "d4f00dc8-1873-4013-aa91-995a683950a0",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "b09d7c43-7248-4f4b-8a50-709ff8316dfd"
        },
        "item": {
          "id": "756a500e-1055-49a7-a3b5-7f447c58e252",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "39c5c9aa-0cc6-4f25-86dd-b0ffbf65e7fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55658b88-6ccd-47b6-877f-8e2510161a01",
        "cursor": {
          "ref": "068efdf7-c2ee-4a35-be24-34ebffafaa17",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "2900aa8c-d1f4-4a84-aede-d7ca150c6f8d"
        },
        "item": {
          "id": "55658b88-6ccd-47b6-877f-8e2510161a01",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "a36f39c3-0a20-44f6-a390-fc174117386e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6b2b0ff-cc0a-47e3-a069-d1b4feaebf34",
        "cursor": {
          "ref": "3a217016-7d01-404d-b5b2-8b9d4bacacc2",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "3798c808-8186-4a02-bdd0-03b2dcbc1123"
        },
        "item": {
          "id": "f6b2b0ff-cc0a-47e3-a069-d1b4feaebf34",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "f8712951-bcf7-4c56-aaf8-4647de29232f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "107031ab-0ae1-4838-baab-d4fb1895deb6",
        "cursor": {
          "ref": "a245eac1-bfcd-4df5-a620-54f2c796c2e1",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "c3bbb1d6-c844-48c0-aaf9-5939439cc2db"
        },
        "item": {
          "id": "107031ab-0ae1-4838-baab-d4fb1895deb6",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "e897fb6c-1f28-44c9-8395-c06ef93b7547",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bacdee31-4c69-42e8-b5a0-ec61296d4da1",
        "cursor": {
          "ref": "8b8d8025-00f1-49d2-9057-fd20e8dd04a7",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "ab0f4ea4-4248-4c2c-acb8-1b7bb70ffc66"
        },
        "item": {
          "id": "bacdee31-4c69-42e8-b5a0-ec61296d4da1",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "2fb51048-8593-4485-994d-ac85b067151c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05256fb1-04df-4b65-a6ec-f58319e68fff",
        "cursor": {
          "ref": "ade008ef-cba0-47ab-ac94-1ebba2959bfa",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "5c2e6a25-9ffa-431f-9092-fa3add58770a"
        },
        "item": {
          "id": "05256fb1-04df-4b65-a6ec-f58319e68fff",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "217aa9a2-db74-4e8b-bead-accb9fe8b25f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bb9e0dc-f689-475a-bcf0-7be89440dfb7",
        "cursor": {
          "ref": "09efb6d5-6fa2-424b-bf69-533eb933926e",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "8c5a9f7a-8892-4c57-9a7a-90a014526d8b"
        },
        "item": {
          "id": "1bb9e0dc-f689-475a-bcf0-7be89440dfb7",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "0eb8fc22-3292-4f76-ad50-dbc22800c792",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0db973e0-6711-45ac-b0e6-a2da84dfb983",
        "cursor": {
          "ref": "f522ca9a-5e66-4a39-a508-07d7eba67807",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "495cd7f3-d602-40fe-bd63-be7d41c76388"
        },
        "item": {
          "id": "0db973e0-6711-45ac-b0e6-a2da84dfb983",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "f4a19746-cf1a-4dbb-ad09-6953703c8c03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "055df11c-e9b6-4ffd-acf0-412f43f607da",
        "cursor": {
          "ref": "7e91009c-6ede-49dd-870a-3186910b71e8",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "89decb6f-6209-4b3c-b6f6-74a50bdb2cf4"
        },
        "item": {
          "id": "055df11c-e9b6-4ffd-acf0-412f43f607da",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "fe09e67c-3691-4291-8271-8a579d6acbbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9534d1a-028a-493f-9aa3-8109105ec444",
        "cursor": {
          "ref": "9a2c500f-33c1-4ad8-9efe-6676c0ffa418",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "016b5ee8-006b-44a1-8079-3f414294d167"
        },
        "item": {
          "id": "d9534d1a-028a-493f-9aa3-8109105ec444",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "9af5824a-84c2-4ca8-80d1-2bfc7ab93fc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "138a985d-a505-4a7b-a51a-95ded4b66acf",
        "cursor": {
          "ref": "df11b5a8-5bba-406f-9e10-1ed06299c6dc",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "f7a7ce98-55eb-4b70-b7b7-38cffeb8b925"
        },
        "item": {
          "id": "138a985d-a505-4a7b-a51a-95ded4b66acf",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "71001eaa-ff8f-4bbb-ac2a-0014712f6ba1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcee2a2c-3d2f-4595-9fe9-89efcd4098a9",
        "cursor": {
          "ref": "0b734e13-0b1f-4f7c-b7d9-8546e5086607",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "140eef18-e5dd-4819-8d75-78ad14f7d0b3"
        },
        "item": {
          "id": "fcee2a2c-3d2f-4595-9fe9-89efcd4098a9",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "dcb77803-0c62-4486-88a2-7550835ce528",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d49c4fd2-f271-4a06-983b-d8b62ca1fb12",
        "cursor": {
          "ref": "ccdfdbd1-d3e7-4c4b-8ff4-5272f054ddab",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "3bb900ee-64f7-47be-a062-2c35108bfaf6"
        },
        "item": {
          "id": "d49c4fd2-f271-4a06-983b-d8b62ca1fb12",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "6592d6d7-2260-4bbd-9d7b-a4d5bde334c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ce13f68-cfbf-456b-9e2f-159f6c639985",
        "cursor": {
          "ref": "206d8115-0236-4495-8d38-7a5e2823df2d",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "045b236e-61df-466e-ac82-e28bfa47ad79"
        },
        "item": {
          "id": "7ce13f68-cfbf-456b-9e2f-159f6c639985",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "f02c3329-f9f3-4cd0-8414-53b3429448b3",
          "status": "OK",
          "code": 200,
          "responseTime": 117,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "4dba5e04-3f26-411e-90a2-c6eb9c15f664",
        "cursor": {
          "ref": "55849f90-8f92-4930-a9e6-0938d3a3a37c",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "50fa637e-9962-42c9-99fc-d27d3e95d806"
        },
        "item": {
          "id": "4dba5e04-3f26-411e-90a2-c6eb9c15f664",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "3bde2679-d4cd-41a7-a309-de23e7f672d3",
          "status": "OK",
          "code": 200,
          "responseTime": 120,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "e90074ca-0bc9-42e0-ad64-fd2ec0655ad5",
        "cursor": {
          "ref": "18101323-b9b7-4278-8c90-7fa863c394e4",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "80855b4e-9e0d-4e35-80ce-15a87edeb04a"
        },
        "item": {
          "id": "e90074ca-0bc9-42e0-ad64-fd2ec0655ad5",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "b9a918e4-0114-41f8-9874-81e5415cc626",
          "status": "OK",
          "code": 200,
          "responseTime": 111,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "3db248b9-ee12-4ad5-a14b-a13623210765",
        "cursor": {
          "ref": "9d815494-e934-41ce-b512-facacfe0973a",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "56151d8e-b040-4b65-bf6c-ed4b708a558e"
        },
        "item": {
          "id": "3db248b9-ee12-4ad5-a14b-a13623210765",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "8333e04b-b059-4b09-9c8f-26567d1da07e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f6224df-b63c-4063-abba-d8d29413bdf0",
        "cursor": {
          "ref": "15e4a981-af0c-483e-95f2-6b3122074500",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "a7e16bf0-2d84-40b4-8665-7127dc099297"
        },
        "item": {
          "id": "0f6224df-b63c-4063-abba-d8d29413bdf0",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "9e4bb470-6721-4104-ace6-4152299457bf",
          "status": "OK",
          "code": 200,
          "responseTime": 106,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "11e3398b-86c3-416b-9911-4f1f67a54371",
        "cursor": {
          "ref": "21c8e161-cbc8-4454-abd7-ff7d3da9f1d7",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "2e9a59c3-d0cc-4d97-8729-f282ff5de04e"
        },
        "item": {
          "id": "11e3398b-86c3-416b-9911-4f1f67a54371",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "bdff4154-cade-4927-8113-2fa18f879152",
          "status": "OK",
          "code": 200,
          "responseTime": 109,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "a316479b-4ddb-4527-a2ca-50e2c25678da",
        "cursor": {
          "ref": "545743fb-4963-44ed-8bf8-c25f86ba2691",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "2478ecc3-cc20-4e40-9b45-8af2e1ce30bc"
        },
        "item": {
          "id": "a316479b-4ddb-4527-a2ca-50e2c25678da",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "406691c1-3d35-4400-a128-70b7d46796aa",
          "status": "OK",
          "code": 200,
          "responseTime": 114,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "57d63ec6-fab9-4ec8-b3bb-b34dbc0d226c",
        "cursor": {
          "ref": "e18fedd7-026e-4547-bcee-f2a22bc0afcd",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "628802ba-3c27-4218-bf72-0222b8b704e4"
        },
        "item": {
          "id": "57d63ec6-fab9-4ec8-b3bb-b34dbc0d226c",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "e52c5a86-255b-4845-bff9-391585f679b3",
          "status": "OK",
          "code": 200,
          "responseTime": 115,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "9ac1f9ad-1651-41e3-aefc-f1816b6446e1",
        "cursor": {
          "ref": "ac94e52d-9376-4051-ae7e-c29fad155c0d",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "c62e24be-2ee4-415d-8614-2fc27ad4ccdb"
        },
        "item": {
          "id": "9ac1f9ad-1651-41e3-aefc-f1816b6446e1",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "66d526ec-2b84-49c1-9e11-e3587ee51d32",
          "status": "OK",
          "code": 200,
          "responseTime": 114,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "6be64652-a5d8-4a72-a88b-6741803369cb",
        "cursor": {
          "ref": "7c65496f-2378-4732-9341-dca918217f52",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "3a0300cd-3743-4a76-a7a3-80eda0e71e9a"
        },
        "item": {
          "id": "6be64652-a5d8-4a72-a88b-6741803369cb",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "0588a0f8-d837-426d-a443-e9eb703aab7f",
          "status": "OK",
          "code": 200,
          "responseTime": 115,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "c4f593b3-68a7-46f4-9065-2a8fe29cafdd",
        "cursor": {
          "ref": "59e4c7cb-f9cf-4c68-81c0-22c5925892f1",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "b9a31d24-a546-46f6-896e-1325c66da7f2"
        },
        "item": {
          "id": "c4f593b3-68a7-46f4-9065-2a8fe29cafdd",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "b875b51b-55ba-4f66-a4c0-cd74df67154b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bf16107-3417-4ff3-b5c1-fc6dfb95f590",
        "cursor": {
          "ref": "f0c54d96-9246-4887-90d5-6f689252468b",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "27acdd8a-f41e-422a-98d2-bb85fcc40b73"
        },
        "item": {
          "id": "5bf16107-3417-4ff3-b5c1-fc6dfb95f590",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "9c7c3e54-a0ef-494f-9d9e-b0155728e745",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e87fdd52-3687-40de-bfa9-930d623132cd",
        "cursor": {
          "ref": "bfbb1d7d-62b5-427a-a629-f9329a053e30",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "114c51c1-2186-4187-9f01-db198c2474fd"
        },
        "item": {
          "id": "e87fdd52-3687-40de-bfa9-930d623132cd",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "11789490-0efb-4964-8583-b0396de2149f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 141,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b106aa1-97c2-45fa-8bd5-44a4120bc9b3",
        "cursor": {
          "ref": "4c943460-ff70-49a4-9716-ecd446db421c",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "c268158b-e057-44f5-815a-992294920c92"
        },
        "item": {
          "id": "4b106aa1-97c2-45fa-8bd5-44a4120bc9b3",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "1f59d1df-c193-4e42-ac96-fb6f21b045e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "373a78e0-d84b-4302-8c84-a6f532871cd7",
        "cursor": {
          "ref": "a16df99b-3b2b-4e5a-92d7-1c063799789c",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "e6146b8a-8f4c-4fa2-b03f-3c48a46c059e"
        },
        "item": {
          "id": "373a78e0-d84b-4302-8c84-a6f532871cd7",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "f2c530cf-6aca-448b-a224-7771815dcfa1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0e4a21b-7d86-4d75-ad10-bfa3653d4843",
        "cursor": {
          "ref": "4a9e5076-7f20-498e-b228-cb6b9dcc7529",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "24e657d0-b934-4812-9bfb-c083622fe88d"
        },
        "item": {
          "id": "e0e4a21b-7d86-4d75-ad10-bfa3653d4843",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "7a4185ff-c2a7-4b0a-86e1-5499f5b71090",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb795498-3fd1-474d-802e-aeb92b4cb965",
        "cursor": {
          "ref": "2fb86644-355f-4315-a3c2-d8ffb4d74076",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "1bbd43f7-8eab-4eb6-8987-dd5079c69c7a"
        },
        "item": {
          "id": "bb795498-3fd1-474d-802e-aeb92b4cb965",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "4b1ed3c1-bc50-4aa6-8fa4-725722a9a3d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1fe66ff-c831-4dae-9381-86323c0eb4a4",
        "cursor": {
          "ref": "3c28eb21-32f9-4778-b5d1-ce7875df1245",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "1a17ca96-f3cd-43cc-9c13-ac55e294a3a1"
        },
        "item": {
          "id": "a1fe66ff-c831-4dae-9381-86323c0eb4a4",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "d017d6fa-13db-4c25-96e1-2e88fa83cb2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d26a0c3e-5f89-4e40-b232-e7f70afd1b90",
        "cursor": {
          "ref": "bfebe1fb-a4cd-44ca-912d-5eca1ed94baf",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "efd6d2a6-7c18-4352-8e34-140f9de4beb1"
        },
        "item": {
          "id": "d26a0c3e-5f89-4e40-b232-e7f70afd1b90",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "0e5ed1cd-261c-4ffa-bc0b-339e5749afa2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6512ed5c-f4d3-4c2c-b28b-fc88def7c948",
        "cursor": {
          "ref": "d70ed940-97fc-44d3-88dc-0a31aa831dcd",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "2abf6302-6d48-42f2-883a-2998ee499679"
        },
        "item": {
          "id": "6512ed5c-f4d3-4c2c-b28b-fc88def7c948",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "ed2c54af-ae78-4e51-b1b3-c44fb620145b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2674b6e2-5645-4734-ba17-095fa5d48e86",
        "cursor": {
          "ref": "ea18842e-bc37-4486-8307-c57811828467",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "a9359325-39d5-4b55-8ee1-44c9e4fb9300"
        },
        "item": {
          "id": "2674b6e2-5645-4734-ba17-095fa5d48e86",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "54ae9ead-280b-4aa7-9340-aea14f7fdd64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2a059a8-6f94-4b5e-bda1-9e0a173066d7",
        "cursor": {
          "ref": "cdebbb4b-1746-4c78-a55e-207550fe0508",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "f3eaa3c2-9c20-49fa-9ccb-0f255943749f"
        },
        "item": {
          "id": "c2a059a8-6f94-4b5e-bda1-9e0a173066d7",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "80e976f3-3229-424e-b6dd-042ba2f79cc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33a3a416-0f7a-4512-b695-3c3fc44b6d35",
        "cursor": {
          "ref": "85f806c0-f487-4661-849e-f4f9e6ed4c03",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "b395f938-7113-4687-b3e5-53adc494b5be"
        },
        "item": {
          "id": "33a3a416-0f7a-4512-b695-3c3fc44b6d35",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "0ccf7df7-4f85-481f-8abb-806e4efbb8af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4b8ea04-3066-44c4-b9b4-a1fcb5261101",
        "cursor": {
          "ref": "50878557-ee81-466c-b9cd-ed21ab59ecf5",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "a0cc49fb-5572-4b6c-99af-e5244dc9d082"
        },
        "item": {
          "id": "b4b8ea04-3066-44c4-b9b4-a1fcb5261101",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "1e6f0918-ad4b-420b-b2cb-4d922fc90354",
          "status": "OK",
          "code": 200,
          "responseTime": 123,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "e9ac5a29-141b-4c4d-8757-0b6d2bd41296",
        "cursor": {
          "ref": "eba4a9cb-f348-44e7-babf-165f457509be",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "7f3766fa-09c9-48a8-abda-05e6603d0474"
        },
        "item": {
          "id": "e9ac5a29-141b-4c4d-8757-0b6d2bd41296",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "9811cee2-5b90-4e3a-9f88-fb694b00594c",
          "status": "OK",
          "code": 200,
          "responseTime": 125,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "035a6924-15ee-4014-bf81-5cfe4e1cc24c",
        "cursor": {
          "ref": "d1282aa1-0525-43b9-846e-b08ea940a2e5",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "4776ccb1-5142-443b-a7d8-0f613887e507"
        },
        "item": {
          "id": "035a6924-15ee-4014-bf81-5cfe4e1cc24c",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "5e7ab346-9b5f-456e-a719-3fa7ad00f740",
          "status": "OK",
          "code": 200,
          "responseTime": 117,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "590f660d-0afa-4a52-a3be-8f7a83f7d0ae",
        "cursor": {
          "ref": "10153f99-aad7-4ea0-8aa5-720ffb0f315a",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "bcad3a9b-5489-4fb8-a514-2ccb48f4d84b"
        },
        "item": {
          "id": "590f660d-0afa-4a52-a3be-8f7a83f7d0ae",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "38eda39b-3e60-44b9-b47e-2eaeb3a4183e",
          "status": "OK",
          "code": 200,
          "responseTime": 119,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "2442a3bc-3358-4e4e-96d8-462e02c7087d",
        "cursor": {
          "ref": "7443c5bf-3e2a-4ed8-a7cb-094167096e78",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "912f33ad-992c-4da9-9f75-1bdf56594682"
        },
        "item": {
          "id": "2442a3bc-3358-4e4e-96d8-462e02c7087d",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "03022ca2-b23e-46e3-bc52-cd776acd127c",
          "status": "OK",
          "code": 200,
          "responseTime": 117,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "fde00d2d-9a31-4dfc-97ea-61a91ae8c64c",
        "cursor": {
          "ref": "bacbc953-3d13-48a1-9d4f-b0ffea1db537",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "8509504a-a336-4754-929a-7bc709a842a0"
        },
        "item": {
          "id": "fde00d2d-9a31-4dfc-97ea-61a91ae8c64c",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "5453ab54-93ba-4102-8853-cb8d67b0fc24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2dbd0d6c-8182-43c7-9f94-6cc5c8f3f329",
        "cursor": {
          "ref": "9233d7c7-c71e-4a5c-b799-0023ec04f86f",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "3bdc46fa-14ed-4dd2-8bec-5980873c2f9c"
        },
        "item": {
          "id": "2dbd0d6c-8182-43c7-9f94-6cc5c8f3f329",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "234ad616-8828-488e-9a5d-405c2bfc518b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "246849a2-56f6-488f-8734-6c12da6aca4b",
        "cursor": {
          "ref": "6927c5b8-8b96-4eea-9719-3f6ef001b7a9",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "4de6da07-d93b-4ad4-b057-8ca779c20300"
        },
        "item": {
          "id": "246849a2-56f6-488f-8734-6c12da6aca4b",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "d8308f8f-f6f1-4e81-a2d2-e062c23b007a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26878d19-3dfd-4d28-a08a-c939d41bdb88",
        "cursor": {
          "ref": "2136deb4-33bc-4c9d-a6f0-afecd24b1b08",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "58ec0332-8880-411c-9841-47b1d744fab2"
        },
        "item": {
          "id": "26878d19-3dfd-4d28-a08a-c939d41bdb88",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "0a67cd67-8c3b-4fd6-8f0c-16d771565e92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16a13246-9667-46cb-ae78-4720266e066d",
        "cursor": {
          "ref": "2b3b892a-721a-437e-95a4-06b644d792cd",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "2630f6fc-9a65-4760-9b10-c24083f90339"
        },
        "item": {
          "id": "16a13246-9667-46cb-ae78-4720266e066d",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "bdda8a08-9582-4887-b565-7643d5198450",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f31cb2d-6456-40ab-a0c6-1688e1679f5b",
        "cursor": {
          "ref": "a8e458df-63ea-4f99-acf2-b9cce28ed5c6",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "bff47af3-107a-4fd4-9935-a099f6180f74"
        },
        "item": {
          "id": "9f31cb2d-6456-40ab-a0c6-1688e1679f5b",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "d8eb8f41-0c3c-4f55-aade-1a5a1adc3b94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dedfaa8a-ce65-49be-9302-283df1eaf244",
        "cursor": {
          "ref": "85fd86a2-c790-4395-bbd9-777c5daa759a",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "6937b1c1-8ea1-4513-a788-e33c7a5f8284"
        },
        "item": {
          "id": "dedfaa8a-ce65-49be-9302-283df1eaf244",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "6a552f20-88fe-4086-b54a-6c971e85654e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "409e0596-de3b-4b44-8a9e-9a00d73301f0",
        "cursor": {
          "ref": "8c466b4a-4367-4d7d-a13c-d8c7bf90bd0e",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "6c3ff86f-2d1d-4d44-aadb-a0c4f2f2a9f7"
        },
        "item": {
          "id": "409e0596-de3b-4b44-8a9e-9a00d73301f0",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "6f46ac54-e134-4a00-8df6-6e96a4b9f430",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c57b0eb-782c-487f-b66e-5d536bfb5ece",
        "cursor": {
          "ref": "ed8e42f5-2e94-4cc9-85e2-fa00646ec8fd",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "c67f3068-4b70-43bd-be49-615b5e911b4e"
        },
        "item": {
          "id": "4c57b0eb-782c-487f-b66e-5d536bfb5ece",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "91a4ae8f-b215-4fd1-97f8-ff233e707910",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80cac49d-c2bf-45b6-bddf-3351498b8480",
        "cursor": {
          "ref": "5aa38e17-057c-450f-b426-5ed65615612c",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "ca92412f-00e0-4c1c-8ff3-f8e69554747e"
        },
        "item": {
          "id": "80cac49d-c2bf-45b6-bddf-3351498b8480",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "b9360e4a-215b-4815-b371-ef3d5fe7e7e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ca48bb8-15c6-42c3-a9b3-be9ef89af3d4",
        "cursor": {
          "ref": "e7a6a989-1da2-41af-9b43-300c026cb645",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "40611e34-0423-4b75-92e2-eceb3d67a46c"
        },
        "item": {
          "id": "9ca48bb8-15c6-42c3-a9b3-be9ef89af3d4",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "46859035-2976-4b5a-8c03-b386088694bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22b7b7a0-1818-4abb-9d75-dc5e1a7b4497",
        "cursor": {
          "ref": "0d2d8575-1718-4b46-8d13-e29615c94d07",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "9f4fa17c-e910-48ba-8743-75be41c8ca8c"
        },
        "item": {
          "id": "22b7b7a0-1818-4abb-9d75-dc5e1a7b4497",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "5af687dd-48cf-4072-8c96-4b2d39a45364",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b19da480-e394-4c41-93da-abe2cff4a162",
        "cursor": {
          "ref": "b7f16dd4-bc60-4061-b525-6c3684a5cece",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "027d2f33-f500-4e85-af2e-88d3a2715f6b"
        },
        "item": {
          "id": "b19da480-e394-4c41-93da-abe2cff4a162",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "91ebfa84-a9a8-4f86-b614-1326f4b4634c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fccba27-a836-453d-acac-ddeb09719650",
        "cursor": {
          "ref": "f6e7a226-6ca1-476d-bd92-79bef248dfa0",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "d48ee473-fcaf-4f1f-9282-4f47ea4bae21"
        },
        "item": {
          "id": "7fccba27-a836-453d-acac-ddeb09719650",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "4e29f454-7ad9-448d-af02-711c666ae38b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e55c69b-9c1a-4c59-9bf1-ef0f9ca49974",
        "cursor": {
          "ref": "58a6bae0-7c6a-43e9-8333-776871aec116",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "9390ce28-8c48-40f3-aba3-9674db9531d5"
        },
        "item": {
          "id": "6e55c69b-9c1a-4c59-9bf1-ef0f9ca49974",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "e1d9d1e7-0140-4a06-bd48-37ce96c34663",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a7ca39b-66ea-41c3-952c-ca3714b7d6da",
        "cursor": {
          "ref": "15a1ade8-c55f-4c67-8ca0-dd269e0a1586",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "b8d8c976-2a60-4917-8f7b-344dab38f86f"
        },
        "item": {
          "id": "6a7ca39b-66ea-41c3-952c-ca3714b7d6da",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "9b09b429-6c3f-44a4-8fe0-ce2a09a5da2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d74f1252-1ca1-4624-a3ab-272bd34b0c05",
        "cursor": {
          "ref": "4d21a150-8479-4a68-9e20-a4d631ea7dcb",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "7d8ef2fd-e064-47e4-a267-253cdd917205"
        },
        "item": {
          "id": "d74f1252-1ca1-4624-a3ab-272bd34b0c05",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "4d2e7b3d-1ff6-4520-9242-c7fb94666c1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91cbfd10-8ac1-42d7-974f-962459e3c312",
        "cursor": {
          "ref": "2cedf9e2-06a8-4a27-a3a2-526c6761ecfb",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "b9d7909d-363a-46bc-8a83-582ea3b65e99"
        },
        "item": {
          "id": "91cbfd10-8ac1-42d7-974f-962459e3c312",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "54b6383d-2a05-4e00-bccb-d298a5db1e53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "951d5989-f15a-453a-afa1-26581e6775b9",
        "cursor": {
          "ref": "d0152885-5a55-4b9c-b5be-de85ba4a00bf",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "33759024-d79a-44b4-9e23-75df162fe1ff"
        },
        "item": {
          "id": "951d5989-f15a-453a-afa1-26581e6775b9",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "010c6019-6dcc-4ba7-8be8-95272287a5e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcdbb2d5-ed3d-4dda-b1a5-ade5cfa6024a",
        "cursor": {
          "ref": "bebd6661-596f-4289-8b63-03b3c72157dc",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "172f142b-88cb-4751-a15e-0162d5b85070"
        },
        "item": {
          "id": "dcdbb2d5-ed3d-4dda-b1a5-ade5cfa6024a",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "4ee23574-811e-435b-9d29-e370f577a174",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0ff2017-01c1-4030-b901-f5c3302bb426",
        "cursor": {
          "ref": "627dfebf-245a-4a8b-8ab0-1729939ae392",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "8eabe276-8029-4fae-8fb0-c6ff1a650b3f"
        },
        "item": {
          "id": "e0ff2017-01c1-4030-b901-f5c3302bb426",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "5bb39686-dd1f-4717-b111-8d9ecb2a05a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83b14083-81c2-42ff-9524-b187e7592a7c",
        "cursor": {
          "ref": "0b2ee22a-b0a2-4b8b-8169-47c32d07b86e",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "2789d34b-fa95-4217-aeba-5a017d19475e"
        },
        "item": {
          "id": "83b14083-81c2-42ff-9524-b187e7592a7c",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "5d5961d1-5b2b-4ba7-9591-aa04ad7550b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3751eec6-5f94-49c4-9c7a-80b12be66867",
        "cursor": {
          "ref": "8b85a997-787d-47cf-83a5-52392ebc37da",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "dfb47792-50b1-4fcb-86d0-e3fd6a1c239b"
        },
        "item": {
          "id": "3751eec6-5f94-49c4-9c7a-80b12be66867",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "15fdd7e0-a236-4fa4-b38a-2778dc94a453",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd013dfc-aa21-412e-be85-80fb1f574d35",
        "cursor": {
          "ref": "cee91714-cd26-47d7-b668-a0dd6be6006e",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "f63c2d6a-7fde-40cd-a50f-e51f3da3e823"
        },
        "item": {
          "id": "bd013dfc-aa21-412e-be85-80fb1f574d35",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "c3e4ee5d-81dc-484c-993c-ec737bb277c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41ffde2f-83c3-41e3-abf6-ffcd63554b06",
        "cursor": {
          "ref": "23266de4-b26b-4bcd-ae59-f1b6e96bebe5",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "36f0923a-0682-4fbb-8b33-a8e9aa27cd93"
        },
        "item": {
          "id": "41ffde2f-83c3-41e3-abf6-ffcd63554b06",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "4dddba40-507f-45af-997a-226184bf63da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2e7e727-feeb-4293-a349-14dc68fd346a",
        "cursor": {
          "ref": "e7d004ca-8391-4624-9c38-214ec436d825",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "fb7e56f6-37ca-480f-859d-89aa68937a8d"
        },
        "item": {
          "id": "b2e7e727-feeb-4293-a349-14dc68fd346a",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "ca2f0a78-8405-4e0e-a997-670cc4561a30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37f243e6-f866-4849-9e64-6e1a91739334",
        "cursor": {
          "ref": "7a2139ff-701b-4585-ab39-b88040182d7b",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "d3413b03-60bc-48eb-8d32-a5ab60021d7a"
        },
        "item": {
          "id": "37f243e6-f866-4849-9e64-6e1a91739334",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "d641fd92-f781-4e98-8102-b15de85eca1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66bb5ec9-9c96-4641-9e39-3f3c97b6a677",
        "cursor": {
          "ref": "77782ade-c131-45ff-9293-4049bc2dbcd6",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "08fbafcd-add8-44d2-8029-008b3ab7e886"
        },
        "item": {
          "id": "66bb5ec9-9c96-4641-9e39-3f3c97b6a677",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "2afd366a-b000-4050-a531-b3deb7f8a44c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65e4f9e9-54fa-4fa9-9509-ca5df315f467",
        "cursor": {
          "ref": "00a6e048-758d-4817-851b-8a9ccb00411b",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "6f47c7b8-bab9-414e-911a-abbd883a8d55"
        },
        "item": {
          "id": "65e4f9e9-54fa-4fa9-9509-ca5df315f467",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "53ab8ee9-414f-4f08-9451-fef58d5c04ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42b011ad-c4f2-402a-b3cf-036fe1840254",
        "cursor": {
          "ref": "3a7cb6ea-c527-49a7-9837-af8d1020a7e2",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "8dd1885b-b527-4dd9-b5b9-79651aca2aab"
        },
        "item": {
          "id": "42b011ad-c4f2-402a-b3cf-036fe1840254",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "8a1cb328-e584-4144-8359-17a12f7ed37e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecb2f4ce-3862-4d87-82f2-5f4893edf81c",
        "cursor": {
          "ref": "b198beb0-d0c3-4d65-9d17-1702e470ff68",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "5d365eef-6a78-46f5-841f-fa7793ef466a"
        },
        "item": {
          "id": "ecb2f4ce-3862-4d87-82f2-5f4893edf81c",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "a68f9665-dd69-49e1-9749-7620d9952711",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8aad2dac-2b0c-4f9e-9f79-a703fc60b03b",
        "cursor": {
          "ref": "f94b2369-69de-4518-af31-021178ef0dc6",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "be397502-b935-4e29-9f10-652be3583b0d"
        },
        "item": {
          "id": "8aad2dac-2b0c-4f9e-9f79-a703fc60b03b",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "bb74a211-cc13-47c6-aeef-6e75fc4f6f18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1dc10296-54fd-48ee-8ed3-4fd0808d2aff",
        "cursor": {
          "ref": "91a4b6e7-b2d7-4696-a2ac-edb2dea06cea",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "ec5498e0-2dd3-41bf-a656-4fe327fbffb9"
        },
        "item": {
          "id": "1dc10296-54fd-48ee-8ed3-4fd0808d2aff",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "9c79099d-9239-4141-9365-2e723301d368",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a99d900-bafb-41c5-a893-93a13b9d8d96",
        "cursor": {
          "ref": "a98716c0-42d3-44c1-a81e-ce5d68e2b04c",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "e2457699-c74c-4ea2-9c4a-087e773bba60"
        },
        "item": {
          "id": "1a99d900-bafb-41c5-a893-93a13b9d8d96",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "7adc0822-a88d-4951-9e11-9b81e86f4c1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe5d0c36-1bf2-46dc-b5b0-f788fbba7738",
        "cursor": {
          "ref": "1f396f95-c54a-410e-b507-d6d78b10bab2",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "df52a755-fba9-4329-8889-f1f3edc8abaa"
        },
        "item": {
          "id": "fe5d0c36-1bf2-46dc-b5b0-f788fbba7738",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "643cd17a-fd70-4790-9578-3557094eca56",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44e56b1c-be1d-4b9b-95b3-a956b7f68096",
        "cursor": {
          "ref": "2de2a078-77e6-4277-8be6-3ce8cb26db07",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "41dca130-befa-4235-af96-ce06ce5d0631"
        },
        "item": {
          "id": "44e56b1c-be1d-4b9b-95b3-a956b7f68096",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "2f620843-d9b7-4045-a6af-eea094591cb1",
          "status": "OK",
          "code": 200,
          "responseTime": 133,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "9c1c8ea2-edd9-4706-a58a-1b79f7f0cb6a",
        "cursor": {
          "ref": "7fc86524-9c57-410a-a2e5-4f5bcacdf6f1",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "a98eb4e9-3131-430e-8b28-e5f843a76eff"
        },
        "item": {
          "id": "9c1c8ea2-edd9-4706-a58a-1b79f7f0cb6a",
          "name": "credentials_verify"
        },
        "response": {
          "id": "24e3c54b-6790-40c5-a2e7-eb2230fa5237",
          "status": "OK",
          "code": 200,
          "responseTime": 124,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "8396c5b1-a1c9-41a3-8ead-13697aa5cc12",
        "cursor": {
          "ref": "b4d1fc79-4cfc-41a4-9b95-63940b9bdf1d",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "94d38158-63d4-4988-9a30-ac6e60f5b3cf"
        },
        "item": {
          "id": "8396c5b1-a1c9-41a3-8ead-13697aa5cc12",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "84806605-a460-4c20-adb9-cd5ac624d144",
          "status": "OK",
          "code": 200,
          "responseTime": 110,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa014171-0906-47c5-aa74-b760204fa800",
        "cursor": {
          "ref": "37a604c3-c3e3-49fc-8737-5f5ed68b7898",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "ceb73465-eb22-4161-b7a5-11b2e50aca63"
        },
        "item": {
          "id": "fa014171-0906-47c5-aa74-b760204fa800",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "927971a7-b43a-4ea6-9b25-558d0d56fa99",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa014171-0906-47c5-aa74-b760204fa800",
        "cursor": {
          "ref": "37a604c3-c3e3-49fc-8737-5f5ed68b7898",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "ceb73465-eb22-4161-b7a5-11b2e50aca63"
        },
        "item": {
          "id": "fa014171-0906-47c5-aa74-b760204fa800",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "927971a7-b43a-4ea6-9b25-558d0d56fa99",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc168fdd-27db-419b-b73a-5bba2556e097",
        "cursor": {
          "ref": "4474cc83-505c-4a70-b07f-9efbb6e7857d",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "634a0e55-dbe6-4079-846d-17213961575b"
        },
        "item": {
          "id": "fc168fdd-27db-419b-b73a-5bba2556e097",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "7fceb4df-f45b-410b-84c0-adc7b5ed53d4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d42d0036-99b5-4c9e-b998-7a81fdd773a5",
        "cursor": {
          "ref": "0f5a3f0a-6a9c-4a05-b949-2ef8461c2e3e",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "7a00c7c1-0e42-496d-a9f2-18edefd215f5"
        },
        "item": {
          "id": "d42d0036-99b5-4c9e-b998-7a81fdd773a5",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "33b25c0c-a333-4bbc-968f-3d752cc1f618",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}